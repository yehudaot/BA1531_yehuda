

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 14 11:39:06 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text105,global,reloc=2,class=CODE,delta=1
   126                           	psect	text106,global,reloc=2,class=CODE,delta=1
   127                           	psect	text107,global,reloc=2,class=CODE,delta=1
   128                           	psect	text108,global,reloc=2,class=CODE,delta=1
   129                           	psect	text109,global,reloc=2,class=CODE,delta=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   132                           	psect	text112,global,reloc=2,class=CODE,delta=1
   133                           	psect	text113,global,reloc=2,class=CODE,delta=1,group=1
   134                           	psect	text114,global,reloc=2,class=CODE,delta=1
   135                           	psect	text115,global,reloc=2,class=CODE,delta=1
   136                           	psect	text116,global,reloc=2,class=CODE,delta=1
   137                           	psect	text117,global,reloc=2,class=CODE,delta=1
   138                           	psect	text118,global,reloc=2,class=CODE,delta=1
   139                           	psect	text119,global,reloc=2,class=CODE,delta=1
   140                           	psect	text120,global,reloc=2,class=CODE,delta=1
   141                           	psect	text121,global,reloc=2,class=CODE,delta=1
   142                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   145                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   146  0000                     
   147                           ; Version 1.45
   148                           ; Generated 16/11/2017 GMT
   149                           ; 
   150                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   151                           ; All rights reserved.
   152                           ; 
   153                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   154                           ; 
   155                           ; Redistribution and use in source and binary forms, with or without modification, are
   156                           ; permitted provided that the following conditions are met:
   157                           ; 
   158                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   159                           ;        conditions and the following disclaimer.
   160                           ; 
   161                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   162                           ;        of conditions and the following disclaimer in the documentation and/or other
   163                           ;        materials provided with the distribution.
   164                           ; 
   165                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   166                           ;        software without specific prior written permission.
   167                           ; 
   168                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   169                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   170                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   171                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   172                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   173                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   174                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   175                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   176                           ; 
   177                           ; 
   178                           ; Code-generator required, PIC18F45K22 Definitions
   179                           ; 
   180                           ; SFR Addresses
   181  0000                     
   182 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   183  0000                     
   184                           	psect	idataCOMRAM
   185  004322                     __pidataCOMRAM:
   186                           	opt stack 0
   187                           
   188                           ;initializer for _writeAddress
   189  004322  4580               	dw	17792
   190  004324  0000               	dw	0
   191                           
   192                           ;initializer for _synthLdTxCnt
   193  004326  02                 	db	2
   194                           
   195                           ;initializer for _synthLdRxCnt
   196  004327  02                 	db	2
   197                           
   198                           ;initializer for _SynthRxOper
   199  004328  01                 	db	1
   200                           
   201                           ;initializer for _SynthTxOper
   202  004329  01                 	db	1
   203                           
   204                           	psect	idataBANK1
   205  004280                     __pidataBANK1:
   206                           	opt stack 0
   207                           
   208                           ;initializer for _groupsArray
   209  004280  EC                 	db	low _GroupControlMcu
   210  004281  3E                 	db	high _GroupControlMcu
   211  004282  72                 	db	low _GroupStatusAndVersion
   212  004283  40                 	db	high _GroupStatusAndVersion
   213  004284  22                 	db	low _GroupAdc
   214  004285  41                 	db	high _GroupAdc
   215  004286  B4                 	db	low _GroupSynthesizers
   216  004287  31                 	db	high _GroupSynthesizers
   217  004288  CC                 	db	low _GroupFlashMemory
   218  004289  3C                 	db	high _GroupFlashMemory
   219  00428A  50                 	db	low _GroupDAC
   220  00428B  3E                 	db	high _GroupDAC
   221                           
   222                           ;initializer for _readAddress
   223  00428C  4580               	dw	17792
   224  00428E  0000               	dw	0
   225                           
   226                           	psect	smallconst
   227  000600                     __psmallconst:
   228                           	opt stack 0
   229  000600  00                 	db	0
   230  000601                     _SYNTH_REGS:
   231                           	opt stack 0
   232  000601  041C               	dw	1052
   233  000603  0001               	dw	1
   234  000605  300B               	dw	12299
   235  000607  0061               	dw	97
   236  000609  193A               	dw	6458
   237  00060B  00C0               	dw	192
   238  00060D  FCC9               	dw	64713
   239  00060F  1110               	dw	4368
   240  000611  0428               	dw	1064
   241  000613  102D               	dw	4141
   242  000615  00E7               	dw	231
   243  000617  1200               	dw	4608
   244  000619  0036               	dw	54
   245  00061B  3503               	dw	13571
   246  00061D  0025               	dw	37
   247  00061F  0080               	dw	128
   248  000621  9F84               	dw	40836
   249  000623  3000               	dw	12288
   250  000625  0003               	dw	3
   251  000627  0000               	dw	0
   252  000629  0012               	dw	18
   253  00062B  0000               	dw	0
   254  00062D  0001               	dw	1
   255  00062F  0C00               	dw	3072
   256  000631  0680               	dw	1664
   257  000633  0020               	dw	32
   258  000635                     __end_of_SYNTH_REGS:
   259                           	opt stack 0
   260  000635                     _SYNTH_ADDRES:
   261                           	opt stack 0
   262  000635  04                 	db	4
   263  000636  08                 	db	8
   264  000637  0C                 	db	12
   265  000638  00                 	db	0
   266  000639  10                 	db	16
   267  00063A  00                 	db	0
   268  00063B  14                 	db	20
   269  00063C  00                 	db	0
   270  00063D  00                 	db	0
   271  00063E  00                 	db	0
   272  00063F  18                 	db	24
   273  000640  1C                 	db	28
   274  000641  00                 	db	0
   275  000642                     __end_of_SYNTH_ADDRES:
   276                           	opt stack 0
   277  000642                     _channelArr:
   278                           	opt stack 0
   279  000642  04                 	db	4
   280  000643  05                 	db	5
   281  000644  06                 	db	6
   282  000645  07                 	db	7
   283  000646  08                 	db	8
   284  000647  09                 	db	9
   285  000648  0A                 	db	10
   286  000649  0D                 	db	13
   287  00064A  19                 	db	25
   288  00064B                     __end_of_channelArr:
   289                           	opt stack 0
   290  00064B                     _DAC_DEFAULT_INIT_VALUES:
   291                           	opt stack 0
   292  00064B  2344               	dw	9028
   293  00064D  6344               	dw	25412
   294  00064F  A344               	dw	41796
   295  000651  E344               	dw	58180
   296  000653                     __end_of_DAC_DEFAULT_INIT_VALUES:
   297                           	opt stack 0
   298  000653                     _DAC_ADDRES:
   299                           	opt stack 0
   300  000653  02                 	db	2
   301  000654  04                 	db	4
   302  000655  06                 	db	6
   303  000656  08                 	db	8
   304  000657                     __end_of_DAC_ADDRES:
   305                           	opt stack 0
   306  000657                     exp@coeff:
   307                           	opt stack 0
   308  000657  00                 	db	0
   309  000658  80                 	db	128
   310  000659  3F                 	db	63
   311  00065A  72                 	db	114
   312  00065B  31                 	db	49
   313  00065C  3F                 	db	63
   314  00065D  FE                 	db	254
   315  00065E  75                 	db	117
   316  00065F  3E                 	db	62
   317  000660  58                 	db	88
   318  000661  63                 	db	99
   319  000662  3D                 	db	61
   320  000663  95                 	db	149
   321  000664  1D                 	db	29
   322  000665  3C                 	db	60
   323  000666  C5                 	db	197
   324  000667  AE                 	db	174
   325  000668  3A                 	db	58
   326  000669  79                 	db	121
   327  00066A  21                 	db	33
   328  00066B  39                 	db	57
   329  00066C  94                 	db	148
   330  00066D  80                 	db	128
   331  00066E  37                 	db	55
   332  00066F  93                 	db	147
   333  000670  A7                 	db	167
   334  000671  35                 	db	53
   335  000672  56                 	db	86
   336  000673  15                 	db	21
   337  000674  34                 	db	52
   338  000675                     __end_ofexp@coeff:
   339                           	opt stack 0
   340  000675                     log@coeff:
   341                           	opt stack 0
   342  000675  00                 	db	0
   343  000676  00                 	db	0
   344  000677  00                 	db	0
   345  000678  00                 	db	0
   346  000679  80                 	db	128
   347  00067A  3F                 	db	63
   348  00067B  F0                 	db	240
   349  00067C  FF                 	db	255
   350  00067D  BE                 	db	190
   351  00067E  E2                 	db	226
   352  00067F  A9                 	db	169
   353  000680  3E                 	db	62
   354  000681  83                 	db	131
   355  000682  76                 	db	118
   356  000683  BE                 	db	190
   357  000684  AE                 	db	174
   358  000685  2B                 	db	43
   359  000686  3E                 	db	62
   360  000687  3C                 	db	60
   361  000688  C3                 	db	195
   362  000689  BD                 	db	189
   363  00068A  D2                 	db	210
   364  00068B  13                 	db	19
   365  00068C  3D                 	db	61
   366  00068D  78                 	db	120
   367  00068E  D3                 	db	211
   368  00068F  BB                 	db	187
   369  000690                     __end_oflog@coeff:
   370                           	opt stack 0
   371  000690                     STR_1:
   372                           
   373                           ; BSR set to: 0
   374  000690  41                 	db	65	;'A'
   375  000691  75                 	db	117	;'u'
   376  000692  67                 	db	103	;'g'
   377  000693  20                 	db	32
   378  000694  31                 	db	49	;'1'
   379  000695  34                 	db	52	;'4'
   380  000696  20                 	db	32
   381  000697  32                 	db	50	;'2'
   382  000698  30                 	db	48	;'0'
   383  000699  31                 	db	49	;'1'
   384  00069A  38                 	db	56	;'8'
   385  00069B  00                 	db	0
   386  0000                     
   387                           ; #config settings
   388  00069C  00                 	db	0	; dummy byte at the end
   389  0000                     
   390                           	psect	nvCOMRAM
   391  000046                     __pnvCOMRAM:
   392                           	opt stack 0
   393  000046                     _timer0ReloadVal:
   394                           	opt stack 0
   395  000046                     	ds	2
   396                           
   397                           	psect	nvBANK1
   398  0001CC                     __pnvBANK1:
   399                           	opt stack 0
   400  0001CC                     _TMR0_InterruptHandler:
   401                           	opt stack 0
   402  0001CC                     	ds	2
   403  0001CE                     _IOCB5_InterruptHandler:
   404                           	opt stack 0
   405  0001CE                     	ds	2
   406  0001D0                     _IOCB4_InterruptHandler:
   407                           	opt stack 0
   408  0001D0                     	ds	2
   409  0001D2                     _eusart1TxBufferRemaining:
   410                           	opt stack 0
   411  0001D2                     	ds	1
   412  0000                     _ANSELA	set	3896
   413  0000                     _ANSELE	set	3900
   414  0000                     _ANSELD	set	3899
   415  0000                     _ANSELB	set	3897
   416  0000                     _ANSELC	set	3898
   417  0000                     _ADCON0bits	set	4034
   418  0000                     _ADRESH	set	4036
   419  0000                     _ADRESL	set	4035
   420  0000                     _ADCON2	set	4032
   421  0000                     _ADCON1	set	4033
   422  0000                     _ADCON0	set	4034
   423  0000                     _T0CONbits	set	4053
   424  0000                     _T0CON	set	4053
   425  0000                     _TMR0L	set	4054
   426  0000                     _TMR0H	set	4055
   427  0000                     _EEDATA	set	4008
   428  0000                     _EEADR	set	4009
   429  0000                     _EECON2	set	4007
   430  0000                     _EECON1bits	set	4006
   431  0000                     _TABLAT	set	4085
   432  0000                     _TBLPTRL	set	4086
   433  0000                     _TBLPTRH	set	4087
   434  0000                     _TBLPTRU	set	4088
   435  0000                     _IOCBbits	set	3938
   436  0000                     _INTCON2bits	set	4081
   437  0000                     _WPUB	set	3937
   438  0000                     _TRISD	set	3989
   439  0000                     _TRISC	set	3988
   440  0000                     _TRISB	set	3987
   441  0000                     _TRISA	set	3986
   442  0000                     _TRISE	set	3990
   443  0000                     _LATC	set	3979
   444  0000                     _LATB	set	3978
   445  0000                     _LATA	set	3977
   446  0000                     _LATD	set	3980
   447  0000                     _LATE	set	3981
   448  0000                     _RCREG1	set	4014
   449  0000                     _RCSTA1bits	set	4011
   450  0000                     _TXREG1	set	4013
   451  0000                     _SPBRGH1	set	4016
   452  0000                     _SPBRG1	set	4015
   453  0000                     _TXSTA1	set	4012
   454  0000                     _RCSTA1	set	4011
   455  0000                     _BAUDCON1	set	4024
   456  0000                     _PIR1bits	set	3998
   457  0000                     _PIE1bits	set	3997
   458  0000                     _PIR2bits	set	4001
   459  0000                     _PIE2bits	set	4000
   460  0000                     _RCONbits	set	4048
   461  0000                     _OSCTUNE	set	3995
   462  0000                     _OSCCON2	set	4050
   463  0000                     _OSCCON	set	4051
   464  0000                     _LATAbits	set	3977
   465  0000                     _LATDbits	set	3980
   466  0000                     _INTCONbits	set	4082
   467  0000                     _PORTDbits	set	3971
   468  0000                     _LATCbits	set	3979
   469  0000                     _LATBbits	set	3978
   470                           
   471                           	psect	cinit
   472  0032C2                     __pcinit:
   473                           	opt stack 0
   474  0032C2                     start_initialization:
   475                           	opt stack 0
   476  0032C2                     __initialization:
   477                           	opt stack 0
   478                           
   479                           ; Initialize objects allocated to BANK1 (16 bytes)
   480                           ; load TBLPTR registers with __pidataBANK1
   481  0032C2  0E80               	movlw	low __pidataBANK1
   482  0032C4  6EF6               	movwf	tblptrl,c
   483  0032C6  0E42               	movlw	high __pidataBANK1
   484  0032C8  6EF7               	movwf	tblptrh,c
   485  0032CA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   486  0032CC  6EF8               	movwf	tblptru,c
   487  0032CE  EE01  F0BC         	lfsr	0,__pdataBANK1
   488  0032D2  EE10 F010          	lfsr	1,16
   489  0032D6                     copy_data0:
   490  0032D6  0009               	tblrd		*+
   491  0032D8  CFF5 FFEE          	movff	tablat,postinc0
   492  0032DC  50E5               	movf	postdec1,w,c
   493  0032DE  50E1               	movf	fsr1l,w,c
   494  0032E0  E1FA               	bnz	copy_data0
   495                           
   496                           ; Initialize objects allocated to COMRAM (8 bytes)
   497                           ; load TBLPTR registers with __pidataCOMRAM
   498  0032E2  0E22               	movlw	low __pidataCOMRAM
   499  0032E4  6EF6               	movwf	tblptrl,c
   500  0032E6  0E43               	movlw	high __pidataCOMRAM
   501  0032E8  6EF7               	movwf	tblptrh,c
   502  0032EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   503  0032EC  6EF8               	movwf	tblptru,c
   504  0032EE  EE00  F03E         	lfsr	0,__pdataCOMRAM
   505  0032F2  EE10 F008          	lfsr	1,8
   506  0032F6                     copy_data1:
   507  0032F6  0009               	tblrd		*+
   508  0032F8  CFF5 FFEE          	movff	tablat,postinc0
   509  0032FC  50E5               	movf	postdec1,w,c
   510  0032FE  50E1               	movf	fsr1l,w,c
   511  003300  E1FA               	bnz	copy_data1
   512                           
   513                           ; Clear objects allocated to BANK2 (70 bytes)
   514  003302  EE02  F000         	lfsr	0,__pbssBANK2
   515  003306  0E46               	movlw	70
   516  003308                     clear_0:
   517  003308  6AEE               	clrf	postinc0,c
   518  00330A  06E8               	decf	wreg,f,c
   519  00330C  E1FD               	bnz	clear_0
   520                           
   521                           ; Clear objects allocated to BANK1 (188 bytes)
   522  00330E  EE01  F000         	lfsr	0,__pbssBANK1
   523  003312  0EBC               	movlw	188
   524  003314                     clear_1:
   525  003314  6AEE               	clrf	postinc0,c
   526  003316  06E8               	decf	wreg,f,c
   527  003318  E1FD               	bnz	clear_1
   528                           
   529                           ; Clear objects allocated to BANK0 (11 bytes)
   530  00331A  EE00  F0F0         	lfsr	0,__pbssBANK0
   531  00331E  0E0B               	movlw	11
   532  003320                     clear_2:
   533  003320  6AEE               	clrf	postinc0,c
   534  003322  06E8               	decf	wreg,f,c
   535  003324  E1FD               	bnz	clear_2
   536                           
   537                           ; Clear objects allocated to COMRAM (13 bytes)
   538  003326  EE00  F031         	lfsr	0,__pbssCOMRAM
   539  00332A  0E0D               	movlw	13
   540  00332C                     clear_3:
   541  00332C  6AEE               	clrf	postinc0,c
   542  00332E  06E8               	decf	wreg,f,c
   543  003330  E1FD               	bnz	clear_3
   544  003332                     end_of_initialization:
   545                           	opt stack 0
   546  003332                     __end_of__initialization:
   547                           	opt stack 0
   548  003332  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   549  003334  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   550  003336  0E00               	movlw	low (__Lmediumconst shr (0+16))
   551  003338  6EF8               	movwf	tblptru,c
   552  00333A  0100               	movlb	0
   553  00333C  EF1B  F01A         	goto	_main	;jump to C main() function
   554                           tblptru	equ	0xFF8
   555                           tblptrh	equ	0xFF7
   556                           tblptrl	equ	0xFF6
   557                           tablat	equ	0xFF5
   558                           postinc0	equ	0xFEE
   559                           wreg	equ	0xFE8
   560                           postdec1	equ	0xFE5
   561                           fsr1l	equ	0xFE1
   562                           
   563                           	psect	bssCOMRAM
   564  000031                     __pbssCOMRAM:
   565                           	opt stack 0
   566  000031                     TMR0_ISR@CountCallBack:
   567                           	opt stack 0
   568  000031                     	ds	2
   569  000033                     _eusart1RxTail:
   570                           	opt stack 0
   571  000033                     	ds	1
   572  000034                     _eusart1RxHead:
   573                           	opt stack 0
   574  000034                     	ds	1
   575  000035                     _eusart1TxTail:
   576                           	opt stack 0
   577  000035                     	ds	1
   578  000036                     _eusart1TxHead:
   579                           	opt stack 0
   580  000036                     	ds	1
   581  000037                     _synthLdTxArrayCnt:
   582                           	opt stack 0
   583  000037                     	ds	1
   584  000038                     _synthLdRxArrayCnt:
   585                           	opt stack 0
   586  000038                     	ds	1
   587  000039                     _cntRegUpdateRx:
   588                           	opt stack 0
   589  000039                     	ds	1
   590  00003A                     _cntRegUpdateTx:
   591                           	opt stack 0
   592  00003A                     	ds	1
   593  00003B                     _crcGiven:
   594                           	opt stack 0
   595  00003B                     	ds	1
   596  00003C                     _crcCalc:
   597                           	opt stack 0
   598  00003C                     	ds	1
   599  00003D                     _adcSampleMode:
   600                           	opt stack 0
   601  00003D                     	ds	1
   602                           tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           postdec1	equ	0xFE5
   609                           fsr1l	equ	0xFE1
   610                           
   611                           	psect	dataCOMRAM
   612  00003E                     __pdataCOMRAM:
   613                           	opt stack 0
   614  00003E                     _writeAddress:
   615                           	opt stack 0
   616  00003E                     	ds	4
   617  000042                     _synthLdTxCnt:
   618                           	opt stack 0
   619  000042                     	ds	1
   620  000043                     _synthLdRxCnt:
   621                           	opt stack 0
   622  000043                     	ds	1
   623  000044                     _SynthRxOper:
   624                           	opt stack 0
   625  000044                     	ds	1
   626  000045                     _SynthTxOper:
   627                           	opt stack 0
   628  000045                     	ds	1
   629                           tblptru	equ	0xFF8
   630                           tblptrh	equ	0xFF7
   631                           tblptrl	equ	0xFF6
   632                           tablat	equ	0xFF5
   633                           postinc0	equ	0xFEE
   634                           wreg	equ	0xFE8
   635                           postdec1	equ	0xFE5
   636                           fsr1l	equ	0xFE1
   637                           
   638                           	psect	bssBANK0
   639  0000F0                     __pbssBANK0:
   640                           	opt stack 0
   641  0000F0                     _msgCount:
   642                           	opt stack 0
   643  0000F0                     	ds	1
   644  0000F1                     _dataSize:
   645                           	opt stack 0
   646  0000F1                     	ds	1
   647  0000F2                     _request:
   648                           	opt stack 0
   649  0000F2                     	ds	1
   650  0000F3                     _group:
   651                           	opt stack 0
   652  0000F3                     	ds	1
   653  0000F4                     _cState:
   654                           	opt stack 0
   655  0000F4                     	ds	1
   656  0000F5                     _eusart1RxCount:
   657                           	opt stack 0
   658  0000F5                     	ds	1
   659  0000F6                     _channel:
   660                           	opt stack 0
   661  0000F6                     	ds	1
   662  0000F7                     _Timer0_OneSec:
   663                           	opt stack 0
   664  0000F7                     	ds	1
   665  0000F8                     _Timer0_KeepAlive:
   666                           	opt stack 0
   667  0000F8                     	ds	1
   668  0000F9                     _Timer0_Sampling:
   669                           	opt stack 0
   670  0000F9                     	ds	1
   671  0000FA                     _Timer0_SynthLd:
   672                           	opt stack 0
   673  0000FA                     	ds	1
   674                           tblptru	equ	0xFF8
   675                           tblptrh	equ	0xFF7
   676                           tblptrl	equ	0xFF6
   677                           tablat	equ	0xFF5
   678                           postinc0	equ	0xFEE
   679                           wreg	equ	0xFE8
   680                           postdec1	equ	0xFE5
   681                           fsr1l	equ	0xFE1
   682                           
   683                           	psect	bssBANK1
   684  000100                     __pbssBANK1:
   685                           	opt stack 0
   686  000100                     _eusart1RxBuffer:
   687                           	opt stack 0
   688  000100                     	ds	40
   689  000128                     _mcuRunTimeIn5SecTicks:
   690                           	opt stack 0
   691  000128                     	ds	4
   692  00012C                     _numOfReadSamples:
   693                           	opt stack 0
   694  00012C                     	ds	4
   695  000130                     _numOfValidateSamples:
   696                           	opt stack 0
   697  000130                     	ds	4
   698  000134                     _errno:
   699                           	opt stack 0
   700  000134                     	ds	2
   701  000136                     _sampleCount:
   702                           	opt stack 0
   703  000136                     	ds	2
   704  000138                     _count:
   705                           	opt stack 0
   706  000138                     	ds	2
   707  00013A                     _isReWriteDone:
   708                           	opt stack 0
   709  00013A                     	ds	1
   710  00013B                     _data:
   711                           	opt stack 0
   712  00013B                     	ds	1
   713  00013C                     _sampleArray:
   714                           	opt stack 0
   715  00013C                     	ds	64
   716  00017C                     _rxMsgData:
   717                           	opt stack 0
   718  00017C                     	ds	20
   719  000190                     _rxMsgQueue:
   720                           	opt stack 0
   721  000190                     	ds	20
   722  0001A4                     _synthLdTxArray:
   723                           	opt stack 0
   724  0001A4                     	ds	12
   725  0001B0                     _synthLdRxArray:
   726                           	opt stack 0
   727  0001B0                     	ds	12
   728                           tblptru	equ	0xFF8
   729                           tblptrh	equ	0xFF7
   730                           tblptrl	equ	0xFF6
   731                           tablat	equ	0xFF5
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           postdec1	equ	0xFE5
   735                           fsr1l	equ	0xFE1
   736                           
   737                           	psect	dataBANK1
   738  0001BC                     __pdataBANK1:
   739                           	opt stack 0
   740  0001BC                     _groupsArray:
   741                           	opt stack 0
   742  0001BC                     	ds	12
   743  0001C8                     _readAddress:
   744                           	opt stack 0
   745  0001C8                     	ds	4
   746                           tblptru	equ	0xFF8
   747                           tblptrh	equ	0xFF7
   748                           tblptrl	equ	0xFF6
   749                           tablat	equ	0xFF5
   750                           postinc0	equ	0xFEE
   751                           wreg	equ	0xFE8
   752                           postdec1	equ	0xFE5
   753                           fsr1l	equ	0xFE1
   754                           
   755                           	psect	bssBANK2
   756  000200                     __pbssBANK2:
   757                           	opt stack 0
   758  000200                     _eusart1TxBuffer:
   759                           	opt stack 0
   760  000200                     	ds	70
   761                           tblptru	equ	0xFF8
   762                           tblptrh	equ	0xFF7
   763                           tblptrl	equ	0xFF6
   764                           tablat	equ	0xFF5
   765                           postinc0	equ	0xFEE
   766                           wreg	equ	0xFE8
   767                           postdec1	equ	0xFE5
   768                           fsr1l	equ	0xFE1
   769                           
   770                           	psect	cstackBANK2
   771  000246                     __pcstackBANK2:
   772                           	opt stack 0
   773  000246                     SynthReadData@TxMsg:
   774                           	opt stack 0
   775                           
   776                           ; 29 bytes @ 0x0
   777  000246                     	ds	29
   778  000263                     SynthReadData@data_987:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x1D
   782  000263                     	ds	1
   783  000264                     _SynthReadData$988:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x1E
   787  000264                     	ds	2
   788  000266                     SynthReadData@eepromDataArray:
   789                           	opt stack 0
   790                           
   791                           ; 20 bytes @ 0x20
   792  000266                     	ds	20
   793  00027A                     SynthReadData@cType:
   794                           	opt stack 0
   795                           
   796                           ; 1 bytes @ 0x34
   797  00027A                     	ds	1
   798  00027B                     SynthReadData@regNum:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x35
   802  00027B                     	ds	1
   803  00027C                     SynthReadData@byteNum:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x36
   807  00027C                     	ds	1
   808                           tblptru	equ	0xFF8
   809                           tblptrh	equ	0xFF7
   810                           tblptrl	equ	0xFF6
   811                           tablat	equ	0xFF5
   812                           postinc0	equ	0xFEE
   813                           wreg	equ	0xFE8
   814                           postdec1	equ	0xFE5
   815                           fsr1l	equ	0xFE1
   816                           
   817                           	psect	cstackBANK0
   818  000060                     __pcstackBANK0:
   819                           	opt stack 0
   820  000060                     ??_FlashSampleWrite:
   821  000060                     ??___ftdiv:
   822  000060                     strtol@sign:
   823                           	opt stack 0
   824  000060                     GetMcuFwVersion@compileData:
   825                           	opt stack 0
   826  000060                     GetMcuRunTime@TxMsg:
   827                           	opt stack 0
   828  000060                     SWSPI_Synth_send_bits@bitArray:
   829                           	opt stack 0
   830                           
   831                           ; 32 bytes @ 0x0
   832  000060                     	ds	1
   833  000061                     strtol@a:
   834                           	opt stack 0
   835                           
   836                           ; 4 bytes @ 0x1
   837  000061                     	ds	1
   838  000062                     FlashSampleWrite@rotateLeft:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x2
   842  000062                     	ds	1
   843  000063                     ___ftdiv@cntr:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x3
   847  000063                     	ds	1
   848  000064                     ___ftdiv@f3:
   849                           	opt stack 0
   850  000064                     GetMcuFwVersion@TxMsg:
   851                           	opt stack 0
   852                           
   853                           ; 18 bytes @ 0x4
   854  000064                     	ds	1
   855  000065                     strtol@c:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x5
   859  000065                     	ds	1
   860  000066                     ?_GetIntFromUartData:
   861                           	opt stack 0
   862  000066                     GetIntFromUartData@data:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x6
   866  000066                     	ds	1
   867  000067                     ___ftdiv@exp:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x7
   871  000067                     	ds	1
   872  000068                     ___ftdiv@sign:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x8
   876  000068                     	ds	1
   877  000069                     ?___ftmul:
   878                           	opt stack 0
   879  000069                     ___ftmul@f1:
   880                           	opt stack 0
   881  000069                     GetMcuRunTime@tempRunTime:
   882                           	opt stack 0
   883                           
   884                           ; 4 bytes @ 0x9
   885  000069                     	ds	3
   886  00006C                     ___ftmul@f2:
   887                           	opt stack 0
   888                           
   889                           ; 3 bytes @ 0xC
   890  00006C                     	ds	1
   891  00006D                     GetMcuRunTime@idx:
   892                           	opt stack 0
   893                           
   894                           ; 2 bytes @ 0xD
   895  00006D                     	ds	1
   896  00006E                     ??_GetIntFromUartData:
   897                           
   898                           ; 1 bytes @ 0xE
   899  00006E                     	ds	1
   900  00006F                     ??___ftmul:
   901                           
   902                           ; 1 bytes @ 0xF
   903  00006F                     	ds	1
   904  000070                     GetIntFromUartData@dataRegArr:
   905                           	opt stack 0
   906                           
   907                           ; 10 bytes @ 0x10
   908  000070                     	ds	2
   909  000072                     ___ftmul@exp:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x12
   913  000072                     	ds	1
   914  000073                     ___ftmul@f3_as_product:
   915                           	opt stack 0
   916                           
   917                           ; 3 bytes @ 0x13
   918  000073                     	ds	3
   919  000076                     ___ftmul@cntr:
   920                           	opt stack 0
   921  000076                     _GetMcuFwVersion$2698:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x16
   925  000076                     	ds	1
   926  000077                     ___ftmul@sign:
   927                           	opt stack 0
   928                           
   929                           ; 1 bytes @ 0x17
   930  000077                     	ds	1
   931  000078                     ??_CheckFlashPrecentage:
   932  000078                     ?___ftadd:
   933                           	opt stack 0
   934  000078                     ?___fttol:
   935                           	opt stack 0
   936  000078                     _GetMcuFwVersion$2702:
   937                           	opt stack 0
   938  000078                     ___ftadd@f1:
   939                           	opt stack 0
   940  000078                     ___fttol@f1:
   941                           	opt stack 0
   942                           
   943                           ; 3 bytes @ 0x18
   944  000078                     	ds	2
   945  00007A                     GetIntFromUartData@num:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x1A
   949  00007A                     	ds	1
   950  00007B                     GetIntFromUartData@recVal:
   951                           	opt stack 0
   952  00007B                     ___ftadd@f2:
   953                           	opt stack 0
   954                           
   955                           ; 3 bytes @ 0x1B
   956  00007B                     	ds	1
   957  00007C                     ??___fttol:
   958  00007C                     CheckFlashPrecentage@precentage:
   959                           	opt stack 0
   960  00007C                     GetIntFromUartData@retVal:
   961                           	opt stack 0
   962                           
   963                           ; 8 bytes @ 0x1C
   964  00007C                     	ds	2
   965  00007E                     ??___ftadd:
   966                           
   967                           ; 1 bytes @ 0x1E
   968  00007E                     	ds	2
   969  000080                     SWSPI_Synth_send_bits@mask:
   970                           	opt stack 0
   971                           
   972                           ; 4 bytes @ 0x20
   973  000080                     	ds	1
   974  000081                     ___ftadd@sign:
   975                           	opt stack 0
   976  000081                     ___fttol@sign1:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x21
   980  000081                     	ds	1
   981  000082                     ___ftadd@exp2:
   982                           	opt stack 0
   983  000082                     ___fttol@lval:
   984                           	opt stack 0
   985                           
   986                           ; 4 bytes @ 0x22
   987  000082                     	ds	1
   988  000083                     ___ftadd@exp1:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x23
   992  000083                     	ds	1
   993  000084                     ?___ftsub:
   994                           	opt stack 0
   995  000084                     ?_eval_poly:
   996                           	opt stack 0
   997  000084                     SWSPI_Synth_send_bits@count:
   998                           	opt stack 0
   999  000084                     GetIntFromUartData@idxCon:
  1000                           	opt stack 0
  1001  000084                     ___ftsub@f1:
  1002                           	opt stack 0
  1003  000084                     eval_poly@x:
  1004                           	opt stack 0
  1005                           
  1006                           ; 3 bytes @ 0x24
  1007  000084                     	ds	1
  1008  000085                     SWSPI_Synth_send_bits@phrType:
  1009                           	opt stack 0
  1010                           
  1011                           ; 1 bytes @ 0x25
  1012  000085                     	ds	1
  1013  000086                     SWSPI_send_word@datac:
  1014                           	opt stack 0
  1015  000086                     GetIntFromUartData@idxData:
  1016                           	opt stack 0
  1017  000086                     ___fttol@exp1:
  1018                           	opt stack 0
  1019                           
  1020                           ; 1 bytes @ 0x26
  1021  000086                     	ds	1
  1022  000087                     ?___altoft:
  1023                           	opt stack 0
  1024  000087                     FlashReadUart@data:
  1025                           	opt stack 0
  1026  000087                     SWSPI_send_word@idx:
  1027                           	opt stack 0
  1028  000087                     eval_poly@d:
  1029                           	opt stack 0
  1030  000087                     ___ftsub@f2:
  1031                           	opt stack 0
  1032  000087                     ___altoft@c:
  1033                           	opt stack 0
  1034                           
  1035                           ; 4 bytes @ 0x27
  1036  000087                     	ds	2
  1037  000089                     ??_FlashReadUart:
  1038  000089                     SWSPI_send_word@phrType:
  1039                           	opt stack 0
  1040  000089                     eval_poly@n:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x29
  1044  000089                     	ds	1
  1045  00008A                     DacSetValue@data:
  1046                           	opt stack 0
  1047  00008A                     UpdateSynthFreq@data:
  1048                           	opt stack 0
  1049                           
  1050                           ; 2 bytes @ 0x2A
  1051  00008A                     	ds	1
  1052  00008B                     ??___altoft:
  1053  00008B                     eval_poly@res:
  1054                           	opt stack 0
  1055                           
  1056                           ; 3 bytes @ 0x2B
  1057  00008B                     	ds	1
  1058  00008C                     ??_DacSetValue:
  1059  00008C                     UpdateSynthFreq@cType:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x2C
  1063  00008C                     	ds	1
  1064  00008D                     UpdateSynthFreq@retVal:
  1065                           	opt stack 0
  1066                           
  1067                           ; 8 bytes @ 0x2D
  1068  00008D                     	ds	1
  1069  00008E                     ?_log:
  1070                           	opt stack 0
  1071  00008E                     ?_ldexp:
  1072                           	opt stack 0
  1073  00008E                     ldexp@value:
  1074                           	opt stack 0
  1075  00008E                     log@x:
  1076                           	opt stack 0
  1077                           
  1078                           ; 3 bytes @ 0x2E
  1079  00008E                     	ds	1
  1080  00008F                     ?_floor:
  1081                           	opt stack 0
  1082  00008F                     floor@x:
  1083                           	opt stack 0
  1084  00008F                     FlashReadUart@TxMsg:
  1085                           	opt stack 0
  1086                           
  1087                           ; 69 bytes @ 0x2F
  1088  00008F                     	ds	1
  1089  000090                     DacSetValue@dacIndex:
  1090                           	opt stack 0
  1091                           
  1092                           ; 1 bytes @ 0x30
  1093  000090                     	ds	1
  1094  000091                     ldexp@newexp:
  1095                           	opt stack 0
  1096  000091                     log@exponent:
  1097                           	opt stack 0
  1098  000091                     DacSetValue@retVal:
  1099                           	opt stack 0
  1100                           
  1101                           ; 8 bytes @ 0x31
  1102  000091                     	ds	1
  1103  000092                     floor@i:
  1104                           	opt stack 0
  1105                           
  1106                           ; 3 bytes @ 0x32
  1107  000092                     	ds	1
  1108  000093                     ??_ldexp:
  1109                           
  1110                           ; 1 bytes @ 0x33
  1111  000093                     	ds	2
  1112  000095                     floor@expon:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x35
  1116  000095                     	ds	2
  1117  000097                     ?_exp:
  1118                           	opt stack 0
  1119  000097                     exp@x:
  1120                           	opt stack 0
  1121                           
  1122                           ; 3 bytes @ 0x37
  1123  000097                     	ds	3
  1124  00009A                     _exp$3592:
  1125                           	opt stack 0
  1126                           
  1127                           ; 3 bytes @ 0x3A
  1128  00009A                     	ds	3
  1129  00009D                     exp@exponent:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x3D
  1133  00009D                     	ds	2
  1134  00009F                     exp@sign:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x3F
  1138  00009F                     	ds	1
  1139  0000A0                     ?_pow:
  1140                           	opt stack 0
  1141  0000A0                     pow@x:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0x40
  1145  0000A0                     	ds	3
  1146  0000A3                     pow@y:
  1147                           	opt stack 0
  1148                           
  1149                           ; 3 bytes @ 0x43
  1150  0000A3                     	ds	3
  1151  0000A6                     _pow$3590:
  1152                           	opt stack 0
  1153                           
  1154                           ; 3 bytes @ 0x46
  1155  0000A6                     	ds	3
  1156  0000A9                     _pow$3591:
  1157                           	opt stack 0
  1158                           
  1159                           ; 3 bytes @ 0x49
  1160  0000A9                     	ds	3
  1161  0000AC                     pow@sign:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x4C
  1165  0000AC                     	ds	1
  1166  0000AD                     pow@yi:
  1167                           	opt stack 0
  1168                           
  1169                           ; 4 bytes @ 0x4D
  1170  0000AD                     	ds	4
  1171  0000B1                     ??_AdcConvert:
  1172  0000B1                     ?_ReadIntFromEeprom:
  1173                           	opt stack 0
  1174  0000B1                     ReadIntFromEeprom@numOfByes:
  1175                           	opt stack 0
  1176                           
  1177                           ; 2 bytes @ 0x51
  1178  0000B1                     	ds	2
  1179  0000B3                     AdcConvert@_adcResult:
  1180                           	opt stack 0
  1181                           
  1182                           ; 2 bytes @ 0x53
  1183  0000B3                     	ds	2
  1184  0000B5                     ??_ReadIntFromEeprom:
  1185  0000B5                     AdcConvert@_adcResult_350:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x55
  1189  0000B5                     	ds	2
  1190  0000B7                     AdcConvert@ldRxSate:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x57
  1194  0000B7                     	ds	1
  1195  0000B8                     ReadIntFromEeprom@base:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x58
  1199  0000B8                     	ds	1
  1200  0000B9                     AdcConvert@ldTxSate:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x59
  1204  0000B9                     	ds	2
  1205  0000BB                     AdcConvert@adcRes:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x5B
  1209  0000BB                     	ds	1
  1210  0000BC                     _ReadIntFromEeprom$3588:
  1211                           	opt stack 0
  1212                           
  1213                           ; 3 bytes @ 0x5C
  1214  0000BC                     	ds	1
  1215  0000BD                     _AdcConvert$3587:
  1216                           	opt stack 0
  1217                           
  1218                           ; 3 bytes @ 0x5D
  1219  0000BD                     	ds	2
  1220  0000BF                     _ReadIntFromEeprom$3589:
  1221                           	opt stack 0
  1222                           
  1223                           ; 3 bytes @ 0x5F
  1224  0000BF                     	ds	1
  1225  0000C0                     AdcConvert@idx:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x60
  1229  0000C0                     	ds	2
  1230  0000C2                     ReadIntFromEeprom@address:
  1231                           	opt stack 0
  1232                           
  1233                           ; 1 bytes @ 0x62
  1234  0000C2                     	ds	1
  1235  0000C3                     ReadIntFromEeprom@retVal:
  1236                           	opt stack 0
  1237                           
  1238                           ; 4 bytes @ 0x63
  1239  0000C3                     	ds	4
  1240  0000C7                     ReadIntFromEeprom@idx:
  1241                           	opt stack 0
  1242                           
  1243                           ; 1 bytes @ 0x67
  1244  0000C7                     	ds	1
  1245  0000C8                     ??_DacInit:
  1246  0000C8                     DacReadValue@data:
  1247                           	opt stack 0
  1248  0000C8                     SynthReadData@data:
  1249                           	opt stack 0
  1250  0000C8                     InitSynth@EepromVal:
  1251                           	opt stack 0
  1252                           
  1253                           ; 4 bytes @ 0x68
  1254  0000C8                     	ds	2
  1255  0000CA                     ??_DacReadValue:
  1256  0000CA                     DacInit@dacInput:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x6A
  1260  0000CA                     	ds	2
  1261  0000CC                     DacInit@idx:
  1262                           	opt stack 0
  1263  0000CC                     DacReadValue@regNum:
  1264                           	opt stack 0
  1265  0000CC                     InitSynth@cType:
  1266                           	opt stack 0
  1267                           
  1268                           ; 1 bytes @ 0x6C
  1269  0000CC                     	ds	1
  1270  0000CD                     DacReadValue@byteNum:
  1271                           	opt stack 0
  1272  0000CD                     InitSynth@idx:
  1273                           	opt stack 0
  1274                           
  1275                           ; 1 bytes @ 0x6D
  1276  0000CD                     	ds	1
  1277  0000CE                     InitSynth@regNum:
  1278                           	opt stack 0
  1279  0000CE                     DacReadValue@readVal:
  1280                           	opt stack 0
  1281                           
  1282                           ; 2 bytes @ 0x6E
  1283  0000CE                     	ds	1
  1284  0000CF                     SetSynthOper@cType:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x6F
  1288  0000CF                     	ds	1
  1289  0000D0                     DacReadValue@dacIndex:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x70
  1293  0000D0                     	ds	1
  1294  0000D1                     DacReadValue@TxMsg:
  1295                           	opt stack 0
  1296                           
  1297                           ; 7 bytes @ 0x71
  1298  0000D1                     	ds	3
  1299  0000D4                     FlashReadUart@val:
  1300                           	opt stack 0
  1301                           
  1302                           ; 8 bytes @ 0x74
  1303  0000D4                     	ds	4
  1304  0000D8                     DacReadValue@byteIdx:
  1305                           	opt stack 0
  1306                           
  1307                           ; 2 bytes @ 0x78
  1308  0000D8                     	ds	4
  1309  0000DC                     _FlashReadUart$609:
  1310                           	opt stack 0
  1311                           
  1312                           ; 4 bytes @ 0x7C
  1313  0000DC                     	ds	4
  1314  0000E0                     FlashReadUart@j:
  1315                           	opt stack 0
  1316                           
  1317                           ; 2 bytes @ 0x80
  1318  0000E0                     	ds	2
  1319  0000E2                     FlashReadUart@numOfSampleToRead:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x82
  1323  0000E2                     	ds	2
  1324  0000E4                     FlashReadUart@idx:
  1325                           	opt stack 0
  1326                           
  1327                           ; 2 bytes @ 0x84
  1328  0000E4                     	ds	2
  1329  0000E6                     GroupAdc@data:
  1330                           	opt stack 0
  1331  0000E6                     GroupSynthesizers@data:
  1332                           	opt stack 0
  1333  0000E6                     GroupFlashMemory@data:
  1334                           	opt stack 0
  1335  0000E6                     GroupDAC@data:
  1336                           	opt stack 0
  1337  0000E6                     
  1338                           ; 3 bytes @ 0x86
  1339  0000E6                     	ds	2
  1340  0000E8                     GroupAdc@request:
  1341                           	opt stack 0
  1342  0000E8                     GroupSynthesizers@request:
  1343                           	opt stack 0
  1344  0000E8                     GroupFlashMemory@request:
  1345                           	opt stack 0
  1346  0000E8                     GroupDAC@request:
  1347                           	opt stack 0
  1348                           
  1349                           ; 1 bytes @ 0x88
  1350  0000E8                     	ds	1
  1351  0000E9                     ??_readUartMessage:
  1352  0000E9                     GroupControlMcu@request:
  1353                           	opt stack 0
  1354  0000E9                     GroupStatusAndVersion@request:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x89
  1358  0000E9                     	ds	4
  1359  0000ED                     readUartMessage@idx:
  1360                           	opt stack 0
  1361                           
  1362                           ; 2 bytes @ 0x8D
  1363  0000ED                     	ds	2
  1364  0000EF                     readUartMessage@chRec:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0x8F
  1368  0000EF                     	ds	1
  1369                           tblptru	equ	0xFF8
  1370                           tblptrh	equ	0xFF7
  1371                           tblptrl	equ	0xFF6
  1372                           tablat	equ	0xFF5
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           postdec1	equ	0xFE5
  1376                           fsr1l	equ	0xFE1
  1377                           
  1378                           	psect	cstackCOMRAM
  1379  000001                     __pcstackCOMRAM:
  1380                           	opt stack 0
  1381  000001                     ?___lwmod:
  1382                           	opt stack 0
  1383  000001                     ___lwmod@dividend:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0x0
  1387  000001                     	ds	2
  1388  000003                     ___lwmod@divisor:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x2
  1392  000003                     	ds	2
  1393  000005                     ___lwmod@counter:
  1394                           	opt stack 0
  1395                           
  1396                           ; 1 bytes @ 0x4
  1397  000005                     	ds	1
  1398  000006                     ??_INTERRUPT_InterruptManager:
  1399                           
  1400                           ; 1 bytes @ 0x5
  1401  000006                     	ds	18
  1402  000018                     ??_EUSART1_Read:
  1403  000018                     ??_isspace:
  1404  000018                     ??_isdigit:
  1405  000018                     ??_isupper:
  1406  000018                     ??_BlinkErrorLeds:
  1407  000018                     ??_BlinkOkLeds:
  1408  000018                     ??_keepAliveSignalLed:
  1409  000018                     ?_ADC_GetConversion:
  1410                           	opt stack 0
  1411  000018                     ?_GetUint16FromBitArray:
  1412                           	opt stack 0
  1413  000018                     ?___wmul:
  1414                           	opt stack 0
  1415  000018                     ?___awmod:
  1416                           	opt stack 0
  1417  000018                     ?___ftpack:
  1418                           	opt stack 0
  1419  000018                     ?_frexp:
  1420                           	opt stack 0
  1421  000018                     ?___ftneg:
  1422                           	opt stack 0
  1423  000018                     ?___lldiv:
  1424                           	opt stack 0
  1425  000018                     ?___llmod:
  1426                           	opt stack 0
  1427  000018                     SwSpi_Data_Pin@cPinMode:
  1428                           	opt stack 0
  1429  000018                     SwSpi_Clk_Pin@cPinMode:
  1430                           	opt stack 0
  1431  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1432                           	opt stack 0
  1433  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1434                           	opt stack 0
  1435  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1436                           	opt stack 0
  1437  000018                     EUSART1_Write@txData:
  1438                           	opt stack 0
  1439  000018                     DATAEE_WriteByte@bData:
  1440                           	opt stack 0
  1441  000018                     DATAEE_ReadByte@bAdd:
  1442                           	opt stack 0
  1443  000018                     toupper@c:
  1444                           	opt stack 0
  1445  000018                     IOCB4_SetInterruptHandler@InterruptHandler:
  1446                           	opt stack 0
  1447  000018                     IOCB5_SetInterruptHandler@InterruptHandler:
  1448                           	opt stack 0
  1449  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1450                           	opt stack 0
  1451  000018                     crc8@dataArray:
  1452                           	opt stack 0
  1453  000018                     GetUint16FromBitArray@bitarray:
  1454                           	opt stack 0
  1455  000018                     Make32bitsArray@array:
  1456                           	opt stack 0
  1457  000018                     ___wmul@multiplier:
  1458                           	opt stack 0
  1459  000018                     ___awmod@dividend:
  1460                           	opt stack 0
  1461  000018                     memset@p1:
  1462                           	opt stack 0
  1463  000018                     ___ftpack@arg:
  1464                           	opt stack 0
  1465  000018                     ___ftge@ff1:
  1466                           	opt stack 0
  1467  000018                     ___ftneg@f1:
  1468                           	opt stack 0
  1469  000018                     frexp@value:
  1470                           	opt stack 0
  1471  000018                     FLASH_ReadByte@flashAddr:
  1472                           	opt stack 0
  1473  000018                     FLASH_EraseBlock@baseAddr:
  1474                           	opt stack 0
  1475  000018                     make8@data:
  1476                           	opt stack 0
  1477  000018                     ___lldiv@dividend:
  1478                           	opt stack 0
  1479  000018                     ___llmod@dividend:
  1480                           	opt stack 0
  1481                           
  1482                           ; 4 bytes @ 0x17
  1483  000018                     	ds	1
  1484  000019                     EepromRead@address:
  1485                           	opt stack 0
  1486  000019                     SwSpi_Data_Pin@phrType:
  1487                           	opt stack 0
  1488  000019                     SwSpi_Clk_Pin@phrType:
  1489                           	opt stack 0
  1490  000019                     SwSpi_Set_CE_Pin@phrType:
  1491                           	opt stack 0
  1492  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1493                           	opt stack 0
  1494  000019                     DATAEE_WriteByte@bAdd:
  1495                           	opt stack 0
  1496  000019                     _isdigit$3317:
  1497                           	opt stack 0
  1498  000019                     _isspace$3320:
  1499                           	opt stack 0
  1500  000019                     _isupper$3323:
  1501                           	opt stack 0
  1502  000019                     WriteUartMessage@dataBuf:
  1503                           	opt stack 0
  1504  000019                     EUSART1_Read@readValue:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x18
  1508  000019                     	ds	1
  1509  00001A                     ??_ADC_GetConversion:
  1510  00001A                     ??_TMR0_Initialize:
  1511  00001A                     ?___lmul:
  1512                           	opt stack 0
  1513  00001A                     SWSPI_DAC_send_bits@data:
  1514                           	opt stack 0
  1515  00001A                     DATAEE_WriteByte@GIEBitValue:
  1516                           	opt stack 0
  1517  00001A                     isdigit@c:
  1518                           	opt stack 0
  1519  00001A                     isspace@c:
  1520                           	opt stack 0
  1521  00001A                     isupper@c:
  1522                           	opt stack 0
  1523  00001A                     crc8@dataSize:
  1524                           	opt stack 0
  1525  00001A                     GetUint16FromBitArray@numOfBits:
  1526                           	opt stack 0
  1527  00001A                     ___wmul@multiplicand:
  1528                           	opt stack 0
  1529  00001A                     ___awmod@divisor:
  1530                           	opt stack 0
  1531  00001A                     memset@c:
  1532                           	opt stack 0
  1533  00001A                     Make32bitsArray@data:
  1534                           	opt stack 0
  1535  00001A                     ___lmul@multiplier:
  1536                           	opt stack 0
  1537                           
  1538                           ; 4 bytes @ 0x19
  1539  00001A                     	ds	1
  1540  00001B                     ??_isalpha:
  1541  00001B                     BlinkErrorLeds@state:
  1542                           	opt stack 0
  1543  00001B                     BlinkOkLeds@state:
  1544                           	opt stack 0
  1545  00001B                     EepromWrite@data:
  1546                           	opt stack 0
  1547  00001B                     SWSPI_DAC_send_bits@count:
  1548                           	opt stack 0
  1549  00001B                     ___ftpack@exp:
  1550                           	opt stack 0
  1551  00001B                     WriteUartMessage@dataSize:
  1552                           	opt stack 0
  1553  00001B                     frexp@eptr:
  1554                           	opt stack 0
  1555  00001B                     ___ftge@ff2:
  1556                           	opt stack 0
  1557                           
  1558                           ; 3 bytes @ 0x1A
  1559  00001B                     	ds	1
  1560  00001C                     ??_GetUint16FromBitArray:
  1561  00001C                     ??_crc8:
  1562  00001C                     EepromWrite@address:
  1563                           	opt stack 0
  1564  00001C                     SWSPI_DAC_send_bits@phrType:
  1565                           	opt stack 0
  1566  00001C                     FLASH_EraseBlock@GIEBitValue:
  1567                           	opt stack 0
  1568  00001C                     ADC_GetConversion@channel:
  1569                           	opt stack 0
  1570  00001C                     make8@dataLocation:
  1571                           	opt stack 0
  1572  00001C                     ___awmod@counter:
  1573                           	opt stack 0
  1574  00001C                     ___ftpack@sign:
  1575                           	opt stack 0
  1576  00001C                     _isalpha$3314:
  1577                           	opt stack 0
  1578  00001C                     BlinkErrorLeds@idx:
  1579                           	opt stack 0
  1580  00001C                     BlinkOkLeds@idx:
  1581                           	opt stack 0
  1582  00001C                     ___wmul@product:
  1583                           	opt stack 0
  1584  00001C                     memset@n:
  1585                           	opt stack 0
  1586  00001C                     ___lldiv@divisor:
  1587                           	opt stack 0
  1588  00001C                     ___llmod@divisor:
  1589                           	opt stack 0
  1590                           
  1591                           ; 4 bytes @ 0x1B
  1592  00001C                     	ds	1
  1593  00001D                     ??_make8:
  1594  00001D                     ??___ftpack:
  1595  00001D                     ??_frexp:
  1596  00001D                     ??_WriteUartMessage:
  1597  00001D                     ___awmod@sign:
  1598                           	opt stack 0
  1599  00001D                     isalpha@c:
  1600                           	opt stack 0
  1601  00001D                     crc8@crc:
  1602                           	opt stack 0
  1603  00001D                     FLASH_WriteBlock@writeAddr:
  1604                           	opt stack 0
  1605                           
  1606                           ; 4 bytes @ 0x1C
  1607  00001D                     	ds	1
  1608  00001E                     ??_Make32bitsArray:
  1609  00001E                     ??___ftge:
  1610  00001E                     WriteUartMessage@idx:
  1611                           	opt stack 0
  1612  00001E                     memset@p:
  1613                           	opt stack 0
  1614  00001E                     ___lmul@multiplicand:
  1615                           	opt stack 0
  1616                           
  1617                           ; 4 bytes @ 0x1D
  1618  00001E                     	ds	1
  1619  00001F                     crc8@i:
  1620                           	opt stack 0
  1621  00001F                     GetUint16FromBitArray@res:
  1622                           	opt stack 0
  1623                           
  1624                           ; 2 bytes @ 0x1E
  1625  00001F                     	ds	1
  1626  000020                     ?___awtoft:
  1627                           	opt stack 0
  1628  000020                     ?___lltoft:
  1629                           	opt stack 0
  1630  000020                     ?___lwtoft:
  1631                           	opt stack 0
  1632  000020                     ___llmod@counter:
  1633                           	opt stack 0
  1634  000020                     ZeroArray@array:
  1635                           	opt stack 0
  1636  000020                     FillArray@array:
  1637                           	opt stack 0
  1638  000020                     Make32bitsArray@idx:
  1639                           	opt stack 0
  1640  000020                     ___awtoft@c:
  1641                           	opt stack 0
  1642  000020                     ___lwtoft@c:
  1643                           	opt stack 0
  1644  000020                     ___lldiv@quotient:
  1645                           	opt stack 0
  1646  000020                     ___lltoft@c:
  1647                           	opt stack 0
  1648                           
  1649                           ; 4 bytes @ 0x1F
  1650  000020                     	ds	1
  1651  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1652                           	opt stack 0
  1653  000021                     GetUint16FromBitArray@i:
  1654                           	opt stack 0
  1655  000021                     StoreIntInEeprom@data:
  1656                           	opt stack 0
  1657                           
  1658                           ; 4 bytes @ 0x20
  1659  000021                     	ds	1
  1660  000022                     ZeroArray@size:
  1661                           	opt stack 0
  1662  000022                     FillArray@size:
  1663                           	opt stack 0
  1664  000022                     ___lmul@product:
  1665                           	opt stack 0
  1666                           
  1667                           ; 4 bytes @ 0x21
  1668  000022                     	ds	1
  1669  000023                     ??_FLASH_WriteBlock:
  1670  000023                     ___awtoft@sign:
  1671                           	opt stack 0
  1672                           
  1673                           ; 1 bytes @ 0x22
  1674  000023                     	ds	1
  1675  000024                     ??_GetMcuFwVersion:
  1676  000024                     ??_FlashReadCondition:
  1677  000024                     ??___lltoft:
  1678  000024                     SendAckMessage@inRequest:
  1679                           	opt stack 0
  1680  000024                     FillArray@value:
  1681                           	opt stack 0
  1682  000024                     ___lldiv@counter:
  1683                           	opt stack 0
  1684                           
  1685                           ; 1 bytes @ 0x23
  1686  000024                     	ds	1
  1687  000025                     ??_GetMcuRunTime:
  1688  000025                     SendAckMessage@inGroup:
  1689                           	opt stack 0
  1690  000025                     StoreIntInEeprom@address:
  1691                           	opt stack 0
  1692  000025                     SWSPI_Synth_send_bits@data:
  1693                           	opt stack 0
  1694                           
  1695                           ; 4 bytes @ 0x24
  1696  000025                     	ds	1
  1697  000026                     ?_strtol:
  1698                           	opt stack 0
  1699  000026                     StoreIntInEeprom@numOfByes:
  1700                           	opt stack 0
  1701  000026                     strtol@s:
  1702                           	opt stack 0
  1703  000026                     SendAckMessage@TxMsg:
  1704                           	opt stack 0
  1705                           
  1706                           ; 6 bytes @ 0x25
  1707  000026                     	ds	1
  1708  000027                     FLASH_WriteBlock@blockStartAddr:
  1709                           	opt stack 0
  1710                           
  1711                           ; 4 bytes @ 0x26
  1712  000027                     	ds	1
  1713  000028                     StoreIntInEeprom@val:
  1714                           	opt stack 0
  1715  000028                     ___lltoft@exp:
  1716                           	opt stack 0
  1717  000028                     strtol@endptr:
  1718                           	opt stack 0
  1719  000028                     FlashReadCondition@TxMsg:
  1720                           	opt stack 0
  1721                           
  1722                           ; 9 bytes @ 0x27
  1723  000028                     	ds	1
  1724  000029                     ?___ftdiv:
  1725                           	opt stack 0
  1726  000029                     StoreIntInEeprom@idx:
  1727                           	opt stack 0
  1728  000029                     ___ftdiv@f1:
  1729                           	opt stack 0
  1730  000029                     SWSPI_send_word@data:
  1731                           	opt stack 0
  1732                           
  1733                           ; 4 bytes @ 0x28
  1734  000029                     	ds	1
  1735  00002A                     strtol@base:
  1736                           	opt stack 0
  1737                           
  1738                           ; 2 bytes @ 0x29
  1739  00002A                     	ds	1
  1740  00002B                     FLASH_WriteBlock@GIEBitValue:
  1741                           	opt stack 0
  1742                           
  1743                           ; 1 bytes @ 0x2A
  1744  00002B                     	ds	1
  1745  00002C                     ??_strtol:
  1746  00002C                     ??_testLeds:
  1747  00002C                     FLASH_WriteBlock@i:
  1748                           	opt stack 0
  1749  00002C                     SetChannelMode@data:
  1750                           	opt stack 0
  1751  00002C                     ___ftdiv@f2:
  1752                           	opt stack 0
  1753                           
  1754                           ; 3 bytes @ 0x2B
  1755  00002C                     	ds	1
  1756  00002D                     SWSPI_send_word@dataSize:
  1757                           	opt stack 0
  1758  00002D                     testLeds@idx:
  1759                           	opt stack 0
  1760  00002D                     FlashSampleWrite@sampleData:
  1761                           	opt stack 0
  1762                           
  1763                           ; 2 bytes @ 0x2C
  1764  00002D                     	ds	1
  1765  00002E                     
  1766                           ; 1 bytes @ 0x2D
  1767  00002E                     	ds	1
  1768  00002F                     ??_eval_poly:
  1769  00002F                     FlashSampleWrite@channelNum:
  1770                           	opt stack 0
  1771  00002F                     ___altoft@exp:
  1772                           	opt stack 0
  1773                           
  1774                           ; 1 bytes @ 0x2E
  1775  00002F                     	ds	1
  1776  000030                     ___altoft@sign:
  1777                           	opt stack 0
  1778                           
  1779                           ; 1 bytes @ 0x2F
  1780  000030                     	ds	1
  1781  000031                     tblptru	equ	0xFF8
  1782                           tblptrh	equ	0xFF7
  1783                           tblptrl	equ	0xFF6
  1784                           tablat	equ	0xFF5
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           postdec1	equ	0xFE5
  1788                           fsr1l	equ	0xFE1
  1789                           
  1790                           ; 1 bytes @ 0x30
  1791 ;;
  1792 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1793 ;;
  1794 ;; *************** function _main *****************
  1795 ;; Defined at:
  1796 ;;		line 13 in file "main.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;		None
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;		None
  1801 ;; Return value:  Size  Location     Type
  1802 ;;                  1    wreg      void 
  1803 ;; Registers used:
  1804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1805 ;; Tracked objects:
  1806 ;;		On entry : 0/0
  1807 ;;		On exit  : 0/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1810 ;;      Params:         0       0       0       0       0       0       0
  1811 ;;      Locals:         0       0       0       0       0       0       0
  1812 ;;      Temps:          0       0       0       0       0       0       0
  1813 ;;      Totals:         0       0       0       0       0       0       0
  1814 ;;Total ram usage:        0 bytes
  1815 ;; Hardware stack levels required when called:   14
  1816 ;; This function calls:
  1817 ;;		_AdcConvert
  1818 ;;		_BlinkErrorLeds
  1819 ;;		_BlinkOkLeds
  1820 ;;		_CheckFlashPrecentage
  1821 ;;		_InitSystemApplicationManagers
  1822 ;;		_SendSystemStartAck
  1823 ;;		_SetMcuRunTime
  1824 ;;		_SetMcuSystem
  1825 ;;		_SynthLdDetect
  1826 ;;		_keepAliveSignalLed
  1827 ;;		_keepAliveSignalUart
  1828 ;;		_readUartMessage
  1829 ;; This function is called by:
  1830 ;;		Startup code after reset
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834                           	psect	text0
  1835  003436                     __ptext0:
  1836                           	opt stack 0
  1837  003436                     _main:
  1838                           	opt stack 17
  1839                           
  1840                           ;main.c: 16: SetMcuSystem();
  1841                           
  1842                           ;incstack = 0
  1843  003436  EC78  F021         	call	_SetMcuSystem	;wreg free
  1844                           
  1845                           ;main.c: 19: InitSystemApplicationManagers();
  1846  00343A  EC0E  F021         	call	_InitSystemApplicationManagers	;wreg free
  1847                           
  1848                           ;main.c: 22: SendSystemStartAck();
  1849  00343E  EC72  F021         	call	_SendSystemStartAck	;wreg free
  1850                           
  1851                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1852  003442  0E03               	movlw	3
  1853  003444  EC8A  F01B         	call	_BlinkOkLeds
  1854  003448                     
  1855                           ;main.c: 28: {
  1856                           ;main.c: 29: readUartMessage();
  1857  003448  EC34  F00A         	call	_readUartMessage	;wreg free
  1858                           
  1859                           ;main.c: 31: if (Timer0_OneSec == 1)
  1860  00344C  0100               	movlb	0	; () banked
  1861  00344E  05F7               	decf	_Timer0_OneSec& (0+255),w,b	;volatile
  1862  003450  A4D8               	btfss	status,2,c
  1863  003452  D006               	goto	l1593
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;main.c: 32: {
  1867                           ;main.c: 33: SetMcuRunTime();
  1868  003454  EC89  F01D         	call	_SetMcuRunTime	;wreg free
  1869                           
  1870                           ;main.c: 34: Timer0_OneSec = 0;
  1871  003458  0E00               	movlw	0
  1872  00345A  0100               	movlb	0	; () banked
  1873  00345C  6FF7               	movwf	_Timer0_OneSec& (0+255),b	;volatile
  1874                           
  1875                           ;main.c: 35: }
  1876  00345E  D7F4               	goto	l1592
  1877  003460                     l1593:
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;main.c: 36: else if (Timer0_Sampling == 1)
  1881                           
  1882                           ; BSR set to: 0
  1883  003460  05F9               	decf	_Timer0_Sampling& (0+255),w,b	;volatile
  1884  003462  A4D8               	btfss	status,2,c
  1885  003464  D010               	goto	l1595
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;main.c: 37: {
  1889                           ;main.c: 38: keepAliveSignalLed();
  1890  003466  ECF7  F020         	call	_keepAliveSignalLed	;wreg free
  1891                           
  1892                           ;main.c: 40: if(1 == CheckFlashPrecentage())
  1893  00346A  ECA2  F016         	call	_CheckFlashPrecentage	;wreg free
  1894  00346E  06E8               	decf	wreg,f,c
  1895  003470  A4D8               	btfss	status,2,c
  1896  003472  D003               	goto	l1596
  1897                           
  1898                           ;main.c: 41: {
  1899                           ;main.c: 42: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1900  003474  0E02               	movlw	2
  1901  003476  EC5B  F01B         	call	_BlinkErrorLeds
  1902  00347A                     l1596:
  1903                           
  1904                           ;main.c: 43: }
  1905                           ;main.c: 46: AdcConvert();
  1906  00347A  EC2F  F007         	call	_AdcConvert	;wreg free
  1907                           
  1908                           ;main.c: 47: Timer0_Sampling = 0;
  1909  00347E  0E00               	movlw	0
  1910  003480  0100               	movlb	0	; () banked
  1911  003482  6FF9               	movwf	_Timer0_Sampling& (0+255),b	;volatile
  1912                           
  1913                           ;main.c: 48: }
  1914  003484  D7E1               	goto	l1592
  1915  003486                     l1595:
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;main.c: 49: else if (Timer0_KeepAlive == 1)
  1919                           
  1920                           ; BSR set to: 0
  1921  003486  05F8               	decf	_Timer0_KeepAlive& (0+255),w,b	;volatile
  1922  003488  A4D8               	btfss	status,2,c
  1923  00348A  D006               	goto	l1598
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;main.c: 50: {
  1927                           ;main.c: 51: keepAliveSignalUart();
  1928  00348C  EC6C  F021         	call	_keepAliveSignalUart	;wreg free
  1929                           
  1930                           ;main.c: 52: Timer0_KeepAlive = 0;
  1931  003490  0E00               	movlw	0
  1932  003492  0100               	movlb	0	; () banked
  1933  003494  6FF8               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
  1934                           
  1935                           ;main.c: 53: }
  1936  003496  D7D8               	goto	l1592
  1937  003498                     l1598:
  1938                           
  1939                           ; BSR set to: 0
  1940                           ;main.c: 54: else if (Timer0_SynthLd == 1)
  1941                           
  1942                           ; BSR set to: 0
  1943  003498  05FA               	decf	_Timer0_SynthLd& (0+255),w,b	;volatile
  1944  00349A  A4D8               	btfss	status,2,c
  1945  00349C  D7D5               	goto	l1592
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;main.c: 55: {
  1949                           ;main.c: 56: SynthLdDetect();
  1950  00349E  ECA4  F014         	call	_SynthLdDetect	;wreg free
  1951                           
  1952                           ;main.c: 57: Timer0_SynthLd = 0;
  1953  0034A2  0E00               	movlw	0
  1954  0034A4  0100               	movlb	0	; () banked
  1955  0034A6  6FFA               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
  1956                           
  1957                           ; BSR set to: 0
  1958                           
  1959                           ; BSR set to: 0
  1960                           
  1961                           ; BSR set to: 0
  1962                           
  1963                           ; BSR set to: 0
  1964                           
  1965                           ; BSR set to: 0
  1966  0034A8  D7CF               	goto	l1592
  1967  0034AA                     __end_of_main:
  1968                           	opt stack 0
  1969                           tblptru	equ	0xFF8
  1970                           tblptrh	equ	0xFF7
  1971                           tblptrl	equ	0xFF6
  1972                           tablat	equ	0xFF5
  1973                           postinc0	equ	0xFEE
  1974                           wreg	equ	0xFE8
  1975                           postdec1	equ	0xFE5
  1976                           fsr1l	equ	0xFE1
  1977                           status	equ	0xFD8
  1978                           
  1979 ;; *************** function _readUartMessage *****************
  1980 ;; Defined at:
  1981 ;;		line 28 in file "EusartApp.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;		None
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  idx             2  141[BANK0 ] int 
  1986 ;;  chRec           1  143[BANK0 ] unsigned char 
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  1    wreg      void 
  1989 ;; Registers used:
  1990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1996 ;;      Params:         0       0       0       0       0       0       0
  1997 ;;      Locals:         0       3       0       0       0       0       0
  1998 ;;      Temps:          0       4       0       0       0       0       0
  1999 ;;      Totals:         0       7       0       0       0       0       0
  2000 ;;Total ram usage:        7 bytes
  2001 ;; Hardware stack levels used:    1
  2002 ;; Hardware stack levels required when called:   13
  2003 ;; This function calls:
  2004 ;;		_EUSART1_Read
  2005 ;;		_GroupAdc
  2006 ;;		_GroupControlMcu
  2007 ;;		_GroupDAC
  2008 ;;		_GroupFlashMemory
  2009 ;;		_GroupStatusAndVersion
  2010 ;;		_GroupSynthesizers
  2011 ;;		_InitRxMessageParams
  2012 ;;		_ZeroArray
  2013 ;;		_crc8
  2014 ;; This function is called by:
  2015 ;;		_main
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text1
  2020  001468                     __ptext1:
  2021                           	opt stack 0
  2022  001468                     _readUartMessage:
  2023                           	opt stack 17
  2024                           
  2025                           ;EusartApp.c: 31: uint8_t chRec = (0);
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;incstack = 0
  2029  001468  0E00               	movlw	0
  2030  00146A  0100               	movlb	0	; () banked
  2031  00146C  6FEF               	movwf	readUartMessage@chRec& (0+255),b
  2032                           
  2033                           ;EusartApp.c: 32: switch(cState)
  2034  00146E  D0D3               	goto	l202
  2035  001470                     
  2036                           ; BSR set to: 0
  2037                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  2038                           
  2039                           ; BSR set to: 0
  2040  001470  0E04               	movlw	4
  2041  001472  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2042  001474  0012               	return	
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;EusartApp.c: 38: {
  2046                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  2047  001476  0E01               	movlw	1
  2048  001478  6FF4               	movwf	_cState& (0+255),b
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;EusartApp.c: 40: }
  2052                           ;EusartApp.c: 41: return;
  2053                           
  2054                           ; BSR set to: 0
  2055  00147A  0012               	return	
  2056  00147C                     
  2057                           ; BSR set to: 0
  2058                           ;EusartApp.c: 45: InitRxMessageParams();
  2059                           
  2060                           ; BSR set to: 0
  2061  00147C  ECEB  F01F         	call	_InitRxMessageParams	;wreg free
  2062                           
  2063                           ;EusartApp.c: 46: msgCount = 0;
  2064  001480  0E00               	movlw	0
  2065  001482  0100               	movlb	0	; () banked
  2066  001484  6FF0               	movwf	_msgCount& (0+255),b
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  2070  001486  0E01               	movlw	1
  2071  001488  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2072  00148A  D00D               	goto	l207
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;EusartApp.c: 48: {
  2076                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  2077  00148C  EC67  F01D         	call	_EUSART1_Read	;wreg free
  2078  001490  0100               	movlb	0	; () banked
  2079  001492  6FEF               	movwf	readUartMessage@chRec& (0+255),b
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  2083  001494  C0EF  F190         	movff	readUartMessage@chRec,_rxMsgQueue
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;EusartApp.c: 51: if(chRec == (0x24))
  2087  001498  0E24               	movlw	36
  2088  00149A  19EF               	xorwf	readUartMessage@chRec& (0+255),w,b
  2089  00149C  A4D8               	btfss	status,2,c
  2090  00149E  0012               	return	
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;EusartApp.c: 52: {
  2094                           ;EusartApp.c: 53: cState = READ_GROUP;
  2095  0014A0  0E02               	movlw	2
  2096  0014A2  6FF4               	movwf	_cState& (0+255),b
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;EusartApp.c: 54: }
  2100                           ;EusartApp.c: 55: }
  2101  0014A4  0012               	return	
  2102  0014A6                     l207:
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;EusartApp.c: 56: else
  2106                           ;EusartApp.c: 57: {
  2107                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  2108                           
  2109                           ; BSR set to: 0
  2110  0014A6  0E00               	movlw	0
  2111  0014A8  6FF4               	movwf	_cState& (0+255),b
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;EusartApp.c: 59: }
  2115                           ;EusartApp.c: 61: break;
  2116  0014AA  0012               	return	
  2117  0014AC                     
  2118                           ; BSR set to: 0
  2119                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  2120                           
  2121                           ; BSR set to: 0
  2122  0014AC  0E01               	movlw	1
  2123  0014AE  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2124  0014B0  0012               	return	
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;EusartApp.c: 66: {
  2128                           ;EusartApp.c: 67: group = EUSART1_Read();
  2129  0014B2  EC67  F01D         	call	_EUSART1_Read	;wreg free
  2130  0014B6  0100               	movlb	0	; () banked
  2131  0014B8  6FF3               	movwf	_group& (0+255),b
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  2135  0014BA  C0F3  F191         	movff	_group,_rxMsgQueue+1
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;EusartApp.c: 69: cState = READ_REQUEST;
  2139  0014BE  0E03               	movlw	3
  2140  0014C0  6FF4               	movwf	_cState& (0+255),b
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;EusartApp.c: 70: }
  2144                           ;EusartApp.c: 71: break;
  2145  0014C2  0012               	return	
  2146  0014C4                     
  2147                           ; BSR set to: 0
  2148                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  2149                           
  2150                           ; BSR set to: 0
  2151  0014C4  0E01               	movlw	1
  2152  0014C6  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2153  0014C8  0012               	return	
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;EusartApp.c: 76: {
  2157                           ;EusartApp.c: 77: request = EUSART1_Read();
  2158  0014CA  EC67  F01D         	call	_EUSART1_Read	;wreg free
  2159  0014CE  0100               	movlb	0	; () banked
  2160  0014D0  6FF2               	movwf	_request& (0+255),b
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  2164  0014D2  C0F2  F192         	movff	_request,_rxMsgQueue+2
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  2168  0014D6  0E04               	movlw	4
  2169  0014D8  6FF4               	movwf	_cState& (0+255),b
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;EusartApp.c: 80: }
  2173                           ;EusartApp.c: 81: break;
  2174  0014DA  0012               	return	
  2175  0014DC                     
  2176                           ; BSR set to: 0
  2177                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  2178                           
  2179                           ; BSR set to: 0
  2180  0014DC  0E01               	movlw	1
  2181  0014DE  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2182  0014E0  0012               	return	
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;EusartApp.c: 85: {
  2186                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  2187  0014E2  EC67  F01D         	call	_EUSART1_Read	;wreg free
  2188  0014E6  0100               	movlb	0	; () banked
  2189  0014E8  6FF1               	movwf	_dataSize& (0+255),b
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  2193  0014EA  C0F1  F193         	movff	_dataSize,_rxMsgQueue+3
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;EusartApp.c: 88: if(dataSize == 0)
  2197  0014EE  51F1               	movf	_dataSize& (0+255),w,b
  2198  0014F0  A4D8               	btfss	status,2,c
  2199  0014F2  D003               	goto	l217
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;EusartApp.c: 89: {
  2203                           ;EusartApp.c: 90: cState = CHECK_CRC;
  2204  0014F4  0E06               	movlw	6
  2205  0014F6  6FF4               	movwf	_cState& (0+255),b
  2206                           
  2207                           ;EusartApp.c: 91: }
  2208  0014F8  0012               	return	
  2209  0014FA                     l217:
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;EusartApp.c: 92: else
  2213                           ;EusartApp.c: 93: {
  2214                           ;EusartApp.c: 94: cState = READ_DATA;
  2215                           
  2216                           ; BSR set to: 0
  2217  0014FA  0E05               	movlw	5
  2218  0014FC  6FF4               	movwf	_cState& (0+255),b
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;EusartApp.c: 95: }
  2222                           ;EusartApp.c: 97: }
  2223                           ;EusartApp.c: 99: break;
  2224                           
  2225                           ; BSR set to: 0
  2226  0014FE  0012               	return	
  2227  001500                     
  2228                           ; BSR set to: 0
  2229                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  2230                           
  2231                           ; BSR set to: 0
  2232  001500  51F1               	movf	_dataSize& (0+255),w,b
  2233  001502  5DF5               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  2234  001504  A0D8               	btfss	status,0,c
  2235  001506  0012               	return	
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;EusartApp.c: 104: {
  2239                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  2240  001508  0E7C               	movlw	low _rxMsgData
  2241  00150A  6E20               	movwf	ZeroArray@array,c
  2242  00150C  0E01               	movlw	high _rxMsgData
  2243  00150E  6E21               	movwf	ZeroArray@array+1,c
  2244  001510  0E00               	movlw	0
  2245  001512  6E23               	movwf	ZeroArray@size+1,c
  2246  001514  0E14               	movlw	20
  2247  001516  6E22               	movwf	ZeroArray@size,c
  2248  001518  ECBF  F020         	call	_ZeroArray	;wreg free
  2249                           
  2250                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2251  00151C  0E00               	movlw	0
  2252  00151E  0100               	movlb	0	; () banked
  2253  001520  6FEE               	movwf	(readUartMessage@idx+1)& (0+255),b
  2254  001522  0E00               	movlw	0
  2255  001524  6FED               	movwf	readUartMessage@idx& (0+255),b
  2256  001526  D01E               	goto	l221
  2257  001528                     
  2258                           ; BSR set to: 0
  2259                           ;EusartApp.c: 108: {
  2260                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2261                           
  2262                           ; BSR set to: 0
  2263  001528  EC67  F01D         	call	_EUSART1_Read	;wreg free
  2264  00152C  0100               	movlb	0	; () banked
  2265  00152E  6FEF               	movwf	readUartMessage@chRec& (0+255),b
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2269  001530  51F0               	movf	_msgCount& (0+255),w,b
  2270  001532  6FE9               	movwf	??_readUartMessage& (0+255),b
  2271  001534  6BEA               	clrf	(??_readUartMessage+1)& (0+255),b
  2272  001536  0E04               	movlw	4
  2273  001538  27E9               	addwf	??_readUartMessage& (0+255),f,b
  2274  00153A  0E00               	movlw	0
  2275  00153C  23EA               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2276  00153E  0E90               	movlw	low _rxMsgQueue
  2277  001540  25E9               	addwf	??_readUartMessage& (0+255),w,b
  2278  001542  6ED9               	movwf	fsr2l,c
  2279  001544  0E01               	movlw	high _rxMsgQueue
  2280  001546  21EA               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2281  001548  6EDA               	movwf	fsr2h,c
  2282  00154A  C0EF  FFDF         	movff	readUartMessage@chRec,indf2
  2283                           
  2284                           ; BSR set to: 0
  2285  00154E  2BF0               	incf	_msgCount& (0+255),f,b
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2289  001550  0E7C               	movlw	low _rxMsgData
  2290  001552  25ED               	addwf	readUartMessage@idx& (0+255),w,b
  2291  001554  6ED9               	movwf	fsr2l,c
  2292  001556  0E01               	movlw	high _rxMsgData
  2293  001558  21EE               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2294  00155A  6EDA               	movwf	fsr2h,c
  2295  00155C  C0EF  FFDF         	movff	readUartMessage@chRec,indf2
  2296                           
  2297                           ; BSR set to: 0
  2298  001560  4BED               	infsnz	readUartMessage@idx& (0+255),f,b
  2299  001562  2BEE               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2300  001564                     l221:
  2301                           
  2302                           ; BSR set to: 0
  2303                           
  2304                           ; BSR set to: 0
  2305  001564  51F1               	movf	_dataSize& (0+255),w,b
  2306  001566  6FE9               	movwf	??_readUartMessage& (0+255),b
  2307  001568  6BEA               	clrf	(??_readUartMessage+1)& (0+255),b
  2308  00156A  51E9               	movf	??_readUartMessage& (0+255),w,b
  2309  00156C  5DED               	subwf	readUartMessage@idx& (0+255),w,b
  2310  00156E  51EE               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2311  001570  0A80               	xorlw	128
  2312  001572  6FEB               	movwf	(??_readUartMessage+2)& (0+255),b
  2313  001574  51EA               	movf	(??_readUartMessage+1)& (0+255),w,b
  2314  001576  0A80               	xorlw	128
  2315  001578  59EB               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2316  00157A  A0D8               	btfss	status,0,c
  2317  00157C  D7D5               	goto	l222
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;EusartApp.c: 112: }
  2321                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2322                           
  2323                           ; BSR set to: 0
  2324  00157E  0E06               	movlw	6
  2325  001580  6FF4               	movwf	_cState& (0+255),b
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;EusartApp.c: 115: }
  2329                           ;EusartApp.c: 116: break;
  2330  001582  0012               	return	
  2331  001584                     
  2332                           ; BSR set to: 0
  2333                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2334                           
  2335                           ; BSR set to: 0
  2336  001584  51F5               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2337  001586  B4D8               	btfsc	status,2,c
  2338  001588  0012               	return	
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;EusartApp.c: 120: {
  2342                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2343  00158A  EC67  F01D         	call	_EUSART1_Read	;wreg free
  2344  00158E  6E3B               	movwf	_crcGiven,c
  2345                           
  2346                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2347  001590  0E90               	movlw	low _rxMsgQueue
  2348  001592  6E18               	movwf	crc8@dataArray,c
  2349  001594  0E01               	movlw	high _rxMsgQueue
  2350  001596  6E19               	movwf	crc8@dataArray+1,c
  2351  001598  0E04               	movlw	4
  2352  00159A  0100               	movlb	0	; () banked
  2353  00159C  25F0               	addwf	_msgCount& (0+255),w,b
  2354  00159E  6E1A               	movwf	crc8@dataSize,c
  2355  0015A0  6A1B               	clrf	crc8@dataSize+1,c
  2356  0015A2  0E00               	movlw	0
  2357  0015A4  221B               	addwfc	crc8@dataSize+1,f,c
  2358  0015A6  EC40  F01D         	call	_crc8	;wreg free
  2359  0015AA  6E3C               	movwf	_crcCalc,c
  2360                           
  2361                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2362  0015AC  503C               	movf	_crcCalc,w,c
  2363  0015AE  183B               	xorwf	_crcGiven,w,c
  2364  0015B0  A4D8               	btfss	status,2,c
  2365  0015B2  D004               	goto	l226
  2366                           
  2367                           ;EusartApp.c: 125: {
  2368                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2369  0015B4  0E07               	movlw	7
  2370  0015B6  0100               	movlb	0	; () banked
  2371  0015B8  6FF4               	movwf	_cState& (0+255),b
  2372                           
  2373                           ;EusartApp.c: 127: }
  2374  0015BA  0012               	return	
  2375  0015BC                     l226:
  2376                           
  2377                           ;EusartApp.c: 128: else
  2378                           ;EusartApp.c: 129: {
  2379                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2380                           
  2381                           ; BSR set to: 0
  2382  0015BC  0E00               	movlw	0
  2383  0015BE  0100               	movlb	0	; () banked
  2384  0015C0  6FF4               	movwf	_cState& (0+255),b
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;EusartApp.c: 131: }
  2388                           ;EusartApp.c: 132: }
  2389                           ;EusartApp.c: 133: break;
  2390                           
  2391                           ; BSR set to: 0
  2392  0015C2  0012               	return	
  2393  0015C4                     
  2394                           ; BSR set to: 0
  2395                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2396                           
  2397                           ; BSR set to: 0
  2398  0015C4  0EFE               	movlw	254
  2399  0015C6  6FE9               	movwf	??_readUartMessage& (0+255),b
  2400  0015C8  0EFF               	movlw	255
  2401  0015CA  6FEA               	movwf	(??_readUartMessage+1)& (0+255),b
  2402  0015CC  51F3               	movf	_group& (0+255),w,b
  2403  0015CE  6FEB               	movwf	(??_readUartMessage+2)& (0+255),b
  2404  0015D0  6BEC               	clrf	(??_readUartMessage+3)& (0+255),b
  2405  0015D2  90D8               	bcf	status,0,c
  2406  0015D4  37EB               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2407  0015D6  37EC               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2408  0015D8  51E9               	movf	??_readUartMessage& (0+255),w,b
  2409  0015DA  27EB               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2410  0015DC  51EA               	movf	(??_readUartMessage+1)& (0+255),w,b
  2411  0015DE  23EC               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2412  0015E0  0EBC               	movlw	low _groupsArray
  2413  0015E2  25EB               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2414  0015E4  6ED9               	movwf	fsr2l,c
  2415  0015E6  0E01               	movlw	high _groupsArray
  2416  0015E8  21EC               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2417  0015EA  6EDA               	movwf	fsr2h,c
  2418  0015EC  D801               	call	u9058
  2419  0015EE  D00F               	goto	u9059
  2420  0015F0                     u9058:
  2421  0015F0  0005               	push	
  2422  0015F2  6EFA               	movwf	pclath,c
  2423  0015F4  50DE               	movf	postinc2,w,c
  2424  0015F6  6EFD               	movwf	tosl,c
  2425  0015F8  50DE               	movf	postinc2,w,c
  2426  0015FA  6EFE               	movwf	tosh,c
  2427  0015FC  50F8               	movf	tblptru,w,c
  2428  0015FE  6EFF               	movwf	tosu,c
  2429  001600  50FA               	movf	pclath,w,c
  2430  001602  0E7C               	movlw	low _rxMsgData
  2431  001604  6FE6               	movwf	GroupDAC@data& (0+255),b
  2432  001606  0E01               	movlw	high _rxMsgData
  2433  001608  6FE7               	movwf	(GroupDAC@data+1)& (0+255),b
  2434  00160A  51F2               	movf	_request& (0+255),w,b
  2435  00160C  0012               	return		;indir
  2436  00160E                     u9059:
  2437                           
  2438                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2439  00160E  0E00               	movlw	0
  2440  001610  0100               	movlb	0	; () banked
  2441  001612  6FF4               	movwf	_cState& (0+255),b
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;EusartApp.c: 139: }
  2445                           
  2446                           ;EusartApp.c: 138: break;
  2447  001614  0012               	return	
  2448  001616                     l202:
  2449                           
  2450                           ; BSR set to: 0
  2451                           
  2452                           ; BSR set to: 0
  2453  001616  51F4               	movf	_cState& (0+255),w,b
  2454                           
  2455                           ; Switch size 1, requested type "space"
  2456                           ; Number of cases is 8, Range of values is 0 to 7
  2457                           ; switch strategies available:
  2458                           ; Name         Instructions Cycles
  2459                           ; simple_byte           25    13 (average)
  2460                           ;	Chosen strategy is simple_byte
  2461  001618  0A00               	xorlw	0	; case 0
  2462  00161A  B4D8               	btfsc	status,2,c
  2463  00161C  D729               	goto	l203
  2464  00161E  0A01               	xorlw	1	; case 1
  2465  001620  B4D8               	btfsc	status,2,c
  2466  001622  D72C               	goto	l206
  2467  001624  0A03               	xorlw	3	; case 2
  2468  001626  B4D8               	btfsc	status,2,c
  2469  001628  D741               	goto	l211
  2470  00162A  0A01               	xorlw	1	; case 3
  2471  00162C  B4D8               	btfsc	status,2,c
  2472  00162E  D74A               	goto	l213
  2473  001630  0A07               	xorlw	7	; case 4
  2474  001632  B4D8               	btfsc	status,2,c
  2475  001634  D753               	goto	l215
  2476  001636  0A01               	xorlw	1	; case 5
  2477  001638  B4D8               	btfsc	status,2,c
  2478  00163A  D762               	goto	l219
  2479  00163C  0A03               	xorlw	3	; case 6
  2480  00163E  B4D8               	btfsc	status,2,c
  2481  001640  D7A1               	goto	l224
  2482  001642  0A01               	xorlw	1	; case 7
  2483  001644  A4D8               	btfss	status,2,c
  2484  001646  0012               	return	
  2485  001648  D7BD               	goto	l228
  2486  00164A                     __end_of_readUartMessage:
  2487                           	opt stack 0
  2488                           tosu	equ	0xFFF
  2489                           tosh	equ	0xFFE
  2490                           tosl	equ	0xFFD
  2491                           pclath	equ	0xFFA
  2492                           tblptru	equ	0xFF8
  2493                           tblptrh	equ	0xFF7
  2494                           tblptrl	equ	0xFF6
  2495                           tablat	equ	0xFF5
  2496                           postinc0	equ	0xFEE
  2497                           wreg	equ	0xFE8
  2498                           postdec1	equ	0xFE5
  2499                           fsr1l	equ	0xFE1
  2500                           indf2	equ	0xFDF
  2501                           postinc2	equ	0xFDE
  2502                           fsr2h	equ	0xFDA
  2503                           fsr2l	equ	0xFD9
  2504                           status	equ	0xFD8
  2505                           
  2506 ;; *************** function _InitRxMessageParams *****************
  2507 ;; Defined at:
  2508 ;;		line 142 in file "EusartApp.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;		None
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;		None
  2513 ;; Return value:  Size  Location     Type
  2514 ;;                  1    wreg      void 
  2515 ;; Registers used:
  2516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2522 ;;      Params:         0       0       0       0       0       0       0
  2523 ;;      Locals:         0       0       0       0       0       0       0
  2524 ;;      Temps:          0       0       0       0       0       0       0
  2525 ;;      Totals:         0       0       0       0       0       0       0
  2526 ;;Total ram usage:        0 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    6
  2529 ;; This function calls:
  2530 ;;		_ZeroArray
  2531 ;; This function is called by:
  2532 ;;		_readUartMessage
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text2
  2537  003FD6                     __ptext2:
  2538                           	opt stack 0
  2539  003FD6                     _InitRxMessageParams:
  2540                           	opt stack 23
  2541                           
  2542                           ;EusartApp.c: 146: dataSize = 0;
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;incstack = 0
  2546  003FD6  0E00               	movlw	0
  2547  003FD8  0100               	movlb	0	; () banked
  2548  003FDA  6FF1               	movwf	_dataSize& (0+255),b
  2549                           
  2550                           ;EusartApp.c: 147: crcCalc = 0;
  2551  003FDC  0E00               	movlw	0
  2552  003FDE  6E3C               	movwf	_crcCalc,c
  2553                           
  2554                           ;EusartApp.c: 148: crcGiven = 0;
  2555  003FE0  0E00               	movlw	0
  2556  003FE2  6E3B               	movwf	_crcGiven,c
  2557                           
  2558                           ;EusartApp.c: 149: msgCount = 0;
  2559  003FE4  0E00               	movlw	0
  2560  003FE6  6FF0               	movwf	_msgCount& (0+255),b
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2564  003FE8  0E90               	movlw	low _rxMsgQueue
  2565  003FEA  6E20               	movwf	ZeroArray@array,c
  2566  003FEC  0E01               	movlw	high _rxMsgQueue
  2567  003FEE  6E21               	movwf	ZeroArray@array+1,c
  2568  003FF0  0E00               	movlw	0
  2569  003FF2  6E23               	movwf	ZeroArray@size+1,c
  2570  003FF4  0E14               	movlw	20
  2571  003FF6  6E22               	movwf	ZeroArray@size,c
  2572  003FF8  ECBF  F020         	call	_ZeroArray
  2573  003FFC  0012               	return		;funcret
  2574  003FFE                     __end_of_InitRxMessageParams:
  2575                           	opt stack 0
  2576                           tosu	equ	0xFFF
  2577                           tosh	equ	0xFFE
  2578                           tosl	equ	0xFFD
  2579                           pclath	equ	0xFFA
  2580                           tblptru	equ	0xFF8
  2581                           tblptrh	equ	0xFF7
  2582                           tblptrl	equ	0xFF6
  2583                           tablat	equ	0xFF5
  2584                           postinc0	equ	0xFEE
  2585                           wreg	equ	0xFE8
  2586                           postdec1	equ	0xFE5
  2587                           fsr1l	equ	0xFE1
  2588                           indf2	equ	0xFDF
  2589                           postinc2	equ	0xFDE
  2590                           fsr2h	equ	0xFDA
  2591                           fsr2l	equ	0xFD9
  2592                           status	equ	0xFD8
  2593                           
  2594 ;; *************** function _GroupDAC *****************
  2595 ;; Defined at:
  2596 ;;		line 125 in file "MessageFunctions.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;  request         1    wreg     enum E12
  2599 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2600 ;;		 -> rxMsgData(20), 
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;  request         1  136[BANK0 ] enum E12
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      void 
  2605 ;; Registers used:
  2606 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2612 ;;      Params:         0       2       0       0       0       0       0
  2613 ;;      Locals:         0       1       0       0       0       0       0
  2614 ;;      Temps:          0       0       0       0       0       0       0
  2615 ;;      Totals:         0       3       0       0       0       0       0
  2616 ;;Total ram usage:        3 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:   11
  2619 ;; This function calls:
  2620 ;;		_DacReadValue
  2621 ;;		_DacSetValue
  2622 ;; This function is called by:
  2623 ;;		_readUartMessage
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           	psect	text3
  2628  003E50                     __ptext3:
  2629                           	opt stack 0
  2630  003E50                     _GroupDAC:
  2631                           	opt stack 18
  2632                           
  2633                           ;incstack = 0
  2634                           ;GroupDAC@request stored from wreg
  2635  003E50  0100               	movlb	0	; () banked
  2636  003E52  6FE8               	movwf	GroupDAC@request& (0+255),b
  2637                           
  2638                           ;MessageFunctions.c: 127: switch (request)
  2639  003E54  D00E               	goto	l1340
  2640  003E56                     
  2641                           ;MessageFunctions.c: 130: DacSetValue(data);
  2642  003E56  C0E6  F08A         	movff	GroupDAC@data,DacSetValue@data
  2643  003E5A  C0E7  F08B         	movff	GroupDAC@data+1,DacSetValue@data+1
  2644  003E5E  ECFB  F017         	call	_DacSetValue	;wreg free
  2645                           
  2646                           ;MessageFunctions.c: 131: break;
  2647  003E62  0012               	return	
  2648  003E64                     
  2649                           ;MessageFunctions.c: 134: DacReadValue(data);
  2650  003E64  C0E6  F0C8         	movff	GroupDAC@data,DacReadValue@data
  2651  003E68  C0E7  F0C9         	movff	GroupDAC@data+1,DacReadValue@data+1
  2652  003E6C  EC4F  F013         	call	_DacReadValue	;wreg free
  2653                           
  2654                           ;MessageFunctions.c: 139: }
  2655                           
  2656                           ;MessageFunctions.c: 138: break;
  2657                           
  2658                           ;MessageFunctions.c: 137: default:
  2659                           
  2660                           ;MessageFunctions.c: 135: break;
  2661  003E70  0012               	return	
  2662  003E72                     l1340:
  2663  003E72  0100               	movlb	0	; () banked
  2664  003E74  51E8               	movf	GroupDAC@request& (0+255),w,b
  2665                           
  2666                           ; Switch size 1, requested type "space"
  2667                           ; Number of cases is 2, Range of values is 97 to 98
  2668                           ; switch strategies available:
  2669                           ; Name         Instructions Cycles
  2670                           ; simple_byte            7     4 (average)
  2671                           ;	Chosen strategy is simple_byte
  2672  003E76  0A61               	xorlw	97	; case 97
  2673  003E78  B4D8               	btfsc	status,2,c
  2674  003E7A  D7ED               	goto	l1341
  2675  003E7C  0A03               	xorlw	3	; case 98
  2676  003E7E  A4D8               	btfss	status,2,c
  2677  003E80  0012               	return	
  2678  003E82  D7F0               	goto	l1343
  2679  003E84                     __end_of_GroupDAC:
  2680                           	opt stack 0
  2681                           tosu	equ	0xFFF
  2682                           tosh	equ	0xFFE
  2683                           tosl	equ	0xFFD
  2684                           pclath	equ	0xFFA
  2685                           tblptru	equ	0xFF8
  2686                           tblptrh	equ	0xFF7
  2687                           tblptrl	equ	0xFF6
  2688                           tablat	equ	0xFF5
  2689                           postinc0	equ	0xFEE
  2690                           wreg	equ	0xFE8
  2691                           postdec1	equ	0xFE5
  2692                           fsr1l	equ	0xFE1
  2693                           indf2	equ	0xFDF
  2694                           postinc2	equ	0xFDE
  2695                           fsr2h	equ	0xFDA
  2696                           fsr2l	equ	0xFD9
  2697                           status	equ	0xFD8
  2698                           
  2699 ;; *************** function _GroupFlashMemory *****************
  2700 ;; Defined at:
  2701 ;;		line 104 in file "MessageFunctions.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  request         1    wreg     enum E12
  2704 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;  request         1  136[BANK0 ] enum E12
  2707 ;; Return value:  Size  Location     Type
  2708 ;;                  1    wreg      void 
  2709 ;; Registers used:
  2710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2716 ;;      Params:         0       2       0       0       0       0       0
  2717 ;;      Locals:         0       1       0       0       0       0       0
  2718 ;;      Temps:          0       0       0       0       0       0       0
  2719 ;;      Totals:         0       3       0       0       0       0       0
  2720 ;;Total ram usage:        3 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    9
  2723 ;; This function calls:
  2724 ;;		_FlashEreaseMem
  2725 ;;		_FlashReadCondition
  2726 ;;		_FlashReadUart
  2727 ;; This function is called by:
  2728 ;;		_readUartMessage
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           	psect	text4
  2733  003CCC                     __ptext4:
  2734                           	opt stack 0
  2735  003CCC                     _GroupFlashMemory:
  2736                           	opt stack 20
  2737                           
  2738                           ;incstack = 0
  2739                           ;GroupFlashMemory@request stored from wreg
  2740  003CCC  0100               	movlb	0	; () banked
  2741  003CCE  6FE8               	movwf	GroupFlashMemory@request& (0+255),b
  2742                           
  2743                           ;MessageFunctions.c: 106: switch (request)
  2744  003CD0  D00D               	goto	l1331
  2745  003CD2                     
  2746                           ;MessageFunctions.c: 109: FlashEreaseMem();
  2747  003CD2  ECEE  F01C         	call	_FlashEreaseMem	;wreg free
  2748                           
  2749                           ;MessageFunctions.c: 110: break;
  2750  003CD6  0012               	return	
  2751  003CD8                     
  2752                           ;MessageFunctions.c: 113: FlashReadCondition();
  2753  003CD8  EC6A  F010         	call	_FlashReadCondition	;wreg free
  2754                           
  2755                           ;MessageFunctions.c: 114: break;
  2756  003CDC  0012               	return	
  2757  003CDE                     
  2758                           ;MessageFunctions.c: 117: FlashReadUart(data);
  2759  003CDE  C0E6  F087         	movff	GroupFlashMemory@data,FlashReadUart@data
  2760  003CE2  C0E7  F088         	movff	GroupFlashMemory@data+1,FlashReadUart@data+1
  2761  003CE6  EC3D  F008         	call	_FlashReadUart	;wreg free
  2762                           
  2763                           ;MessageFunctions.c: 122: }
  2764                           
  2765                           ;MessageFunctions.c: 121: break;
  2766                           
  2767                           ;MessageFunctions.c: 120: default:
  2768                           
  2769                           ;MessageFunctions.c: 118: break;
  2770  003CEA  0012               	return	
  2771  003CEC                     l1331:
  2772  003CEC  0100               	movlb	0	; () banked
  2773  003CEE  51E8               	movf	GroupFlashMemory@request& (0+255),w,b
  2774                           
  2775                           ; Switch size 1, requested type "space"
  2776                           ; Number of cases is 3, Range of values is 81 to 83
  2777                           ; switch strategies available:
  2778                           ; Name         Instructions Cycles
  2779                           ; simple_byte           10     6 (average)
  2780                           ;	Chosen strategy is simple_byte
  2781  003CF0  0A51               	xorlw	81	; case 81
  2782  003CF2  B4D8               	btfsc	status,2,c
  2783  003CF4  D7EE               	goto	l1332
  2784  003CF6  0A03               	xorlw	3	; case 82
  2785  003CF8  B4D8               	btfsc	status,2,c
  2786  003CFA  D7EE               	goto	l1334
  2787  003CFC  0A01               	xorlw	1	; case 83
  2788  003CFE  A4D8               	btfss	status,2,c
  2789  003D00  0012               	return	
  2790  003D02  D7ED               	goto	l1335
  2791  003D04                     __end_of_GroupFlashMemory:
  2792                           	opt stack 0
  2793                           tosu	equ	0xFFF
  2794                           tosh	equ	0xFFE
  2795                           tosl	equ	0xFFD
  2796                           pclath	equ	0xFFA
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           postinc0	equ	0xFEE
  2802                           wreg	equ	0xFE8
  2803                           postdec1	equ	0xFE5
  2804                           fsr1l	equ	0xFE1
  2805                           indf2	equ	0xFDF
  2806                           postinc2	equ	0xFDE
  2807                           fsr2h	equ	0xFDA
  2808                           fsr2l	equ	0xFD9
  2809                           status	equ	0xFD8
  2810                           
  2811 ;; *************** function _GroupAdc *****************
  2812 ;; Defined at:
  2813 ;;		line 51 in file "MessageFunctions.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;  request         1    wreg     enum E12
  2816 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  request         1  136[BANK0 ] enum E12
  2819 ;; Return value:  Size  Location     Type
  2820 ;;                  1    wreg      void 
  2821 ;; Registers used:
  2822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2828 ;;      Params:         0       2       0       0       0       0       0
  2829 ;;      Locals:         0       1       0       0       0       0       0
  2830 ;;      Temps:          0       0       0       0       0       0       0
  2831 ;;      Totals:         0       3       0       0       0       0       0
  2832 ;;Total ram usage:        3 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; Hardware stack levels required when called:    8
  2835 ;; This function calls:
  2836 ;;		_SetChannelMode
  2837 ;; This function is called by:
  2838 ;;		_readUartMessage
  2839 ;; This function uses a non-reentrant model
  2840 ;;
  2841                           
  2842                           	psect	text5
  2843  004122                     __ptext5:
  2844                           	opt stack 0
  2845  004122                     _GroupAdc:
  2846                           	opt stack 21
  2847                           
  2848                           ;incstack = 0
  2849                           ;GroupAdc@request stored from wreg
  2850  004122  0100               	movlb	0	; () banked
  2851  004124  6FE8               	movwf	GroupAdc@request& (0+255),b
  2852                           
  2853                           ;MessageFunctions.c: 53: switch (request)
  2854  004126  D007               	goto	l1310
  2855  004128                     
  2856                           ;MessageFunctions.c: 56: SetChannelMode(data);
  2857  004128  C0E6  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2858  00412C  C0E7  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2859  004130  EC8E  F01F         	call	_SetChannelMode	;wreg free
  2860                           
  2861                           ;MessageFunctions.c: 61: }
  2862                           
  2863                           ;MessageFunctions.c: 60: break;
  2864                           
  2865                           ;MessageFunctions.c: 59: default:
  2866                           
  2867                           ;MessageFunctions.c: 57: break;
  2868  004134  0012               	return	
  2869  004136                     l1310:
  2870  004136  0100               	movlb	0	; () banked
  2871  004138  51E8               	movf	GroupAdc@request& (0+255),w,b
  2872                           
  2873                           ; Switch size 1, requested type "space"
  2874                           ; Number of cases is 1, Range of values is 50 to 50
  2875                           ; switch strategies available:
  2876                           ; Name         Instructions Cycles
  2877                           ; simple_byte            4     3 (average)
  2878                           ;	Chosen strategy is simple_byte
  2879  00413A  0A32               	xorlw	50	; case 50
  2880  00413C  A4D8               	btfss	status,2,c
  2881  00413E  0012               	return	
  2882  004140  D7F3               	goto	l1311
  2883  004142                     __end_of_GroupAdc:
  2884                           	opt stack 0
  2885                           tosu	equ	0xFFF
  2886                           tosh	equ	0xFFE
  2887                           tosl	equ	0xFFD
  2888                           pclath	equ	0xFFA
  2889                           tblptru	equ	0xFF8
  2890                           tblptrh	equ	0xFF7
  2891                           tblptrl	equ	0xFF6
  2892                           tablat	equ	0xFF5
  2893                           postinc0	equ	0xFEE
  2894                           wreg	equ	0xFE8
  2895                           postdec1	equ	0xFE5
  2896                           fsr1l	equ	0xFE1
  2897                           indf2	equ	0xFDF
  2898                           postinc2	equ	0xFDE
  2899                           fsr2h	equ	0xFDA
  2900                           fsr2l	equ	0xFD9
  2901                           status	equ	0xFD8
  2902                           
  2903 ;; *************** function _GroupStatusAndVersion *****************
  2904 ;; Defined at:
  2905 ;;		line 34 in file "MessageFunctions.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;  request         1    wreg     enum E12
  2908 ;;  data            3  134[BANK0 ] PTR unsigned char 
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  request         1  137[BANK0 ] enum E12
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      void 
  2913 ;; Registers used:
  2914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2920 ;;      Params:         0       2       0       0       0       0       0
  2921 ;;      Locals:         0       1       0       0       0       0       0
  2922 ;;      Temps:          0       0       0       0       0       0       0
  2923 ;;      Totals:         0       3       0       0       0       0       0
  2924 ;;Total ram usage:        3 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:    7
  2927 ;; This function calls:
  2928 ;;		_GetMcuFwVersion
  2929 ;;		_GetMcuRunTime
  2930 ;; This function is called by:
  2931 ;;		_readUartMessage
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           
  2935                           	psect	text6
  2936  004072                     __ptext6:
  2937                           	opt stack 0
  2938  004072                     _GroupStatusAndVersion:
  2939                           	opt stack 22
  2940                           
  2941                           ;incstack = 0
  2942                           ;GroupStatusAndVersion@request stored from wreg
  2943  004072  0100               	movlb	0	; () banked
  2944  004074  6FE9               	movwf	GroupStatusAndVersion@request& (0+255),b
  2945                           
  2946                           ;MessageFunctions.c: 36: switch (request)
  2947  004076  D006               	goto	l1302
  2948  004078                     
  2949                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  2950  004078  ECA7  F004         	call	_GetMcuFwVersion	;wreg free
  2951                           
  2952                           ;MessageFunctions.c: 40: break;
  2953  00407C  0012               	return	
  2954  00407E                     
  2955                           ;MessageFunctions.c: 43: GetMcuRunTime();
  2956  00407E  ECDD  F012         	call	_GetMcuRunTime	;wreg free
  2957                           
  2958                           ;MessageFunctions.c: 48: }
  2959                           
  2960                           ;MessageFunctions.c: 47: break;
  2961                           
  2962                           ;MessageFunctions.c: 46: default:
  2963                           
  2964                           ;MessageFunctions.c: 44: break;
  2965  004082  0012               	return	
  2966  004084                     l1302:
  2967  004084  0100               	movlb	0	; () banked
  2968  004086  51E9               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2969                           
  2970                           ; Switch size 1, requested type "space"
  2971                           ; Number of cases is 2, Range of values is 33 to 34
  2972                           ; switch strategies available:
  2973                           ; Name         Instructions Cycles
  2974                           ; simple_byte            7     4 (average)
  2975                           ;	Chosen strategy is simple_byte
  2976  004088  0A21               	xorlw	33	; case 33
  2977  00408A  B4D8               	btfsc	status,2,c
  2978  00408C  D7F8               	goto	l1305
  2979  00408E  0A03               	xorlw	3	; case 34
  2980  004090  A4D8               	btfss	status,2,c
  2981  004092  0012               	return	
  2982  004094  D7F1               	goto	l1303
  2983  004096                     __end_of_GroupStatusAndVersion:
  2984                           	opt stack 0
  2985                           tosu	equ	0xFFF
  2986                           tosh	equ	0xFFE
  2987                           tosl	equ	0xFFD
  2988                           pclath	equ	0xFFA
  2989                           tblptru	equ	0xFF8
  2990                           tblptrh	equ	0xFF7
  2991                           tblptrl	equ	0xFF6
  2992                           tablat	equ	0xFF5
  2993                           postinc0	equ	0xFEE
  2994                           wreg	equ	0xFE8
  2995                           postdec1	equ	0xFE5
  2996                           fsr1l	equ	0xFE1
  2997                           indf2	equ	0xFDF
  2998                           postinc2	equ	0xFDE
  2999                           fsr2h	equ	0xFDA
  3000                           fsr2l	equ	0xFD9
  3001                           status	equ	0xFD8
  3002                           
  3003 ;; *************** function _GroupControlMcu *****************
  3004 ;; Defined at:
  3005 ;;		line 11 in file "MessageFunctions.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;  request         1    wreg     enum E12
  3008 ;;  data            3  134[BANK0 ] PTR unsigned char 
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  request         1  137[BANK0 ] enum E12
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  1    wreg      void 
  3013 ;; Registers used:
  3014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3020 ;;      Params:         0       2       0       0       0       0       0
  3021 ;;      Locals:         0       1       0       0       0       0       0
  3022 ;;      Temps:          0       0       0       0       0       0       0
  3023 ;;      Totals:         0       3       0       0       0       0       0
  3024 ;;Total ram usage:        3 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    8
  3027 ;; This function calls:
  3028 ;;		_ResetMcu
  3029 ;;		_testLeds
  3030 ;; This function is called by:
  3031 ;;		_readUartMessage
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           	psect	text7
  3036  003EEC                     __ptext7:
  3037                           	opt stack 0
  3038  003EEC                     _GroupControlMcu:
  3039                           	opt stack 21
  3040                           
  3041                           ;incstack = 0
  3042                           ;GroupControlMcu@request stored from wreg
  3043  003EEC  0100               	movlb	0	; () banked
  3044  003EEE  6FE9               	movwf	GroupControlMcu@request& (0+255),b
  3045                           
  3046                           ;MessageFunctions.c: 13: switch (request)
  3047  003EF0  D006               	goto	l1292
  3048  003EF2                     
  3049                           ;MessageFunctions.c: 16: testLeds();
  3050  003EF2  EC8D  F01A         	call	_testLeds	;wreg free
  3051                           
  3052                           ;MessageFunctions.c: 17: break;
  3053  003EF6  0012               	return	
  3054  003EF8                     
  3055                           ;MessageFunctions.c: 20: ResetMcu();
  3056  003EF8  EC50  F021         	call	_ResetMcu	;wreg free
  3057                           
  3058                           ;MessageFunctions.c: 31: }
  3059                           
  3060                           ;MessageFunctions.c: 30: break;
  3061                           
  3062                           ;MessageFunctions.c: 29: default:
  3063                           
  3064                           ;MessageFunctions.c: 27: break;
  3065                           
  3066                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  3067                           
  3068                           ;MessageFunctions.c: 24: break;
  3069                           
  3070                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  3071                           
  3072                           ;MessageFunctions.c: 21: break;
  3073  003EFC  0012               	return	
  3074  003EFE                     l1292:
  3075  003EFE  0100               	movlb	0	; () banked
  3076  003F00  51E9               	movf	GroupControlMcu@request& (0+255),w,b
  3077                           
  3078                           ; Switch size 1, requested type "space"
  3079                           ; Number of cases is 4, Range of values is 17 to 20
  3080                           ; switch strategies available:
  3081                           ; Name         Instructions Cycles
  3082                           ; simple_byte           13     7 (average)
  3083                           ;	Chosen strategy is simple_byte
  3084  003F02  0A11               	xorlw	17	; case 17
  3085  003F04  B4D8               	btfsc	status,2,c
  3086  003F06  D7F8               	goto	l1295
  3087  003F08  0A03               	xorlw	3	; case 18
  3088  003F0A  B4D8               	btfsc	status,2,c
  3089  003F0C  0012               	return	
  3090  003F0E  0A01               	xorlw	1	; case 19
  3091  003F10  B4D8               	btfsc	status,2,c
  3092  003F12  0012               	return	
  3093  003F14  0A07               	xorlw	7	; case 20
  3094  003F16  A4D8               	btfss	status,2,c
  3095  003F18  0012               	return	
  3096  003F1A  D7EB               	goto	l1293
  3097  003F1C                     __end_of_GroupControlMcu:
  3098                           	opt stack 0
  3099                           tosu	equ	0xFFF
  3100                           tosh	equ	0xFFE
  3101                           tosl	equ	0xFFD
  3102                           pclath	equ	0xFFA
  3103                           tblptru	equ	0xFF8
  3104                           tblptrh	equ	0xFF7
  3105                           tblptrl	equ	0xFF6
  3106                           tablat	equ	0xFF5
  3107                           postinc0	equ	0xFEE
  3108                           wreg	equ	0xFE8
  3109                           postdec1	equ	0xFE5
  3110                           fsr1l	equ	0xFE1
  3111                           indf2	equ	0xFDF
  3112                           postinc2	equ	0xFDE
  3113                           fsr2h	equ	0xFDA
  3114                           fsr2l	equ	0xFD9
  3115                           status	equ	0xFD8
  3116                           
  3117 ;; *************** function _GroupSynthesizers *****************
  3118 ;; Defined at:
  3119 ;;		line 63 in file "MessageFunctions.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;  request         1    wreg     enum E12
  3122 ;;  data            2  134[BANK0 ] PTR unsigned char 
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;  request         1  136[BANK0 ] enum E12
  3125 ;; Return value:  Size  Location     Type
  3126 ;;                  1    wreg      void 
  3127 ;; Registers used:
  3128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3134 ;;      Params:         0       2       0       0       0       0       0
  3135 ;;      Locals:         0       1       0       0       0       0       0
  3136 ;;      Temps:          0       0       0       0       0       0       0
  3137 ;;      Totals:         0       3       0       0       0       0       0
  3138 ;;Total ram usage:        3 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; Hardware stack levels required when called:   12
  3141 ;; This function calls:
  3142 ;;		_SetSynthOper
  3143 ;;		_SynthReadData
  3144 ;;		_UpdateSynthFreq
  3145 ;; This function is called by:
  3146 ;;		_readUartMessage
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text8
  3151  0031B4                     __ptext8:
  3152                           	opt stack 0
  3153  0031B4                     _GroupSynthesizers:
  3154                           	opt stack 17
  3155                           
  3156                           ;incstack = 0
  3157                           ;GroupSynthesizers@request stored from wreg
  3158  0031B4  0100               	movlb	0	; () banked
  3159  0031B6  6FE8               	movwf	GroupSynthesizers@request& (0+255),b
  3160                           
  3161                           ;MessageFunctions.c: 65: switch (request)
  3162  0031B8  D028               	goto	l1317
  3163  0031BA                     
  3164                           ;MessageFunctions.c: 76: UpdateSynthFreq(SYNTH_TX, data);
  3165  0031BA  C0E6  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3166  0031BE  C0E7  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3167  0031C2  0E00               	movlw	0
  3168  0031C4  EC10  F00C         	call	_UpdateSynthFreq
  3169                           
  3170                           ;MessageFunctions.c: 77: break;
  3171  0031C8  0012               	return	
  3172  0031CA                     
  3173                           ;MessageFunctions.c: 80: UpdateSynthFreq(SYNTH_RX, data);
  3174  0031CA  C0E6  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3175  0031CE  C0E7  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3176  0031D2  0E01               	movlw	1
  3177  0031D4  EC10  F00C         	call	_UpdateSynthFreq
  3178                           
  3179                           ;MessageFunctions.c: 81: break;
  3180  0031D8  0012               	return	
  3181  0031DA                     
  3182                           ;MessageFunctions.c: 84: SetSynthOper(SYNTH_RX);
  3183  0031DA  0E01               	movlw	1
  3184  0031DC  ECA0  F019         	call	_SetSynthOper
  3185                           
  3186                           ;MessageFunctions.c: 85: break;
  3187  0031E0  0012               	return	
  3188  0031E2                     
  3189                           ;MessageFunctions.c: 88: SetSynthOper(SYNTH_TX);
  3190  0031E2  0E00               	movlw	0
  3191  0031E4  ECA0  F019         	call	_SetSynthOper
  3192                           
  3193                           ;MessageFunctions.c: 89: break;
  3194  0031E8  0012               	return	
  3195  0031EA                     
  3196                           ;MessageFunctions.c: 92: SynthReadData(SYNTH_RX, data);
  3197  0031EA  C0E6  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3198  0031EE  C0E7  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3199  0031F2  0E01               	movlw	1
  3200  0031F4  EC4F  F003         	call	_SynthReadData
  3201                           
  3202                           ;MessageFunctions.c: 93: break;
  3203  0031F8  0012               	return	
  3204  0031FA                     
  3205                           ;MessageFunctions.c: 96: SynthReadData(SYNTH_TX, data);
  3206  0031FA  C0E6  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3207  0031FE  C0E7  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3208  003202  0E00               	movlw	0
  3209  003204  EC4F  F003         	call	_SynthReadData
  3210                           
  3211                           ;MessageFunctions.c: 101: }
  3212                           
  3213                           ;MessageFunctions.c: 100: break;
  3214                           
  3215                           ;MessageFunctions.c: 99: default:
  3216                           
  3217                           ;MessageFunctions.c: 97: break;
  3218  003208  0012               	return	
  3219  00320A                     l1317:
  3220  00320A  0100               	movlb	0	; () banked
  3221  00320C  51E8               	movf	GroupSynthesizers@request& (0+255),w,b
  3222                           
  3223                           ; Switch size 1, requested type "space"
  3224                           ; Number of cases is 8, Range of values is 64 to 71
  3225                           ; switch strategies available:
  3226                           ; Name         Instructions Cycles
  3227                           ; simple_byte           25    13 (average)
  3228                           ;	Chosen strategy is simple_byte
  3229  00320E  0A40               	xorlw	64	; case 64
  3230  003210  B4D8               	btfsc	status,2,c
  3231  003212  0012               	return	
  3232  003214  0A01               	xorlw	1	; case 65
  3233  003216  B4D8               	btfsc	status,2,c
  3234  003218  0012               	return	
  3235  00321A  0A03               	xorlw	3	; case 66
  3236  00321C  B4D8               	btfsc	status,2,c
  3237  00321E  D7CD               	goto	l1321
  3238  003220  0A01               	xorlw	1	; case 67
  3239  003222  B4D8               	btfsc	status,2,c
  3240  003224  D7D2               	goto	l1322
  3241  003226  0A07               	xorlw	7	; case 68
  3242  003228  B4D8               	btfsc	status,2,c
  3243  00322A  D7D7               	goto	l1323
  3244  00322C  0A01               	xorlw	1	; case 69
  3245  00322E  B4D8               	btfsc	status,2,c
  3246  003230  D7D8               	goto	l1324
  3247  003232  0A03               	xorlw	3	; case 70
  3248  003234  B4D8               	btfsc	status,2,c
  3249  003236  D7D9               	goto	l1325
  3250  003238  0A01               	xorlw	1	; case 71
  3251  00323A  A4D8               	btfss	status,2,c
  3252  00323C  0012               	return	
  3253  00323E  D7DD               	goto	l1326
  3254  003240                     __end_of_GroupSynthesizers:
  3255                           	opt stack 0
  3256                           tosu	equ	0xFFF
  3257                           tosh	equ	0xFFE
  3258                           tosl	equ	0xFFD
  3259                           pclath	equ	0xFFA
  3260                           tblptru	equ	0xFF8
  3261                           tblptrh	equ	0xFF7
  3262                           tblptrl	equ	0xFF6
  3263                           tablat	equ	0xFF5
  3264                           postinc0	equ	0xFEE
  3265                           wreg	equ	0xFE8
  3266                           postdec1	equ	0xFE5
  3267                           fsr1l	equ	0xFE1
  3268                           indf2	equ	0xFDF
  3269                           postinc2	equ	0xFDE
  3270                           fsr2h	equ	0xFDA
  3271                           fsr2l	equ	0xFD9
  3272                           status	equ	0xFD8
  3273                           
  3274 ;; *************** function _UpdateSynthFreq *****************
  3275 ;; Defined at:
  3276 ;;		line 89 in file "SyntApp.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  cType           1    wreg     enum E1
  3279 ;;  data            2   42[BANK0 ] PTR unsigned char 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;  cType           1   44[BANK0 ] enum E1
  3282 ;;  retVal          8   45[BANK0 ] struct .
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  1    wreg      void 
  3285 ;; Registers used:
  3286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3292 ;;      Params:         0       2       0       0       0       0       0
  3293 ;;      Locals:         0       9       0       0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0
  3295 ;;      Totals:         0      11       0       0       0       0       0
  3296 ;;Total ram usage:       11 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    8
  3299 ;; This function calls:
  3300 ;;		_GetIntFromUartData
  3301 ;;		_SWSPI_send_word
  3302 ;;		_SendAckMessage
  3303 ;;		_StoreIntInEeprom
  3304 ;; This function is called by:
  3305 ;;		_GroupSynthesizers
  3306 ;; This function uses a non-reentrant model
  3307 ;;
  3308                           
  3309                           	psect	text9
  3310  001820                     __ptext9:
  3311                           	opt stack 0
  3312  001820                     _UpdateSynthFreq:
  3313                           	opt stack 20
  3314                           
  3315                           ;incstack = 0
  3316                           ;UpdateSynthFreq@cType stored from wreg
  3317  001820  0100               	movlb	0	; () banked
  3318  001822  6F8C               	movwf	UpdateSynthFreq@cType& (0+255),b
  3319                           
  3320                           ;SyntApp.c: 91: INT_VAL retVal;
  3321                           ;SyntApp.c: 93: retVal = GetIntFromUartData(10, data);
  3322  001824  C08A  F066         	movff	UpdateSynthFreq@data,GetIntFromUartData@data
  3323  001828  C08B  F067         	movff	UpdateSynthFreq@data+1,GetIntFromUartData@data+1
  3324  00182C  0E0A               	movlw	10
  3325  00182E  EC84  F00E         	call	_GetIntFromUartData
  3326  001832  EE20  F08D         	lfsr	2,UpdateSynthFreq@retVal
  3327  001836  0E07               	movlw	7
  3328  001838                     u8521:
  3329  001838  CFEB FFDB          	movff	plusw0,plusw2
  3330  00183C  06E8               	decf	wreg,f,c
  3331  00183E  E2FC               	bc	u8521
  3332                           
  3333                           ;SyntApp.c: 94: if(retVal.con == 0xb)
  3334  001840  0E0B               	movlw	11
  3335  001842  0100               	movlb	0	; () banked
  3336  001844  1991               	xorwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3337  001846  1192               	iorwf	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3338  001848  1193               	iorwf	(UpdateSynthFreq@retVal+6)& (0+255),w,b
  3339  00184A  1194               	iorwf	(UpdateSynthFreq@retVal+7)& (0+255),w,b
  3340  00184C  A4D8               	btfss	status,2,c
  3341  00184E  D03C               	goto	l523
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;SyntApp.c: 95: {
  3345                           ;SyntApp.c: 96: if(cType == SYNTH_TX)
  3346  001850  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3347  001852  A4D8               	btfss	status,2,c
  3348  001854  D01A               	goto	l524
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;SyntApp.c: 97: {
  3352                           ;SyntApp.c: 98: StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[retVal.con], 4);
  3353  001856  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3354  00185A  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3355  00185E  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3356  001862  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3357  001866  0E35               	movlw	low _SYNTH_ADDRES
  3358  001868  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3359  00186A  6EF6               	movwf	tblptrl,c
  3360  00186C  0E06               	movlw	high _SYNTH_ADDRES
  3361  00186E  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3362  001870  6EF7               	movwf	tblptrh,c
  3363  001872                     	if	0	;There are less than 3 active tblptr bytes
  3364  001872                     	endif
  3365  001872  0008               	tblrd		*
  3366  001874  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3367  001878  0E00               	movlw	0
  3368  00187A  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3369  00187C  0E04               	movlw	4
  3370  00187E  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3371  001880  EC9E  F01E         	call	_StoreIntInEeprom	;wreg free
  3372                           
  3373                           ;SyntApp.c: 99: cntRegUpdateTx = 0;
  3374  001884  0E00               	movlw	0
  3375  001886  6E3A               	movwf	_cntRegUpdateTx,c
  3376                           
  3377                           ;SyntApp.c: 100: }
  3378  001888  0012               	return	
  3379  00188A                     l524:
  3380                           
  3381                           ;SyntApp.c: 101: else if(cType == SYNTH_RX)
  3382  00188A  0100               	movlb	0	; () banked
  3383  00188C  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3384  00188E  A4D8               	btfss	status,2,c
  3385  001890  0012               	return	
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;SyntApp.c: 102: {
  3389                           ;SyntApp.c: 103: StoreIntInEeprom(retVal.num, (0x20) | SYNTH_ADDRES[retVal.con], 4);
  3390  001892  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3391  001896  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3392  00189A  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3393  00189E  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3394  0018A2  0E35               	movlw	low _SYNTH_ADDRES
  3395  0018A4  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3396  0018A6  6EF6               	movwf	tblptrl,c
  3397  0018A8  0E06               	movlw	high _SYNTH_ADDRES
  3398  0018AA  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3399  0018AC  6EF7               	movwf	tblptrh,c
  3400  0018AE                     	if	0	;There are less than 3 active tblptr bytes
  3401  0018AE                     	endif
  3402  0018AE  0008               	tblrd		*
  3403  0018B0  50F5               	movf	tablat,w,c
  3404  0018B2  0920               	iorlw	32
  3405  0018B4  6E25               	movwf	StoreIntInEeprom@address,c
  3406  0018B6  0E00               	movlw	0
  3407  0018B8  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3408  0018BA  0E04               	movlw	4
  3409  0018BC  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3410  0018BE  EC9E  F01E         	call	_StoreIntInEeprom	;wreg free
  3411                           
  3412                           ;SyntApp.c: 104: cntRegUpdateRx = 0;
  3413  0018C2  0E00               	movlw	0
  3414  0018C4  6E39               	movwf	_cntRegUpdateRx,c
  3415                           
  3416                           ;SyntApp.c: 105: }
  3417                           ;SyntApp.c: 106: }
  3418  0018C6  0012               	return	
  3419  0018C8                     l523:
  3420                           
  3421                           ;SyntApp.c: 107: else
  3422                           ;SyntApp.c: 108: {
  3423                           ;SyntApp.c: 109: if(cType == SYNTH_TX)
  3424  0018C8  0100               	movlb	0	; () banked
  3425  0018CA  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3426  0018CC  A4D8               	btfss	status,2,c
  3427  0018CE  D040               	goto	l528
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;SyntApp.c: 110: {
  3431                           ;SyntApp.c: 111: if(retVal.con == 0xa)
  3432  0018D0  0E0A               	movlw	10
  3433  0018D2  1991               	xorwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3434  0018D4  1192               	iorwf	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3435  0018D6  1193               	iorwf	(UpdateSynthFreq@retVal+6)& (0+255),w,b
  3436  0018D8  1194               	iorwf	(UpdateSynthFreq@retVal+7)& (0+255),w,b
  3437  0018DA  A4D8               	btfss	status,2,c
  3438  0018DC  D002               	goto	l529
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;SyntApp.c: 112: {
  3442                           ;SyntApp.c: 113: cntRegUpdateTx = 0;
  3443  0018DE  0E00               	movlw	0
  3444  0018E0  6E3A               	movwf	_cntRegUpdateTx,c
  3445  0018E2                     l529:
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;SyntApp.c: 114: }
  3449                           ;SyntApp.c: 115: if(cntRegUpdateTx < 0x9)
  3450                           
  3451                           ; BSR set to: 0
  3452  0018E2  0E09               	movlw	9
  3453  0018E4  603A               	cpfslt	_cntRegUpdateTx,c
  3454  0018E6  D02C               	goto	l530
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;SyntApp.c: 116: {
  3458                           ;SyntApp.c: 117: SWSPI_send_word(cType, retVal.num, 3);
  3459  0018E8  C08D  F029         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3460  0018EC  C08E  F02A         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3461  0018F0  C08F  F02B         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3462  0018F4  C090  F02C         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3463  0018F8  0E03               	movlw	3
  3464  0018FA  6E2D               	movwf	SWSPI_send_word@dataSize,c
  3465  0018FC  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3466  0018FE  ECA6  F017         	call	_SWSPI_send_word
  3467                           
  3468                           ;SyntApp.c: 118: StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[retVal.con], 4);
  3469  001902  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3470  001906  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3471  00190A  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3472  00190E  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3473  001912  0E35               	movlw	low _SYNTH_ADDRES
  3474  001914  0100               	movlb	0	; () banked
  3475  001916  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3476  001918  6EF6               	movwf	tblptrl,c
  3477  00191A  0E06               	movlw	high _SYNTH_ADDRES
  3478  00191C  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3479  00191E  6EF7               	movwf	tblptrh,c
  3480  001920                     	if	0	;There are less than 3 active tblptr bytes
  3481  001920                     	endif
  3482  001920  0008               	tblrd		*
  3483  001922  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3484  001926  0E00               	movlw	0
  3485  001928  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3486  00192A  0E04               	movlw	4
  3487  00192C  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3488  00192E  EC9E  F01E         	call	_StoreIntInEeprom	;wreg free
  3489                           
  3490                           ;SyntApp.c: 119: cntRegUpdateTx++;
  3491  001932  2A3A               	incf	_cntRegUpdateTx,f,c
  3492                           
  3493                           ;SyntApp.c: 120: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_TX_
      +                          REG);
  3494  001934  0E48               	movlw	72
  3495  001936  6E24               	movwf	SendAckMessage@inRequest,c
  3496  001938  0E04               	movlw	4
  3497  00193A  EC17  F01D         	call	_SendAckMessage
  3498                           
  3499                           ;SyntApp.c: 121: }
  3500  00193E  0012               	return	
  3501  001940                     l530:
  3502                           
  3503                           ;SyntApp.c: 122: else
  3504                           ;SyntApp.c: 123: {
  3505                           ;SyntApp.c: 124: cntRegUpdateTx = 0;
  3506  001940  0E00               	movlw	0
  3507  001942  6E3A               	movwf	_cntRegUpdateTx,c
  3508                           
  3509                           ;SyntApp.c: 125: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3510  001944  0E42               	movlw	66
  3511  001946  6E24               	movwf	SendAckMessage@inRequest,c
  3512  001948  0E04               	movlw	4
  3513  00194A  EC17  F01D         	call	_SendAckMessage
  3514                           
  3515                           ;SyntApp.c: 126: }
  3516                           ;SyntApp.c: 127: }
  3517  00194E  0012               	return	
  3518  001950                     l528:
  3519                           
  3520                           ;SyntApp.c: 128: else if(cType == SYNTH_RX)
  3521  001950  0100               	movlb	0	; () banked
  3522  001952  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3523  001954  A4D8               	btfss	status,2,c
  3524  001956  0012               	return	
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;SyntApp.c: 129: {
  3528                           ;SyntApp.c: 130: if(retVal.con == 0xa)
  3529  001958  0E0A               	movlw	10
  3530  00195A  1991               	xorwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3531  00195C  1192               	iorwf	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3532  00195E  1193               	iorwf	(UpdateSynthFreq@retVal+6)& (0+255),w,b
  3533  001960  1194               	iorwf	(UpdateSynthFreq@retVal+7)& (0+255),w,b
  3534  001962  A4D8               	btfss	status,2,c
  3535  001964  D002               	goto	l534
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;SyntApp.c: 131: {
  3539                           ;SyntApp.c: 132: cntRegUpdateRx = 0;
  3540  001966  0E00               	movlw	0
  3541  001968  6E39               	movwf	_cntRegUpdateRx,c
  3542  00196A                     l534:
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;SyntApp.c: 133: }
  3546                           ;SyntApp.c: 134: if(cntRegUpdateRx < 0x9)
  3547                           
  3548                           ; BSR set to: 0
  3549  00196A  0E09               	movlw	9
  3550  00196C  6039               	cpfslt	_cntRegUpdateRx,c
  3551  00196E  D02D               	goto	l535
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;SyntApp.c: 135: {
  3555                           ;SyntApp.c: 136: SWSPI_send_word(cType, retVal.num, 3);
  3556  001970  C08D  F029         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3557  001974  C08E  F02A         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3558  001978  C08F  F02B         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3559  00197C  C090  F02C         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3560  001980  0E03               	movlw	3
  3561  001982  6E2D               	movwf	SWSPI_send_word@dataSize,c
  3562  001984  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3563  001986  ECA6  F017         	call	_SWSPI_send_word
  3564                           
  3565                           ;SyntApp.c: 137: StoreIntInEeprom(retVal.num, (0x20) | SYNTH_ADDRES[retVal.con], 4);
  3566  00198A  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3567  00198E  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3568  001992  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3569  001996  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3570  00199A  0E35               	movlw	low _SYNTH_ADDRES
  3571  00199C  0100               	movlb	0	; () banked
  3572  00199E  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3573  0019A0  6EF6               	movwf	tblptrl,c
  3574  0019A2  0E06               	movlw	high _SYNTH_ADDRES
  3575  0019A4  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3576  0019A6  6EF7               	movwf	tblptrh,c
  3577  0019A8                     	if	0	;There are less than 3 active tblptr bytes
  3578  0019A8                     	endif
  3579  0019A8  0008               	tblrd		*
  3580  0019AA  50F5               	movf	tablat,w,c
  3581  0019AC  0920               	iorlw	32
  3582  0019AE  6E25               	movwf	StoreIntInEeprom@address,c
  3583  0019B0  0E00               	movlw	0
  3584  0019B2  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3585  0019B4  0E04               	movlw	4
  3586  0019B6  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3587  0019B8  EC9E  F01E         	call	_StoreIntInEeprom	;wreg free
  3588                           
  3589                           ;SyntApp.c: 138: cntRegUpdateRx ++;
  3590  0019BC  2A39               	incf	_cntRegUpdateRx,f,c
  3591                           
  3592                           ;SyntApp.c: 139: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_RX_
      +                          REG);
  3593  0019BE  0E49               	movlw	73
  3594  0019C0  6E24               	movwf	SendAckMessage@inRequest,c
  3595  0019C2  0E04               	movlw	4
  3596  0019C4  EC17  F01D         	call	_SendAckMessage
  3597                           
  3598                           ;SyntApp.c: 140: }
  3599  0019C8  0012               	return	
  3600  0019CA                     l535:
  3601                           
  3602                           ;SyntApp.c: 141: else
  3603                           ;SyntApp.c: 142: {
  3604                           ;SyntApp.c: 143: cntRegUpdateRx = 0;
  3605  0019CA  0E00               	movlw	0
  3606  0019CC  6E39               	movwf	_cntRegUpdateRx,c
  3607                           
  3608                           ;SyntApp.c: 144: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3609  0019CE  0E43               	movlw	67
  3610  0019D0  6E24               	movwf	SendAckMessage@inRequest,c
  3611  0019D2  0E04               	movlw	4
  3612  0019D4  EC17  F01D         	call	_SendAckMessage
  3613  0019D8  0012               	return	
  3614  0019DA                     __end_of_UpdateSynthFreq:
  3615                           	opt stack 0
  3616                           tosu	equ	0xFFF
  3617                           tosh	equ	0xFFE
  3618                           tosl	equ	0xFFD
  3619                           pclath	equ	0xFFA
  3620                           tblptru	equ	0xFF8
  3621                           tblptrh	equ	0xFF7
  3622                           tblptrl	equ	0xFF6
  3623                           tablat	equ	0xFF5
  3624                           postinc0	equ	0xFEE
  3625                           plusw0	equ	0xFEB
  3626                           wreg	equ	0xFE8
  3627                           postdec1	equ	0xFE5
  3628                           fsr1l	equ	0xFE1
  3629                           indf2	equ	0xFDF
  3630                           postinc2	equ	0xFDE
  3631                           plusw2	equ	0xFDB
  3632                           fsr2h	equ	0xFDA
  3633                           fsr2l	equ	0xFD9
  3634                           status	equ	0xFD8
  3635                           
  3636 ;; *************** function _SynthReadData *****************
  3637 ;; Defined at:
  3638 ;;		line 185 in file "SyntApp.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  cType           1    wreg     enum E1
  3641 ;;  data            2  104[BANK0 ] PTR unsigned char 
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;  cType           1   52[BANK2 ] enum E1
  3644 ;;  data            1   29[BANK2 ] unsigned char 
  3645 ;;  TxMsg          29    0[BANK2 ] unsigned char [29]
  3646 ;;  eepromDataAr   20   32[BANK2 ] unsigned long [5]
  3647 ;;  byteNum         1   54[BANK2 ] unsigned char 
  3648 ;;  regNum          1   53[BANK2 ] unsigned char 
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3658 ;;      Params:         0       2       0       0       0       0       0
  3659 ;;      Locals:         0       0       0      55       0       0       0
  3660 ;;      Temps:          0       0       0       0       0       0       0
  3661 ;;      Totals:         0       2       0      55       0       0       0
  3662 ;;Total ram usage:       57 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:   10
  3665 ;; This function calls:
  3666 ;;		_ReadIntFromEeprom
  3667 ;;		_WriteUartMessage
  3668 ;;		_ZeroArray
  3669 ;;		_crc8
  3670 ;;		_make8
  3671 ;; This function is called by:
  3672 ;;		_GroupSynthesizers
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text10
  3677  00069E                     __ptext10:
  3678                           	opt stack 0
  3679  00069E                     _SynthReadData:
  3680                           	opt stack 18
  3681                           
  3682                           ;incstack = 0
  3683                           ;SynthReadData@cType stored from wreg
  3684  00069E  0102               	movlb	2	; () banked
  3685  0006A0  6F7A               	movwf	SynthReadData@cType& (0+255),b
  3686                           
  3687                           ;SyntApp.c: 187: uint32_t eepromDataArray[5];
  3688                           ;SyntApp.c: 188: ZeroArray(eepromDataArray, sizeof(eepromDataArray));
  3689  0006A2  0E66               	movlw	low SynthReadData@eepromDataArray
  3690  0006A4  6E20               	movwf	ZeroArray@array,c
  3691  0006A6  0E02               	movlw	high SynthReadData@eepromDataArray
  3692  0006A8  6E21               	movwf	ZeroArray@array+1,c
  3693  0006AA  0E00               	movlw	0
  3694  0006AC  6E23               	movwf	ZeroArray@size+1,c
  3695  0006AE  0E14               	movlw	20
  3696  0006B0  6E22               	movwf	ZeroArray@size,c
  3697  0006B2  ECBF  F020         	call	_ZeroArray	;wreg free
  3698                           
  3699                           ;SyntApp.c: 189: uint8_t regNum = 0, byteNum = 0;
  3700  0006B6  0E00               	movlw	0
  3701  0006B8  0102               	movlb	2	; () banked
  3702  0006BA  6F7B               	movwf	SynthReadData@regNum& (0+255),b
  3703                           
  3704                           ; BSR set to: 2
  3705  0006BC  0E00               	movlw	0
  3706  0006BE  6F7C               	movwf	SynthReadData@byteNum& (0+255),b
  3707                           
  3708                           ;SyntApp.c: 190: char TxMsg[5 * 5 + 2 + 1 + 1];
  3709                           ;SyntApp.c: 191: ZeroArray(TxMsg, 5 * 5 + 2 + 1 + 1);
  3710  0006C0  0E46               	movlw	low SynthReadData@TxMsg
  3711  0006C2  6E20               	movwf	ZeroArray@array,c
  3712  0006C4  0E02               	movlw	high SynthReadData@TxMsg
  3713  0006C6  6E21               	movwf	ZeroArray@array+1,c
  3714  0006C8  0E00               	movlw	0
  3715  0006CA  6E23               	movwf	ZeroArray@size+1,c
  3716  0006CC  0E1D               	movlw	29
  3717  0006CE  6E22               	movwf	ZeroArray@size,c
  3718  0006D0  ECBF  F020         	call	_ZeroArray	;wreg free
  3719                           
  3720                           ;SyntApp.c: 194: TxMsg[(0)] = (0x24);
  3721  0006D4  0E24               	movlw	36
  3722  0006D6  0102               	movlb	2	; () banked
  3723  0006D8  6F46               	movwf	SynthReadData@TxMsg& (0+255),b
  3724                           
  3725                           ; BSR set to: 2
  3726                           ;SyntApp.c: 195: TxMsg[(1)] = SYNTH_MSG;
  3727  0006DA  0E04               	movlw	4
  3728  0006DC  6F47               	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  3729                           
  3730                           ; BSR set to: 2
  3731                           ;SyntApp.c: 196: TxMsg[(3)] = 5 * 5 + 2 - (0x4);
  3732  0006DE  0E17               	movlw	23
  3733  0006E0  6F49               	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  3734                           
  3735                           ; BSR set to: 2
  3736                           ;SyntApp.c: 198: if(cType == SYNTH_TX)
  3737  0006E2  517A               	movf	SynthReadData@cType& (0+255),w,b
  3738  0006E4  A4D8               	btfss	status,2,c
  3739  0006E6  D064               	goto	l550
  3740                           
  3741                           ; BSR set to: 2
  3742                           ;SyntApp.c: 199: {
  3743                           ;SyntApp.c: 200: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  3744  0006E8  0E47               	movlw	71
  3745  0006EA  6F48               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3746                           
  3747                           ; BSR set to: 2
  3748                           ;SyntApp.c: 201: eepromDataArray[0] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0], 4);
  3749  0006EC  0E00               	movlw	0
  3750  0006EE  0100               	movlb	0	; () banked
  3751  0006F0  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3752  0006F2  0E04               	movlw	4
  3753  0006F4  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3754  0006F6  0E35               	movlw	low _SYNTH_ADDRES
  3755  0006F8  6EF6               	movwf	tblptrl,c
  3756  0006FA                     	if	1	;There is more than 1 active tblptr byte
  3757  0006FA  0E06               	movlw	high _SYNTH_ADDRES
  3758  0006FC  6EF7               	movwf	tblptrh,c
  3759  0006FE                     	endif
  3760  0006FE                     	if	0	;There are less than 3 active tblptr bytes
  3761  0006FE                     	endif
  3762  0006FE  0008               	tblrd		*
  3763  000700  50F5               	movf	tablat,w,c
  3764  000702  ECD7  F00F         	call	_ReadIntFromEeprom
  3765  000706  C0B1  F266         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3766  00070A  C0B2  F267         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3767  00070E  C0B3  F268         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3768  000712  C0B4  F269         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3769                           
  3770                           ;SyntApp.c: 202: eepromDataArray[1] = ReadIntFromEeprom((0) | SYNTH_ADDRES[1], 4);
  3771  000716  0E00               	movlw	0
  3772  000718  0100               	movlb	0	; () banked
  3773  00071A  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3774  00071C  0E04               	movlw	4
  3775  00071E  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3776  000720  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3777  000722  6EF6               	movwf	tblptrl,c
  3778  000724  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3779  000726  6EF7               	movwf	tblptrh,c
  3780  000728                     	if	0	;tblptru may be non-zero
  3781  000728                     	endif
  3782  000728                     	if	0	;tblptru may be non-zero
  3783  000728                     	endif
  3784  000728  0008               	tblrd		*
  3785  00072A  50F5               	movf	tablat,w,c
  3786  00072C  ECD7  F00F         	call	_ReadIntFromEeprom
  3787  000730  C0B1  F26A         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3788  000734  C0B2  F26B         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3789  000738  C0B3  F26C         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3790  00073C  C0B4  F26D         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3791                           
  3792                           ;SyntApp.c: 203: eepromDataArray[2] = ReadIntFromEeprom((0) | SYNTH_ADDRES[2], 4);
  3793  000740  0E00               	movlw	0
  3794  000742  0100               	movlb	0	; () banked
  3795  000744  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3796  000746  0E04               	movlw	4
  3797  000748  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3798  00074A  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3799  00074C  6EF6               	movwf	tblptrl,c
  3800  00074E  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3801  000750  6EF7               	movwf	tblptrh,c
  3802  000752                     	if	0	;tblptru may be non-zero
  3803  000752                     	endif
  3804  000752                     	if	0	;tblptru may be non-zero
  3805  000752                     	endif
  3806  000752  0008               	tblrd		*
  3807  000754  50F5               	movf	tablat,w,c
  3808  000756  ECD7  F00F         	call	_ReadIntFromEeprom
  3809  00075A  C0B1  F26E         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3810  00075E  C0B2  F26F         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3811  000762  C0B3  F270         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3812  000766  C0B4  F271         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3813                           
  3814                           ;SyntApp.c: 204: eepromDataArray[3] = ReadIntFromEeprom((0) | SYNTH_ADDRES[4], 4);
  3815  00076A  0E00               	movlw	0
  3816  00076C  0100               	movlb	0	; () banked
  3817  00076E  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3818  000770  0E04               	movlw	4
  3819  000772  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3820  000774  0E39               	movlw	low (_SYNTH_ADDRES+4)
  3821  000776  6EF6               	movwf	tblptrl,c
  3822  000778  0E06               	movlw	high (_SYNTH_ADDRES+4)
  3823  00077A  6EF7               	movwf	tblptrh,c
  3824  00077C                     	if	0	;tblptru may be non-zero
  3825  00077C                     	endif
  3826  00077C                     	if	0	;tblptru may be non-zero
  3827  00077C                     	endif
  3828  00077C  0008               	tblrd		*
  3829  00077E  50F5               	movf	tablat,w,c
  3830  000780  ECD7  F00F         	call	_ReadIntFromEeprom
  3831  000784  C0B1  F272         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+12
  3832  000788  C0B2  F273         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+13
  3833  00078C  C0B3  F274         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+14
  3834  000790  C0B4  F275         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+15
  3835                           
  3836                           ;SyntApp.c: 205: eepromDataArray[4] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0xb], 4);
  3837  000794  0E00               	movlw	0
  3838  000796  0100               	movlb	0	; () banked
  3839  000798  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3840  00079A  0E04               	movlw	4
  3841  00079C  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3842  00079E  0E40               	movlw	low (_SYNTH_ADDRES+11)
  3843  0007A0  6EF6               	movwf	tblptrl,c
  3844  0007A2  0E06               	movlw	high (_SYNTH_ADDRES+11)
  3845  0007A4  6EF7               	movwf	tblptrh,c
  3846  0007A6                     	if	0	;tblptru may be non-zero
  3847  0007A6                     	endif
  3848  0007A6                     	if	0	;tblptru may be non-zero
  3849  0007A6                     	endif
  3850  0007A6  0008               	tblrd		*
  3851  0007A8  50F5               	movf	tablat,w,c
  3852  0007AA  ECD7  F00F         	call	_ReadIntFromEeprom
  3853  0007AE  D06C               	goto	L2
  3854  0007B0                     l550:
  3855                           
  3856                           ;SyntApp.c: 207: else if (cType == SYNTH_RX)
  3857  0007B0  0102               	movlb	2	; () banked
  3858  0007B2  057A               	decf	SynthReadData@cType& (0+255),w,b
  3859  0007B4  A4D8               	btfss	status,2,c
  3860  0007B6  D070               	goto	l552
  3861                           
  3862                           ; BSR set to: 2
  3863                           ;SyntApp.c: 208: {
  3864                           ;SyntApp.c: 209: TxMsg[(2)] = SYNTH_UP_READ_DATA;
  3865  0007B8  0E46               	movlw	70
  3866  0007BA  6F48               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3867                           
  3868                           ; BSR set to: 2
  3869                           ;SyntApp.c: 210: eepromDataArray[0] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0], 4);
  3870  0007BC  0E00               	movlw	0
  3871  0007BE  0100               	movlb	0	; () banked
  3872  0007C0  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3873  0007C2  0E04               	movlw	4
  3874  0007C4  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3875  0007C6  0E35               	movlw	low _SYNTH_ADDRES
  3876  0007C8  6EF6               	movwf	tblptrl,c
  3877  0007CA                     	if	1	;There is more than 1 active tblptr byte
  3878  0007CA  0E06               	movlw	high _SYNTH_ADDRES
  3879  0007CC  6EF7               	movwf	tblptrh,c
  3880  0007CE                     	endif
  3881  0007CE                     	if	0	;There are less than 3 active tblptr bytes
  3882  0007CE                     	endif
  3883  0007CE  0008               	tblrd		*
  3884  0007D0  50F5               	movf	tablat,w,c
  3885  0007D2  0920               	iorlw	32
  3886  0007D4  ECD7  F00F         	call	_ReadIntFromEeprom
  3887  0007D8  C0B1  F266         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3888  0007DC  C0B2  F267         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3889  0007E0  C0B3  F268         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3890  0007E4  C0B4  F269         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3891                           
  3892                           ;SyntApp.c: 211: eepromDataArray[1] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[1], 4);
  3893  0007E8  0E00               	movlw	0
  3894  0007EA  0100               	movlb	0	; () banked
  3895  0007EC  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3896  0007EE  0E04               	movlw	4
  3897  0007F0  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3898  0007F2  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3899  0007F4  6EF6               	movwf	tblptrl,c
  3900  0007F6  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3901  0007F8  6EF7               	movwf	tblptrh,c
  3902  0007FA                     	if	0	;tblptru may be non-zero
  3903  0007FA                     	endif
  3904  0007FA                     	if	0	;tblptru may be non-zero
  3905  0007FA                     	endif
  3906  0007FA  0008               	tblrd		*
  3907  0007FC  50F5               	movf	tablat,w,c
  3908  0007FE  0920               	iorlw	32
  3909  000800  ECD7  F00F         	call	_ReadIntFromEeprom
  3910  000804  C0B1  F26A         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3911  000808  C0B2  F26B         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3912  00080C  C0B3  F26C         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3913  000810  C0B4  F26D         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3914                           
  3915                           ;SyntApp.c: 212: eepromDataArray[2] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[2], 4);
  3916  000814  0E00               	movlw	0
  3917  000816  0100               	movlb	0	; () banked
  3918  000818  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3919  00081A  0E04               	movlw	4
  3920  00081C  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3921  00081E  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3922  000820  6EF6               	movwf	tblptrl,c
  3923  000822  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3924  000824  6EF7               	movwf	tblptrh,c
  3925  000826                     	if	0	;tblptru may be non-zero
  3926  000826                     	endif
  3927  000826                     	if	0	;tblptru may be non-zero
  3928  000826                     	endif
  3929  000826  0008               	tblrd		*
  3930  000828  50F5               	movf	tablat,w,c
  3931  00082A  0920               	iorlw	32
  3932  00082C  ECD7  F00F         	call	_ReadIntFromEeprom
  3933  000830  C0B1  F26E         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3934  000834  C0B2  F26F         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3935  000838  C0B3  F270         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3936  00083C  C0B4  F271         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3937                           
  3938                           ;SyntApp.c: 213: eepromDataArray[3] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[4], 4);
  3939  000840  0E00               	movlw	0
  3940  000842  0100               	movlb	0	; () banked
  3941  000844  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3942  000846  0E04               	movlw	4
  3943  000848  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3944  00084A  0E39               	movlw	low (_SYNTH_ADDRES+4)
  3945  00084C  6EF6               	movwf	tblptrl,c
  3946  00084E  0E06               	movlw	high (_SYNTH_ADDRES+4)
  3947  000850  6EF7               	movwf	tblptrh,c
  3948  000852                     	if	0	;tblptru may be non-zero
  3949  000852                     	endif
  3950  000852                     	if	0	;tblptru may be non-zero
  3951  000852                     	endif
  3952  000852  0008               	tblrd		*
  3953  000854  50F5               	movf	tablat,w,c
  3954  000856  0920               	iorlw	32
  3955  000858  ECD7  F00F         	call	_ReadIntFromEeprom
  3956  00085C  C0B1  F272         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+12
  3957  000860  C0B2  F273         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+13
  3958  000864  C0B3  F274         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+14
  3959  000868  C0B4  F275         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+15
  3960                           
  3961                           ;SyntApp.c: 214: eepromDataArray[4] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0xb], 4);
  3962  00086C  0E00               	movlw	0
  3963  00086E  0100               	movlb	0	; () banked
  3964  000870  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3965  000872  0E04               	movlw	4
  3966  000874  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3967  000876  0E40               	movlw	low (_SYNTH_ADDRES+11)
  3968  000878  6EF6               	movwf	tblptrl,c
  3969  00087A  0E06               	movlw	high (_SYNTH_ADDRES+11)
  3970  00087C  6EF7               	movwf	tblptrh,c
  3971  00087E                     	if	0	;tblptru may be non-zero
  3972  00087E                     	endif
  3973  00087E                     	if	0	;tblptru may be non-zero
  3974  00087E                     	endif
  3975  00087E  0008               	tblrd		*
  3976  000880  50F5               	movf	tablat,w,c
  3977  000882  0920               	iorlw	32
  3978  000884  ECD7  F00F         	call	_ReadIntFromEeprom
  3979  000888                     L2:
  3980  000888  C0B1  F276         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+16
  3981  00088C  C0B2  F277         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+17
  3982  000890  C0B3  F278         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+18
  3983  000894  C0B4  F279         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+19
  3984  000898                     l552:
  3985                           
  3986                           ;SyntApp.c: 215: }
  3987                           ;SyntApp.c: 217: for(regNum = 0; regNum < 5; regNum++)
  3988  000898  0E00               	movlw	0
  3989  00089A  0102               	movlb	2	; () banked
  3990  00089C  6F7B               	movwf	SynthReadData@regNum& (0+255),b
  3991  00089E                     l8544:
  3992                           
  3993                           ; BSR set to: 2
  3994  00089E  0E04               	movlw	4
  3995  0008A0  657B               	cpfsgt	SynthReadData@regNum& (0+255),b
  3996  0008A2  D001               	goto	l553
  3997  0008A4  D032               	goto	u8750
  3998  0008A6                     l553:
  3999                           
  4000                           ; BSR set to: 2
  4001                           ;SyntApp.c: 218: {
  4002                           ;SyntApp.c: 219: for(byteNum = 0; byteNum < (5); byteNum++)
  4003                           
  4004                           ; BSR set to: 2
  4005  0008A6  0E00               	movlw	0
  4006  0008A8  6F7C               	movwf	SynthReadData@byteNum& (0+255),b
  4007  0008AA                     l8550:
  4008                           
  4009                           ; BSR set to: 2
  4010  0008AA  0E04               	movlw	4
  4011  0008AC  657C               	cpfsgt	SynthReadData@byteNum& (0+255),b
  4012  0008AE  D001               	goto	l555
  4013  0008B0  D02A               	goto	u8740
  4014  0008B2                     l555:
  4015                           
  4016                           ; BSR set to: 2
  4017                           ;SyntApp.c: 220: {
  4018                           ;SyntApp.c: 221: uint8_t data = make8(eepromDataArray[regNum], byteNum);
  4019                           
  4020                           ; BSR set to: 2
  4021  0008B2  517B               	movf	SynthReadData@regNum& (0+255),w,b
  4022  0008B4  0D04               	mullw	4
  4023  0008B6  0E66               	movlw	low SynthReadData@eepromDataArray
  4024  0008B8  24F3               	addwf	prodl,w,c
  4025  0008BA  6ED9               	movwf	fsr2l,c
  4026  0008BC  0E02               	movlw	high SynthReadData@eepromDataArray
  4027  0008BE  20F4               	addwfc	prodh,w,c
  4028  0008C0  6EDA               	movwf	fsr2h,c
  4029  0008C2  CFDE F018          	movff	postinc2,make8@data
  4030  0008C6  CFDE F019          	movff	postinc2,make8@data+1
  4031  0008CA  CFDE F01A          	movff	postinc2,make8@data+2
  4032  0008CE  CFDE F01B          	movff	postinc2,make8@data+3
  4033  0008D2  C27C  F01C         	movff	SynthReadData@byteNum,make8@dataLocation
  4034  0008D6  ECB9  F01B         	call	_make8	;wreg free
  4035  0008DA  0102               	movlb	2	; () banked
  4036  0008DC  6F63               	movwf	SynthReadData@data_987& (0+255),b
  4037                           
  4038                           ; BSR set to: 2
  4039                           ;SyntApp.c: 222: TxMsg[(0x4) + (5)*regNum + byteNum] = data;
  4040  0008DE  517B               	movf	SynthReadData@regNum& (0+255),w,b
  4041  0008E0  0D05               	mullw	5
  4042  0008E2  517C               	movf	SynthReadData@byteNum& (0+255),w,b
  4043  0008E4  26F3               	addwf	prodl,f,c
  4044  0008E6  0E00               	movlw	0
  4045  0008E8  22F4               	addwfc	prodh,f,c
  4046  0008EA  0E04               	movlw	4
  4047  0008EC  26F3               	addwf	prodl,f,c
  4048  0008EE  0E00               	movlw	0
  4049  0008F0  22F4               	addwfc	prodh,f,c
  4050  0008F2  0E46               	movlw	low SynthReadData@TxMsg
  4051  0008F4  24F3               	addwf	prodl,w,c
  4052  0008F6  6ED9               	movwf	fsr2l,c
  4053  0008F8  0E02               	movlw	high SynthReadData@TxMsg
  4054  0008FA  20F4               	addwfc	prodh,w,c
  4055  0008FC  6EDA               	movwf	fsr2h,c
  4056  0008FE  C263  FFDF         	movff	SynthReadData@data_987,indf2
  4057                           
  4058                           ; BSR set to: 2
  4059  000902  2B7C               	incf	SynthReadData@byteNum& (0+255),f,b
  4060  000904  D7D2               	goto	l8550
  4061  000906                     u8740:
  4062                           
  4063                           ; BSR set to: 2
  4064                           
  4065                           ; BSR set to: 2
  4066  000906  2B7B               	incf	SynthReadData@regNum& (0+255),f,b
  4067  000908  D7CA               	goto	l8544
  4068  00090A                     u8750:
  4069                           
  4070                           ; BSR set to: 2
  4071                           ;SyntApp.c: 223: }
  4072                           ;SyntApp.c: 224: }
  4073                           ;SyntApp.c: 226: TxMsg[5 * 5 + 2] = cType == SYNTH_TX ? SynthTxOper : SynthRxOper;
  4074                           
  4075                           ; BSR set to: 2
  4076  00090A  517A               	movf	SynthReadData@cType& (0+255),w,b
  4077  00090C  B4D8               	btfsc	status,2,c
  4078  00090E  D003               	goto	l558
  4079                           
  4080                           ; BSR set to: 2
  4081  000910  C044  F264         	movff	_SynthRxOper,_SynthReadData$988
  4082  000914  D002               	goto	L1
  4083  000916                     l558:
  4084                           
  4085                           ; BSR set to: 2
  4086  000916  C045  F264         	movff	_SynthTxOper,_SynthReadData$988
  4087  00091A                     L1:
  4088  00091A  6B65               	clrf	(_SynthReadData$988+1)& (0+255),b
  4089                           
  4090                           ; BSR set to: 2
  4091  00091C  C264  F261         	movff	_SynthReadData$988,SynthReadData@TxMsg+27
  4092                           
  4093                           ; BSR set to: 2
  4094                           ;SyntApp.c: 227: TxMsg[5 * 5 + 2 + 1] = crc8(TxMsg, 5 * 5 + 2 + 1);
  4095  000920  0E46               	movlw	low SynthReadData@TxMsg
  4096  000922  6E18               	movwf	crc8@dataArray,c
  4097  000924  0E02               	movlw	high SynthReadData@TxMsg
  4098  000926  6E19               	movwf	crc8@dataArray+1,c
  4099  000928  0E00               	movlw	0
  4100  00092A  6E1B               	movwf	crc8@dataSize+1,c
  4101  00092C  0E1C               	movlw	28
  4102  00092E  6E1A               	movwf	crc8@dataSize,c
  4103  000930  EC40  F01D         	call	_crc8	;wreg free
  4104  000934  0102               	movlb	2	; () banked
  4105  000936  6F62               	movwf	(SynthReadData@TxMsg+28)& (0+255),b
  4106                           
  4107                           ; BSR set to: 2
  4108                           ;SyntApp.c: 228: WriteUartMessage(TxMsg, 5 * 5 + 2 + 1 + 1);
  4109  000938  0E46               	movlw	low SynthReadData@TxMsg
  4110  00093A  6E19               	movwf	WriteUartMessage@dataBuf,c
  4111  00093C  0E02               	movlw	high SynthReadData@TxMsg
  4112  00093E  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4113  000940  0E00               	movlw	0
  4114  000942  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4115  000944  0E1D               	movlw	29
  4116  000946  6E1B               	movwf	WriteUartMessage@dataSize,c
  4117  000948  ECF2  F01E         	call	_WriteUartMessage	;wreg free
  4118  00094C  0012               	return		;funcret
  4119  00094E                     __end_of_SynthReadData:
  4120                           	opt stack 0
  4121                           tosu	equ	0xFFF
  4122                           tosh	equ	0xFFE
  4123                           tosl	equ	0xFFD
  4124                           pclath	equ	0xFFA
  4125                           tblptru	equ	0xFF8
  4126                           tblptrh	equ	0xFF7
  4127                           tblptrl	equ	0xFF6
  4128                           tablat	equ	0xFF5
  4129                           prodh	equ	0xFF4
  4130                           prodl	equ	0xFF3
  4131                           postinc0	equ	0xFEE
  4132                           plusw0	equ	0xFEB
  4133                           wreg	equ	0xFE8
  4134                           postdec1	equ	0xFE5
  4135                           fsr1l	equ	0xFE1
  4136                           indf2	equ	0xFDF
  4137                           postinc2	equ	0xFDE
  4138                           plusw2	equ	0xFDB
  4139                           fsr2h	equ	0xFDA
  4140                           fsr2l	equ	0xFD9
  4141                           status	equ	0xFD8
  4142                           
  4143 ;; *************** function _SetSynthOper *****************
  4144 ;; Defined at:
  4145 ;;		line 154 in file "SyntApp.c"
  4146 ;; Parameters:    Size  Location     Type
  4147 ;;  cType           1    wreg     enum E1
  4148 ;; Auto vars:     Size  Location     Type
  4149 ;;  cType           1  111[BANK0 ] enum E1
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  1    wreg      void 
  4152 ;; Registers used:
  4153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4159 ;;      Params:         0       0       0       0       0       0       0
  4160 ;;      Locals:         0       1       0       0       0       0       0
  4161 ;;      Temps:          0       0       0       0       0       0       0
  4162 ;;      Totals:         0       1       0       0       0       0       0
  4163 ;;Total ram usage:        1 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; Hardware stack levels required when called:   11
  4166 ;; This function calls:
  4167 ;;		_InitSynth
  4168 ;;		_SendAckMessage
  4169 ;;		_SwSpi_Set_CE_Pin
  4170 ;; This function is called by:
  4171 ;;		_GroupSynthesizers
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           	psect	text11
  4176  003340                     __ptext11:
  4177                           	opt stack 0
  4178  003340                     _SetSynthOper:
  4179                           	opt stack 17
  4180                           
  4181                           ;incstack = 0
  4182                           ;SetSynthOper@cType stored from wreg
  4183  003340  0100               	movlb	0	; () banked
  4184  003342  6FCF               	movwf	SetSynthOper@cType& (0+255),b
  4185                           
  4186                           ;SyntApp.c: 156: if(cType == SYNTH_TX)
  4187  003344  0100               	movlb	0	; () banked
  4188  003346  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4189  003348  A4D8               	btfss	status,2,c
  4190  00334A  D01A               	goto	l540
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;SyntApp.c: 157: {
  4194                           ;SyntApp.c: 158: SynthTxOper = !SynthTxOper;
  4195  00334C  5045               	movf	_SynthTxOper,w,c
  4196  00334E  A4D8               	btfss	status,2,c
  4197  003350  D002               	goto	u8630
  4198  003352  0E01               	movlw	1
  4199  003354  D001               	goto	u8640
  4200  003356                     u8630:
  4201  003356  0E00               	movlw	0
  4202  003358                     u8640:
  4203  003358  6E45               	movwf	_SynthTxOper,c
  4204                           
  4205                           ;SyntApp.c: 159: if(SynthTxOper)
  4206  00335A  5045               	movf	_SynthTxOper,w,c
  4207  00335C  B4D8               	btfsc	status,2,c
  4208  00335E  D004               	goto	l541
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;SyntApp.c: 160: {
  4212                           ;SyntApp.c: 161: InitSynth(cType);
  4213  003360  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4214  003362  ECF4  F005         	call	_InitSynth
  4215                           
  4216                           ;SyntApp.c: 162: }
  4217  003366  D006               	goto	l542
  4218  003368                     l541:
  4219                           
  4220                           ;SyntApp.c: 163: else
  4221                           ;SyntApp.c: 164: {
  4222                           ;SyntApp.c: 165: SwSpi_Set_CE_Pin(cType, 0);
  4223  003368  0E00               	movlw	0
  4224  00336A  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4225  00336C  0100               	movlb	0	; () banked
  4226  00336E  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4227  003370  EC2A  F01E         	call	_SwSpi_Set_CE_Pin
  4228  003374                     l542:
  4229                           
  4230                           ;SyntApp.c: 166: }
  4231                           ;SyntApp.c: 167: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  4232  003374  0E45               	movlw	69
  4233  003376  6E24               	movwf	SendAckMessage@inRequest,c
  4234  003378  0E04               	movlw	4
  4235  00337A  EC17  F01D         	call	_SendAckMessage
  4236                           
  4237                           ;SyntApp.c: 168: }
  4238  00337E  0012               	return	
  4239  003380                     l540:
  4240                           
  4241                           ;SyntApp.c: 169: else if (cType == SYNTH_RX)
  4242  003380  0100               	movlb	0	; () banked
  4243  003382  05CF               	decf	SetSynthOper@cType& (0+255),w,b
  4244  003384  A4D8               	btfss	status,2,c
  4245  003386  0012               	return	
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;SyntApp.c: 170: {
  4249                           ;SyntApp.c: 171: SynthRxOper = !SynthRxOper;
  4250  003388  5044               	movf	_SynthRxOper,w,c
  4251  00338A  A4D8               	btfss	status,2,c
  4252  00338C  D002               	goto	u8670
  4253  00338E  0E01               	movlw	1
  4254  003390  D001               	goto	u8680
  4255  003392                     u8670:
  4256  003392  0E00               	movlw	0
  4257  003394                     u8680:
  4258  003394  6E44               	movwf	_SynthRxOper,c
  4259                           
  4260                           ;SyntApp.c: 172: if(SynthRxOper)
  4261  003396  5044               	movf	_SynthRxOper,w,c
  4262  003398  B4D8               	btfsc	status,2,c
  4263  00339A  D004               	goto	l545
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;SyntApp.c: 173: {
  4267                           ;SyntApp.c: 174: InitSynth(cType);
  4268  00339C  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4269  00339E  ECF4  F005         	call	_InitSynth
  4270                           
  4271                           ;SyntApp.c: 175: }
  4272  0033A2  D006               	goto	l546
  4273  0033A4                     l545:
  4274                           
  4275                           ;SyntApp.c: 176: else
  4276                           ;SyntApp.c: 177: {
  4277                           ;SyntApp.c: 178: SwSpi_Set_CE_Pin(cType, 0);
  4278  0033A4  0E00               	movlw	0
  4279  0033A6  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4280  0033A8  0100               	movlb	0	; () banked
  4281  0033AA  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4282  0033AC  EC2A  F01E         	call	_SwSpi_Set_CE_Pin
  4283  0033B0                     l546:
  4284                           
  4285                           ;SyntApp.c: 179: }
  4286                           ;SyntApp.c: 180: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  4287  0033B0  0E44               	movlw	68
  4288  0033B2  6E24               	movwf	SendAckMessage@inRequest,c
  4289  0033B4  0E04               	movlw	4
  4290  0033B6  EC17  F01D         	call	_SendAckMessage
  4291  0033BA  0012               	return	
  4292  0033BC                     __end_of_SetSynthOper:
  4293                           	opt stack 0
  4294                           tosu	equ	0xFFF
  4295                           tosh	equ	0xFFE
  4296                           tosl	equ	0xFFD
  4297                           pclath	equ	0xFFA
  4298                           tblptru	equ	0xFF8
  4299                           tblptrh	equ	0xFF7
  4300                           tblptrl	equ	0xFF6
  4301                           tablat	equ	0xFF5
  4302                           prodh	equ	0xFF4
  4303                           prodl	equ	0xFF3
  4304                           postinc0	equ	0xFEE
  4305                           plusw0	equ	0xFEB
  4306                           wreg	equ	0xFE8
  4307                           postdec1	equ	0xFE5
  4308                           fsr1l	equ	0xFE1
  4309                           indf2	equ	0xFDF
  4310                           postinc2	equ	0xFDE
  4311                           plusw2	equ	0xFDB
  4312                           fsr2h	equ	0xFDA
  4313                           fsr2l	equ	0xFD9
  4314                           status	equ	0xFD8
  4315                           
  4316 ;; *************** function _GetMcuRunTime *****************
  4317 ;; Defined at:
  4318 ;;		line 80 in file "SystemStatus.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;		None
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;  idx             2   13[BANK0 ] int 
  4323 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  4324 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  1    wreg      void 
  4327 ;; Registers used:
  4328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4334 ;;      Params:         0       0       0       0       0       0       0
  4335 ;;      Locals:         0      15       0       0       0       0       0
  4336 ;;      Temps:          2       0       0       0       0       0       0
  4337 ;;      Totals:         2      15       0       0       0       0       0
  4338 ;;Total ram usage:       17 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    6
  4341 ;; This function calls:
  4342 ;;		_WriteUartMessage
  4343 ;;		___lldiv
  4344 ;;		___llmod
  4345 ;;		_crc8
  4346 ;; This function is called by:
  4347 ;;		_GroupStatusAndVersion
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           	psect	text12
  4352  0025BA                     __ptext12:
  4353                           	opt stack 0
  4354  0025BA                     _GetMcuRunTime:
  4355                           	opt stack 22
  4356                           
  4357                           ;SystemStatus.c: 83: char TxMsg[(0x4) + (0x4) + 1];
  4358                           ;SystemStatus.c: 86: TxMsg[(0)] = (0x24);
  4359                           
  4360                           ;incstack = 0
  4361  0025BA  0E24               	movlw	36
  4362  0025BC  0100               	movlb	0	; () banked
  4363  0025BE  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  4364                           
  4365                           ;SystemStatus.c: 87: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4366  0025C0  0E02               	movlw	2
  4367  0025C2  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  4368                           
  4369                           ;SystemStatus.c: 88: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  4370  0025C4  0E21               	movlw	33
  4371  0025C6  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  4372                           
  4373                           ;SystemStatus.c: 89: TxMsg[(3)] = (0x4);
  4374  0025C8  0E04               	movlw	4
  4375  0025CA  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;SystemStatus.c: 91: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  4379  0025CC  C128  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  4380  0025D0  C129  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  4381  0025D4  C12A  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  4382  0025D8  C12B  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  4383                           
  4384                           ;SystemStatus.c: 94: for(int idx = 0; idx < (0x4); idx++)
  4385  0025DC  0E00               	movlw	0
  4386  0025DE  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  4387  0025E0  0E00               	movlw	0
  4388  0025E2  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  4389  0025E4                     l8634:
  4390                           
  4391                           ; BSR set to: 0
  4392  0025E4  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  4393  0025E6  D006               	goto	l1522
  4394  0025E8  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  4395  0025EA  E142               	bnz	l8646
  4396  0025EC  0E04               	movlw	4
  4397  0025EE  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  4398  0025F0  B0D8               	btfsc	status,0,c
  4399  0025F2  D03E               	goto	u8800
  4400  0025F4                     l1522:
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;SystemStatus.c: 95: {
  4404                           ;SystemStatus.c: 96: TxMsg[(0x4) + idx] = tempRunTime % 10;
  4405                           
  4406                           ; BSR set to: 0
  4407  0025F4  0E04               	movlw	4
  4408  0025F6  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  4409  0025F8  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  4410  0025FA  0E00               	movlw	0
  4411  0025FC  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  4412  0025FE  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  4413  002600  0E60               	movlw	low GetMcuRunTime@TxMsg
  4414  002602  2425               	addwf	??_GetMcuRunTime,w,c
  4415  002604  6ED9               	movwf	fsr2l,c
  4416  002606  0E00               	movlw	high GetMcuRunTime@TxMsg
  4417  002608  2026               	addwfc	??_GetMcuRunTime+1,w,c
  4418  00260A  6EDA               	movwf	fsr2h,c
  4419  00260C  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  4420  002610  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  4421  002614  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  4422  002618  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  4423  00261C  0E0A               	movlw	10
  4424  00261E  6E1C               	movwf	___llmod@divisor,c
  4425  002620  0E00               	movlw	0
  4426  002622  6E1D               	movwf	___llmod@divisor+1,c
  4427  002624  0E00               	movlw	0
  4428  002626  6E1E               	movwf	___llmod@divisor+2,c
  4429  002628  0E00               	movlw	0
  4430  00262A  6E1F               	movwf	___llmod@divisor+3,c
  4431  00262C  ECF6  F01A         	call	___llmod	;wreg free
  4432  002630  5018               	movf	?___llmod,w,c
  4433  002632  6EDF               	movwf	indf2,c
  4434                           
  4435                           ;SystemStatus.c: 97: tempRunTime /= 10;
  4436  002634  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  4437  002638  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  4438  00263C  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  4439  002640  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  4440  002644  0E0A               	movlw	10
  4441  002646  6E1C               	movwf	___lldiv@divisor,c
  4442  002648  0E00               	movlw	0
  4443  00264A  6E1D               	movwf	___lldiv@divisor+1,c
  4444  00264C  0E00               	movlw	0
  4445  00264E  6E1E               	movwf	___lldiv@divisor+2,c
  4446  002650  0E00               	movlw	0
  4447  002652  6E1F               	movwf	___lldiv@divisor+3,c
  4448  002654  EC20  F019         	call	___lldiv	;wreg free
  4449  002658  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  4450  00265C  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  4451  002660  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  4452  002664  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  4453  002668  0100               	movlb	0	; () banked
  4454  00266A  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  4455  00266C  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  4456  00266E  D7BA               	goto	l8634
  4457  002670                     u8800:
  4458  002670                     l8646:
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;SystemStatus.c: 98: }
  4462                           ;SystemStatus.c: 100: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4463  002670  0E60               	movlw	low GetMcuRunTime@TxMsg
  4464  002672  6E18               	movwf	crc8@dataArray,c
  4465  002674  0E00               	movlw	high GetMcuRunTime@TxMsg
  4466  002676  6E19               	movwf	crc8@dataArray+1,c
  4467  002678  0E00               	movlw	0
  4468  00267A  6E1B               	movwf	crc8@dataSize+1,c
  4469  00267C  0E08               	movlw	8
  4470  00267E  6E1A               	movwf	crc8@dataSize,c
  4471  002680  EC40  F01D         	call	_crc8	;wreg free
  4472  002684  0100               	movlb	0	; () banked
  4473  002686  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;SystemStatus.c: 102: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4477  002688  0E60               	movlw	low GetMcuRunTime@TxMsg
  4478  00268A  6E19               	movwf	WriteUartMessage@dataBuf,c
  4479  00268C  0E00               	movlw	high GetMcuRunTime@TxMsg
  4480  00268E  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4481  002690  0E00               	movlw	0
  4482  002692  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4483  002694  0E09               	movlw	9
  4484  002696  6E1B               	movwf	WriteUartMessage@dataSize,c
  4485  002698  ECF2  F01E         	call	_WriteUartMessage	;wreg free
  4486  00269C  0012               	return		;funcret
  4487  00269E                     __end_of_GetMcuRunTime:
  4488                           	opt stack 0
  4489                           tosu	equ	0xFFF
  4490                           tosh	equ	0xFFE
  4491                           tosl	equ	0xFFD
  4492                           pclath	equ	0xFFA
  4493                           tblptru	equ	0xFF8
  4494                           tblptrh	equ	0xFF7
  4495                           tblptrl	equ	0xFF6
  4496                           tablat	equ	0xFF5
  4497                           prodh	equ	0xFF4
  4498                           prodl	equ	0xFF3
  4499                           postinc0	equ	0xFEE
  4500                           plusw0	equ	0xFEB
  4501                           wreg	equ	0xFE8
  4502                           postdec1	equ	0xFE5
  4503                           fsr1l	equ	0xFE1
  4504                           indf2	equ	0xFDF
  4505                           postinc2	equ	0xFDE
  4506                           plusw2	equ	0xFDB
  4507                           fsr2h	equ	0xFDA
  4508                           fsr2l	equ	0xFD9
  4509                           status	equ	0xFD8
  4510                           
  4511 ;; *************** function ___lldiv *****************
  4512 ;; Defined at:
  4513 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  dividend        4   23[COMRAM] unsigned long 
  4516 ;;  divisor         4   27[COMRAM] unsigned long 
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;  quotient        4   31[COMRAM] unsigned long 
  4519 ;;  counter         1   35[COMRAM] unsigned char 
  4520 ;; Return value:  Size  Location     Type
  4521 ;;                  4   23[COMRAM] unsigned long 
  4522 ;; Registers used:
  4523 ;;		wreg, status,2, status,0
  4524 ;; Tracked objects:
  4525 ;;		On entry : 0/0
  4526 ;;		On exit  : 0/0
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4529 ;;      Params:         8       0       0       0       0       0       0
  4530 ;;      Locals:         5       0       0       0       0       0       0
  4531 ;;      Temps:          0       0       0       0       0       0       0
  4532 ;;      Totals:        13       0       0       0       0       0       0
  4533 ;;Total ram usage:       13 bytes
  4534 ;; Hardware stack levels used:    1
  4535 ;; Hardware stack levels required when called:    4
  4536 ;; This function calls:
  4537 ;;		Nothing
  4538 ;; This function is called by:
  4539 ;;		_GetMcuRunTime
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text13
  4544  003240                     __ptext13:
  4545                           	opt stack 0
  4546  003240                     ___lldiv:
  4547                           	opt stack 23
  4548                           
  4549                           ;incstack = 0
  4550  003240  0E00               	movlw	0
  4551  003242  6E20               	movwf	___lldiv@quotient,c
  4552  003244  0E00               	movlw	0
  4553  003246  6E21               	movwf	___lldiv@quotient+1,c
  4554  003248  0E00               	movlw	0
  4555  00324A  6E22               	movwf	___lldiv@quotient+2,c
  4556  00324C  0E00               	movlw	0
  4557  00324E  6E23               	movwf	___lldiv@quotient+3,c
  4558  003250  501C               	movf	___lldiv@divisor,w,c
  4559  003252  101D               	iorwf	___lldiv@divisor+1,w,c
  4560  003254  101E               	iorwf	___lldiv@divisor+2,w,c
  4561  003256  101F               	iorwf	___lldiv@divisor+3,w,c
  4562  003258  B4D8               	btfsc	status,2,c
  4563  00325A  D02A               	goto	l1959
  4564  00325C  0E01               	movlw	1
  4565  00325E  6E24               	movwf	___lldiv@counter,c
  4566  003260  D006               	goto	l1954
  4567  003262  90D8               	bcf	status,0,c
  4568  003264  361C               	rlcf	___lldiv@divisor,f,c
  4569  003266  361D               	rlcf	___lldiv@divisor+1,f,c
  4570  003268  361E               	rlcf	___lldiv@divisor+2,f,c
  4571  00326A  361F               	rlcf	___lldiv@divisor+3,f,c
  4572  00326C  2A24               	incf	___lldiv@counter,f,c
  4573  00326E                     l1954:
  4574  00326E  AE1F               	btfss	___lldiv@divisor+3,7,c
  4575  003270  D7F8               	goto	l1955
  4576  003272                     u8270:
  4577  003272  90D8               	bcf	status,0,c
  4578  003274  3620               	rlcf	___lldiv@quotient,f,c
  4579  003276  3621               	rlcf	___lldiv@quotient+1,f,c
  4580  003278  3622               	rlcf	___lldiv@quotient+2,f,c
  4581  00327A  3623               	rlcf	___lldiv@quotient+3,f,c
  4582  00327C  501C               	movf	___lldiv@divisor,w,c
  4583  00327E  5C18               	subwf	___lldiv@dividend,w,c
  4584  003280  501D               	movf	___lldiv@divisor+1,w,c
  4585  003282  5819               	subwfb	___lldiv@dividend+1,w,c
  4586  003284  501E               	movf	___lldiv@divisor+2,w,c
  4587  003286  581A               	subwfb	___lldiv@dividend+2,w,c
  4588  003288  501F               	movf	___lldiv@divisor+3,w,c
  4589  00328A  581B               	subwfb	___lldiv@dividend+3,w,c
  4590  00328C  A0D8               	btfss	status,0,c
  4591  00328E  D009               	goto	l1958
  4592  003290  501C               	movf	___lldiv@divisor,w,c
  4593  003292  5E18               	subwf	___lldiv@dividend,f,c
  4594  003294  501D               	movf	___lldiv@divisor+1,w,c
  4595  003296  5A19               	subwfb	___lldiv@dividend+1,f,c
  4596  003298  501E               	movf	___lldiv@divisor+2,w,c
  4597  00329A  5A1A               	subwfb	___lldiv@dividend+2,f,c
  4598  00329C  501F               	movf	___lldiv@divisor+3,w,c
  4599  00329E  5A1B               	subwfb	___lldiv@dividend+3,f,c
  4600  0032A0  8020               	bsf	___lldiv@quotient,0,c
  4601  0032A2                     l1958:
  4602  0032A2  90D8               	bcf	status,0,c
  4603  0032A4  321F               	rrcf	___lldiv@divisor+3,f,c
  4604  0032A6  321E               	rrcf	___lldiv@divisor+2,f,c
  4605  0032A8  321D               	rrcf	___lldiv@divisor+1,f,c
  4606  0032AA  321C               	rrcf	___lldiv@divisor,f,c
  4607  0032AC  2E24               	decfsz	___lldiv@counter,f,c
  4608  0032AE  D7E1               	goto	u8270
  4609  0032B0                     l1959:
  4610  0032B0  C020  F018         	movff	___lldiv@quotient,?___lldiv
  4611  0032B4  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  4612  0032B8  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  4613  0032BC  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  4614  0032C0  0012               	return		;funcret
  4615  0032C2                     __end_of___lldiv:
  4616                           	opt stack 0
  4617                           tosu	equ	0xFFF
  4618                           tosh	equ	0xFFE
  4619                           tosl	equ	0xFFD
  4620                           pclath	equ	0xFFA
  4621                           tblptru	equ	0xFF8
  4622                           tblptrh	equ	0xFF7
  4623                           tblptrl	equ	0xFF6
  4624                           tablat	equ	0xFF5
  4625                           prodh	equ	0xFF4
  4626                           prodl	equ	0xFF3
  4627                           postinc0	equ	0xFEE
  4628                           plusw0	equ	0xFEB
  4629                           wreg	equ	0xFE8
  4630                           postdec1	equ	0xFE5
  4631                           fsr1l	equ	0xFE1
  4632                           indf2	equ	0xFDF
  4633                           postinc2	equ	0xFDE
  4634                           plusw2	equ	0xFDB
  4635                           fsr2h	equ	0xFDA
  4636                           fsr2l	equ	0xFD9
  4637                           status	equ	0xFD8
  4638                           
  4639 ;; *************** function _GetMcuFwVersion *****************
  4640 ;; Defined at:
  4641 ;;		line 14 in file "SystemStatus.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;		None
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;  TxMsg          18    4[BANK0 ] unsigned char [18]
  4646 ;;  compileData     4    0[BANK0 ] unsigned long 
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  1    wreg      void 
  4649 ;; Registers used:
  4650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4656 ;;      Params:         0       0       0       0       0       0       0
  4657 ;;      Locals:         0      26       0       0       0       0       0
  4658 ;;      Temps:          7       0       0       0       0       0       0
  4659 ;;      Totals:         7      26       0       0       0       0       0
  4660 ;;Total ram usage:       33 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    6
  4663 ;; This function calls:
  4664 ;;		_WriteUartMessage
  4665 ;;		_ZeroArray
  4666 ;;		___wmul
  4667 ;;		_crc8
  4668 ;; This function is called by:
  4669 ;;		_GroupStatusAndVersion
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           	psect	text14
  4674  00094E                     __ptext14:
  4675                           	opt stack 0
  4676  00094E                     _GetMcuFwVersion:
  4677                           	opt stack 22
  4678                           
  4679                           ;SystemStatus.c: 16: uint32_t compileData = 0x0;
  4680                           
  4681                           ;incstack = 0
  4682  00094E  0E00               	movlw	0
  4683  000950  0100               	movlb	0	; () banked
  4684  000952  6F60               	movwf	GetMcuFwVersion@compileData& (0+255),b
  4685  000954  0E00               	movlw	0
  4686  000956  6F61               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  4687  000958  0E00               	movlw	0
  4688  00095A  6F62               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  4689  00095C  0E00               	movlw	0
  4690  00095E  6F63               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;SystemStatus.c: 19: char TxMsg[(13) + (0x4) + 1];
  4694                           ;SystemStatus.c: 20: ZeroArray(TxMsg, (13) + (0x4) + 1);
  4695  000960  0E64               	movlw	low GetMcuFwVersion@TxMsg
  4696  000962  6E20               	movwf	ZeroArray@array,c
  4697  000964  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4698  000966  6E21               	movwf	ZeroArray@array+1,c
  4699  000968  0E00               	movlw	0
  4700  00096A  6E23               	movwf	ZeroArray@size+1,c
  4701  00096C  0E12               	movlw	18
  4702  00096E  6E22               	movwf	ZeroArray@size,c
  4703  000970  ECBF  F020         	call	_ZeroArray	;wreg free
  4704                           
  4705                           ;SystemStatus.c: 23: TxMsg[(0)] = (0x24);
  4706  000974  0E24               	movlw	36
  4707  000976  0100               	movlb	0	; () banked
  4708  000978  6F64               	movwf	GetMcuFwVersion@TxMsg& (0+255),b
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;SystemStatus.c: 24: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4712  00097A  0E02               	movlw	2
  4713  00097C  6F65               	movwf	(GetMcuFwVersion@TxMsg+1)& (0+255),b
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;SystemStatus.c: 25: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4717  00097E  0E22               	movlw	34
  4718  000980  6F66               	movwf	(GetMcuFwVersion@TxMsg+2)& (0+255),b
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;SystemStatus.c: 26: TxMsg[(3)] = (13);
  4722  000982  0E0D               	movlw	13
  4723  000984  6F67               	movwf	(GetMcuFwVersion@TxMsg+3)& (0+255),b
  4724                           
  4725                           ; BSR set to: 0
  4726                           ;SystemStatus.c: 29: TxMsg[(0x4) + 0] = (( ("Aug 14 2018"[ 7] - '0') * 1000 + ("Aug 14 2
      +                          018"[ 8] - '0') * 100 + ("Aug 14 2018"[ 9] - '0') * 10 + ("Aug 14 2018"[10] - '0') ) & 0
      +                          xFF00) >> 8;
  4727  000986  0ED0               	movlw	208
  4728  000988  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4729  00098A  0EFF               	movlw	255
  4730  00098C  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4731  00098E  0E97               	movlw	low (STR_1+7)
  4732  000990  6EF6               	movwf	tblptrl,c
  4733  000992  0E06               	movlw	high (STR_1+7)
  4734  000994  6EF7               	movwf	tblptrh,c
  4735  000996                     	if	0	;tblptru may be non-zero
  4736  000996                     	endif
  4737  000996                     	if	0	;tblptru may be non-zero
  4738  000996                     	endif
  4739  000996  0008               	tblrd		*
  4740  000998  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4741  00099C  0ED0               	movlw	208
  4742  00099E  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4743  0009A0  6E18               	movwf	___wmul@multiplier,c
  4744  0009A2  6A19               	clrf	___wmul@multiplier+1,c
  4745  0009A4  0EFF               	movlw	255
  4746  0009A6  2219               	addwfc	___wmul@multiplier+1,f,c
  4747  0009A8  0E03               	movlw	3
  4748  0009AA  6E1B               	movwf	___wmul@multiplicand+1,c
  4749  0009AC  0EE8               	movlw	232
  4750  0009AE  6E1A               	movwf	___wmul@multiplicand,c
  4751  0009B0  EC26  F020         	call	___wmul	;wreg free
  4752  0009B4  0E9A               	movlw	low (STR_1+10)
  4753  0009B6  6EF6               	movwf	tblptrl,c
  4754  0009B8  0E06               	movlw	high (STR_1+10)
  4755  0009BA  6EF7               	movwf	tblptrh,c
  4756  0009BC                     	if	0	;tblptru may be non-zero
  4757  0009BC                     	endif
  4758  0009BC                     	if	0	;tblptru may be non-zero
  4759  0009BC                     	endif
  4760  0009BC  0008               	tblrd		*
  4761  0009BE  50F5               	movf	tablat,w,c
  4762  0009C0  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4763  0009C2  6A28               	clrf	(??_GetMcuFwVersion+4)& (0+255),c
  4764  0009C4  5018               	movf	?___wmul,w,c
  4765  0009C6  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4766  0009C8  5019               	movf	?___wmul+1,w,c
  4767  0009CA  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4768  0009CC  0E98               	movlw	low (STR_1+8)
  4769  0009CE  6EF6               	movwf	tblptrl,c
  4770  0009D0  0E06               	movlw	high (STR_1+8)
  4771  0009D2  6EF7               	movwf	tblptrh,c
  4772  0009D4                     	if	0	;tblptru may be non-zero
  4773  0009D4                     	endif
  4774  0009D4                     	if	0	;tblptru may be non-zero
  4775  0009D4                     	endif
  4776  0009D4  0008               	tblrd		*
  4777  0009D6  CFF5 F029          	movff	tablat,??_GetMcuFwVersion+5
  4778  0009DA  0ED0               	movlw	208
  4779  0009DC  2429               	addwf	??_GetMcuFwVersion+5,w,c
  4780  0009DE  6E18               	movwf	___wmul@multiplier,c
  4781  0009E0  6A19               	clrf	___wmul@multiplier+1,c
  4782  0009E2  0EFF               	movlw	255
  4783  0009E4  2219               	addwfc	___wmul@multiplier+1,f,c
  4784  0009E6  0E00               	movlw	0
  4785  0009E8  6E1B               	movwf	___wmul@multiplicand+1,c
  4786  0009EA  0E64               	movlw	100
  4787  0009EC  6E1A               	movwf	___wmul@multiplicand,c
  4788  0009EE  EC26  F020         	call	___wmul	;wreg free
  4789  0009F2  5018               	movf	?___wmul,w,c
  4790  0009F4  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4791  0009F6  5019               	movf	?___wmul+1,w,c
  4792  0009F8  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4793  0009FA  0E99               	movlw	low (STR_1+9)
  4794  0009FC  6EF6               	movwf	tblptrl,c
  4795  0009FE  0E06               	movlw	high (STR_1+9)
  4796  000A00  6EF7               	movwf	tblptrh,c
  4797  000A02                     	if	0	;tblptru may be non-zero
  4798  000A02                     	endif
  4799  000A02                     	if	0	;tblptru may be non-zero
  4800  000A02                     	endif
  4801  000A02  0008               	tblrd		*
  4802  000A04  CFF5 F02A          	movff	tablat,??_GetMcuFwVersion+6
  4803  000A08  0ED0               	movlw	208
  4804  000A0A  242A               	addwf	??_GetMcuFwVersion+6,w,c
  4805  000A0C  6E18               	movwf	___wmul@multiplier,c
  4806  000A0E  6A19               	clrf	___wmul@multiplier+1,c
  4807  000A10  0EFF               	movlw	255
  4808  000A12  2219               	addwfc	___wmul@multiplier+1,f,c
  4809  000A14  0E00               	movlw	0
  4810  000A16  6E1B               	movwf	___wmul@multiplicand+1,c
  4811  000A18  0E0A               	movlw	10
  4812  000A1A  6E1A               	movwf	___wmul@multiplicand,c
  4813  000A1C  EC26  F020         	call	___wmul	;wreg free
  4814  000A20  5018               	movf	?___wmul,w,c
  4815  000A22  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4816  000A24  5019               	movf	?___wmul+1,w,c
  4817  000A26  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4818  000A28  5024               	movf	??_GetMcuFwVersion,w,c
  4819  000A2A  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4820  000A2C  5025               	movf	??_GetMcuFwVersion+1,w,c
  4821  000A2E  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4822  000A30  C028  F027         	movff	??_GetMcuFwVersion+4,??_GetMcuFwVersion+3
  4823  000A34  6A28               	clrf	??_GetMcuFwVersion+4,c
  4824  000A36  5027               	movf	??_GetMcuFwVersion+3,w,c
  4825  000A38  0100               	movlb	0	; () banked
  4826  000A3A  6F68               	movwf	(GetMcuFwVersion@TxMsg+4)& (0+255),b
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;SystemStatus.c: 30: TxMsg[(0x4) + 1] = ( ("Aug 14 2018"[ 7] - '0') * 1000 + ("Aug 14 20
      +                          18"[ 8] - '0') * 100 + ("Aug 14 2018"[ 9] - '0') * 10 + ("Aug 14 2018"[10] - '0') ) & 0x
      +                          FF;
  4830  000A3C  0E9A               	movlw	low (STR_1+10)
  4831  000A3E  6EF6               	movwf	tblptrl,c
  4832  000A40  0E06               	movlw	high (STR_1+10)
  4833  000A42  6EF7               	movwf	tblptrh,c
  4834  000A44                     	if	0	;tblptru may be non-zero
  4835  000A44                     	endif
  4836  000A44                     	if	0	;tblptru may be non-zero
  4837  000A44                     	endif
  4838  000A44  0008               	tblrd		*
  4839  000A46  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4840  000A4A  0E99               	movlw	low (STR_1+9)
  4841  000A4C  6EF6               	movwf	tblptrl,c
  4842  000A4E  0E06               	movlw	high (STR_1+9)
  4843  000A50  6EF7               	movwf	tblptrh,c
  4844  000A52                     	if	0	;tblptru may be non-zero
  4845  000A52                     	endif
  4846  000A52                     	if	0	;tblptru may be non-zero
  4847  000A52                     	endif
  4848  000A52  0008               	tblrd		*
  4849  000A54  50F5               	movf	tablat,w,c
  4850  000A56  0FD0               	addlw	208
  4851  000A58  0D0A               	mullw	10
  4852  000A5A  CFF3 F025          	movff	prodl,??_GetMcuFwVersion+1
  4853  000A5E  0E98               	movlw	low (STR_1+8)
  4854  000A60  6EF6               	movwf	tblptrl,c
  4855  000A62  0E06               	movlw	high (STR_1+8)
  4856  000A64  6EF7               	movwf	tblptrh,c
  4857  000A66                     	if	0	;tblptru may be non-zero
  4858  000A66                     	endif
  4859  000A66                     	if	0	;tblptru may be non-zero
  4860  000A66                     	endif
  4861  000A66  0008               	tblrd		*
  4862  000A68  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4863  000A6C  0ED0               	movlw	208
  4864  000A6E  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4865  000A70  6E18               	movwf	___wmul@multiplier,c
  4866  000A72  6A19               	clrf	___wmul@multiplier+1,c
  4867  000A74  0EFF               	movlw	255
  4868  000A76  2219               	addwfc	___wmul@multiplier+1,f,c
  4869  000A78  0E00               	movlw	0
  4870  000A7A  6E1B               	movwf	___wmul@multiplicand+1,c
  4871  000A7C  0E64               	movlw	100
  4872  000A7E  6E1A               	movwf	___wmul@multiplicand,c
  4873  000A80  EC26  F020         	call	___wmul	;wreg free
  4874  000A84  0E97               	movlw	low (STR_1+7)
  4875  000A86  6EF6               	movwf	tblptrl,c
  4876  000A88  0E06               	movlw	high (STR_1+7)
  4877  000A8A  6EF7               	movwf	tblptrh,c
  4878  000A8C                     	if	0	;tblptru may be non-zero
  4879  000A8C                     	endif
  4880  000A8C                     	if	0	;tblptru may be non-zero
  4881  000A8C                     	endif
  4882  000A8C  0008               	tblrd		*
  4883  000A8E  50F5               	movf	tablat,w,c
  4884  000A90  0FD0               	addlw	208
  4885  000A92  0DE8               	mullw	232
  4886  000A94  50F3               	movf	prodl,w,c
  4887  000A96  2418               	addwf	?___wmul,w,c
  4888  000A98  2425               	addwf	??_GetMcuFwVersion+1,w,c
  4889  000A9A  2424               	addwf	??_GetMcuFwVersion,w,c
  4890  000A9C  0FD0               	addlw	208
  4891  000A9E  0100               	movlb	0	; () banked
  4892  000AA0  6F69               	movwf	(GetMcuFwVersion@TxMsg+5)& (0+255),b
  4893                           
  4894                           ; BSR set to: 0
  4895                           ;SystemStatus.c: 33: TxMsg[(0x4) + 2] = "Aug 14 2018"[0];
  4896  000AA2  0E90               	movlw	low STR_1
  4897  000AA4  6EF6               	movwf	tblptrl,c
  4898  000AA6                     	if	1	;There is more than 1 active tblptr byte
  4899  000AA6  0E06               	movlw	high STR_1
  4900  000AA8  6EF7               	movwf	tblptrh,c
  4901  000AAA                     	endif
  4902  000AAA                     	if	0	;There are less than 3 active tblptr bytes
  4903  000AAA                     	endif
  4904  000AAA  0008               	tblrd		*
  4905  000AAC  CFF5 F06A          	movff	tablat,GetMcuFwVersion@TxMsg+6
  4906                           
  4907                           ; BSR set to: 0
  4908                           ;SystemStatus.c: 34: TxMsg[(0x4) + 3] = "Aug 14 2018"[1];
  4909  000AB0  0E91               	movlw	low (STR_1+1)
  4910  000AB2  6EF6               	movwf	tblptrl,c
  4911  000AB4  0E06               	movlw	high (STR_1+1)
  4912  000AB6  6EF7               	movwf	tblptrh,c
  4913  000AB8                     	if	0	;tblptru may be non-zero
  4914  000AB8                     	endif
  4915  000AB8                     	if	0	;tblptru may be non-zero
  4916  000AB8                     	endif
  4917  000AB8  0008               	tblrd		*
  4918  000ABA  CFF5 F06B          	movff	tablat,GetMcuFwVersion@TxMsg+7
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;SystemStatus.c: 35: TxMsg[(0x4) + 4] = "Aug 14 2018"[2];
  4922  000ABE  0E92               	movlw	low (STR_1+2)
  4923  000AC0  6EF6               	movwf	tblptrl,c
  4924  000AC2  0E06               	movlw	high (STR_1+2)
  4925  000AC4  6EF7               	movwf	tblptrh,c
  4926  000AC6                     	if	0	;tblptru may be non-zero
  4927  000AC6                     	endif
  4928  000AC6                     	if	0	;tblptru may be non-zero
  4929  000AC6                     	endif
  4930  000AC6  0008               	tblrd		*
  4931  000AC8  CFF5 F06C          	movff	tablat,GetMcuFwVersion@TxMsg+8
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;SystemStatus.c: 38: TxMsg[(0x4) + 5] = (( (("Aug 14 2018"[4] >= '0') ? ("Aug 14 2018"[4
      +                          ] - '0') * 10 : 0) + ("Aug 14 2018"[5] - '0') ) & 0xFF00) >> 8;
  4935  000ACC  0E94               	movlw	low (STR_1+4)
  4936  000ACE  6EF6               	movwf	tblptrl,c
  4937  000AD0  0E06               	movlw	high (STR_1+4)
  4938  000AD2  6EF7               	movwf	tblptrh,c
  4939  000AD4                     	if	0	;tblptru may be non-zero
  4940  000AD4                     	endif
  4941  000AD4                     	if	0	;tblptru may be non-zero
  4942  000AD4                     	endif
  4943  000AD4  0E30               	movlw	48
  4944  000AD6  0008               	tblrd		*
  4945  000AD8  60F5               	cpfslt	tablat,c
  4946  000ADA  D005               	goto	l1506
  4947                           
  4948                           ; BSR set to: 0
  4949  000ADC  0E00               	movlw	0
  4950  000ADE  6F77               	movwf	(_GetMcuFwVersion$2698+1)& (0+255),b
  4951  000AE0  0E00               	movlw	0
  4952  000AE2  6F76               	movwf	_GetMcuFwVersion$2698& (0+255),b
  4953  000AE4  D017               	goto	l1508
  4954  000AE6                     l1506:
  4955                           
  4956                           ; BSR set to: 0
  4957                           
  4958                           ; BSR set to: 0
  4959  000AE6  0E94               	movlw	low (STR_1+4)
  4960  000AE8  6EF6               	movwf	tblptrl,c
  4961  000AEA  0E06               	movlw	high (STR_1+4)
  4962  000AEC  6EF7               	movwf	tblptrh,c
  4963  000AEE                     	if	0	;tblptru may be non-zero
  4964  000AEE                     	endif
  4965  000AEE                     	if	0	;tblptru may be non-zero
  4966  000AEE                     	endif
  4967  000AEE  0008               	tblrd		*
  4968  000AF0  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4969  000AF4  0ED0               	movlw	208
  4970  000AF6  2424               	addwf	??_GetMcuFwVersion,w,c
  4971  000AF8  6E18               	movwf	___wmul@multiplier,c
  4972  000AFA  6A19               	clrf	___wmul@multiplier+1,c
  4973  000AFC  0EFF               	movlw	255
  4974  000AFE  2219               	addwfc	___wmul@multiplier+1,f,c
  4975  000B00  0E00               	movlw	0
  4976  000B02  6E1B               	movwf	___wmul@multiplicand+1,c
  4977  000B04  0E0A               	movlw	10
  4978  000B06  6E1A               	movwf	___wmul@multiplicand,c
  4979  000B08  EC26  F020         	call	___wmul	;wreg free
  4980  000B0C  C018  F076         	movff	?___wmul,_GetMcuFwVersion$2698
  4981  000B10  C019  F077         	movff	?___wmul+1,_GetMcuFwVersion$2698+1
  4982  000B14                     l1508:
  4983  000B14  0ED0               	movlw	208
  4984  000B16  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4985  000B18  0EFF               	movlw	255
  4986  000B1A  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4987  000B1C  0E95               	movlw	low (STR_1+5)
  4988  000B1E  6EF6               	movwf	tblptrl,c
  4989  000B20  0E06               	movlw	high (STR_1+5)
  4990  000B22  6EF7               	movwf	tblptrh,c
  4991  000B24                     	if	0	;tblptru may be non-zero
  4992  000B24                     	endif
  4993  000B24                     	if	0	;tblptru may be non-zero
  4994  000B24                     	endif
  4995  000B24  0008               	tblrd		*
  4996  000B26  50F5               	movf	tablat,w,c
  4997  000B28  0100               	movlb	0	; () banked
  4998  000B2A  2576               	addwf	_GetMcuFwVersion$2698& (0+255),w,b
  4999  000B2C  6E26               	movwf	(??_GetMcuFwVersion+2)& (0+255),c
  5000  000B2E  0E00               	movlw	0
  5001  000B30  2177               	addwfc	(_GetMcuFwVersion$2698+1)& (0+255),w,b
  5002  000B32  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  5003  000B34  5024               	movf	??_GetMcuFwVersion,w,c
  5004  000B36  2626               	addwf	??_GetMcuFwVersion+2,f,c
  5005  000B38  5025               	movf	??_GetMcuFwVersion+1,w,c
  5006  000B3A  2227               	addwfc	??_GetMcuFwVersion+3,f,c
  5007  000B3C  C027  F026         	movff	??_GetMcuFwVersion+3,??_GetMcuFwVersion+2
  5008  000B40  6A27               	clrf	??_GetMcuFwVersion+3,c
  5009  000B42  5026               	movf	??_GetMcuFwVersion+2,w,c
  5010  000B44  6F6D               	movwf	(GetMcuFwVersion@TxMsg+9)& (0+255),b
  5011                           
  5012                           ; BSR set to: 0
  5013                           ;SystemStatus.c: 39: TxMsg[(0x4) + 6] = ( (("Aug 14 2018"[4] >= '0') ? ("Aug 14 2018"[4]
      +                           - '0') * 10 : 0) + ("Aug 14 2018"[5] - '0') ) & 0xFF;
  5014  000B46  0E94               	movlw	low (STR_1+4)
  5015  000B48  6EF6               	movwf	tblptrl,c
  5016  000B4A  0E06               	movlw	high (STR_1+4)
  5017  000B4C  6EF7               	movwf	tblptrh,c
  5018  000B4E                     	if	0	;tblptru may be non-zero
  5019  000B4E                     	endif
  5020  000B4E                     	if	0	;tblptru may be non-zero
  5021  000B4E                     	endif
  5022  000B4E  0E30               	movlw	48
  5023  000B50  0008               	tblrd		*
  5024  000B52  60F5               	cpfslt	tablat,c
  5025  000B54  D005               	goto	l1510
  5026                           
  5027                           ; BSR set to: 0
  5028  000B56  0E00               	movlw	0
  5029  000B58  6F79               	movwf	(_GetMcuFwVersion$2702+1)& (0+255),b
  5030  000B5A  0E00               	movlw	0
  5031  000B5C  6F78               	movwf	_GetMcuFwVersion$2702& (0+255),b
  5032  000B5E  D017               	goto	l1512
  5033  000B60                     l1510:
  5034                           
  5035                           ; BSR set to: 0
  5036                           
  5037                           ; BSR set to: 0
  5038  000B60  0E94               	movlw	low (STR_1+4)
  5039  000B62  6EF6               	movwf	tblptrl,c
  5040  000B64  0E06               	movlw	high (STR_1+4)
  5041  000B66  6EF7               	movwf	tblptrh,c
  5042  000B68                     	if	0	;tblptru may be non-zero
  5043  000B68                     	endif
  5044  000B68                     	if	0	;tblptru may be non-zero
  5045  000B68                     	endif
  5046  000B68  0008               	tblrd		*
  5047  000B6A  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5048  000B6E  0ED0               	movlw	208
  5049  000B70  2424               	addwf	??_GetMcuFwVersion,w,c
  5050  000B72  6E18               	movwf	___wmul@multiplier,c
  5051  000B74  6A19               	clrf	___wmul@multiplier+1,c
  5052  000B76  0EFF               	movlw	255
  5053  000B78  2219               	addwfc	___wmul@multiplier+1,f,c
  5054  000B7A  0E00               	movlw	0
  5055  000B7C  6E1B               	movwf	___wmul@multiplicand+1,c
  5056  000B7E  0E0A               	movlw	10
  5057  000B80  6E1A               	movwf	___wmul@multiplicand,c
  5058  000B82  EC26  F020         	call	___wmul	;wreg free
  5059  000B86  C018  F078         	movff	?___wmul,_GetMcuFwVersion$2702
  5060  000B8A  C019  F079         	movff	?___wmul+1,_GetMcuFwVersion$2702+1
  5061  000B8E                     l1512:
  5062  000B8E  0E95               	movlw	low (STR_1+5)
  5063  000B90  6EF6               	movwf	tblptrl,c
  5064  000B92  0E06               	movlw	high (STR_1+5)
  5065  000B94  6EF7               	movwf	tblptrh,c
  5066  000B96                     	if	0	;tblptru may be non-zero
  5067  000B96                     	endif
  5068  000B96                     	if	0	;tblptru may be non-zero
  5069  000B96                     	endif
  5070  000B96  0008               	tblrd		*
  5071  000B98  50F5               	movf	tablat,w,c
  5072  000B9A  0100               	movlb	0	; () banked
  5073  000B9C  2578               	addwf	_GetMcuFwVersion$2702& (0+255),w,b
  5074  000B9E  0FD0               	addlw	208
  5075  000BA0  6F6E               	movwf	(GetMcuFwVersion@TxMsg+10)& (0+255),b
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;SystemStatus.c: 53: TxMsg[(0x4) + 7] = (1 & 0xFF00) >> 8;
  5079  000BA2  0E00               	movlw	0
  5080  000BA4  6F6F               	movwf	(GetMcuFwVersion@TxMsg+11)& (0+255),b
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;SystemStatus.c: 54: TxMsg[(0x4) + 8] = 1 & 0xFF;
  5084  000BA6  0E01               	movlw	1
  5085  000BA8  6F70               	movwf	(GetMcuFwVersion@TxMsg+12)& (0+255),b
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;SystemStatus.c: 57: TxMsg[(0x4) + 9] = (0 & 0xFF00) >> 8;
  5089  000BAA  0E00               	movlw	0
  5090  000BAC  6F71               	movwf	(GetMcuFwVersion@TxMsg+13)& (0+255),b
  5091                           
  5092                           ; BSR set to: 0
  5093                           ;SystemStatus.c: 58: TxMsg[(0x4) + 10] = 0 & 0xFF;
  5094  000BAE  0E00               	movlw	0
  5095  000BB0  6F72               	movwf	(GetMcuFwVersion@TxMsg+14)& (0+255),b
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;SystemStatus.c: 60: TxMsg[(0x4) + 11] = (2 & 0xFF00) >> 8;
  5099  000BB2  0E00               	movlw	0
  5100  000BB4  6F73               	movwf	(GetMcuFwVersion@TxMsg+15)& (0+255),b
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;SystemStatus.c: 61: TxMsg[(0x4) + 12] = 2 & 0xFF;
  5104  000BB6  0E02               	movlw	2
  5105  000BB8  6F74               	movwf	(GetMcuFwVersion@TxMsg+16)& (0+255),b
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;SystemStatus.c: 64: TxMsg[(13) + (0x4)] = crc8(TxMsg, (13) + (0x4));
  5109  000BBA  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5110  000BBC  6E18               	movwf	crc8@dataArray,c
  5111  000BBE  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5112  000BC0  6E19               	movwf	crc8@dataArray+1,c
  5113  000BC2  0E00               	movlw	0
  5114  000BC4  6E1B               	movwf	crc8@dataSize+1,c
  5115  000BC6  0E11               	movlw	17
  5116  000BC8  6E1A               	movwf	crc8@dataSize,c
  5117  000BCA  EC40  F01D         	call	_crc8	;wreg free
  5118  000BCE  0100               	movlb	0	; () banked
  5119  000BD0  6F75               	movwf	(GetMcuFwVersion@TxMsg+17)& (0+255),b
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;SystemStatus.c: 66: WriteUartMessage(TxMsg, (13) + (0x4) + 1);
  5123  000BD2  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5124  000BD4  6E19               	movwf	WriteUartMessage@dataBuf,c
  5125  000BD6  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5126  000BD8  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5127  000BDA  0E00               	movlw	0
  5128  000BDC  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5129  000BDE  0E12               	movlw	18
  5130  000BE0  6E1B               	movwf	WriteUartMessage@dataSize,c
  5131  000BE2  ECF2  F01E         	call	_WriteUartMessage	;wreg free
  5132  000BE6  0012               	return		;funcret
  5133  000BE8                     __end_of_GetMcuFwVersion:
  5134                           	opt stack 0
  5135                           tosu	equ	0xFFF
  5136                           tosh	equ	0xFFE
  5137                           tosl	equ	0xFFD
  5138                           pclath	equ	0xFFA
  5139                           tblptru	equ	0xFF8
  5140                           tblptrh	equ	0xFF7
  5141                           tblptrl	equ	0xFF6
  5142                           tablat	equ	0xFF5
  5143                           prodh	equ	0xFF4
  5144                           prodl	equ	0xFF3
  5145                           postinc0	equ	0xFEE
  5146                           plusw0	equ	0xFEB
  5147                           wreg	equ	0xFE8
  5148                           postdec1	equ	0xFE5
  5149                           fsr1l	equ	0xFE1
  5150                           indf2	equ	0xFDF
  5151                           postinc2	equ	0xFDE
  5152                           plusw2	equ	0xFDB
  5153                           fsr2h	equ	0xFDA
  5154                           fsr2l	equ	0xFD9
  5155                           status	equ	0xFD8
  5156                           
  5157 ;; *************** function _FlashReadUart *****************
  5158 ;; Defined at:
  5159 ;;		line 63 in file "FlashApp.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;  data            2   39[BANK0 ] PTR unsigned char 
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  idx             2  132[BANK0 ] int 
  5164 ;;  j               2  128[BANK0 ] int 
  5165 ;;  TxMsg          69   47[BANK0 ] unsigned char [69]
  5166 ;;  val             8  116[BANK0 ] struct .
  5167 ;;  numOfSampleT    2  130[BANK0 ] int 
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  1    wreg      void 
  5170 ;; Registers used:
  5171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5177 ;;      Params:         0       2       0       0       0       0       0
  5178 ;;      Locals:         0      87       0       0       0       0       0
  5179 ;;      Temps:          0       6       0       0       0       0       0
  5180 ;;      Totals:         0      95       0       0       0       0       0
  5181 ;;Total ram usage:       95 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:    8
  5184 ;; This function calls:
  5185 ;;		_FLASH_IsWriteDone
  5186 ;;		_FLASH_ReadByte
  5187 ;;		_GetIntFromUartData
  5188 ;;		_SendAckMessage
  5189 ;;		_WriteUartMessage
  5190 ;;		_ZeroArray
  5191 ;;		_crc8
  5192 ;; This function is called by:
  5193 ;;		_GroupFlashMemory
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           	psect	text15
  5198  00107A                     __ptext15:
  5199                           	opt stack 0
  5200  00107A                     _FlashReadUart:
  5201                           	opt stack 20
  5202                           
  5203                           ;FlashApp.c: 69: int16_t numOfSampleToRead = 0x0;
  5204                           
  5205                           ;incstack = 0
  5206  00107A  0E00               	movlw	0
  5207  00107C  0100               	movlb	0	; () banked
  5208  00107E  6FE3               	movwf	(FlashReadUart@numOfSampleToRead+1)& (0+255),b
  5209  001080  0E00               	movlw	0
  5210  001082  6FE2               	movwf	FlashReadUart@numOfSampleToRead& (0+255),b
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;FlashApp.c: 70: INT_VAL val = GetIntFromUartData(10, data);
  5214  001084  C087  F066         	movff	FlashReadUart@data,GetIntFromUartData@data
  5215  001088  C088  F067         	movff	FlashReadUart@data+1,GetIntFromUartData@data+1
  5216  00108C  0E0A               	movlw	10
  5217  00108E  EC84  F00E         	call	_GetIntFromUartData
  5218  001092  EE20  F0D4         	lfsr	2,FlashReadUart@val
  5219  001096  0E07               	movlw	7
  5220  001098                     u8401:
  5221  001098  CFEB FFDB          	movff	plusw0,plusw2
  5222  00109C  06E8               	decf	wreg,f,c
  5223  00109E  E2FC               	bc	u8401
  5224                           
  5225                           ;FlashApp.c: 72: int numOfSampleToRead = val.num;
  5226  0010A0  C0D4  F0E2         	movff	FlashReadUart@val,FlashReadUart@numOfSampleToRead
  5227  0010A4  C0D5  F0E3         	movff	FlashReadUart@val+1,FlashReadUart@numOfSampleToRead+1
  5228                           
  5229                           ;FlashApp.c: 74: char TxMsg[(64) + (0x4) + 1];
  5230                           ;FlashApp.c: 76: if (FLASH_IsWriteDone() == 0)
  5231  0010A8  EC65  F021         	call	_FLASH_IsWriteDone	;wreg free
  5232  0010AC  0900               	iorlw	0
  5233  0010AE  B4D8               	btfsc	status,2,c
  5234  0010B0  0012               	return	
  5235                           
  5236                           ;FlashApp.c: 80: }
  5237                           ;FlashApp.c: 82: if(numOfValidateSamples == 0)
  5238                           
  5239                           ;FlashApp.c: 78: {
  5240                           ;FlashApp.c: 79: return;
  5241  0010B2  0101               	movlb	1	; () banked
  5242  0010B4  5130               	movf	_numOfValidateSamples& (0+255),w,b
  5243  0010B6  1131               	iorwf	(_numOfValidateSamples+1)& (0+255),w,b
  5244  0010B8  1132               	iorwf	(_numOfValidateSamples+2)& (0+255),w,b
  5245  0010BA  1133               	iorwf	(_numOfValidateSamples+3)& (0+255),w,b
  5246  0010BC  A4D8               	btfss	status,2,c
  5247  0010BE  D005               	goto	l326
  5248                           
  5249                           ; BSR set to: 1
  5250                           ;FlashApp.c: 83: {
  5251                           ;FlashApp.c: 84: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET)
      +                          ;
  5252  0010C0  0E55               	movlw	85
  5253  0010C2  6E24               	movwf	SendAckMessage@inRequest,c
  5254  0010C4  0E05               	movlw	5
  5255  0010C6  EC17  F01D         	call	_SendAckMessage
  5256  0010CA                     l326:
  5257                           
  5258                           ;FlashApp.c: 85: }
  5259                           ;FlashApp.c: 88: numOfSampleToRead = numOfSampleToRead >= numOfValidateSamples ? numOfVa
      +                          lidateSamples : numOfSampleToRead;
  5260  0010CA  C0E2  F089         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5261  0010CE  C0E3  F08A         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5262  0010D2  0E00               	movlw	0
  5263  0010D4  0100               	movlb	0	; () banked
  5264  0010D6  BF8A               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5265  0010D8  0EFF               	movlw	255
  5266  0010DA  6F8B               	movwf	(??_FlashReadUart+2)& (0+255),b
  5267  0010DC  6F8C               	movwf	(??_FlashReadUart+3)& (0+255),b
  5268  0010DE  0101               	movlb	1	; () banked
  5269  0010E0  5130               	movf	_numOfValidateSamples& (0+255),w,b
  5270  0010E2  0100               	movlb	0	; () banked
  5271  0010E4  5D89               	subwf	??_FlashReadUart& (0+255),w,b
  5272  0010E6  0101               	movlb	1	; () banked
  5273  0010E8  5131               	movf	(_numOfValidateSamples+1)& (0+255),w,b
  5274  0010EA  0100               	movlb	0	; () banked
  5275  0010EC  598A               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5276  0010EE  0101               	movlb	1	; () banked
  5277  0010F0  5132               	movf	(_numOfValidateSamples+2)& (0+255),w,b
  5278  0010F2  0100               	movlb	0	; () banked
  5279  0010F4  598B               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5280  0010F6  0101               	movlb	1	; () banked
  5281  0010F8  5133               	movf	(_numOfValidateSamples+3)& (0+255),w,b
  5282  0010FA  0100               	movlb	0	; () banked
  5283  0010FC  598C               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5284  0010FE  B0D8               	btfsc	status,0,c
  5285  001100  D00A               	goto	l328
  5286                           
  5287                           ; BSR set to: 0
  5288  001102  C0E2  F0DC         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$609
  5289  001106  C0E3  F0DD         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$609+1
  5290  00110A  0E00               	movlw	0
  5291  00110C  BFDD               	btfsc	(_FlashReadUart$609+1)& (0+255),7,b
  5292  00110E  0EFF               	movlw	-1
  5293  001110  6FDE               	movwf	(_FlashReadUart$609+2)& (0+255),b
  5294  001112  6FDF               	movwf	(_FlashReadUart$609+3)& (0+255),b
  5295  001114  D008               	goto	l330
  5296  001116                     l328:
  5297                           
  5298                           ; BSR set to: 0
  5299  001116  C130  F0DC         	movff	_numOfValidateSamples,_FlashReadUart$609
  5300  00111A  C131  F0DD         	movff	_numOfValidateSamples+1,_FlashReadUart$609+1
  5301  00111E  C132  F0DE         	movff	_numOfValidateSamples+2,_FlashReadUart$609+2
  5302  001122  C133  F0DF         	movff	_numOfValidateSamples+3,_FlashReadUart$609+3
  5303  001126                     l330:
  5304                           
  5305                           ; BSR set to: 0
  5306  001126  C0DC  F0E2         	movff	_FlashReadUart$609,FlashReadUart@numOfSampleToRead
  5307  00112A  C0DD  F0E3         	movff	_FlashReadUart$609+1,FlashReadUart@numOfSampleToRead+1
  5308                           
  5309                           ;FlashApp.c: 91: readAddress = writeAddress;
  5310  00112E  C03E  F1C8         	movff	_writeAddress,_readAddress
  5311  001132  C03F  F1C9         	movff	_writeAddress+1,_readAddress+1
  5312  001136  C040  F1CA         	movff	_writeAddress+2,_readAddress+2
  5313  00113A  C041  F1CB         	movff	_writeAddress+3,_readAddress+3
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;FlashApp.c: 93: for (int j=0; j<numOfSampleToRead; j++)
  5317  00113E  0E00               	movlw	0
  5318  001140  6FE1               	movwf	(FlashReadUart@j+1)& (0+255),b
  5319  001142  0E00               	movlw	0
  5320  001144  6FE0               	movwf	FlashReadUart@j& (0+255),b
  5321  001146  D08A               	goto	l331
  5322  001148                     
  5323                           ; BSR set to: 0
  5324                           ;FlashApp.c: 94: {
  5325                           ;FlashApp.c: 96: if(readAddress > 0)
  5326                           
  5327                           ; BSR set to: 0
  5328  001148  0101               	movlb	1	; () banked
  5329  00114A  51C8               	movf	_readAddress& (0+255),w,b
  5330  00114C  11C9               	iorwf	(_readAddress+1)& (0+255),w,b
  5331  00114E  11CA               	iorwf	(_readAddress+2)& (0+255),w,b
  5332  001150  11CB               	iorwf	(_readAddress+3)& (0+255),w,b
  5333  001152  B4D8               	btfsc	status,2,c
  5334  001154  D007               	goto	l333
  5335                           
  5336                           ; BSR set to: 1
  5337                           ;FlashApp.c: 97: {
  5338                           ;FlashApp.c: 98: readAddress -= (64);
  5339  001156  0E40               	movlw	64
  5340  001158  5FC8               	subwf	_readAddress& (0+255),f,b
  5341  00115A  0E00               	movlw	0
  5342  00115C  5BC9               	subwfb	(_readAddress+1)& (0+255),f,b
  5343  00115E  5BCA               	subwfb	(_readAddress+2)& (0+255),f,b
  5344  001160  5BCB               	subwfb	(_readAddress+3)& (0+255),f,b
  5345                           
  5346                           ;FlashApp.c: 99: }
  5347  001162  D008               	goto	l334
  5348  001164                     l333:
  5349                           
  5350                           ; BSR set to: 1
  5351                           ;FlashApp.c: 100: else
  5352                           ;FlashApp.c: 101: {
  5353                           ;FlashApp.c: 102: readAddress = 0x7FF0 - (64);
  5354                           
  5355                           ; BSR set to: 1
  5356  001164  0EB0               	movlw	176
  5357  001166  6FC8               	movwf	_readAddress& (0+255),b
  5358  001168  0E7F               	movlw	127
  5359  00116A  6FC9               	movwf	(_readAddress+1)& (0+255),b
  5360  00116C  0E00               	movlw	0
  5361  00116E  6FCA               	movwf	(_readAddress+2)& (0+255),b
  5362  001170  0E00               	movlw	0
  5363  001172  6FCB               	movwf	(_readAddress+3)& (0+255),b
  5364  001174                     l334:
  5365                           
  5366                           ; BSR set to: 1
  5367                           ;FlashApp.c: 103: }
  5368                           ;FlashApp.c: 106: ZeroArray(TxMsg, (64) + (0x4) + 1);
  5369                           
  5370                           ; BSR set to: 1
  5371  001174  0E8F               	movlw	low FlashReadUart@TxMsg
  5372  001176  6E20               	movwf	ZeroArray@array,c
  5373  001178  0E00               	movlw	high FlashReadUart@TxMsg
  5374  00117A  6E21               	movwf	ZeroArray@array+1,c
  5375  00117C  0E00               	movlw	0
  5376  00117E  6E23               	movwf	ZeroArray@size+1,c
  5377  001180  0E45               	movlw	69
  5378  001182  6E22               	movwf	ZeroArray@size,c
  5379  001184  ECBF  F020         	call	_ZeroArray	;wreg free
  5380                           
  5381                           ;FlashApp.c: 107: TxMsg[(0)] = (0x24);
  5382  001188  0E24               	movlw	36
  5383  00118A  0100               	movlb	0	; () banked
  5384  00118C  6F8F               	movwf	FlashReadUart@TxMsg& (0+255),b
  5385                           
  5386                           ; BSR set to: 0
  5387                           ;FlashApp.c: 108: TxMsg[(1)] = FLASH_MSG;
  5388  00118E  0E05               	movlw	5
  5389  001190  6F90               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;FlashApp.c: 109: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  5393  001192  0E54               	movlw	84
  5394  001194  6F91               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  5395                           
  5396                           ; BSR set to: 0
  5397                           ;FlashApp.c: 110: TxMsg[(3)] = (64);
  5398  001196  0E40               	movlw	64
  5399  001198  6F92               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  5400                           
  5401                           ; BSR set to: 0
  5402                           ;FlashApp.c: 112: for(int idx = 0; idx < (64); idx++)
  5403  00119A  0E00               	movlw	0
  5404  00119C  6FE5               	movwf	(FlashReadUart@idx+1)& (0+255),b
  5405  00119E  0E00               	movlw	0
  5406  0011A0  6FE4               	movwf	FlashReadUart@idx& (0+255),b
  5407  0011A2                     l8338:
  5408                           
  5409                           ; BSR set to: 0
  5410  0011A2  BFE5               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  5411  0011A4  D006               	goto	l335
  5412  0011A6  51E5               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  5413  0011A8  E134               	bnz	l8348
  5414  0011AA  0E40               	movlw	64
  5415  0011AC  5DE4               	subwf	FlashReadUart@idx& (0+255),w,b
  5416  0011AE  B0D8               	btfsc	status,0,c
  5417  0011B0  D030               	goto	u8460
  5418  0011B2                     l335:
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;FlashApp.c: 113: {
  5422                           ;FlashApp.c: 114: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  5423                           
  5424                           ; BSR set to: 0
  5425  0011B2  0E04               	movlw	4
  5426  0011B4  25E4               	addwf	FlashReadUart@idx& (0+255),w,b
  5427  0011B6  6F89               	movwf	??_FlashReadUart& (0+255),b
  5428  0011B8  0E00               	movlw	0
  5429  0011BA  21E5               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  5430  0011BC  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5431  0011BE  0E8F               	movlw	low FlashReadUart@TxMsg
  5432  0011C0  2589               	addwf	??_FlashReadUart& (0+255),w,b
  5433  0011C2  6ED9               	movwf	fsr2l,c
  5434  0011C4  0E00               	movlw	high FlashReadUart@TxMsg
  5435  0011C6  218A               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  5436  0011C8  6EDA               	movwf	fsr2h,c
  5437  0011CA  C0E4  F08B         	movff	FlashReadUart@idx,??_FlashReadUart+2
  5438  0011CE  C0E5  F08C         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  5439  0011D2  0E00               	movlw	0
  5440  0011D4  BF8C               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5441  0011D6  0EFF               	movlw	255
  5442  0011D8  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5443  0011DA  6F8E               	movwf	(??_FlashReadUart+5)& (0+255),b
  5444  0011DC  0101               	movlb	1	; () banked
  5445  0011DE  51C8               	movf	_readAddress& (0+255),w,b
  5446  0011E0  0100               	movlb	0	; () banked
  5447  0011E2  258B               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  5448  0011E4  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  5449  0011E6  0101               	movlb	1	; () banked
  5450  0011E8  51C9               	movf	(_readAddress+1)& (0+255),w,b
  5451  0011EA  0100               	movlb	0	; () banked
  5452  0011EC  218C               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  5453  0011EE  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  5454  0011F0  0101               	movlb	1	; () banked
  5455  0011F2  51CA               	movf	(_readAddress+2)& (0+255),w,b
  5456  0011F4  0100               	movlb	0	; () banked
  5457  0011F6  218D               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  5458  0011F8  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  5459  0011FA  0101               	movlb	1	; () banked
  5460  0011FC  51CB               	movf	(_readAddress+3)& (0+255),w,b
  5461  0011FE  0100               	movlb	0	; () banked
  5462  001200  218E               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5463  001202  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  5464  001204  EC37  F021         	call	_FLASH_ReadByte	;wreg free
  5465  001208  6EDF               	movwf	indf2,c
  5466  00120A  0100               	movlb	0	; () banked
  5467  00120C  4BE4               	infsnz	FlashReadUart@idx& (0+255),f,b
  5468  00120E  2BE5               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  5469  001210  D7C8               	goto	l8338
  5470  001212                     u8460:
  5471  001212                     l8348:
  5472                           
  5473                           ; BSR set to: 0
  5474                           ;FlashApp.c: 115: }
  5475                           ;FlashApp.c: 117: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  5476  001212  0E8F               	movlw	low FlashReadUart@TxMsg
  5477  001214  6E18               	movwf	crc8@dataArray,c
  5478  001216  0E00               	movlw	high FlashReadUart@TxMsg
  5479  001218  6E19               	movwf	crc8@dataArray+1,c
  5480  00121A  0E00               	movlw	0
  5481  00121C  6E1B               	movwf	crc8@dataSize+1,c
  5482  00121E  0E44               	movlw	68
  5483  001220  6E1A               	movwf	crc8@dataSize,c
  5484  001222  EC40  F01D         	call	_crc8	;wreg free
  5485  001226  0100               	movlb	0	; () banked
  5486  001228  6FD3               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;FlashApp.c: 119: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  5490  00122A  0E8F               	movlw	low FlashReadUart@TxMsg
  5491  00122C  6E19               	movwf	WriteUartMessage@dataBuf,c
  5492  00122E  0E00               	movlw	high FlashReadUart@TxMsg
  5493  001230  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5494  001232  0E00               	movlw	0
  5495  001234  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5496  001236  0E45               	movlw	69
  5497  001238  6E1B               	movwf	WriteUartMessage@dataSize,c
  5498  00123A  ECF2  F01E         	call	_WriteUartMessage	;wreg free
  5499                           
  5500                           ;FlashApp.c: 120: _delay((unsigned long)((200)*(8000000/4000.0)));
  5501  00123E  0E03               	movlw	3
  5502  001240  0100               	movlb	0	; () banked
  5503  001242  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5504  001244  0E08               	movlw	8
  5505  001246  6F89               	movwf	??_FlashReadUart& (0+255),b
  5506  001248  0E77               	movlw	119
  5507  00124A                     u9197:
  5508  00124A  2EE8               	decfsz	wreg,f,c
  5509  00124C  D7FE               	bra	u9197
  5510  00124E  2F89               	decfsz	??_FlashReadUart& (0+255),f,b
  5511  001250  D7FC               	bra	u9197
  5512  001252  2F8A               	decfsz	(??_FlashReadUart+1)& (0+255),f,b
  5513  001254  D7FA               	bra	u9197
  5514  001256  0100               	movlb	0	; () banked
  5515  001258  4BE0               	infsnz	FlashReadUart@j& (0+255),f,b
  5516  00125A  2BE1               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5517  00125C                     l331:
  5518                           
  5519                           ; BSR set to: 0
  5520                           
  5521                           ; BSR set to: 0
  5522  00125C  51E2               	movf	FlashReadUart@numOfSampleToRead& (0+255),w,b
  5523  00125E  5DE0               	subwf	FlashReadUart@j& (0+255),w,b
  5524  001260  51E1               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5525  001262  0A80               	xorlw	128
  5526  001264  6F89               	movwf	??_FlashReadUart& (0+255),b
  5527  001266  51E3               	movf	(FlashReadUart@numOfSampleToRead+1)& (0+255),w,b
  5528  001268  0A80               	xorlw	128
  5529  00126A  5989               	subwfb	??_FlashReadUart& (0+255),w,b
  5530  00126C  B0D8               	btfsc	status,0,c
  5531  00126E  0012               	return	
  5532  001270  D76B               	goto	l332
  5533  001272                     __end_of_FlashReadUart:
  5534                           	opt stack 0
  5535                           tosu	equ	0xFFF
  5536                           tosh	equ	0xFFE
  5537                           tosl	equ	0xFFD
  5538                           pclath	equ	0xFFA
  5539                           tblptru	equ	0xFF8
  5540                           tblptrh	equ	0xFF7
  5541                           tblptrl	equ	0xFF6
  5542                           tablat	equ	0xFF5
  5543                           prodh	equ	0xFF4
  5544                           prodl	equ	0xFF3
  5545                           postinc0	equ	0xFEE
  5546                           plusw0	equ	0xFEB
  5547                           wreg	equ	0xFE8
  5548                           postdec1	equ	0xFE5
  5549                           fsr1l	equ	0xFE1
  5550                           indf2	equ	0xFDF
  5551                           postinc2	equ	0xFDE
  5552                           plusw2	equ	0xFDB
  5553                           fsr2h	equ	0xFDA
  5554                           fsr2l	equ	0xFD9
  5555                           status	equ	0xFD8
  5556                           
  5557 ;; *************** function _FLASH_ReadByte *****************
  5558 ;; Defined at:
  5559 ;;		line 58 in file "mcc_generated_files/memory.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  flashAddr       4   23[COMRAM] unsigned long 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;		None
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      unsigned char 
  5566 ;; Registers used:
  5567 ;;		wreg, status,2
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5573 ;;      Params:         4       0       0       0       0       0       0
  5574 ;;      Locals:         0       0       0       0       0       0       0
  5575 ;;      Temps:          0       0       0       0       0       0       0
  5576 ;;      Totals:         4       0       0       0       0       0       0
  5577 ;;Total ram usage:        4 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    4
  5580 ;; This function calls:
  5581 ;;		Nothing
  5582 ;; This function is called by:
  5583 ;;		_FlashReadUart
  5584 ;;		_FLASH_ReadWord
  5585 ;;		_FLASH_WriteByte
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           	psect	text16
  5590  00426E                     __ptext16:
  5591                           	opt stack 0
  5592  00426E                     _FLASH_ReadByte:
  5593                           	opt stack 23
  5594                           
  5595                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  5596                           
  5597                           ;incstack = 0
  5598  00426E  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  5599                           
  5600                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  5601  004272  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  5602                           
  5603                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  5604  004276  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  5605  00427A  0008               	tblrd		*	;# 
  5606                           
  5607                           ;memory.c: 66: return (TABLAT);
  5608  00427C  50F5               	movf	tablat,w,c	;volatile
  5609  00427E  0012               	return	
  5610  004280                     __end_of_FLASH_ReadByte:
  5611                           	opt stack 0
  5612                           tosu	equ	0xFFF
  5613                           tosh	equ	0xFFE
  5614                           tosl	equ	0xFFD
  5615                           pclath	equ	0xFFA
  5616                           tblptru	equ	0xFF8
  5617                           tblptrh	equ	0xFF7
  5618                           tblptrl	equ	0xFF6
  5619                           tablat	equ	0xFF5
  5620                           prodh	equ	0xFF4
  5621                           prodl	equ	0xFF3
  5622                           postinc0	equ	0xFEE
  5623                           plusw0	equ	0xFEB
  5624                           wreg	equ	0xFE8
  5625                           postdec1	equ	0xFE5
  5626                           fsr1l	equ	0xFE1
  5627                           indf2	equ	0xFDF
  5628                           postinc2	equ	0xFDE
  5629                           plusw2	equ	0xFDB
  5630                           fsr2h	equ	0xFDA
  5631                           fsr2l	equ	0xFD9
  5632                           status	equ	0xFD8
  5633                           
  5634 ;; *************** function _FlashReadCondition *****************
  5635 ;; Defined at:
  5636 ;;		line 138 in file "FlashApp.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;		None
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  5641 ;; Return value:  Size  Location     Type
  5642 ;;                  1    wreg      void 
  5643 ;; Registers used:
  5644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5650 ;;      Params:         0       0       0       0       0       0       0
  5651 ;;      Locals:         9       0       0       0       0       0       0
  5652 ;;      Temps:          4       0       0       0       0       0       0
  5653 ;;      Totals:        13       0       0       0       0       0       0
  5654 ;;Total ram usage:       13 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:    6
  5657 ;; This function calls:
  5658 ;;		_WriteUartMessage
  5659 ;;		_ZeroArray
  5660 ;;		_crc8
  5661 ;;		_make8
  5662 ;; This function is called by:
  5663 ;;		_GroupFlashMemory
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           	psect	text17
  5668  0020D4                     __ptext17:
  5669                           	opt stack 0
  5670  0020D4                     _FlashReadCondition:
  5671                           	opt stack 22
  5672                           
  5673                           ;FlashApp.c: 141: char TxMsg[4 + (0x4) + 1];
  5674                           ;FlashApp.c: 142: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5675                           
  5676                           ;incstack = 0
  5677  0020D4  0E28               	movlw	low FlashReadCondition@TxMsg
  5678  0020D6  6E20               	movwf	ZeroArray@array,c
  5679  0020D8  0E00               	movlw	high FlashReadCondition@TxMsg
  5680  0020DA  6E21               	movwf	ZeroArray@array+1,c
  5681  0020DC  0E00               	movlw	0
  5682  0020DE  6E23               	movwf	ZeroArray@size+1,c
  5683  0020E0  0E09               	movlw	9
  5684  0020E2  6E22               	movwf	ZeroArray@size,c
  5685  0020E4  ECBF  F020         	call	_ZeroArray	;wreg free
  5686                           
  5687                           ;FlashApp.c: 145: TxMsg[(0)] = (0x24);
  5688  0020E8  0E24               	movlw	36
  5689  0020EA  6E28               	movwf	FlashReadCondition@TxMsg,c
  5690                           
  5691                           ;FlashApp.c: 146: TxMsg[(1)] = FLASH_MSG;
  5692  0020EC  0E05               	movlw	5
  5693  0020EE  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  5694                           
  5695                           ;FlashApp.c: 147: TxMsg[(2)] = FLASH_READ_CONDITION;
  5696  0020F0  0E52               	movlw	82
  5697  0020F2  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  5698                           
  5699                           ;FlashApp.c: 148: TxMsg[(3)] = 4;
  5700  0020F4  0E04               	movlw	4
  5701  0020F6  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  5702                           
  5703                           ;FlashApp.c: 153: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4580,1);
  5704  0020F8  0E70               	movlw	112
  5705  0020FA  6E18               	movwf	make8@data,c
  5706  0020FC  0E3A               	movlw	58
  5707  0020FE  6E19               	movwf	make8@data+1,c
  5708  002100  0E00               	movlw	0
  5709  002102  6E1A               	movwf	make8@data+2,c
  5710  002104  0E00               	movlw	0
  5711  002106  6E1B               	movwf	make8@data+3,c
  5712  002108  0E01               	movlw	1
  5713  00210A  6E1C               	movwf	make8@dataLocation,c
  5714  00210C  ECB9  F01B         	call	_make8	;wreg free
  5715  002110  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  5716                           
  5717                           ;FlashApp.c: 154: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4580,0);
  5718  002112  0E70               	movlw	112
  5719  002114  6E18               	movwf	make8@data,c
  5720  002116  0E3A               	movlw	58
  5721  002118  6E19               	movwf	make8@data+1,c
  5722  00211A  0E00               	movlw	0
  5723  00211C  6E1A               	movwf	make8@data+2,c
  5724  00211E  0E00               	movlw	0
  5725  002120  6E1B               	movwf	make8@data+3,c
  5726  002122  0E00               	movlw	0
  5727  002124  6E1C               	movwf	make8@dataLocation,c
  5728  002126  ECB9  F01B         	call	_make8	;wreg free
  5729  00212A  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  5730                           
  5731                           ;FlashApp.c: 157: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5732  00212C  C03E  F024         	movff	_writeAddress,??_FlashReadCondition
  5733  002130  C03F  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5734  002134  C040  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5735  002138  C041  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5736  00213C  1E24               	comf	??_FlashReadCondition,f,c
  5737  00213E  1E25               	comf	??_FlashReadCondition+1,f,c
  5738  002140  1E26               	comf	??_FlashReadCondition+2,f,c
  5739  002142  1E27               	comf	??_FlashReadCondition+3,f,c
  5740  002144  2A24               	incf	??_FlashReadCondition,f,c
  5741  002146  0E00               	movlw	0
  5742  002148  2225               	addwfc	??_FlashReadCondition+1,f,c
  5743  00214A  2226               	addwfc	??_FlashReadCondition+2,f,c
  5744  00214C  2227               	addwfc	??_FlashReadCondition+3,f,c
  5745  00214E  0EF0               	movlw	240
  5746  002150  2424               	addwf	??_FlashReadCondition,w,c
  5747  002152  6E18               	movwf	make8@data,c
  5748  002154  0E7F               	movlw	127
  5749  002156  2025               	addwfc	??_FlashReadCondition+1,w,c
  5750  002158  6E19               	movwf	make8@data+1,c
  5751  00215A  0E00               	movlw	0
  5752  00215C  2026               	addwfc	??_FlashReadCondition+2,w,c
  5753  00215E  6E1A               	movwf	make8@data+2,c
  5754  002160  0E00               	movlw	0
  5755  002162  2027               	addwfc	??_FlashReadCondition+3,w,c
  5756  002164  6E1B               	movwf	make8@data+3,c
  5757  002166  0E01               	movlw	1
  5758  002168  6E1C               	movwf	make8@dataLocation,c
  5759  00216A  ECB9  F01B         	call	_make8	;wreg free
  5760  00216E  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  5761                           
  5762                           ;FlashApp.c: 158: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5763  002170  C03E  F024         	movff	_writeAddress,??_FlashReadCondition
  5764  002174  C03F  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5765  002178  C040  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5766  00217C  C041  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5767  002180  1E24               	comf	??_FlashReadCondition,f,c
  5768  002182  1E25               	comf	??_FlashReadCondition+1,f,c
  5769  002184  1E26               	comf	??_FlashReadCondition+2,f,c
  5770  002186  1E27               	comf	??_FlashReadCondition+3,f,c
  5771  002188  2A24               	incf	??_FlashReadCondition,f,c
  5772  00218A  0E00               	movlw	0
  5773  00218C  2225               	addwfc	??_FlashReadCondition+1,f,c
  5774  00218E  2226               	addwfc	??_FlashReadCondition+2,f,c
  5775  002190  2227               	addwfc	??_FlashReadCondition+3,f,c
  5776  002192  0EF0               	movlw	240
  5777  002194  2424               	addwf	??_FlashReadCondition,w,c
  5778  002196  6E18               	movwf	make8@data,c
  5779  002198  0E7F               	movlw	127
  5780  00219A  2025               	addwfc	??_FlashReadCondition+1,w,c
  5781  00219C  6E19               	movwf	make8@data+1,c
  5782  00219E  0E00               	movlw	0
  5783  0021A0  2026               	addwfc	??_FlashReadCondition+2,w,c
  5784  0021A2  6E1A               	movwf	make8@data+2,c
  5785  0021A4  0E00               	movlw	0
  5786  0021A6  2027               	addwfc	??_FlashReadCondition+3,w,c
  5787  0021A8  6E1B               	movwf	make8@data+3,c
  5788  0021AA  0E00               	movlw	0
  5789  0021AC  6E1C               	movwf	make8@dataLocation,c
  5790  0021AE  ECB9  F01B         	call	_make8	;wreg free
  5791  0021B2  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  5792                           
  5793                           ;FlashApp.c: 160: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5794  0021B4  0E28               	movlw	low FlashReadCondition@TxMsg
  5795  0021B6  6E18               	movwf	crc8@dataArray,c
  5796  0021B8  0E00               	movlw	high FlashReadCondition@TxMsg
  5797  0021BA  6E19               	movwf	crc8@dataArray+1,c
  5798  0021BC  0E00               	movlw	0
  5799  0021BE  6E1B               	movwf	crc8@dataSize+1,c
  5800  0021C0  0E08               	movlw	8
  5801  0021C2  6E1A               	movwf	crc8@dataSize,c
  5802  0021C4  EC40  F01D         	call	_crc8	;wreg free
  5803  0021C8  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  5804                           
  5805                           ;FlashApp.c: 162: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5806  0021CA  0E28               	movlw	low FlashReadCondition@TxMsg
  5807  0021CC  6E19               	movwf	WriteUartMessage@dataBuf,c
  5808  0021CE  0E00               	movlw	high FlashReadCondition@TxMsg
  5809  0021D0  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5810  0021D2  0E00               	movlw	0
  5811  0021D4  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5812  0021D6  0E09               	movlw	9
  5813  0021D8  6E1B               	movwf	WriteUartMessage@dataSize,c
  5814  0021DA  ECF2  F01E         	call	_WriteUartMessage	;wreg free
  5815  0021DE  0012               	return		;funcret
  5816  0021E0                     __end_of_FlashReadCondition:
  5817                           	opt stack 0
  5818                           tosu	equ	0xFFF
  5819                           tosh	equ	0xFFE
  5820                           tosl	equ	0xFFD
  5821                           pclath	equ	0xFFA
  5822                           tblptru	equ	0xFF8
  5823                           tblptrh	equ	0xFF7
  5824                           tblptrl	equ	0xFF6
  5825                           tablat	equ	0xFF5
  5826                           prodh	equ	0xFF4
  5827                           prodl	equ	0xFF3
  5828                           postinc0	equ	0xFEE
  5829                           plusw0	equ	0xFEB
  5830                           wreg	equ	0xFE8
  5831                           postdec1	equ	0xFE5
  5832                           fsr1l	equ	0xFE1
  5833                           indf2	equ	0xFDF
  5834                           postinc2	equ	0xFDE
  5835                           plusw2	equ	0xFDB
  5836                           fsr2h	equ	0xFDA
  5837                           fsr2l	equ	0xFD9
  5838                           status	equ	0xFD8
  5839                           
  5840 ;; *************** function _FlashEreaseMem *****************
  5841 ;; Defined at:
  5842 ;;		line 129 in file "FlashApp.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;		None
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;		None
  5847 ;; Return value:  Size  Location     Type
  5848 ;;                  1    wreg      void 
  5849 ;; Registers used:
  5850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5856 ;;      Params:         0       0       0       0       0       0       0
  5857 ;;      Locals:         0       0       0       0       0       0       0
  5858 ;;      Temps:          0       0       0       0       0       0       0
  5859 ;;      Totals:         0       0       0       0       0       0       0
  5860 ;;Total ram usage:        0 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    7
  5863 ;; This function calls:
  5864 ;;		_SendAckMessage
  5865 ;;		_ZeroArray
  5866 ;; This function is called by:
  5867 ;;		_GroupFlashMemory
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           	psect	text18
  5872  0039DC                     __ptext18:
  5873                           	opt stack 0
  5874  0039DC                     _FlashEreaseMem:
  5875                           	opt stack 21
  5876                           
  5877                           ;FlashApp.c: 131: writeAddress = 0x4580;
  5878                           
  5879                           ;incstack = 0
  5880  0039DC  0E80               	movlw	128
  5881  0039DE  6E3E               	movwf	_writeAddress,c
  5882  0039E0  0E45               	movlw	69
  5883  0039E2  6E3F               	movwf	_writeAddress+1,c
  5884  0039E4  0E00               	movlw	0
  5885  0039E6  6E40               	movwf	_writeAddress+2,c
  5886  0039E8  0E00               	movlw	0
  5887  0039EA  6E41               	movwf	_writeAddress+3,c
  5888                           
  5889                           ;FlashApp.c: 132: readAddress = 0x4580;
  5890  0039EC  0E80               	movlw	128
  5891  0039EE  0101               	movlb	1	; () banked
  5892  0039F0  6FC8               	movwf	_readAddress& (0+255),b
  5893  0039F2  0E45               	movlw	69
  5894  0039F4  6FC9               	movwf	(_readAddress+1)& (0+255),b
  5895  0039F6  0E00               	movlw	0
  5896  0039F8  6FCA               	movwf	(_readAddress+2)& (0+255),b
  5897  0039FA  0E00               	movlw	0
  5898  0039FC  6FCB               	movwf	(_readAddress+3)& (0+255),b
  5899                           
  5900                           ;FlashApp.c: 133: numOfValidateSamples = 0;
  5901  0039FE  0E00               	movlw	0
  5902  003A00  6F30               	movwf	_numOfValidateSamples& (0+255),b
  5903  003A02  0E00               	movlw	0
  5904  003A04  6F31               	movwf	(_numOfValidateSamples+1)& (0+255),b
  5905  003A06  0E00               	movlw	0
  5906  003A08  6F32               	movwf	(_numOfValidateSamples+2)& (0+255),b
  5907  003A0A  0E00               	movlw	0
  5908  003A0C  6F33               	movwf	(_numOfValidateSamples+3)& (0+255),b
  5909                           
  5910                           ; BSR set to: 1
  5911                           ;FlashApp.c: 134: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  5912  003A0E  0E3C               	movlw	low _sampleArray
  5913  003A10  6E20               	movwf	ZeroArray@array,c
  5914  003A12  0E01               	movlw	high _sampleArray
  5915  003A14  6E21               	movwf	ZeroArray@array+1,c
  5916  003A16  0E00               	movlw	0
  5917  003A18  6E23               	movwf	ZeroArray@size+1,c
  5918  003A1A  0E20               	movlw	32
  5919  003A1C  6E22               	movwf	ZeroArray@size,c
  5920  003A1E  ECBF  F020         	call	_ZeroArray	;wreg free
  5921                           
  5922                           ;FlashApp.c: 135: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  5923  003A22  0E51               	movlw	81
  5924  003A24  6E24               	movwf	SendAckMessage@inRequest,c
  5925  003A26  0E05               	movlw	5
  5926  003A28  EC17  F01D         	call	_SendAckMessage
  5927  003A2C  0012               	return		;funcret
  5928  003A2E                     __end_of_FlashEreaseMem:
  5929                           	opt stack 0
  5930                           tosu	equ	0xFFF
  5931                           tosh	equ	0xFFE
  5932                           tosl	equ	0xFFD
  5933                           pclath	equ	0xFFA
  5934                           tblptru	equ	0xFF8
  5935                           tblptrh	equ	0xFF7
  5936                           tblptrl	equ	0xFF6
  5937                           tablat	equ	0xFF5
  5938                           prodh	equ	0xFF4
  5939                           prodl	equ	0xFF3
  5940                           postinc0	equ	0xFEE
  5941                           plusw0	equ	0xFEB
  5942                           wreg	equ	0xFE8
  5943                           postdec1	equ	0xFE5
  5944                           fsr1l	equ	0xFE1
  5945                           indf2	equ	0xFDF
  5946                           postinc2	equ	0xFDE
  5947                           plusw2	equ	0xFDB
  5948                           fsr2h	equ	0xFDA
  5949                           fsr2l	equ	0xFD9
  5950                           status	equ	0xFD8
  5951                           
  5952 ;; *************** function _DacSetValue *****************
  5953 ;; Defined at:
  5954 ;;		line 30 in file "DacApp.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  data            2   42[BANK0 ] PTR unsigned char 
  5957 ;;		 -> rxMsgData(20), 
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;  retVal          8   49[BANK0 ] struct .
  5960 ;;  dacIndex        1   48[BANK0 ] char 
  5961 ;; Return value:  Size  Location     Type
  5962 ;;                  1    wreg      void 
  5963 ;; Registers used:
  5964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5965 ;; Tracked objects:
  5966 ;;		On entry : 0/0
  5967 ;;		On exit  : 0/0
  5968 ;;		Unchanged: 0/0
  5969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5970 ;;      Params:         0       2       0       0       0       0       0
  5971 ;;      Locals:         0       9       0       0       0       0       0
  5972 ;;      Temps:          0       4       0       0       0       0       0
  5973 ;;      Totals:         0      15       0       0       0       0       0
  5974 ;;Total ram usage:       15 bytes
  5975 ;; Hardware stack levels used:    1
  5976 ;; Hardware stack levels required when called:    8
  5977 ;; This function calls:
  5978 ;;		_GetIntFromUartData
  5979 ;;		_SWSPI_send_word
  5980 ;;		_SendAckMessage
  5981 ;;		_StoreIntInEeprom
  5982 ;; This function is called by:
  5983 ;;		_GroupDAC
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           	psect	text19
  5988  002FF6                     __ptext19:
  5989                           	opt stack 0
  5990  002FF6                     _DacSetValue:
  5991                           	opt stack 20
  5992                           
  5993                           ;DacApp.c: 32: INT_VAL retVal;
  5994                           ;DacApp.c: 33: retVal = GetIntFromUartData(16, data);
  5995                           
  5996                           ;incstack = 0
  5997  002FF6  C08A  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  5998  002FFA  C08B  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  5999  002FFE  0E10               	movlw	16
  6000  003000  EC84  F00E         	call	_GetIntFromUartData
  6001  003004  EE20  F091         	lfsr	2,DacSetValue@retVal
  6002  003008  0E07               	movlw	7
  6003  00300A                     u8481:
  6004  00300A  CFEB FFDB          	movff	plusw0,plusw2
  6005  00300E  06E8               	decf	wreg,f,c
  6006  003010  E2FC               	bc	u8481
  6007                           
  6008                           ;DacApp.c: 34: SWSPI_send_word(EXT_DAC, retVal.num, 1);
  6009  003012  C091  F029         	movff	DacSetValue@retVal,SWSPI_send_word@data
  6010  003016  C092  F02A         	movff	DacSetValue@retVal+1,SWSPI_send_word@data+1
  6011  00301A  C093  F02B         	movff	DacSetValue@retVal+2,SWSPI_send_word@data+2
  6012  00301E  C094  F02C         	movff	DacSetValue@retVal+3,SWSPI_send_word@data+3
  6013  003022  0E01               	movlw	1
  6014  003024  6E2D               	movwf	SWSPI_send_word@dataSize,c
  6015  003026  0E02               	movlw	2
  6016  003028  ECA6  F017         	call	_SWSPI_send_word
  6017                           
  6018                           ;DacApp.c: 37: int8_t dacIndex = (retVal.num >> 14);
  6019  00302C  C091  F08C         	movff	DacSetValue@retVal,??_DacSetValue
  6020  003030  C092  F08D         	movff	DacSetValue@retVal+1,??_DacSetValue+1
  6021  003034  C093  F08E         	movff	DacSetValue@retVal+2,??_DacSetValue+2
  6022  003038  C094  F08F         	movff	DacSetValue@retVal+3,??_DacSetValue+3
  6023  00303C  0E0F               	movlw	15
  6024  00303E  D006               	goto	u8490
  6025  003040                     u8495:
  6026  003040  0100               	movlb	0	; () banked
  6027  003042  90D8               	bcf	status,0,c
  6028  003044  338F               	rrcf	(??_DacSetValue+3)& (0+255),f,b
  6029  003046  338E               	rrcf	(??_DacSetValue+2)& (0+255),f,b
  6030  003048  338D               	rrcf	(??_DacSetValue+1)& (0+255),f,b
  6031  00304A  338C               	rrcf	??_DacSetValue& (0+255),f,b
  6032  00304C                     u8490:
  6033  00304C  2EE8               	decfsz	wreg,f,c
  6034  00304E  D7F8               	goto	u8495
  6035  003050  518C               	movf	??_DacSetValue& (0+255),w,b
  6036  003052  6F90               	movwf	DacSetValue@dacIndex& (0+255),b
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;DacApp.c: 38: StoreIntInEeprom(retVal.num, (0x40) | DAC_ADDRES[dacIndex], 2);
  6040  003054  C091  F021         	movff	DacSetValue@retVal,StoreIntInEeprom@data
  6041  003058  C092  F022         	movff	DacSetValue@retVal+1,StoreIntInEeprom@data+1
  6042  00305C  C093  F023         	movff	DacSetValue@retVal+2,StoreIntInEeprom@data+2
  6043  003060  C094  F024         	movff	DacSetValue@retVal+3,StoreIntInEeprom@data+3
  6044  003064  5190               	movf	DacSetValue@dacIndex& (0+255),w,b
  6045  003066  0D01               	mullw	1
  6046  003068  0E53               	movlw	low _DAC_ADDRES
  6047  00306A  24F3               	addwf	prodl,w,c
  6048  00306C  6EF6               	movwf	tblptrl,c
  6049  00306E  0E06               	movlw	high _DAC_ADDRES
  6050  003070  20F4               	addwfc	prodh,w,c
  6051  003072  6EF7               	movwf	tblptrh,c
  6052  003074                     	if	0	;There are less than 3 active tblptr bytes
  6053  003074                     	endif
  6054  003074  0008               	tblrd		*
  6055  003076  50F5               	movf	tablat,w,c
  6056  003078  0940               	iorlw	64
  6057  00307A  6E25               	movwf	StoreIntInEeprom@address,c
  6058  00307C  0E00               	movlw	0
  6059  00307E  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  6060  003080  0E02               	movlw	2
  6061  003082  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  6062  003084  EC9E  F01E         	call	_StoreIntInEeprom	;wreg free
  6063                           
  6064                           ;DacApp.c: 41: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  6065  003088  0E61               	movlw	97
  6066  00308A  6E24               	movwf	SendAckMessage@inRequest,c
  6067  00308C  0E06               	movlw	6
  6068  00308E  EC17  F01D         	call	_SendAckMessage
  6069  003092  0012               	return		;funcret
  6070  003094                     __end_of_DacSetValue:
  6071                           	opt stack 0
  6072                           tosu	equ	0xFFF
  6073                           tosh	equ	0xFFE
  6074                           tosl	equ	0xFFD
  6075                           pclath	equ	0xFFA
  6076                           tblptru	equ	0xFF8
  6077                           tblptrh	equ	0xFF7
  6078                           tblptrl	equ	0xFF6
  6079                           tablat	equ	0xFF5
  6080                           prodh	equ	0xFF4
  6081                           prodl	equ	0xFF3
  6082                           postinc0	equ	0xFEE
  6083                           plusw0	equ	0xFEB
  6084                           wreg	equ	0xFE8
  6085                           postdec1	equ	0xFE5
  6086                           fsr1l	equ	0xFE1
  6087                           indf2	equ	0xFDF
  6088                           postinc2	equ	0xFDE
  6089                           plusw2	equ	0xFDB
  6090                           fsr2h	equ	0xFDA
  6091                           fsr2l	equ	0xFD9
  6092                           status	equ	0xFD8
  6093                           
  6094 ;; *************** function _GetIntFromUartData *****************
  6095 ;; Defined at:
  6096 ;;		line 47 in file "SystemCommon.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;  num             1    wreg     char 
  6099 ;;  data            2    6[BANK0 ] PTR unsigned char 
  6100 ;;		 -> rxMsgData(20), 
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;  num             1   26[BANK0 ] char 
  6103 ;;  idxCon          2   36[BANK0 ] int 
  6104 ;;  dataRegArr     10   16[BANK0 ] unsigned char [10]
  6105 ;;  retVal          8   28[BANK0 ] struct .
  6106 ;;  idxData         1   38[BANK0 ] unsigned char 
  6107 ;;  recVal          1   27[BANK0 ] unsigned char 
  6108 ;; Return value:  Size  Location     Type
  6109 ;;                  8    6[BANK0 ] struct .
  6110 ;; Registers used:
  6111 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6112 ;; Tracked objects:
  6113 ;;		On entry : 0/0
  6114 ;;		On exit  : 0/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6117 ;;      Params:         0       8       0       0       0       0       0
  6118 ;;      Locals:         0      23       0       0       0       0       0
  6119 ;;      Temps:          0       2       0       0       0       0       0
  6120 ;;      Totals:         0      33       0       0       0       0       0
  6121 ;;Total ram usage:       33 bytes
  6122 ;; Hardware stack levels used:    1
  6123 ;; Hardware stack levels required when called:    7
  6124 ;; This function calls:
  6125 ;;		_ZeroArray
  6126 ;;		_strtol
  6127 ;; This function is called by:
  6128 ;;		_FlashReadUart
  6129 ;;		_DacSetValue
  6130 ;;		_UpdateSynthFreq
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134                           	psect	text20
  6135  001D08                     __ptext20:
  6136                           	opt stack 0
  6137  001D08                     _GetIntFromUartData:
  6138                           	opt stack 20
  6139                           
  6140                           ;incstack = 0
  6141                           ;GetIntFromUartData@num stored from wreg
  6142  001D08  0100               	movlb	0	; () banked
  6143  001D0A  6F7A               	movwf	GetIntFromUartData@num& (0+255),b
  6144                           
  6145                           ;SystemCommon.c: 49: INT_VAL retVal;
  6146                           ;SystemCommon.c: 50: retVal.num = 0;
  6147  001D0C  0E00               	movlw	0
  6148  001D0E  0100               	movlb	0	; () banked
  6149  001D10  6F7C               	movwf	GetIntFromUartData@retVal& (0+255),b
  6150  001D12  0E00               	movlw	0
  6151  001D14  6F7D               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  6152  001D16  0E00               	movlw	0
  6153  001D18  6F7E               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  6154  001D1A  0E00               	movlw	0
  6155  001D1C  6F7F               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  6156                           
  6157                           ;SystemCommon.c: 51: retVal.con = 0;
  6158  001D1E  0E00               	movlw	0
  6159  001D20  6F80               	movwf	(GetIntFromUartData@retVal+4)& (0+255),b
  6160  001D22  0E00               	movlw	0
  6161  001D24  6F81               	movwf	(GetIntFromUartData@retVal+5)& (0+255),b
  6162  001D26  0E00               	movlw	0
  6163  001D28  6F82               	movwf	(GetIntFromUartData@retVal+6)& (0+255),b
  6164  001D2A  0E00               	movlw	0
  6165  001D2C  6F83               	movwf	(GetIntFromUartData@retVal+7)& (0+255),b
  6166                           
  6167                           ;SystemCommon.c: 52: uint8_t idxData = 0;
  6168  001D2E  0E00               	movlw	0
  6169  001D30  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6170                           
  6171                           ;SystemCommon.c: 53: char recVal = (0);
  6172  001D32  0E00               	movlw	0
  6173  001D34  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;SystemCommon.c: 55: char dataRegArr[0xA];
  6177                           ;SystemCommon.c: 56: ZeroArray(dataRegArr, 0xA);
  6178  001D36  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6179  001D38  6E20               	movwf	ZeroArray@array,c
  6180  001D3A  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6181  001D3C  6E21               	movwf	ZeroArray@array+1,c
  6182  001D3E  0E00               	movlw	0
  6183  001D40  6E23               	movwf	ZeroArray@size+1,c
  6184  001D42  0E0A               	movlw	10
  6185  001D44  6E22               	movwf	ZeroArray@size,c
  6186  001D46  ECBF  F020         	call	_ZeroArray	;wreg free
  6187                           
  6188                           ;SystemCommon.c: 58: for(idxData = 0; idxData < 0xA; idxData++)
  6189  001D4A  0E00               	movlw	0
  6190  001D4C  0100               	movlb	0	; () banked
  6191  001D4E  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6192  001D50                     l8064:
  6193                           
  6194                           ; BSR set to: 0
  6195  001D50  0E09               	movlw	9
  6196  001D52  6586               	cpfsgt	GetIntFromUartData@idxData& (0+255),b
  6197  001D54  D001               	goto	l1415
  6198  001D56  D01D               	goto	u8080
  6199  001D58                     l1415:
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;SystemCommon.c: 59: {
  6203                           ;SystemCommon.c: 60: recVal = data[idxData];
  6204                           
  6205                           ; BSR set to: 0
  6206  001D58  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6207  001D5A  0D01               	mullw	1
  6208  001D5C  50F3               	movf	prodl,w,c
  6209  001D5E  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6210  001D60  6ED9               	movwf	fsr2l,c
  6211  001D62  50F4               	movf	prodh,w,c
  6212  001D64  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6213  001D66  6EDA               	movwf	fsr2h,c
  6214  001D68  50DF               	movf	indf2,w,c
  6215  001D6A  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;SystemCommon.c: 61: if(recVal == 0x10)
  6219  001D6C  0E10               	movlw	16
  6220  001D6E  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6221  001D70  A4D8               	btfss	status,2,c
  6222  001D72  D002               	goto	l1417
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;SystemCommon.c: 62: {
  6226                           ;SystemCommon.c: 63: idxData++;
  6227  001D74  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6228                           
  6229                           ;SystemCommon.c: 64: break;
  6230  001D76  D00D               	goto	u8080
  6231  001D78                     l1417:
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;SystemCommon.c: 66: else
  6235                           ;SystemCommon.c: 67: {
  6236                           ;SystemCommon.c: 68: dataRegArr[idxData] = recVal + '0';
  6237                           
  6238                           ; BSR set to: 0
  6239  001D78  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6240  001D7A  0D01               	mullw	1
  6241  001D7C  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6242  001D7E  24F3               	addwf	prodl,w,c
  6243  001D80  6ED9               	movwf	fsr2l,c
  6244  001D82  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6245  001D84  20F4               	addwfc	prodh,w,c
  6246  001D86  6EDA               	movwf	fsr2h,c
  6247  001D88  517B               	movf	GetIntFromUartData@recVal& (0+255),w,b
  6248  001D8A  0F30               	addlw	48
  6249  001D8C  6EDF               	movwf	indf2,c
  6250                           
  6251                           ; BSR set to: 0
  6252                           
  6253                           ; BSR set to: 0
  6254  001D8E  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6255  001D90  D7DF               	goto	l8064
  6256  001D92                     u8080:
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;SystemCommon.c: 69: }
  6260                           ;SystemCommon.c: 70: }
  6261                           ;SystemCommon.c: 71: retVal.num = strtol(dataRegArr, (0), num);
  6262                           
  6263                           ; BSR set to: 0
  6264  001D92  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6265  001D94  6E26               	movwf	strtol@s,c
  6266  001D96  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6267  001D98  6E27               	movwf	strtol@s+1,c
  6268  001D9A  0E00               	movlw	0
  6269  001D9C  6E28               	movwf	strtol@endptr,c
  6270  001D9E  0E00               	movlw	0
  6271  001DA0  6E29               	movwf	strtol@endptr+1,c
  6272  001DA2  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6273  001DA4  6E2A               	movwf	strtol@base,c
  6274  001DA6  6A2B               	clrf	strtol@base+1,c
  6275  001DA8  BE2A               	btfsc	strtol@base,7,c
  6276  001DAA  062B               	decf	strtol@base+1,f,c
  6277  001DAC  EC25  F00B         	call	_strtol	;wreg free
  6278  001DB0  C026  F07C         	movff	?_strtol,GetIntFromUartData@retVal
  6279  001DB4  C027  F07D         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  6280  001DB8  C028  F07E         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  6281  001DBC  C029  F07F         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  6282                           
  6283                           ;SystemCommon.c: 73: ZeroArray(dataRegArr, 0xA);
  6284  001DC0  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6285  001DC2  6E20               	movwf	ZeroArray@array,c
  6286  001DC4  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6287  001DC6  6E21               	movwf	ZeroArray@array+1,c
  6288  001DC8  0E00               	movlw	0
  6289  001DCA  6E23               	movwf	ZeroArray@size+1,c
  6290  001DCC  0E0A               	movlw	10
  6291  001DCE  6E22               	movwf	ZeroArray@size,c
  6292  001DD0  ECBF  F020         	call	_ZeroArray	;wreg free
  6293                           
  6294                           ;SystemCommon.c: 75: for(int idxCon = 0; idxCon < 0xA; idxCon++)
  6295  001DD4  0E00               	movlw	0
  6296  001DD6  0100               	movlb	0	; () banked
  6297  001DD8  6F85               	movwf	(GetIntFromUartData@idxCon+1)& (0+255),b
  6298  001DDA  0E00               	movlw	0
  6299  001DDC  6F84               	movwf	GetIntFromUartData@idxCon& (0+255),b
  6300  001DDE                     l8086:
  6301                           
  6302                           ; BSR set to: 0
  6303  001DDE  BF85               	btfsc	(GetIntFromUartData@idxCon+1)& (0+255),7,b
  6304  001DE0  D006               	goto	l1419
  6305  001DE2  5185               	movf	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6306  001DE4  E12E               	bnz	l8104
  6307  001DE6  0E0A               	movlw	10
  6308  001DE8  5D84               	subwf	GetIntFromUartData@idxCon& (0+255),w,b
  6309  001DEA  B0D8               	btfsc	status,0,c
  6310  001DEC  D02A               	goto	u8110
  6311  001DEE                     l1419:
  6312                           
  6313                           ; BSR set to: 0
  6314                           ;SystemCommon.c: 76: {
  6315                           ;SystemCommon.c: 77: recVal = data[idxData + idxCon];
  6316                           
  6317                           ; BSR set to: 0
  6318  001DEE  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6319  001DF0  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6320  001DF2  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6321  001DF4  0E00               	movlw	0
  6322  001DF6  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6323  001DF8  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6324  001DFA  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6325  001DFC  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6326  001DFE  6ED9               	movwf	fsr2l,c
  6327  001E00  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6328  001E02  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6329  001E04  6EDA               	movwf	fsr2h,c
  6330  001E06  50DF               	movf	indf2,w,c
  6331  001E08  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;SystemCommon.c: 78: if(recVal == 0x23)
  6335  001E0A  0E23               	movlw	35
  6336  001E0C  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6337  001E0E  B4D8               	btfsc	status,2,c
  6338  001E10  D018               	goto	u8110
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;SystemCommon.c: 82: else
  6342                           ;SystemCommon.c: 83: {
  6343                           ;SystemCommon.c: 84: dataRegArr[idxCon] = data[idxCon + idxData] + '0';
  6344                           
  6345                           ; BSR set to: 0
  6346                           
  6347                           ; BSR set to: 0
  6348                           ;SystemCommon.c: 81: }
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;SystemCommon.c: 79: {
  6352                           ;SystemCommon.c: 80: break;
  6353  001E12  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6354  001E14  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6355  001E16  6ED9               	movwf	fsr2l,c
  6356  001E18  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6357  001E1A  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6358  001E1C  6EDA               	movwf	fsr2h,c
  6359  001E1E  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6360  001E20  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6361  001E22  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6362  001E24  0E00               	movlw	0
  6363  001E26  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6364  001E28  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6365  001E2A  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6366  001E2C  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6367  001E2E  6EE1               	movwf	fsr1l,c
  6368  001E30  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6369  001E32  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6370  001E34  6EE2               	movwf	fsr1h,c
  6371  001E36  50E7               	movf	indf1,w,c
  6372  001E38  0F30               	addlw	48
  6373  001E3A  6EDF               	movwf	indf2,c
  6374                           
  6375                           ; BSR set to: 0
  6376                           
  6377                           ; BSR set to: 0
  6378  001E3C  4B84               	infsnz	GetIntFromUartData@idxCon& (0+255),f,b
  6379  001E3E  2B85               	incf	(GetIntFromUartData@idxCon+1)& (0+255),f,b
  6380  001E40  D7CE               	goto	l8086
  6381  001E42                     u8110:
  6382  001E42                     l8104:
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;SystemCommon.c: 85: }
  6386                           ;SystemCommon.c: 86: }
  6387                           ;SystemCommon.c: 87: retVal.con = strtol(dataRegArr, (0), num);
  6388  001E42  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6389  001E44  6E26               	movwf	strtol@s,c
  6390  001E46  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6391  001E48  6E27               	movwf	strtol@s+1,c
  6392  001E4A  0E00               	movlw	0
  6393  001E4C  6E28               	movwf	strtol@endptr,c
  6394  001E4E  0E00               	movlw	0
  6395  001E50  6E29               	movwf	strtol@endptr+1,c
  6396  001E52  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6397  001E54  6E2A               	movwf	strtol@base,c
  6398  001E56  6A2B               	clrf	strtol@base+1,c
  6399  001E58  BE2A               	btfsc	strtol@base,7,c
  6400  001E5A  062B               	decf	strtol@base+1,f,c
  6401  001E5C  EC25  F00B         	call	_strtol	;wreg free
  6402  001E60  C026  F080         	movff	?_strtol,GetIntFromUartData@retVal+4
  6403  001E64  C027  F081         	movff	?_strtol+1,GetIntFromUartData@retVal+5
  6404  001E68  C028  F082         	movff	?_strtol+2,GetIntFromUartData@retVal+6
  6405  001E6C  C029  F083         	movff	?_strtol+3,GetIntFromUartData@retVal+7
  6406                           
  6407                           ;SystemCommon.c: 89: return retVal;
  6408  001E70  EE20  F07C         	lfsr	2,GetIntFromUartData@retVal
  6409  001E74  EE00  F066         	lfsr	0,?_GetIntFromUartData
  6410  001E78  0E07               	movlw	7
  6411  001E7A                     u8121:
  6412  001E7A  CFDB FFEB          	movff	plusw2,plusw0
  6413  001E7E  06E8               	decf	wreg,f,c
  6414  001E80  E2FC               	bc	u8121
  6415  001E82  0012               	return	
  6416  001E84                     __end_of_GetIntFromUartData:
  6417                           	opt stack 0
  6418                           tosu	equ	0xFFF
  6419                           tosh	equ	0xFFE
  6420                           tosl	equ	0xFFD
  6421                           pclath	equ	0xFFA
  6422                           tblptru	equ	0xFF8
  6423                           tblptrh	equ	0xFF7
  6424                           tblptrl	equ	0xFF6
  6425                           tablat	equ	0xFF5
  6426                           prodh	equ	0xFF4
  6427                           prodl	equ	0xFF3
  6428                           postinc0	equ	0xFEE
  6429                           plusw0	equ	0xFEB
  6430                           wreg	equ	0xFE8
  6431                           indf1	equ	0xFE7
  6432                           postdec1	equ	0xFE5
  6433                           fsr1h	equ	0xFE2
  6434                           fsr1l	equ	0xFE1
  6435                           indf2	equ	0xFDF
  6436                           postinc2	equ	0xFDE
  6437                           plusw2	equ	0xFDB
  6438                           fsr2h	equ	0xFDA
  6439                           fsr2l	equ	0xFD9
  6440                           status	equ	0xFD8
  6441                           
  6442 ;; *************** function _strtol *****************
  6443 ;; Defined at:
  6444 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  6445 ;; Parameters:    Size  Location     Type
  6446 ;;  s               2   37[COMRAM] PTR const unsigned char 
  6447 ;;		 -> GetIntFromUartData@dataRegArr(10), 
  6448 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  6449 ;;		 -> NULL(0), 
  6450 ;;  base            2   41[COMRAM] int 
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  a               4    1[BANK0 ] long 
  6453 ;;  c               1    5[BANK0 ] unsigned char 
  6454 ;;  sign            1    0[BANK0 ] unsigned char 
  6455 ;; Return value:  Size  Location     Type
  6456 ;;                  4   37[COMRAM] long 
  6457 ;; Registers used:
  6458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6459 ;; Tracked objects:
  6460 ;;		On entry : 0/0
  6461 ;;		On exit  : 0/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6464 ;;      Params:         6       0       0       0       0       0       0
  6465 ;;      Locals:         0       6       0       0       0       0       0
  6466 ;;      Temps:          4       0       0       0       0       0       0
  6467 ;;      Totals:        10       6       0       0       0       0       0
  6468 ;;Total ram usage:       16 bytes
  6469 ;; Hardware stack levels used:    1
  6470 ;; Hardware stack levels required when called:    6
  6471 ;; This function calls:
  6472 ;;		___lmul
  6473 ;;		_isalpha
  6474 ;;		_isdigit
  6475 ;;		_isspace
  6476 ;;		_toupper
  6477 ;; This function is called by:
  6478 ;;		_GetIntFromUartData
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           	psect	text21
  6483  00164A                     __ptext21:
  6484                           	opt stack 0
  6485  00164A                     _strtol:
  6486                           	opt stack 20
  6487                           
  6488                           ;incstack = 0
  6489  00164A  C026  FFD9         	movff	strtol@s,fsr2l
  6490  00164E  C027  FFDA         	movff	strtol@s+1,fsr2h
  6491  001652  50DF               	movf	indf2,w,c
  6492  001654  0100               	movlb	0	; () banked
  6493  001656  6F65               	movwf	strtol@c& (0+255),b
  6494                           
  6495                           ; BSR set to: 0
  6496  001658  4A26               	infsnz	strtol@s,f,c
  6497  00165A  2A27               	incf	strtol@s+1,f,c
  6498                           
  6499                           ; BSR set to: 0
  6500  00165C  5165               	movf	strtol@c& (0+255),w,b
  6501  00165E  EC13  F020         	call	_isspace
  6502  001662  B0D8               	btfsc	status,0,c
  6503  001664  D7F2               	goto	_strtol
  6504  001666  0E00               	movlw	0
  6505  001668  0100               	movlb	0	; () banked
  6506  00166A  6F61               	movwf	strtol@a& (0+255),b
  6507  00166C  0E00               	movlw	0
  6508  00166E  6F62               	movwf	(strtol@a+1)& (0+255),b
  6509  001670  0E00               	movlw	0
  6510  001672  6F63               	movwf	(strtol@a+2)& (0+255),b
  6511  001674  0E00               	movlw	0
  6512  001676  6F64               	movwf	(strtol@a+3)& (0+255),b
  6513  001678  0E00               	movlw	0
  6514  00167A  6F60               	movwf	strtol@sign& (0+255),b
  6515                           
  6516                           ; BSR set to: 0
  6517  00167C  0E2D               	movlw	45
  6518  00167E  1965               	xorwf	strtol@c& (0+255),w,b
  6519  001680  A4D8               	btfss	status,2,c
  6520  001682  D003               	goto	l2182
  6521                           
  6522                           ; BSR set to: 0
  6523  001684  0E01               	movlw	1
  6524  001686  6F60               	movwf	strtol@sign& (0+255),b
  6525  001688  D004               	goto	u7910
  6526  00168A                     l2182:
  6527                           
  6528                           ; BSR set to: 0
  6529                           
  6530                           ; BSR set to: 0
  6531  00168A  0E2B               	movlw	43
  6532  00168C  1965               	xorwf	strtol@c& (0+255),w,b
  6533  00168E  A4D8               	btfss	status,2,c
  6534  001690  D008               	goto	l2184
  6535  001692                     u7910:
  6536                           
  6537                           ; BSR set to: 0
  6538  001692  C026  FFD9         	movff	strtol@s,fsr2l
  6539  001696  C027  FFDA         	movff	strtol@s+1,fsr2h
  6540  00169A  50DF               	movf	indf2,w,c
  6541  00169C  6F65               	movwf	strtol@c& (0+255),b
  6542                           
  6543                           ; BSR set to: 0
  6544  00169E  4A26               	infsnz	strtol@s,f,c
  6545  0016A0  2A27               	incf	strtol@s+1,f,c
  6546  0016A2                     l2184:
  6547                           
  6548                           ; BSR set to: 0
  6549                           
  6550                           ; BSR set to: 0
  6551                           
  6552                           ; BSR set to: 0
  6553  0016A2  0E30               	movlw	48
  6554  0016A4  1965               	xorwf	strtol@c& (0+255),w,b
  6555  0016A6  A4D8               	btfss	status,2,c
  6556  0016A8  D02E               	goto	l2192
  6557                           
  6558                           ; BSR set to: 0
  6559  0016AA  C026  FFD9         	movff	strtol@s,fsr2l
  6560  0016AE  C027  FFDA         	movff	strtol@s+1,fsr2h
  6561  0016B2  50DF               	movf	indf2,w,c
  6562  0016B4  6F65               	movwf	strtol@c& (0+255),b
  6563                           
  6564                           ; BSR set to: 0
  6565  0016B6  4A26               	infsnz	strtol@s,f,c
  6566  0016B8  2A27               	incf	strtol@s+1,f,c
  6567                           
  6568                           ; BSR set to: 0
  6569  0016BA  502A               	movf	strtol@base,w,c
  6570  0016BC  102B               	iorwf	strtol@base+1,w,c
  6571  0016BE  B4D8               	btfsc	status,2,c
  6572  0016C0  D005               	goto	u7940
  6573                           
  6574                           ; BSR set to: 0
  6575  0016C2  0E10               	movlw	16
  6576  0016C4  182A               	xorwf	strtol@base,w,c
  6577  0016C6  102B               	iorwf	strtol@base+1,w,c
  6578  0016C8  A4D8               	btfss	status,2,c
  6579  0016CA  D015               	goto	l2186
  6580  0016CC                     u7940:
  6581                           
  6582                           ; BSR set to: 0
  6583                           
  6584                           ; BSR set to: 0
  6585  0016CC  0E78               	movlw	120
  6586  0016CE  1965               	xorwf	strtol@c& (0+255),w,b
  6587  0016D0  B4D8               	btfsc	status,2,c
  6588  0016D2  D004               	goto	u7960
  6589                           
  6590                           ; BSR set to: 0
  6591  0016D4  0E58               	movlw	88
  6592  0016D6  1965               	xorwf	strtol@c& (0+255),w,b
  6593  0016D8  A4D8               	btfss	status,2,c
  6594  0016DA  D00D               	goto	l2186
  6595  0016DC                     u7960:
  6596                           
  6597                           ; BSR set to: 0
  6598                           
  6599                           ; BSR set to: 0
  6600  0016DC  0E00               	movlw	0
  6601  0016DE  6E2B               	movwf	strtol@base+1,c
  6602  0016E0  0E10               	movlw	16
  6603  0016E2  6E2A               	movwf	strtol@base,c
  6604                           
  6605                           ; BSR set to: 0
  6606  0016E4  C026  FFD9         	movff	strtol@s,fsr2l
  6607  0016E8  C027  FFDA         	movff	strtol@s+1,fsr2h
  6608  0016EC  50DF               	movf	indf2,w,c
  6609  0016EE  6F65               	movwf	strtol@c& (0+255),b
  6610                           
  6611                           ; BSR set to: 0
  6612  0016F0  4A26               	infsnz	strtol@s,f,c
  6613  0016F2  2A27               	incf	strtol@s+1,f,c
  6614  0016F4  D008               	goto	l2192
  6615  0016F6                     l2186:
  6616                           
  6617                           ; BSR set to: 0
  6618                           
  6619                           ; BSR set to: 0
  6620  0016F6  502A               	movf	strtol@base,w,c
  6621  0016F8  102B               	iorwf	strtol@base+1,w,c
  6622  0016FA  A4D8               	btfss	status,2,c
  6623  0016FC  D004               	goto	l2192
  6624                           
  6625                           ; BSR set to: 0
  6626  0016FE  0E00               	movlw	0
  6627  001700  6E2B               	movwf	strtol@base+1,c
  6628  001702  0E08               	movlw	8
  6629  001704  6E2A               	movwf	strtol@base,c
  6630  001706                     l2192:
  6631                           
  6632                           ; BSR set to: 0
  6633                           
  6634                           ; BSR set to: 0
  6635                           
  6636                           ; BSR set to: 0
  6637                           
  6638                           ; BSR set to: 0
  6639  001706  502A               	movf	strtol@base,w,c
  6640  001708  102B               	iorwf	strtol@base+1,w,c
  6641  00170A  A4D8               	btfss	status,2,c
  6642  00170C  D004               	goto	l2193
  6643                           
  6644                           ; BSR set to: 0
  6645  00170E  0E00               	movlw	0
  6646  001710  6E2B               	movwf	strtol@base+1,c
  6647  001712  0E0A               	movlw	10
  6648  001714  6E2A               	movwf	strtol@base,c
  6649  001716                     l2193:
  6650                           
  6651                           ; BSR set to: 0
  6652                           
  6653                           ; BSR set to: 0
  6654                           
  6655                           ; BSR set to: 0
  6656  001716  5165               	movf	strtol@c& (0+255),w,b
  6657  001718  ECFF  F01F         	call	_isalpha
  6658  00171C  A0D8               	btfss	status,0,c
  6659  00171E  D008               	goto	l2195
  6660  001720  0100               	movlb	0	; () banked
  6661  001722  5165               	movf	strtol@c& (0+255),w,b
  6662  001724  EC19  F021         	call	_toupper
  6663  001728  0FC9               	addlw	201
  6664  00172A  0100               	movlb	0	; () banked
  6665  00172C  6F65               	movwf	strtol@c& (0+255),b
  6666  00172E  D009               	goto	l2198
  6667  001730                     l2195:
  6668                           
  6669                           ; BSR set to: 0
  6670  001730  0100               	movlb	0	; () banked
  6671  001732  5165               	movf	strtol@c& (0+255),w,b
  6672  001734  ECA1  F020         	call	_isdigit
  6673  001738  A0D8               	btfss	status,0,c
  6674  00173A  D039               	goto	l2199
  6675  00173C  0E30               	movlw	48
  6676  00173E  0100               	movlb	0	; () banked
  6677  001740  5F65               	subwf	strtol@c& (0+255),f,b
  6678  001742                     l2198:
  6679                           
  6680                           ; BSR set to: 0
  6681                           
  6682                           ; BSR set to: 0
  6683                           
  6684                           ; BSR set to: 0
  6685  001742  5165               	movf	strtol@c& (0+255),w,b
  6686  001744  6E2C               	movwf	??_strtol& (0+255),c
  6687  001746  6A2D               	clrf	(??_strtol+1)& (0+255),c
  6688  001748  502A               	movf	strtol@base,w,c
  6689  00174A  5C2C               	subwf	??_strtol,w,c
  6690  00174C  502D               	movf	??_strtol+1,w,c
  6691  00174E  0A80               	xorlw	128
  6692  001750  6E2E               	movwf	(??_strtol+2)& (0+255),c
  6693  001752  502B               	movf	strtol@base+1,w,c
  6694  001754  0A80               	xorlw	128
  6695  001756  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  6696  001758  B0D8               	btfsc	status,0,c
  6697  00175A  D029               	goto	l2199
  6698                           
  6699                           ; BSR set to: 0
  6700                           
  6701                           ; BSR set to: 0
  6702                           
  6703                           ; BSR set to: 0
  6704  00175C  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  6705  001760  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  6706  001764  0E00               	movlw	0
  6707  001766  BE1B               	btfsc	___lmul@multiplier+1,7,c
  6708  001768  0EFF               	movlw	-1
  6709  00176A  6E1C               	movwf	___lmul@multiplier+2,c
  6710  00176C  6E1D               	movwf	___lmul@multiplier+3,c
  6711  00176E  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  6712  001772  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  6713  001776  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  6714  00177A  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  6715  00177E  ECC3  F01C         	call	___lmul	;wreg free
  6716  001782  0100               	movlb	0	; () banked
  6717  001784  5165               	movf	strtol@c& (0+255),w,b
  6718  001786  241A               	addwf	?___lmul,w,c
  6719  001788  6F61               	movwf	strtol@a& (0+255),b
  6720  00178A  0E00               	movlw	0
  6721  00178C  201B               	addwfc	?___lmul+1,w,c
  6722  00178E  6F62               	movwf	(strtol@a+1)& (0+255),b
  6723  001790  0E00               	movlw	0
  6724  001792  201C               	addwfc	?___lmul+2,w,c
  6725  001794  6F63               	movwf	(strtol@a+2)& (0+255),b
  6726  001796  0E00               	movlw	0
  6727  001798  201D               	addwfc	?___lmul+3,w,c
  6728  00179A  6F64               	movwf	(strtol@a+3)& (0+255),b
  6729                           
  6730                           ; BSR set to: 0
  6731  00179C  C026  FFD9         	movff	strtol@s,fsr2l
  6732  0017A0  C027  FFDA         	movff	strtol@s+1,fsr2h
  6733  0017A4  50DF               	movf	indf2,w,c
  6734  0017A6  6F65               	movwf	strtol@c& (0+255),b
  6735                           
  6736                           ; BSR set to: 0
  6737  0017A8  4A26               	infsnz	strtol@s,f,c
  6738  0017AA  2A27               	incf	strtol@s+1,f,c
  6739  0017AC  D7B4               	goto	l2193
  6740  0017AE                     l2199:
  6741                           
  6742                           ; BSR set to: 0
  6743  0017AE  5028               	movf	strtol@endptr,w,c
  6744  0017B0  1029               	iorwf	strtol@endptr+1,w,c
  6745  0017B2  B4D8               	btfsc	status,2,c
  6746  0017B4  D00E               	goto	l2201
  6747  0017B6  0EFF               	movlw	255
  6748  0017B8  2426               	addwf	strtol@s,w,c
  6749  0017BA  6E2C               	movwf	??_strtol& (0+255),c
  6750  0017BC  0EFF               	movlw	255
  6751  0017BE  2027               	addwfc	strtol@s+1,w,c
  6752  0017C0  6E2D               	movwf	(??_strtol+1)& (0+255),c
  6753  0017C2  C028  FFD9         	movff	strtol@endptr,fsr2l
  6754  0017C6  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  6755  0017CA  C02C  FFDE         	movff	??_strtol,postinc2
  6756  0017CE  C02D  FFDD         	movff	??_strtol+1,postdec2
  6757  0017D2                     l2201:
  6758  0017D2  0100               	movlb	0	; () banked
  6759  0017D4  5160               	movf	strtol@sign& (0+255),w,b
  6760  0017D6  B4D8               	btfsc	status,2,c
  6761  0017D8  D01A               	goto	l2202
  6762                           
  6763                           ; BSR set to: 0
  6764  0017DA  C061  F02C         	movff	strtol@a,??_strtol
  6765  0017DE  C062  F02D         	movff	strtol@a+1,??_strtol+1
  6766  0017E2  C063  F02E         	movff	strtol@a+2,??_strtol+2
  6767  0017E6  C064  F02F         	movff	strtol@a+3,??_strtol+3
  6768  0017EA  1E2C               	comf	??_strtol,f,c
  6769  0017EC  1E2D               	comf	??_strtol+1,f,c
  6770  0017EE  1E2E               	comf	??_strtol+2,f,c
  6771  0017F0  1E2F               	comf	??_strtol+3,f,c
  6772  0017F2  2A2C               	incf	??_strtol,f,c
  6773  0017F4  0E00               	movlw	0
  6774  0017F6  222D               	addwfc	??_strtol+1,f,c
  6775  0017F8  222E               	addwfc	??_strtol+2,f,c
  6776  0017FA  222F               	addwfc	??_strtol+3,f,c
  6777  0017FC  C02C  F026         	movff	??_strtol,?_strtol
  6778  001800  C02D  F027         	movff	??_strtol+1,?_strtol+1
  6779  001804  C02E  F028         	movff	??_strtol+2,?_strtol+2
  6780  001808  C02F  F029         	movff	??_strtol+3,?_strtol+3
  6781                           
  6782                           ; BSR set to: 0
  6783  00180C  0012               	return	
  6784  00180E                     l2202:
  6785                           
  6786                           ; BSR set to: 0
  6787  00180E  C061  F026         	movff	strtol@a,?_strtol
  6788  001812  C062  F027         	movff	strtol@a+1,?_strtol+1
  6789  001816  C063  F028         	movff	strtol@a+2,?_strtol+2
  6790  00181A  C064  F029         	movff	strtol@a+3,?_strtol+3
  6791                           
  6792                           ; BSR set to: 0
  6793  00181E  0012               	return		;funcret
  6794  001820                     __end_of_strtol:
  6795                           	opt stack 0
  6796                           tosu	equ	0xFFF
  6797                           tosh	equ	0xFFE
  6798                           tosl	equ	0xFFD
  6799                           pclath	equ	0xFFA
  6800                           tblptru	equ	0xFF8
  6801                           tblptrh	equ	0xFF7
  6802                           tblptrl	equ	0xFF6
  6803                           tablat	equ	0xFF5
  6804                           prodh	equ	0xFF4
  6805                           prodl	equ	0xFF3
  6806                           postinc0	equ	0xFEE
  6807                           plusw0	equ	0xFEB
  6808                           wreg	equ	0xFE8
  6809                           indf1	equ	0xFE7
  6810                           postdec1	equ	0xFE5
  6811                           fsr1h	equ	0xFE2
  6812                           fsr1l	equ	0xFE1
  6813                           indf2	equ	0xFDF
  6814                           postinc2	equ	0xFDE
  6815                           postdec2	equ	0xFDD
  6816                           plusw2	equ	0xFDB
  6817                           fsr2h	equ	0xFDA
  6818                           fsr2l	equ	0xFD9
  6819                           status	equ	0xFD8
  6820                           
  6821 ;; *************** function _toupper *****************
  6822 ;; Defined at:
  6823 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;  c               1    wreg     unsigned char 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  c               1   23[COMRAM] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  1    wreg      unsigned char 
  6830 ;; Registers used:
  6831 ;;		wreg, status,2, status,0
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6837 ;;      Params:         0       0       0       0       0       0       0
  6838 ;;      Locals:         1       0       0       0       0       0       0
  6839 ;;      Temps:          0       0       0       0       0       0       0
  6840 ;;      Totals:         1       0       0       0       0       0       0
  6841 ;;Total ram usage:        1 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    4
  6844 ;; This function calls:
  6845 ;;		Nothing
  6846 ;; This function is called by:
  6847 ;;		_strtol
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           	psect	text22
  6852  004232                     __ptext22:
  6853                           	opt stack 0
  6854  004232                     _toupper:
  6855                           	opt stack 21
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;incstack = 0
  6859                           ;toupper@c stored from wreg
  6860  004232  6E18               	movwf	toupper@c,c
  6861  004234  0E7B               	movlw	123
  6862  004236  6018               	cpfslt	toupper@c,c
  6863  004238  D004               	goto	l2206
  6864  00423A  0E60               	movlw	96
  6865  00423C  6418               	cpfsgt	toupper@c,c
  6866  00423E  D001               	goto	l2206
  6867  004240  9A18               	bcf	toupper@c,5,c
  6868  004242                     l2206:
  6869  004242  5018               	movf	toupper@c,w,c
  6870  004244  0012               	return	
  6871  004246                     __end_of_toupper:
  6872                           	opt stack 0
  6873                           tosu	equ	0xFFF
  6874                           tosh	equ	0xFFE
  6875                           tosl	equ	0xFFD
  6876                           pclath	equ	0xFFA
  6877                           tblptru	equ	0xFF8
  6878                           tblptrh	equ	0xFF7
  6879                           tblptrl	equ	0xFF6
  6880                           tablat	equ	0xFF5
  6881                           prodh	equ	0xFF4
  6882                           prodl	equ	0xFF3
  6883                           postinc0	equ	0xFEE
  6884                           plusw0	equ	0xFEB
  6885                           wreg	equ	0xFE8
  6886                           indf1	equ	0xFE7
  6887                           postdec1	equ	0xFE5
  6888                           fsr1h	equ	0xFE2
  6889                           fsr1l	equ	0xFE1
  6890                           indf2	equ	0xFDF
  6891                           postinc2	equ	0xFDE
  6892                           postdec2	equ	0xFDD
  6893                           plusw2	equ	0xFDB
  6894                           fsr2h	equ	0xFDA
  6895                           fsr2l	equ	0xFD9
  6896                           status	equ	0xFD8
  6897                           
  6898 ;; *************** function _isspace *****************
  6899 ;; Defined at:
  6900 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6901 ;; Parameters:    Size  Location     Type
  6902 ;;  c               1    wreg     unsigned char 
  6903 ;; Auto vars:     Size  Location     Type
  6904 ;;  c               1   25[COMRAM] unsigned char 
  6905 ;; Return value:  Size  Location     Type
  6906 ;;		None               void
  6907 ;; Registers used:
  6908 ;;		wreg, status,2, status,0
  6909 ;; Tracked objects:
  6910 ;;		On entry : 0/0
  6911 ;;		On exit  : 0/0
  6912 ;;		Unchanged: 0/0
  6913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6914 ;;      Params:         0       0       0       0       0       0       0
  6915 ;;      Locals:         2       0       0       0       0       0       0
  6916 ;;      Temps:          1       0       0       0       0       0       0
  6917 ;;      Totals:         3       0       0       0       0       0       0
  6918 ;;Total ram usage:        3 bytes
  6919 ;; Hardware stack levels used:    1
  6920 ;; Hardware stack levels required when called:    4
  6921 ;; This function calls:
  6922 ;;		Nothing
  6923 ;; This function is called by:
  6924 ;;		_strtol
  6925 ;; This function uses a non-reentrant model
  6926 ;;
  6927                           
  6928                           	psect	text23
  6929  004026                     __ptext23:
  6930                           	opt stack 0
  6931  004026                     _isspace:
  6932                           	opt stack 21
  6933                           
  6934                           ;incstack = 0
  6935                           ;isspace@c stored from wreg
  6936  004026  6E1A               	movwf	isspace@c,c
  6937  004028  0E01               	movlw	1
  6938  00402A  6E19               	movwf	_isspace$3320,c
  6939  00402C  0E20               	movlw	32
  6940  00402E  181A               	xorwf	isspace@c,w,c
  6941  004030  B4D8               	btfsc	status,2,c
  6942  004032  D008               	goto	l2288
  6943  004034  0E0E               	movlw	14
  6944  004036  601A               	cpfslt	isspace@c,c
  6945  004038  D003               	goto	u7680
  6946  00403A  0E09               	movlw	9
  6947  00403C  601A               	cpfslt	isspace@c,c
  6948  00403E  D002               	goto	l2288
  6949  004040                     u7680:
  6950  004040  0E00               	movlw	0
  6951  004042  6E19               	movwf	_isspace$3320,c
  6952  004044                     l2288:
  6953  004044  C019  F018         	movff	_isspace$3320,??_isspace
  6954  004048  3018               	rrcf	??_isspace,w,c
  6955  00404A  0012               	return	
  6956  00404C                     __end_of_isspace:
  6957                           	opt stack 0
  6958                           tosu	equ	0xFFF
  6959                           tosh	equ	0xFFE
  6960                           tosl	equ	0xFFD
  6961                           pclath	equ	0xFFA
  6962                           tblptru	equ	0xFF8
  6963                           tblptrh	equ	0xFF7
  6964                           tblptrl	equ	0xFF6
  6965                           tablat	equ	0xFF5
  6966                           prodh	equ	0xFF4
  6967                           prodl	equ	0xFF3
  6968                           postinc0	equ	0xFEE
  6969                           plusw0	equ	0xFEB
  6970                           wreg	equ	0xFE8
  6971                           indf1	equ	0xFE7
  6972                           postdec1	equ	0xFE5
  6973                           fsr1h	equ	0xFE2
  6974                           fsr1l	equ	0xFE1
  6975                           indf2	equ	0xFDF
  6976                           postinc2	equ	0xFDE
  6977                           postdec2	equ	0xFDD
  6978                           plusw2	equ	0xFDB
  6979                           fsr2h	equ	0xFDA
  6980                           fsr2l	equ	0xFD9
  6981                           status	equ	0xFD8
  6982                           
  6983 ;; *************** function _isdigit *****************
  6984 ;; Defined at:
  6985 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;  c               1    wreg     unsigned char 
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;  c               1   25[COMRAM] unsigned char 
  6990 ;; Return value:  Size  Location     Type
  6991 ;;		None               void
  6992 ;; Registers used:
  6993 ;;		wreg, status,2, status,0
  6994 ;; Tracked objects:
  6995 ;;		On entry : 0/0
  6996 ;;		On exit  : 0/0
  6997 ;;		Unchanged: 0/0
  6998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6999 ;;      Params:         0       0       0       0       0       0       0
  7000 ;;      Locals:         2       0       0       0       0       0       0
  7001 ;;      Temps:          1       0       0       0       0       0       0
  7002 ;;      Totals:         3       0       0       0       0       0       0
  7003 ;;Total ram usage:        3 bytes
  7004 ;; Hardware stack levels used:    1
  7005 ;; Hardware stack levels required when called:    4
  7006 ;; This function calls:
  7007 ;;		Nothing
  7008 ;; This function is called by:
  7009 ;;		_strtol
  7010 ;; This function uses a non-reentrant model
  7011 ;;
  7012                           
  7013                           	psect	text24
  7014  004142                     __ptext24:
  7015                           	opt stack 0
  7016  004142                     _isdigit:
  7017                           	opt stack 21
  7018                           
  7019                           ;incstack = 0
  7020                           ;isdigit@c stored from wreg
  7021  004142  6E1A               	movwf	isdigit@c,c
  7022  004144  0E00               	movlw	0
  7023  004146  6E19               	movwf	_isdigit$3317,c
  7024  004148  0E3A               	movlw	58
  7025  00414A  601A               	cpfslt	isdigit@c,c
  7026  00414C  D005               	goto	l2283
  7027  00414E  0E2F               	movlw	47
  7028  004150  641A               	cpfsgt	isdigit@c,c
  7029  004152  D002               	goto	l2283
  7030  004154  0E01               	movlw	1
  7031  004156  6E19               	movwf	_isdigit$3317,c
  7032  004158                     l2283:
  7033  004158  C019  F018         	movff	_isdigit$3317,??_isdigit
  7034  00415C  3018               	rrcf	??_isdigit,w,c
  7035  00415E  0012               	return	
  7036  004160                     __end_of_isdigit:
  7037                           	opt stack 0
  7038                           tosu	equ	0xFFF
  7039                           tosh	equ	0xFFE
  7040                           tosl	equ	0xFFD
  7041                           pclath	equ	0xFFA
  7042                           tblptru	equ	0xFF8
  7043                           tblptrh	equ	0xFF7
  7044                           tblptrl	equ	0xFF6
  7045                           tablat	equ	0xFF5
  7046                           prodh	equ	0xFF4
  7047                           prodl	equ	0xFF3
  7048                           postinc0	equ	0xFEE
  7049                           plusw0	equ	0xFEB
  7050                           wreg	equ	0xFE8
  7051                           indf1	equ	0xFE7
  7052                           postdec1	equ	0xFE5
  7053                           fsr1h	equ	0xFE2
  7054                           fsr1l	equ	0xFE1
  7055                           indf2	equ	0xFDF
  7056                           postinc2	equ	0xFDE
  7057                           postdec2	equ	0xFDD
  7058                           plusw2	equ	0xFDB
  7059                           fsr2h	equ	0xFDA
  7060                           fsr2l	equ	0xFD9
  7061                           status	equ	0xFD8
  7062                           
  7063 ;; *************** function _isalpha *****************
  7064 ;; Defined at:
  7065 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  7066 ;; Parameters:    Size  Location     Type
  7067 ;;  c               1    wreg     unsigned char 
  7068 ;; Auto vars:     Size  Location     Type
  7069 ;;  c               1   28[COMRAM] unsigned char 
  7070 ;; Return value:  Size  Location     Type
  7071 ;;		None               void
  7072 ;; Registers used:
  7073 ;;		wreg, status,2, status,0, cstack
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/0
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7079 ;;      Params:         0       0       0       0       0       0       0
  7080 ;;      Locals:         2       0       0       0       0       0       0
  7081 ;;      Temps:          1       0       0       0       0       0       0
  7082 ;;      Totals:         3       0       0       0       0       0       0
  7083 ;;Total ram usage:        3 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    5
  7086 ;; This function calls:
  7087 ;;		_isupper
  7088 ;; This function is called by:
  7089 ;;		_strtol
  7090 ;; This function uses a non-reentrant model
  7091 ;;
  7092                           
  7093                           	psect	text25
  7094  003FFE                     __ptext25:
  7095                           	opt stack 0
  7096  003FFE                     _isalpha:
  7097                           	opt stack 20
  7098                           
  7099                           ;incstack = 0
  7100                           ;isalpha@c stored from wreg
  7101  003FFE  6E1D               	movwf	isalpha@c,c
  7102  004000  0E01               	movlw	1
  7103  004002  6E1C               	movwf	_isalpha$3314,c
  7104  004004  0E7B               	movlw	123
  7105  004006  601D               	cpfslt	isalpha@c,c
  7106  004008  D003               	goto	u7700
  7107  00400A  0E61               	movlw	97
  7108  00400C  601D               	cpfslt	isalpha@c,c
  7109  00400E  D007               	goto	l2278
  7110  004010                     u7700:
  7111  004010  501D               	movf	isalpha@c,w,c
  7112  004012  ECB0  F020         	call	_isupper
  7113  004016  B0D8               	btfsc	status,0,c
  7114  004018  D002               	goto	l2278
  7115  00401A  0E00               	movlw	0
  7116  00401C  6E1C               	movwf	_isalpha$3314,c
  7117  00401E                     l2278:
  7118  00401E  C01C  F01B         	movff	_isalpha$3314,??_isalpha
  7119  004022  301B               	rrcf	??_isalpha,w,c
  7120  004024  0012               	return	
  7121  004026                     __end_of_isalpha:
  7122                           	opt stack 0
  7123                           tosu	equ	0xFFF
  7124                           tosh	equ	0xFFE
  7125                           tosl	equ	0xFFD
  7126                           pclath	equ	0xFFA
  7127                           tblptru	equ	0xFF8
  7128                           tblptrh	equ	0xFF7
  7129                           tblptrl	equ	0xFF6
  7130                           tablat	equ	0xFF5
  7131                           prodh	equ	0xFF4
  7132                           prodl	equ	0xFF3
  7133                           postinc0	equ	0xFEE
  7134                           plusw0	equ	0xFEB
  7135                           wreg	equ	0xFE8
  7136                           indf1	equ	0xFE7
  7137                           postdec1	equ	0xFE5
  7138                           fsr1h	equ	0xFE2
  7139                           fsr1l	equ	0xFE1
  7140                           indf2	equ	0xFDF
  7141                           postinc2	equ	0xFDE
  7142                           postdec2	equ	0xFDD
  7143                           plusw2	equ	0xFDB
  7144                           fsr2h	equ	0xFDA
  7145                           fsr2l	equ	0xFD9
  7146                           status	equ	0xFD8
  7147                           
  7148 ;; *************** function _isupper *****************
  7149 ;; Defined at:
  7150 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  c               1    wreg     unsigned char 
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;  c               1   25[COMRAM] unsigned char 
  7155 ;; Return value:  Size  Location     Type
  7156 ;;		None               void
  7157 ;; Registers used:
  7158 ;;		wreg, status,2, status,0
  7159 ;; Tracked objects:
  7160 ;;		On entry : 0/0
  7161 ;;		On exit  : 0/0
  7162 ;;		Unchanged: 0/0
  7163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7164 ;;      Params:         0       0       0       0       0       0       0
  7165 ;;      Locals:         2       0       0       0       0       0       0
  7166 ;;      Temps:          1       0       0       0       0       0       0
  7167 ;;      Totals:         3       0       0       0       0       0       0
  7168 ;;Total ram usage:        3 bytes
  7169 ;; Hardware stack levels used:    1
  7170 ;; Hardware stack levels required when called:    4
  7171 ;; This function calls:
  7172 ;;		Nothing
  7173 ;; This function is called by:
  7174 ;;		_isalpha
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           	psect	text26
  7179  004160                     __ptext26:
  7180                           	opt stack 0
  7181  004160                     _isupper:
  7182                           	opt stack 20
  7183                           
  7184                           ;incstack = 0
  7185                           ;isupper@c stored from wreg
  7186  004160  6E1A               	movwf	isupper@c,c
  7187  004162  0E00               	movlw	0
  7188  004164  6E19               	movwf	_isupper$3323,c
  7189  004166  0E5B               	movlw	91
  7190  004168  601A               	cpfslt	isupper@c,c
  7191  00416A  D005               	goto	l2293
  7192  00416C  0E40               	movlw	64
  7193  00416E  641A               	cpfsgt	isupper@c,c
  7194  004170  D002               	goto	l2293
  7195  004172  0E01               	movlw	1
  7196  004174  6E19               	movwf	_isupper$3323,c
  7197  004176                     l2293:
  7198  004176  C019  F018         	movff	_isupper$3323,??_isupper
  7199  00417A  3018               	rrcf	??_isupper,w,c
  7200  00417C  0012               	return	
  7201  00417E                     __end_of_isupper:
  7202                           	opt stack 0
  7203                           tosu	equ	0xFFF
  7204                           tosh	equ	0xFFE
  7205                           tosl	equ	0xFFD
  7206                           pclath	equ	0xFFA
  7207                           tblptru	equ	0xFF8
  7208                           tblptrh	equ	0xFF7
  7209                           tblptrl	equ	0xFF6
  7210                           tablat	equ	0xFF5
  7211                           prodh	equ	0xFF4
  7212                           prodl	equ	0xFF3
  7213                           postinc0	equ	0xFEE
  7214                           plusw0	equ	0xFEB
  7215                           wreg	equ	0xFE8
  7216                           indf1	equ	0xFE7
  7217                           postdec1	equ	0xFE5
  7218                           fsr1h	equ	0xFE2
  7219                           fsr1l	equ	0xFE1
  7220                           indf2	equ	0xFDF
  7221                           postinc2	equ	0xFDE
  7222                           postdec2	equ	0xFDD
  7223                           plusw2	equ	0xFDB
  7224                           fsr2h	equ	0xFDA
  7225                           fsr2l	equ	0xFD9
  7226                           status	equ	0xFD8
  7227                           
  7228 ;; *************** function _DacReadValue *****************
  7229 ;; Defined at:
  7230 ;;		line 44 in file "DacApp.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;  data            2  104[BANK0 ] PTR unsigned char 
  7233 ;;		 -> rxMsgData(20), 
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;  byteIdx         2  120[BANK0 ] int 
  7236 ;;  TxMsg           7  113[BANK0 ] unsigned char [7]
  7237 ;;  readVal         2  110[BANK0 ] unsigned int 
  7238 ;;  dacIndex        1  112[BANK0 ] unsigned char 
  7239 ;;  byteNum         1  109[BANK0 ] unsigned char 
  7240 ;;  regNum          1  108[BANK0 ] unsigned char 
  7241 ;; Return value:  Size  Location     Type
  7242 ;;                  1    wreg      void 
  7243 ;; Registers used:
  7244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7245 ;; Tracked objects:
  7246 ;;		On entry : 0/0
  7247 ;;		On exit  : 0/0
  7248 ;;		Unchanged: 0/0
  7249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7250 ;;      Params:         0       2       0       0       0       0       0
  7251 ;;      Locals:         0      14       0       0       0       0       0
  7252 ;;      Temps:          0       2       0       0       0       0       0
  7253 ;;      Totals:         0      18       0       0       0       0       0
  7254 ;;Total ram usage:       18 bytes
  7255 ;; Hardware stack levels used:    1
  7256 ;; Hardware stack levels required when called:   10
  7257 ;; This function calls:
  7258 ;;		_ReadIntFromEeprom
  7259 ;;		_WriteUartMessage
  7260 ;;		_ZeroArray
  7261 ;;		_crc8
  7262 ;;		_make8
  7263 ;; This function is called by:
  7264 ;;		_GroupDAC
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           	psect	text27
  7269  00269E                     __ptext27:
  7270                           	opt stack 0
  7271  00269E                     _DacReadValue:
  7272                           	opt stack 18
  7273                           
  7274                           ;DacApp.c: 46: uint16_t readVal;
  7275                           ;DacApp.c: 47: uint8_t regNum = 0, byteNum = 0;
  7276                           
  7277                           ;incstack = 0
  7278  00269E  0E00               	movlw	0
  7279  0026A0  0100               	movlb	0	; () banked
  7280  0026A2  6FCC               	movwf	DacReadValue@regNum& (0+255),b
  7281  0026A4  0E00               	movlw	0
  7282  0026A6  6FCD               	movwf	DacReadValue@byteNum& (0+255),b
  7283                           
  7284                           ; BSR set to: 0
  7285                           ;DacApp.c: 48: char TxMsg[2 + (0x4) + 1];
  7286                           ;DacApp.c: 49: ZeroArray(TxMsg, 2 + (0x4) + 1);
  7287  0026A8  0ED1               	movlw	low DacReadValue@TxMsg
  7288  0026AA  6E20               	movwf	ZeroArray@array,c
  7289  0026AC  0E00               	movlw	high DacReadValue@TxMsg
  7290  0026AE  6E21               	movwf	ZeroArray@array+1,c
  7291  0026B0  0E00               	movlw	0
  7292  0026B2  6E23               	movwf	ZeroArray@size+1,c
  7293  0026B4  0E07               	movlw	7
  7294  0026B6  6E22               	movwf	ZeroArray@size,c
  7295  0026B8  ECBF  F020         	call	_ZeroArray	;wreg free
  7296                           
  7297                           ;DacApp.c: 52: TxMsg[(0)] = (0x24);
  7298  0026BC  0E24               	movlw	36
  7299  0026BE  0100               	movlb	0	; () banked
  7300  0026C0  6FD1               	movwf	DacReadValue@TxMsg& (0+255),b
  7301                           
  7302                           ; BSR set to: 0
  7303                           ;DacApp.c: 53: TxMsg[(1)] = DAC_MSG;
  7304  0026C2  0E06               	movlw	6
  7305  0026C4  6FD2               	movwf	(DacReadValue@TxMsg+1)& (0+255),b
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;DacApp.c: 54: TxMsg[(2)] = DAC_READ_VALUE;
  7309  0026C6  0E62               	movlw	98
  7310  0026C8  6FD3               	movwf	(DacReadValue@TxMsg+2)& (0+255),b
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;DacApp.c: 55: TxMsg[(3)] = 2;
  7314  0026CA  0E02               	movlw	2
  7315  0026CC  6FD4               	movwf	(DacReadValue@TxMsg+3)& (0+255),b
  7316                           
  7317                           ; BSR set to: 0
  7318                           ;DacApp.c: 57: uint8_t dacIndex = data[0];
  7319  0026CE  C0C8  FFD9         	movff	DacReadValue@data,fsr2l
  7320  0026D2  C0C9  FFDA         	movff	DacReadValue@data+1,fsr2h
  7321  0026D6  50DF               	movf	indf2,w,c
  7322  0026D8  6FD0               	movwf	DacReadValue@dacIndex& (0+255),b
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;DacApp.c: 58: uint16_t readVal = ReadIntFromEeprom((0x40) | DAC_ADDRES[dacIndex], 2);
  7326  0026DA  0E00               	movlw	0
  7327  0026DC  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  7328  0026DE  0E02               	movlw	2
  7329  0026E0  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  7330  0026E2  51D0               	movf	DacReadValue@dacIndex& (0+255),w,b
  7331  0026E4  0D01               	mullw	1
  7332  0026E6  0E53               	movlw	low _DAC_ADDRES
  7333  0026E8  24F3               	addwf	prodl,w,c
  7334  0026EA  6EF6               	movwf	tblptrl,c
  7335  0026EC  0E06               	movlw	high _DAC_ADDRES
  7336  0026EE  20F4               	addwfc	prodh,w,c
  7337  0026F0  6EF7               	movwf	tblptrh,c
  7338  0026F2                     	if	0	;There are less than 3 active tblptr bytes
  7339  0026F2                     	endif
  7340  0026F2  0008               	tblrd		*
  7341  0026F4  50F5               	movf	tablat,w,c
  7342  0026F6  0940               	iorlw	64
  7343  0026F8  ECD7  F00F         	call	_ReadIntFromEeprom
  7344  0026FC  C0B1  F0CE         	movff	?_ReadIntFromEeprom,DacReadValue@readVal
  7345  002700  C0B2  F0CF         	movff	?_ReadIntFromEeprom+1,DacReadValue@readVal+1
  7346                           
  7347                           ;DacApp.c: 60: for(int byteIdx = 0; byteIdx < 2; byteIdx++)
  7348  002704  0E00               	movlw	0
  7349  002706  0100               	movlb	0	; () banked
  7350  002708  6FD9               	movwf	(DacReadValue@byteIdx+1)& (0+255),b
  7351  00270A  0E00               	movlw	0
  7352  00270C  6FD8               	movwf	DacReadValue@byteIdx& (0+255),b
  7353  00270E                     l8412:
  7354                           
  7355                           ; BSR set to: 0
  7356  00270E  BFD9               	btfsc	(DacReadValue@byteIdx+1)& (0+255),7,b
  7357  002710  D006               	goto	l419
  7358  002712  51D9               	movf	(DacReadValue@byteIdx+1)& (0+255),w,b
  7359  002714  E11F               	bnz	l8422
  7360  002716  0E02               	movlw	2
  7361  002718  5DD8               	subwf	DacReadValue@byteIdx& (0+255),w,b
  7362  00271A  B0D8               	btfsc	status,0,c
  7363  00271C  D01B               	goto	u8510
  7364  00271E                     l419:
  7365                           
  7366                           ; BSR set to: 0
  7367                           ;DacApp.c: 61: {
  7368                           ;DacApp.c: 62: TxMsg[(0x4) + byteIdx] = make8(readVal, byteIdx);
  7369                           
  7370                           ; BSR set to: 0
  7371  00271E  0E04               	movlw	4
  7372  002720  25D8               	addwf	DacReadValue@byteIdx& (0+255),w,b
  7373  002722  6FCA               	movwf	??_DacReadValue& (0+255),b
  7374  002724  0E00               	movlw	0
  7375  002726  21D9               	addwfc	(DacReadValue@byteIdx+1)& (0+255),w,b
  7376  002728  6FCB               	movwf	(??_DacReadValue+1)& (0+255),b
  7377  00272A  0ED1               	movlw	low DacReadValue@TxMsg
  7378  00272C  25CA               	addwf	??_DacReadValue& (0+255),w,b
  7379  00272E  6ED9               	movwf	fsr2l,c
  7380  002730  0E00               	movlw	high DacReadValue@TxMsg
  7381  002732  21CB               	addwfc	(??_DacReadValue+1)& (0+255),w,b
  7382  002734  6EDA               	movwf	fsr2h,c
  7383  002736  C0CE  F018         	movff	DacReadValue@readVal,make8@data
  7384  00273A  C0CF  F019         	movff	DacReadValue@readVal+1,make8@data+1
  7385  00273E  6A1A               	clrf	make8@data+2,c
  7386  002740  6A1B               	clrf	make8@data+3,c
  7387  002742  C0D8  F01C         	movff	DacReadValue@byteIdx,make8@dataLocation
  7388  002746  ECB9  F01B         	call	_make8	;wreg free
  7389  00274A  6EDF               	movwf	indf2,c
  7390  00274C  0100               	movlb	0	; () banked
  7391  00274E  4BD8               	infsnz	DacReadValue@byteIdx& (0+255),f,b
  7392  002750  2BD9               	incf	(DacReadValue@byteIdx+1)& (0+255),f,b
  7393  002752  D7DD               	goto	l8412
  7394  002754                     u8510:
  7395  002754                     l8422:
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;DacApp.c: 63: }
  7399                           ;DacApp.c: 64: TxMsg[2 + (0x4)] = crc8(TxMsg, 2 + (0x4));
  7400  002754  0ED1               	movlw	low DacReadValue@TxMsg
  7401  002756  6E18               	movwf	crc8@dataArray,c
  7402  002758  0E00               	movlw	high DacReadValue@TxMsg
  7403  00275A  6E19               	movwf	crc8@dataArray+1,c
  7404  00275C  0E00               	movlw	0
  7405  00275E  6E1B               	movwf	crc8@dataSize+1,c
  7406  002760  0E06               	movlw	6
  7407  002762  6E1A               	movwf	crc8@dataSize,c
  7408  002764  EC40  F01D         	call	_crc8	;wreg free
  7409  002768  0100               	movlb	0	; () banked
  7410  00276A  6FD7               	movwf	(DacReadValue@TxMsg+6)& (0+255),b
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;DacApp.c: 65: WriteUartMessage(TxMsg, 2 + (0x4) + 1);
  7414  00276C  0ED1               	movlw	low DacReadValue@TxMsg
  7415  00276E  6E19               	movwf	WriteUartMessage@dataBuf,c
  7416  002770  0E00               	movlw	high DacReadValue@TxMsg
  7417  002772  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  7418  002774  0E00               	movlw	0
  7419  002776  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  7420  002778  0E07               	movlw	7
  7421  00277A  6E1B               	movwf	WriteUartMessage@dataSize,c
  7422  00277C  ECF2  F01E         	call	_WriteUartMessage	;wreg free
  7423  002780  0012               	return		;funcret
  7424  002782                     __end_of_DacReadValue:
  7425                           	opt stack 0
  7426                           tosu	equ	0xFFF
  7427                           tosh	equ	0xFFE
  7428                           tosl	equ	0xFFD
  7429                           pclath	equ	0xFFA
  7430                           tblptru	equ	0xFF8
  7431                           tblptrh	equ	0xFF7
  7432                           tblptrl	equ	0xFF6
  7433                           tablat	equ	0xFF5
  7434                           prodh	equ	0xFF4
  7435                           prodl	equ	0xFF3
  7436                           postinc0	equ	0xFEE
  7437                           plusw0	equ	0xFEB
  7438                           wreg	equ	0xFE8
  7439                           indf1	equ	0xFE7
  7440                           postdec1	equ	0xFE5
  7441                           fsr1h	equ	0xFE2
  7442                           fsr1l	equ	0xFE1
  7443                           indf2	equ	0xFDF
  7444                           postinc2	equ	0xFDE
  7445                           postdec2	equ	0xFDD
  7446                           plusw2	equ	0xFDB
  7447                           fsr2h	equ	0xFDA
  7448                           fsr2l	equ	0xFD9
  7449                           status	equ	0xFD8
  7450                           
  7451 ;; *************** function _testLeds *****************
  7452 ;; Defined at:
  7453 ;;		line 43 in file "LedsApp.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;		None
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;  idx             2   44[COMRAM] int 
  7458 ;; Return value:  Size  Location     Type
  7459 ;;                  1    wreg      void 
  7460 ;; Registers used:
  7461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7462 ;; Tracked objects:
  7463 ;;		On entry : 0/0
  7464 ;;		On exit  : 0/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7467 ;;      Params:         0       0       0       0       0       0       0
  7468 ;;      Locals:         2       0       0       0       0       0       0
  7469 ;;      Temps:          1       0       0       0       0       0       0
  7470 ;;      Totals:         3       0       0       0       0       0       0
  7471 ;;Total ram usage:        3 bytes
  7472 ;; Hardware stack levels used:    1
  7473 ;; Hardware stack levels required when called:    7
  7474 ;; This function calls:
  7475 ;;		_SendAckMessage
  7476 ;; This function is called by:
  7477 ;;		_GroupControlMcu
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480                           
  7481                           	psect	text28
  7482  00351A                     __ptext28:
  7483                           	opt stack 0
  7484  00351A                     _testLeds:
  7485                           	opt stack 21
  7486                           
  7487                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7488                           
  7489                           ;incstack = 0
  7490  00351A  0E00               	movlw	0
  7491  00351C  6E2E               	movwf	testLeds@idx+1,c
  7492  00351E  0E00               	movlw	0
  7493  003520  6E2D               	movwf	testLeds@idx,c
  7494  003522                     l8232:
  7495  003522  BE2E               	btfsc	testLeds@idx+1,7,c
  7496  003524  D006               	goto	l60
  7497  003526  502E               	movf	testLeds@idx+1,w,c
  7498  003528  E127               	bnz	l8246
  7499  00352A  0E0A               	movlw	10
  7500  00352C  5C2D               	subwf	testLeds@idx,w,c
  7501  00352E  B0D8               	btfsc	status,0,c
  7502  003530  D023               	goto	u8330
  7503  003532                     l60:
  7504                           
  7505                           ;LedsApp.c: 47: {
  7506                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7507  003532  808B               	bsf	3979,0,c	;volatile
  7508                           
  7509                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7510  003534  0E82               	movlw	130
  7511  003536  6E2C               	movwf	??_testLeds& (0+255),c
  7512  003538  0EDE               	movlw	222
  7513  00353A                     u9207:
  7514  00353A  2EE8               	decfsz	wreg,f,c
  7515  00353C  D7FE               	bra	u9207
  7516  00353E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7517  003540  D7FC               	bra	u9207
  7518                           
  7519                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7520  003542  888A               	bsf	3978,4,c	;volatile
  7521                           
  7522                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7523  003544  0E82               	movlw	130
  7524  003546  6E2C               	movwf	??_testLeds& (0+255),c
  7525  003548  0EDE               	movlw	222
  7526  00354A                     u9217:
  7527  00354A  2EE8               	decfsz	wreg,f,c
  7528  00354C  D7FE               	bra	u9217
  7529  00354E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7530  003550  D7FC               	bra	u9217
  7531                           
  7532                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7533  003552  908B               	bcf	3979,0,c	;volatile
  7534                           
  7535                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7536  003554  0E82               	movlw	130
  7537  003556  6E2C               	movwf	??_testLeds& (0+255),c
  7538  003558  0EDE               	movlw	222
  7539  00355A                     u9227:
  7540  00355A  2EE8               	decfsz	wreg,f,c
  7541  00355C  D7FE               	bra	u9227
  7542  00355E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7543  003560  D7FC               	bra	u9227
  7544                           
  7545                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7546  003562  988A               	bcf	3978,4,c	;volatile
  7547                           
  7548                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7549  003564  0E82               	movlw	130
  7550  003566  6E2C               	movwf	??_testLeds& (0+255),c
  7551  003568  0EDE               	movlw	222
  7552  00356A                     u9237:
  7553  00356A  2EE8               	decfsz	wreg,f,c
  7554  00356C  D7FE               	bra	u9237
  7555  00356E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7556  003570  D7FC               	bra	u9237
  7557  003572  4A2D               	infsnz	testLeds@idx,f,c
  7558  003574  2A2E               	incf	testLeds@idx+1,f,c
  7559  003576  D7D5               	goto	l8232
  7560  003578                     u8330:
  7561  003578                     l8246:
  7562                           
  7563                           ;LedsApp.c: 57: }
  7564                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  7565  003578  0E14               	movlw	20
  7566  00357A  6E24               	movwf	SendAckMessage@inRequest,c
  7567  00357C  0E01               	movlw	1
  7568  00357E  EC17  F01D         	call	_SendAckMessage
  7569  003582  0012               	return	
  7570  003584                     __end_of_testLeds:
  7571                           	opt stack 0
  7572                           tosu	equ	0xFFF
  7573                           tosh	equ	0xFFE
  7574                           tosl	equ	0xFFD
  7575                           pclath	equ	0xFFA
  7576                           tblptru	equ	0xFF8
  7577                           tblptrh	equ	0xFF7
  7578                           tblptrl	equ	0xFF6
  7579                           tablat	equ	0xFF5
  7580                           prodh	equ	0xFF4
  7581                           prodl	equ	0xFF3
  7582                           postinc0	equ	0xFEE
  7583                           plusw0	equ	0xFEB
  7584                           wreg	equ	0xFE8
  7585                           indf1	equ	0xFE7
  7586                           postdec1	equ	0xFE5
  7587                           fsr1h	equ	0xFE2
  7588                           fsr1l	equ	0xFE1
  7589                           indf2	equ	0xFDF
  7590                           postinc2	equ	0xFDE
  7591                           postdec2	equ	0xFDD
  7592                           plusw2	equ	0xFDB
  7593                           fsr2h	equ	0xFDA
  7594                           fsr2l	equ	0xFD9
  7595                           status	equ	0xFD8
  7596                           
  7597 ;; *************** function _ResetMcu *****************
  7598 ;; Defined at:
  7599 ;;		line 144 in file "SystemCommon.c"
  7600 ;; Parameters:    Size  Location     Type
  7601 ;;		None
  7602 ;; Auto vars:     Size  Location     Type
  7603 ;;		None
  7604 ;; Return value:  Size  Location     Type
  7605 ;;                  1    wreg      void 
  7606 ;; Registers used:
  7607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7608 ;; Tracked objects:
  7609 ;;		On entry : 0/0
  7610 ;;		On exit  : 0/0
  7611 ;;		Unchanged: 0/0
  7612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7613 ;;      Params:         0       0       0       0       0       0       0
  7614 ;;      Locals:         0       0       0       0       0       0       0
  7615 ;;      Temps:          0       0       0       0       0       0       0
  7616 ;;      Totals:         0       0       0       0       0       0       0
  7617 ;;Total ram usage:        0 bytes
  7618 ;; Hardware stack levels used:    1
  7619 ;; Hardware stack levels required when called:    7
  7620 ;; This function calls:
  7621 ;;		_SendAckMessage
  7622 ;; This function is called by:
  7623 ;;		_GroupControlMcu
  7624 ;; This function uses a non-reentrant model
  7625 ;;
  7626                           
  7627                           	psect	text29
  7628  0042A0                     __ptext29:
  7629                           	opt stack 0
  7630  0042A0                     _ResetMcu:
  7631                           	opt stack 21
  7632                           
  7633                           ;SystemCommon.c: 147: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  7634                           
  7635                           ;incstack = 0
  7636  0042A0  0E11               	movlw	17
  7637  0042A2  6E24               	movwf	SendAckMessage@inRequest,c
  7638  0042A4  0E01               	movlw	1
  7639  0042A6  EC17  F01D         	call	_SendAckMessage
  7640  0042AA  00FF               	reset		;# 
  7641  0042AC  0012               	return		;funcret
  7642  0042AE                     __end_of_ResetMcu:
  7643                           	opt stack 0
  7644                           tosu	equ	0xFFF
  7645                           tosh	equ	0xFFE
  7646                           tosl	equ	0xFFD
  7647                           pclath	equ	0xFFA
  7648                           tblptru	equ	0xFF8
  7649                           tblptrh	equ	0xFF7
  7650                           tblptrl	equ	0xFF6
  7651                           tablat	equ	0xFF5
  7652                           prodh	equ	0xFF4
  7653                           prodl	equ	0xFF3
  7654                           postinc0	equ	0xFEE
  7655                           plusw0	equ	0xFEB
  7656                           wreg	equ	0xFE8
  7657                           indf1	equ	0xFE7
  7658                           postdec1	equ	0xFE5
  7659                           fsr1h	equ	0xFE2
  7660                           fsr1l	equ	0xFE1
  7661                           indf2	equ	0xFDF
  7662                           postinc2	equ	0xFDE
  7663                           postdec2	equ	0xFDD
  7664                           plusw2	equ	0xFDB
  7665                           fsr2h	equ	0xFDA
  7666                           fsr2l	equ	0xFD9
  7667                           status	equ	0xFD8
  7668                           
  7669 ;; *************** function _SetChannelMode *****************
  7670 ;; Defined at:
  7671 ;;		line 30 in file "AdcApp.c"
  7672 ;; Parameters:    Size  Location     Type
  7673 ;;  data            2   43[COMRAM] PTR unsigned char 
  7674 ;; Auto vars:     Size  Location     Type
  7675 ;;		None
  7676 ;; Return value:  Size  Location     Type
  7677 ;;                  1    wreg      void 
  7678 ;; Registers used:
  7679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7680 ;; Tracked objects:
  7681 ;;		On entry : 0/0
  7682 ;;		On exit  : 0/0
  7683 ;;		Unchanged: 0/0
  7684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7685 ;;      Params:         2       0       0       0       0       0       0
  7686 ;;      Locals:         0       0       0       0       0       0       0
  7687 ;;      Temps:          0       0       0       0       0       0       0
  7688 ;;      Totals:         2       0       0       0       0       0       0
  7689 ;;Total ram usage:        2 bytes
  7690 ;; Hardware stack levels used:    1
  7691 ;; Hardware stack levels required when called:    7
  7692 ;; This function calls:
  7693 ;;		_SendAckMessage
  7694 ;; This function is called by:
  7695 ;;		_GroupAdc
  7696 ;; This function uses a non-reentrant model
  7697 ;;
  7698                           
  7699                           	psect	text30
  7700  003F1C                     __ptext30:
  7701                           	opt stack 0
  7702  003F1C                     _SetChannelMode:
  7703                           	opt stack 21
  7704                           
  7705                           ;AdcApp.c: 32: adcSampleMode = data[0];
  7706                           
  7707                           ;incstack = 0
  7708  003F1C  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7709  003F20  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7710  003F24  50DF               	movf	indf2,w,c
  7711  003F26  6E3D               	movwf	_adcSampleMode,c
  7712                           
  7713                           ;AdcApp.c: 33: if (adcSampleMode == SINGLE_CHANNEL)
  7714  003F28  043D               	decf	_adcSampleMode,w,c
  7715  003F2A  A4D8               	btfss	status,2,c
  7716  003F2C  D009               	goto	l122
  7717                           
  7718                           ;AdcApp.c: 34: {
  7719                           ;AdcApp.c: 35: channel = data[1];
  7720  003F2E  EE20 F001          	lfsr	2,1
  7721  003F32  502C               	movf	SetChannelMode@data,w,c
  7722  003F34  26D9               	addwf	fsr2l,f,c
  7723  003F36  502D               	movf	SetChannelMode@data+1,w,c
  7724  003F38  22DA               	addwfc	fsr2h,f,c
  7725  003F3A  50DF               	movf	indf2,w,c
  7726  003F3C  0100               	movlb	0	; () banked
  7727  003F3E  6FF6               	movwf	_channel& (0+255),b
  7728  003F40                     l122:
  7729                           
  7730                           ;AdcApp.c: 36: }
  7731                           ;AdcApp.c: 37: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7732                           
  7733                           ; BSR set to: 0
  7734  003F40  0E32               	movlw	50
  7735  003F42  6E24               	movwf	SendAckMessage@inRequest,c
  7736  003F44  0E03               	movlw	3
  7737  003F46  EC17  F01D         	call	_SendAckMessage
  7738  003F4A  0012               	return		;funcret
  7739  003F4C                     __end_of_SetChannelMode:
  7740                           	opt stack 0
  7741                           tosu	equ	0xFFF
  7742                           tosh	equ	0xFFE
  7743                           tosl	equ	0xFFD
  7744                           pclath	equ	0xFFA
  7745                           tblptru	equ	0xFF8
  7746                           tblptrh	equ	0xFF7
  7747                           tblptrl	equ	0xFF6
  7748                           tablat	equ	0xFF5
  7749                           prodh	equ	0xFF4
  7750                           prodl	equ	0xFF3
  7751                           postinc0	equ	0xFEE
  7752                           plusw0	equ	0xFEB
  7753                           wreg	equ	0xFE8
  7754                           indf1	equ	0xFE7
  7755                           postdec1	equ	0xFE5
  7756                           fsr1h	equ	0xFE2
  7757                           fsr1l	equ	0xFE1
  7758                           indf2	equ	0xFDF
  7759                           postinc2	equ	0xFDE
  7760                           postdec2	equ	0xFDD
  7761                           plusw2	equ	0xFDB
  7762                           fsr2h	equ	0xFDA
  7763                           fsr2l	equ	0xFD9
  7764                           status	equ	0xFD8
  7765                           
  7766 ;; *************** function _EUSART1_Read *****************
  7767 ;; Defined at:
  7768 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;		None
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;  readValue       2   24[COMRAM] unsigned int 
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      unsigned char 
  7775 ;; Registers used:
  7776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7782 ;;      Params:         0       0       0       0       0       0       0
  7783 ;;      Locals:         2       0       0       0       0       0       0
  7784 ;;      Temps:          1       0       0       0       0       0       0
  7785 ;;      Totals:         3       0       0       0       0       0       0
  7786 ;;Total ram usage:        3 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    4
  7789 ;; This function calls:
  7790 ;;		Nothing
  7791 ;; This function is called by:
  7792 ;;		_readUartMessage
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text31
  7797  003ACE                     __ptext31:
  7798                           	opt stack 0
  7799  003ACE                     _EUSART1_Read:
  7800                           	opt stack 25
  7801                           
  7802                           ;eusart1.c: 112: uint16_t readValue = 0;
  7803                           
  7804                           ;incstack = 0
  7805  003ACE  0E00               	movlw	0
  7806  003AD0  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7807  003AD2  0E00               	movlw	0
  7808  003AD4  6E19               	movwf	EUSART1_Read@readValue,c
  7809                           
  7810                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7811  003AD6  0100               	movlb	0	; () banked
  7812  003AD8  51F5               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7813  003ADA  A4D8               	btfss	status,2,c
  7814  003ADC  D002               	goto	l902
  7815                           
  7816                           ; BSR set to: 0
  7817                           ;eusart1.c: 120: {
  7818                           ;eusart1.c: 121: return readValue;
  7819  003ADE  5019               	movf	EUSART1_Read@readValue,w,c
  7820                           
  7821                           ; BSR set to: 0
  7822  003AE0  0012               	return	
  7823  003AE2                     l902:
  7824                           
  7825                           ; BSR set to: 0
  7826                           ;eusart1.c: 122: }
  7827                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7828                           
  7829                           ; BSR set to: 0
  7830  003AE2  5033               	movf	_eusart1RxTail,w,c	;volatile
  7831  003AE4  0D01               	mullw	1
  7832  003AE6  0E00               	movlw	low _eusart1RxBuffer
  7833  003AE8  24F3               	addwf	prodl,w,c
  7834  003AEA  6ED9               	movwf	fsr2l,c
  7835  003AEC  0E01               	movlw	high _eusart1RxBuffer
  7836  003AEE  20F4               	addwfc	prodh,w,c
  7837  003AF0  6EDA               	movwf	fsr2h,c
  7838  003AF2  50DF               	movf	indf2,w,c
  7839  003AF4  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7840  003AF6  5018               	movf	??_EUSART1_Read,w,c
  7841  003AF8  6E19               	movwf	EUSART1_Read@readValue,c
  7842  003AFA  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7843                           
  7844                           ; BSR set to: 0
  7845  003AFC  2A33               	incf	_eusart1RxTail,f,c	;volatile
  7846                           
  7847                           ; BSR set to: 0
  7848                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7849  003AFE  0E27               	movlw	39
  7850  003B00  6433               	cpfsgt	_eusart1RxTail,c	;volatile
  7851  003B02  D002               	goto	l904
  7852                           
  7853                           ; BSR set to: 0
  7854                           ;eusart1.c: 126: {
  7855                           ;eusart1.c: 127: eusart1RxTail = 0;
  7856  003B04  0E00               	movlw	0
  7857  003B06  6E33               	movwf	_eusart1RxTail,c	;volatile
  7858  003B08                     l904:
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;eusart1.c: 128: }
  7862                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7863                           
  7864                           ; BSR set to: 0
  7865  003B08  9A9D               	bcf	3997,5,c	;volatile
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;eusart1.c: 130: eusart1RxCount--;
  7869  003B0A  07F5               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7870                           
  7871                           ; BSR set to: 0
  7872                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7873  003B0C  8A9D               	bsf	3997,5,c	;volatile
  7874                           
  7875                           ; BSR set to: 0
  7876                           ;eusart1.c: 133: return readValue;
  7877  003B0E  5019               	movf	EUSART1_Read@readValue,w,c
  7878  003B10  0012               	return	
  7879  003B12                     __end_of_EUSART1_Read:
  7880                           	opt stack 0
  7881                           tosu	equ	0xFFF
  7882                           tosh	equ	0xFFE
  7883                           tosl	equ	0xFFD
  7884                           pclath	equ	0xFFA
  7885                           tblptru	equ	0xFF8
  7886                           tblptrh	equ	0xFF7
  7887                           tblptrl	equ	0xFF6
  7888                           tablat	equ	0xFF5
  7889                           prodh	equ	0xFF4
  7890                           prodl	equ	0xFF3
  7891                           postinc0	equ	0xFEE
  7892                           plusw0	equ	0xFEB
  7893                           wreg	equ	0xFE8
  7894                           indf1	equ	0xFE7
  7895                           postdec1	equ	0xFE5
  7896                           fsr1h	equ	0xFE2
  7897                           fsr1l	equ	0xFE1
  7898                           indf2	equ	0xFDF
  7899                           postinc2	equ	0xFDE
  7900                           postdec2	equ	0xFDD
  7901                           plusw2	equ	0xFDB
  7902                           fsr2h	equ	0xFDA
  7903                           fsr2l	equ	0xFD9
  7904                           status	equ	0xFD8
  7905                           
  7906 ;; *************** function _keepAliveSignalUart *****************
  7907 ;; Defined at:
  7908 ;;		line 105 in file "SystemStatus.c"
  7909 ;; Parameters:    Size  Location     Type
  7910 ;;		None
  7911 ;; Auto vars:     Size  Location     Type
  7912 ;;		None
  7913 ;; Return value:  Size  Location     Type
  7914 ;;                  1    wreg      void 
  7915 ;; Registers used:
  7916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7917 ;; Tracked objects:
  7918 ;;		On entry : 0/0
  7919 ;;		On exit  : 0/0
  7920 ;;		Unchanged: 0/0
  7921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7922 ;;      Params:         0       0       0       0       0       0       0
  7923 ;;      Locals:         0       0       0       0       0       0       0
  7924 ;;      Temps:          0       0       0       0       0       0       0
  7925 ;;      Totals:         0       0       0       0       0       0       0
  7926 ;;Total ram usage:        0 bytes
  7927 ;; Hardware stack levels used:    1
  7928 ;; Hardware stack levels required when called:    7
  7929 ;; This function calls:
  7930 ;;		_SendAckMessage
  7931 ;; This function is called by:
  7932 ;;		_main
  7933 ;; This function uses a non-reentrant model
  7934 ;;
  7935                           
  7936                           	psect	text32
  7937  0042D8                     __ptext32:
  7938                           	opt stack 0
  7939  0042D8                     _keepAliveSignalUart:
  7940                           	opt stack 23
  7941                           
  7942                           ;SystemStatus.c: 107: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_
      +                          ALIVE);
  7943                           
  7944                           ; BSR set to: 0
  7945                           ;incstack = 0
  7946  0042D8  0E15               	movlw	21
  7947  0042DA  6E24               	movwf	SendAckMessage@inRequest,c
  7948  0042DC  0E01               	movlw	1
  7949  0042DE  EC17  F01D         	call	_SendAckMessage
  7950  0042E2  0012               	return		;funcret
  7951  0042E4                     __end_of_keepAliveSignalUart:
  7952                           	opt stack 0
  7953                           tosu	equ	0xFFF
  7954                           tosh	equ	0xFFE
  7955                           tosl	equ	0xFFD
  7956                           pclath	equ	0xFFA
  7957                           tblptru	equ	0xFF8
  7958                           tblptrh	equ	0xFF7
  7959                           tblptrl	equ	0xFF6
  7960                           tablat	equ	0xFF5
  7961                           prodh	equ	0xFF4
  7962                           prodl	equ	0xFF3
  7963                           postinc0	equ	0xFEE
  7964                           plusw0	equ	0xFEB
  7965                           wreg	equ	0xFE8
  7966                           indf1	equ	0xFE7
  7967                           postdec1	equ	0xFE5
  7968                           fsr1h	equ	0xFE2
  7969                           fsr1l	equ	0xFE1
  7970                           indf2	equ	0xFDF
  7971                           postinc2	equ	0xFDE
  7972                           postdec2	equ	0xFDD
  7973                           plusw2	equ	0xFDB
  7974                           fsr2h	equ	0xFDA
  7975                           fsr2l	equ	0xFD9
  7976                           status	equ	0xFD8
  7977                           
  7978 ;; *************** function _keepAliveSignalLed *****************
  7979 ;; Defined at:
  7980 ;;		line 35 in file "LedsApp.c"
  7981 ;; Parameters:    Size  Location     Type
  7982 ;;		None
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;		None
  7985 ;; Return value:  Size  Location     Type
  7986 ;;                  1    wreg      void 
  7987 ;; Registers used:
  7988 ;;		wreg, status,2, status,0
  7989 ;; Tracked objects:
  7990 ;;		On entry : 0/0
  7991 ;;		On exit  : 0/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7994 ;;      Params:         0       0       0       0       0       0       0
  7995 ;;      Locals:         0       0       0       0       0       0       0
  7996 ;;      Temps:          1       0       0       0       0       0       0
  7997 ;;      Totals:         1       0       0       0       0       0       0
  7998 ;;Total ram usage:        1 bytes
  7999 ;; Hardware stack levels used:    1
  8000 ;; Hardware stack levels required when called:    4
  8001 ;; This function calls:
  8002 ;;		Nothing
  8003 ;; This function is called by:
  8004 ;;		_main
  8005 ;; This function uses a non-reentrant model
  8006 ;;
  8007                           
  8008                           	psect	text33
  8009  0041EE                     __ptext33:
  8010                           	opt stack 0
  8011  0041EE                     _keepAliveSignalLed:
  8012                           	opt stack 26
  8013                           
  8014                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  8015                           
  8016                           ;incstack = 0
  8017  0041EE  B08B               	btfsc	3979,0,c	;volatile
  8018  0041F0  D003               	goto	u5900
  8019  0041F2  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8020  0041F4  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  8021  0041F6  D001               	goto	u5918
  8022  0041F8                     u5900:
  8023  0041F8  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8024  0041FA                     u5918:
  8025  0041FA  508B               	movf	3979,w,c	;volatile
  8026  0041FC  1818               	xorwf	??_keepAliveSignalLed,w,c
  8027  0041FE  0BFE               	andlw	-2
  8028  004200  1818               	xorwf	??_keepAliveSignalLed,w,c
  8029  004202  6E8B               	movwf	3979,c	;volatile
  8030  004204  0012               	return		;funcret
  8031  004206                     __end_of_keepAliveSignalLed:
  8032                           	opt stack 0
  8033                           tosu	equ	0xFFF
  8034                           tosh	equ	0xFFE
  8035                           tosl	equ	0xFFD
  8036                           pclath	equ	0xFFA
  8037                           tblptru	equ	0xFF8
  8038                           tblptrh	equ	0xFF7
  8039                           tblptrl	equ	0xFF6
  8040                           tablat	equ	0xFF5
  8041                           prodh	equ	0xFF4
  8042                           prodl	equ	0xFF3
  8043                           postinc0	equ	0xFEE
  8044                           plusw0	equ	0xFEB
  8045                           wreg	equ	0xFE8
  8046                           indf1	equ	0xFE7
  8047                           postdec1	equ	0xFE5
  8048                           fsr1h	equ	0xFE2
  8049                           fsr1l	equ	0xFE1
  8050                           indf2	equ	0xFDF
  8051                           postinc2	equ	0xFDE
  8052                           postdec2	equ	0xFDD
  8053                           plusw2	equ	0xFDB
  8054                           fsr2h	equ	0xFDA
  8055                           fsr2l	equ	0xFD9
  8056                           status	equ	0xFD8
  8057                           
  8058 ;; *************** function _SynthLdDetect *****************
  8059 ;; Defined at:
  8060 ;;		line 236 in file "SyntApp.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;		None
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;		None
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      void 
  8067 ;; Registers used:
  8068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8074 ;;      Params:         0       0       0       0       0       0       0
  8075 ;;      Locals:         0       0       0       0       0       0       0
  8076 ;;      Temps:          0       0       0       0       0       0       0
  8077 ;;      Totals:         0       0       0       0       0       0       0
  8078 ;;Total ram usage:        0 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:   11
  8081 ;; This function calls:
  8082 ;;		_BlinkErrorLeds
  8083 ;;		_InitSynth
  8084 ;;		___awmod
  8085 ;; This function is called by:
  8086 ;;		_main
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           	psect	text34
  8091  002948                     __ptext34:
  8092                           	opt stack 0
  8093  002948                     _SynthLdDetect:
  8094                           	opt stack 19
  8095                           
  8096                           ;SyntApp.c: 240: if(PORTDbits.RD4 == 0)
  8097                           
  8098                           ;incstack = 0
  8099  002948  B883               	btfsc	3971,4,c	;volatile
  8100  00294A  D01E               	goto	l564
  8101                           
  8102                           ;SyntApp.c: 241: {
  8103                           ;SyntApp.c: 242: if(synthLdRxCnt > 0)
  8104  00294C  5043               	movf	_synthLdRxCnt,w,c
  8105  00294E  0A80               	xorlw	128
  8106  002950  0F7F               	addlw	-129
  8107  002952  A0D8               	btfss	status,0,c
  8108  002954  D005               	goto	l565
  8109                           
  8110                           ;SyntApp.c: 243: {
  8111                           ;SyntApp.c: 244: InitSynth(SYNTH_RX);
  8112  002956  0E01               	movlw	1
  8113  002958  ECF4  F005         	call	_InitSynth
  8114                           
  8115                           ;SyntApp.c: 245: synthLdRxCnt--;
  8116  00295C  0643               	decf	_synthLdRxCnt,f,c
  8117                           
  8118                           ;SyntApp.c: 246: }
  8119  00295E  D003               	goto	l566
  8120  002960                     l565:
  8121                           
  8122                           ;SyntApp.c: 247: else
  8123                           ;SyntApp.c: 248: {
  8124                           ;SyntApp.c: 249: BlinkErrorLeds(FAIL_SYNTH_RX_LATCH);
  8125  002960  0E03               	movlw	3
  8126  002962  EC5B  F01B         	call	_BlinkErrorLeds
  8127  002966                     l566:
  8128                           
  8129                           ;SyntApp.c: 250: }
  8130                           ;SyntApp.c: 251: synthLdRxArray[synthLdRxArrayCnt++ % 12] = UNLOCK;
  8131  002966  C038  F018         	movff	_synthLdRxArrayCnt,___awmod@dividend
  8132  00296A  6A19               	clrf	___awmod@dividend+1,c
  8133  00296C  0E00               	movlw	0
  8134  00296E  6E1B               	movwf	___awmod@divisor+1,c
  8135  002970  0E0C               	movlw	12
  8136  002972  6E1A               	movwf	___awmod@divisor,c
  8137  002974  EC55  F01A         	call	___awmod	;wreg free
  8138  002978  0EB0               	movlw	low _synthLdRxArray
  8139  00297A  2418               	addwf	?___awmod,w,c
  8140  00297C  6ED9               	movwf	fsr2l,c
  8141  00297E  0E01               	movlw	high _synthLdRxArray
  8142  002980  2019               	addwfc	?___awmod+1,w,c
  8143  002982  6EDA               	movwf	fsr2h,c
  8144  002984  0E00               	movlw	0
  8145  002986  D012               	goto	L3
  8146  002988                     l564:
  8147                           
  8148                           ;SyntApp.c: 253: else
  8149                           ;SyntApp.c: 254: {
  8150                           ;SyntApp.c: 255: synthLdRxCnt = 2;
  8151  002988  0E02               	movlw	2
  8152  00298A  6E43               	movwf	_synthLdRxCnt,c
  8153                           
  8154                           ;SyntApp.c: 256: synthLdRxArray[synthLdRxArrayCnt++ % 12] = LOCK;
  8155  00298C  C038  F018         	movff	_synthLdRxArrayCnt,___awmod@dividend
  8156  002990  6A19               	clrf	___awmod@dividend+1,c
  8157  002992  0E00               	movlw	0
  8158  002994  6E1B               	movwf	___awmod@divisor+1,c
  8159  002996  0E0C               	movlw	12
  8160  002998  6E1A               	movwf	___awmod@divisor,c
  8161  00299A  EC55  F01A         	call	___awmod	;wreg free
  8162  00299E  0EB0               	movlw	low _synthLdRxArray
  8163  0029A0  2418               	addwf	?___awmod,w,c
  8164  0029A2  6ED9               	movwf	fsr2l,c
  8165  0029A4  0E01               	movlw	high _synthLdRxArray
  8166  0029A6  2019               	addwfc	?___awmod+1,w,c
  8167  0029A8  6EDA               	movwf	fsr2h,c
  8168  0029AA  0E01               	movlw	1
  8169  0029AC                     L3:
  8170  0029AC  6EDF               	movwf	indf2,c
  8171  0029AE  2A38               	incf	_synthLdRxArrayCnt,f,c
  8172                           
  8173                           ;SyntApp.c: 257: }
  8174                           ;SyntApp.c: 262: if(PORTDbits.RD1 == 0)
  8175  0029B0  B283               	btfsc	3971,1,c	;volatile
  8176  0029B2  D020               	goto	l568
  8177                           
  8178                           ;SyntApp.c: 263: {
  8179                           ;SyntApp.c: 264: if(synthLdTxCnt > 0)
  8180  0029B4  5042               	movf	_synthLdTxCnt,w,c
  8181  0029B6  0A80               	xorlw	128
  8182  0029B8  0F7F               	addlw	-129
  8183  0029BA  A0D8               	btfss	status,0,c
  8184  0029BC  D005               	goto	l569
  8185                           
  8186                           ;SyntApp.c: 265: {
  8187                           ;SyntApp.c: 266: InitSynth(SYNTH_TX);
  8188  0029BE  0E00               	movlw	0
  8189  0029C0  ECF4  F005         	call	_InitSynth
  8190                           
  8191                           ;SyntApp.c: 267: synthLdTxCnt--;
  8192  0029C4  0642               	decf	_synthLdTxCnt,f,c
  8193                           
  8194                           ;SyntApp.c: 268: }
  8195  0029C6  D003               	goto	l570
  8196  0029C8                     l569:
  8197                           
  8198                           ;SyntApp.c: 269: else
  8199                           ;SyntApp.c: 270: {
  8200                           ;SyntApp.c: 271: BlinkErrorLeds(FAIL_SYNTH_TX_LATCH);
  8201  0029C8  0E04               	movlw	4
  8202  0029CA  EC5B  F01B         	call	_BlinkErrorLeds
  8203  0029CE                     l570:
  8204                           
  8205                           ;SyntApp.c: 272: }
  8206                           ;SyntApp.c: 273: synthLdTxArray[synthLdTxArrayCnt++ % 12] = UNLOCK;
  8207  0029CE  C037  F018         	movff	_synthLdTxArrayCnt,___awmod@dividend
  8208  0029D2  6A19               	clrf	___awmod@dividend+1,c
  8209  0029D4  0E00               	movlw	0
  8210  0029D6  6E1B               	movwf	___awmod@divisor+1,c
  8211  0029D8  0E0C               	movlw	12
  8212  0029DA  6E1A               	movwf	___awmod@divisor,c
  8213  0029DC  EC55  F01A         	call	___awmod	;wreg free
  8214  0029E0  0EA4               	movlw	low _synthLdTxArray
  8215  0029E2  2418               	addwf	?___awmod,w,c
  8216  0029E4  6ED9               	movwf	fsr2l,c
  8217  0029E6  0E01               	movlw	high _synthLdTxArray
  8218  0029E8  2019               	addwfc	?___awmod+1,w,c
  8219  0029EA  6EDA               	movwf	fsr2h,c
  8220  0029EC  0E00               	movlw	0
  8221  0029EE  6EDF               	movwf	indf2,c
  8222  0029F0  2A37               	incf	_synthLdTxArrayCnt,f,c
  8223                           
  8224                           ;SyntApp.c: 274: }
  8225  0029F2  0012               	return	
  8226  0029F4                     l568:
  8227                           
  8228                           ;SyntApp.c: 275: else
  8229                           ;SyntApp.c: 276: {
  8230                           ;SyntApp.c: 277: synthLdTxCnt = 2;
  8231  0029F4  0E02               	movlw	2
  8232  0029F6  6E42               	movwf	_synthLdTxCnt,c
  8233                           
  8234                           ;SyntApp.c: 278: synthLdTxArray[synthLdTxArrayCnt++ % 12] = LOCK;
  8235  0029F8  C037  F018         	movff	_synthLdTxArrayCnt,___awmod@dividend
  8236  0029FC  6A19               	clrf	___awmod@dividend+1,c
  8237  0029FE  0E00               	movlw	0
  8238  002A00  6E1B               	movwf	___awmod@divisor+1,c
  8239  002A02  0E0C               	movlw	12
  8240  002A04  6E1A               	movwf	___awmod@divisor,c
  8241  002A06  EC55  F01A         	call	___awmod	;wreg free
  8242  002A0A  0EA4               	movlw	low _synthLdTxArray
  8243  002A0C  2418               	addwf	?___awmod,w,c
  8244  002A0E  6ED9               	movwf	fsr2l,c
  8245  002A10  0E01               	movlw	high _synthLdTxArray
  8246  002A12  2019               	addwfc	?___awmod+1,w,c
  8247  002A14  6EDA               	movwf	fsr2h,c
  8248  002A16  0E01               	movlw	1
  8249  002A18  6EDF               	movwf	indf2,c
  8250  002A1A  2A37               	incf	_synthLdTxArrayCnt,f,c
  8251  002A1C  0012               	return	
  8252  002A1E                     __end_of_SynthLdDetect:
  8253                           	opt stack 0
  8254                           tosu	equ	0xFFF
  8255                           tosh	equ	0xFFE
  8256                           tosl	equ	0xFFD
  8257                           pclath	equ	0xFFA
  8258                           tblptru	equ	0xFF8
  8259                           tblptrh	equ	0xFF7
  8260                           tblptrl	equ	0xFF6
  8261                           tablat	equ	0xFF5
  8262                           prodh	equ	0xFF4
  8263                           prodl	equ	0xFF3
  8264                           postinc0	equ	0xFEE
  8265                           plusw0	equ	0xFEB
  8266                           wreg	equ	0xFE8
  8267                           indf1	equ	0xFE7
  8268                           postdec1	equ	0xFE5
  8269                           fsr1h	equ	0xFE2
  8270                           fsr1l	equ	0xFE1
  8271                           indf2	equ	0xFDF
  8272                           postinc2	equ	0xFDE
  8273                           postdec2	equ	0xFDD
  8274                           plusw2	equ	0xFDB
  8275                           fsr2h	equ	0xFDA
  8276                           fsr2l	equ	0xFD9
  8277                           status	equ	0xFD8
  8278                           
  8279 ;; *************** function ___awmod *****************
  8280 ;; Defined at:
  8281 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;  dividend        2   23[COMRAM] int 
  8284 ;;  divisor         2   25[COMRAM] int 
  8285 ;; Auto vars:     Size  Location     Type
  8286 ;;  sign            1   28[COMRAM] unsigned char 
  8287 ;;  counter         1   27[COMRAM] unsigned char 
  8288 ;; Return value:  Size  Location     Type
  8289 ;;                  2   23[COMRAM] int 
  8290 ;; Registers used:
  8291 ;;		wreg, status,2, status,0
  8292 ;; Tracked objects:
  8293 ;;		On entry : 0/0
  8294 ;;		On exit  : 0/0
  8295 ;;		Unchanged: 0/0
  8296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8297 ;;      Params:         4       0       0       0       0       0       0
  8298 ;;      Locals:         2       0       0       0       0       0       0
  8299 ;;      Temps:          0       0       0       0       0       0       0
  8300 ;;      Totals:         6       0       0       0       0       0       0
  8301 ;;Total ram usage:        6 bytes
  8302 ;; Hardware stack levels used:    1
  8303 ;; Hardware stack levels required when called:    4
  8304 ;; This function calls:
  8305 ;;		Nothing
  8306 ;; This function is called by:
  8307 ;;		_SynthLdDetect
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           	psect	text35
  8312  0034AA                     __ptext35:
  8313                           	opt stack 0
  8314  0034AA                     ___awmod:
  8315                           	opt stack 25
  8316                           
  8317                           ;incstack = 0
  8318  0034AA  0E00               	movlw	0
  8319  0034AC  6E1D               	movwf	___awmod@sign,c
  8320  0034AE  AE19               	btfss	___awmod@dividend+1,7,c
  8321  0034B0  D006               	goto	l1784
  8322  0034B2  6C18               	negf	___awmod@dividend,c
  8323  0034B4  1E19               	comf	___awmod@dividend+1,f,c
  8324  0034B6  B0D8               	btfsc	status,0,c
  8325  0034B8  2A19               	incf	___awmod@dividend+1,f,c
  8326  0034BA  0E01               	movlw	1
  8327  0034BC  6E1D               	movwf	___awmod@sign,c
  8328  0034BE                     l1784:
  8329  0034BE  AE1B               	btfss	___awmod@divisor+1,7,c
  8330  0034C0  D004               	goto	l1785
  8331  0034C2  6C1A               	negf	___awmod@divisor,c
  8332  0034C4  1E1B               	comf	___awmod@divisor+1,f,c
  8333  0034C6  B0D8               	btfsc	status,0,c
  8334  0034C8  2A1B               	incf	___awmod@divisor+1,f,c
  8335  0034CA                     l1785:
  8336  0034CA  501A               	movf	___awmod@divisor,w,c
  8337  0034CC  101B               	iorwf	___awmod@divisor+1,w,c
  8338  0034CE  B4D8               	btfsc	status,2,c
  8339  0034D0  D018               	goto	l1792
  8340  0034D2  0E01               	movlw	1
  8341  0034D4  6E1C               	movwf	___awmod@counter,c
  8342  0034D6  D004               	goto	l1787
  8343  0034D8  90D8               	bcf	status,0,c
  8344  0034DA  361A               	rlcf	___awmod@divisor,f,c
  8345  0034DC  361B               	rlcf	___awmod@divisor+1,f,c
  8346  0034DE  2A1C               	incf	___awmod@counter,f,c
  8347  0034E0                     l1787:
  8348  0034E0  AE1B               	btfss	___awmod@divisor+1,7,c
  8349  0034E2  D7FA               	goto	l1788
  8350  0034E4                     u5820:
  8351  0034E4  501A               	movf	___awmod@divisor,w,c
  8352  0034E6  5C18               	subwf	___awmod@dividend,w,c
  8353  0034E8  501B               	movf	___awmod@divisor+1,w,c
  8354  0034EA  5819               	subwfb	___awmod@dividend+1,w,c
  8355  0034EC  A0D8               	btfss	status,0,c
  8356  0034EE  D004               	goto	l1791
  8357  0034F0  501A               	movf	___awmod@divisor,w,c
  8358  0034F2  5E18               	subwf	___awmod@dividend,f,c
  8359  0034F4  501B               	movf	___awmod@divisor+1,w,c
  8360  0034F6  5A19               	subwfb	___awmod@dividend+1,f,c
  8361  0034F8                     l1791:
  8362  0034F8  90D8               	bcf	status,0,c
  8363  0034FA  321B               	rrcf	___awmod@divisor+1,f,c
  8364  0034FC  321A               	rrcf	___awmod@divisor,f,c
  8365  0034FE  2E1C               	decfsz	___awmod@counter,f,c
  8366  003500  D7F1               	goto	u5820
  8367  003502                     l1792:
  8368  003502  501D               	movf	___awmod@sign,w,c
  8369  003504  B4D8               	btfsc	status,2,c
  8370  003506  D004               	goto	l1793
  8371  003508  6C18               	negf	___awmod@dividend,c
  8372  00350A  1E19               	comf	___awmod@dividend+1,f,c
  8373  00350C  B0D8               	btfsc	status,0,c
  8374  00350E  2A19               	incf	___awmod@dividend+1,f,c
  8375  003510                     l1793:
  8376  003510  C018  F018         	movff	___awmod@dividend,?___awmod
  8377  003514  C019  F019         	movff	___awmod@dividend+1,?___awmod+1
  8378  003518  0012               	return	
  8379  00351A                     __end_of___awmod:
  8380                           	opt stack 0
  8381                           tosu	equ	0xFFF
  8382                           tosh	equ	0xFFE
  8383                           tosl	equ	0xFFD
  8384                           pclath	equ	0xFFA
  8385                           tblptru	equ	0xFF8
  8386                           tblptrh	equ	0xFF7
  8387                           tblptrl	equ	0xFF6
  8388                           tablat	equ	0xFF5
  8389                           prodh	equ	0xFF4
  8390                           prodl	equ	0xFF3
  8391                           postinc0	equ	0xFEE
  8392                           plusw0	equ	0xFEB
  8393                           wreg	equ	0xFE8
  8394                           indf1	equ	0xFE7
  8395                           postdec1	equ	0xFE5
  8396                           fsr1h	equ	0xFE2
  8397                           fsr1l	equ	0xFE1
  8398                           indf2	equ	0xFDF
  8399                           postinc2	equ	0xFDE
  8400                           postdec2	equ	0xFDD
  8401                           plusw2	equ	0xFDB
  8402                           fsr2h	equ	0xFDA
  8403                           fsr2l	equ	0xFD9
  8404                           status	equ	0xFD8
  8405                           
  8406 ;; *************** function _BlinkErrorLeds *****************
  8407 ;; Defined at:
  8408 ;;		line 13 in file "LedsApp.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;  state           1    wreg     enum E7598
  8411 ;; Auto vars:     Size  Location     Type
  8412 ;;  state           1   26[COMRAM] enum E7598
  8413 ;;  idx             2   27[COMRAM] int 
  8414 ;; Return value:  Size  Location     Type
  8415 ;;                  1    wreg      void 
  8416 ;; Registers used:
  8417 ;;		wreg, status,2, status,0
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8423 ;;      Params:         0       0       0       0       0       0       0
  8424 ;;      Locals:         3       0       0       0       0       0       0
  8425 ;;      Temps:          3       0       0       0       0       0       0
  8426 ;;      Totals:         6       0       0       0       0       0       0
  8427 ;;Total ram usage:        6 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; Hardware stack levels required when called:    4
  8430 ;; This function calls:
  8431 ;;		Nothing
  8432 ;; This function is called by:
  8433 ;;		_SynthLdDetect
  8434 ;;		_main
  8435 ;; This function uses a non-reentrant model
  8436 ;;
  8437                           
  8438                           	psect	text36
  8439  0036B6                     __ptext36:
  8440                           	opt stack 0
  8441  0036B6                     _BlinkErrorLeds:
  8442                           	opt stack 25
  8443                           
  8444                           ;incstack = 0
  8445                           ;BlinkErrorLeds@state stored from wreg
  8446  0036B6  6E1B               	movwf	BlinkErrorLeds@state,c
  8447                           
  8448                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
  8449  0036B8  0E00               	movlw	0
  8450  0036BA  6E1D               	movwf	BlinkErrorLeds@idx+1,c
  8451  0036BC  0E00               	movlw	0
  8452  0036BE  6E1C               	movwf	BlinkErrorLeds@idx,c
  8453  0036C0                     l6406:
  8454  0036C0  501B               	movf	BlinkErrorLeds@state,w,c
  8455  0036C2  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8456  0036C4  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
  8457  0036C6  5018               	movf	??_BlinkErrorLeds,w,c
  8458  0036C8  5C1C               	subwf	BlinkErrorLeds@idx,w,c
  8459  0036CA  501D               	movf	BlinkErrorLeds@idx+1,w,c
  8460  0036CC  0A80               	xorlw	128
  8461  0036CE  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
  8462  0036D0  5019               	movf	??_BlinkErrorLeds+1,w,c
  8463  0036D2  0A80               	xorlw	128
  8464  0036D4  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
  8465  0036D6  B0D8               	btfsc	status,0,c
  8466  0036D8  0012               	return	
  8467                           
  8468                           ;LedsApp.c: 16: {
  8469                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
  8470  0036DA  988A               	bcf	3978,4,c	;volatile
  8471                           
  8472                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
  8473  0036DC  0E02               	movlw	2
  8474  0036DE  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8475  0036E0  0E04               	movlw	4
  8476  0036E2  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8477  0036E4  0EBA               	movlw	186
  8478  0036E6                     u9247:
  8479  0036E6  2EE8               	decfsz	wreg,f,c
  8480  0036E8  D7FE               	bra	u9247
  8481  0036EA  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8482  0036EC  D7FC               	bra	u9247
  8483  0036EE  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8484  0036F0  D7FA               	bra	u9247
  8485  0036F2  D000               	nop2	
  8486                           
  8487                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
  8488  0036F4  888A               	bsf	3978,4,c	;volatile
  8489                           
  8490                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
  8491  0036F6  0E02               	movlw	2
  8492  0036F8  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8493  0036FA  0E04               	movlw	4
  8494  0036FC  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8495  0036FE  0EBA               	movlw	186
  8496  003700                     u9257:
  8497  003700  2EE8               	decfsz	wreg,f,c
  8498  003702  D7FE               	bra	u9257
  8499  003704  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8500  003706  D7FC               	bra	u9257
  8501  003708  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8502  00370A  D7FA               	bra	u9257
  8503  00370C  D000               	nop2	
  8504  00370E  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
  8505  003710  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
  8506  003712  D7D6               	goto	l6406
  8507  003714                     __end_of_BlinkErrorLeds:
  8508                           	opt stack 0
  8509                           tosu	equ	0xFFF
  8510                           tosh	equ	0xFFE
  8511                           tosl	equ	0xFFD
  8512                           pclath	equ	0xFFA
  8513                           tblptru	equ	0xFF8
  8514                           tblptrh	equ	0xFF7
  8515                           tblptrl	equ	0xFF6
  8516                           tablat	equ	0xFF5
  8517                           prodh	equ	0xFF4
  8518                           prodl	equ	0xFF3
  8519                           postinc0	equ	0xFEE
  8520                           plusw0	equ	0xFEB
  8521                           wreg	equ	0xFE8
  8522                           indf1	equ	0xFE7
  8523                           postdec1	equ	0xFE5
  8524                           fsr1h	equ	0xFE2
  8525                           fsr1l	equ	0xFE1
  8526                           indf2	equ	0xFDF
  8527                           postinc2	equ	0xFDE
  8528                           postdec2	equ	0xFDD
  8529                           plusw2	equ	0xFDB
  8530                           fsr2h	equ	0xFDA
  8531                           fsr2l	equ	0xFD9
  8532                           status	equ	0xFD8
  8533                           
  8534 ;; *************** function _SetMcuSystem *****************
  8535 ;; Defined at:
  8536 ;;		line 11 in file "SystemSettings.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;		None
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;		None
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  1    wreg      void 
  8543 ;; Registers used:
  8544 ;;		wreg, status,2, status,0, cstack
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8550 ;;      Params:         0       0       0       0       0       0       0
  8551 ;;      Locals:         0       0       0       0       0       0       0
  8552 ;;      Temps:          0       0       0       0       0       0       0
  8553 ;;      Totals:         0       0       0       0       0       0       0
  8554 ;;Total ram usage:        0 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    7
  8557 ;; This function calls:
  8558 ;;		_SYSTEM_Initialize
  8559 ;; This function is called by:
  8560 ;;		_main
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           	psect	text37
  8565  0042F0                     __ptext37:
  8566                           	opt stack 0
  8567  0042F0                     _SetMcuSystem:
  8568                           	opt stack 23
  8569                           
  8570                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  8571                           
  8572                           ;incstack = 0
  8573  0042F0  ECEA  F020         	call	_SYSTEM_Initialize	;wreg free
  8574                           
  8575                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  8576  0042F4  8EF2               	bsf	intcon,7,c	;volatile
  8577                           
  8578                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  8579  0042F6  8CF2               	bsf	intcon,6,c	;volatile
  8580  0042F8  0012               	return		;funcret
  8581  0042FA                     __end_of_SetMcuSystem:
  8582                           	opt stack 0
  8583                           tosu	equ	0xFFF
  8584                           tosh	equ	0xFFE
  8585                           tosl	equ	0xFFD
  8586                           pclath	equ	0xFFA
  8587                           tblptru	equ	0xFF8
  8588                           tblptrh	equ	0xFF7
  8589                           tblptrl	equ	0xFF6
  8590                           tablat	equ	0xFF5
  8591                           prodh	equ	0xFF4
  8592                           prodl	equ	0xFF3
  8593                           intcon	equ	0xFF2
  8594                           postinc0	equ	0xFEE
  8595                           plusw0	equ	0xFEB
  8596                           wreg	equ	0xFE8
  8597                           indf1	equ	0xFE7
  8598                           postdec1	equ	0xFE5
  8599                           fsr1h	equ	0xFE2
  8600                           fsr1l	equ	0xFE1
  8601                           indf2	equ	0xFDF
  8602                           postinc2	equ	0xFDE
  8603                           postdec2	equ	0xFDD
  8604                           plusw2	equ	0xFDB
  8605                           fsr2h	equ	0xFDA
  8606                           fsr2l	equ	0xFD9
  8607                           status	equ	0xFD8
  8608                           
  8609 ;; *************** function _SYSTEM_Initialize *****************
  8610 ;; Defined at:
  8611 ;;		line 112 in file "mcc_generated_files/mcc.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;		None
  8614 ;; Auto vars:     Size  Location     Type
  8615 ;;		None
  8616 ;; Return value:  Size  Location     Type
  8617 ;;                  1    wreg      void 
  8618 ;; Registers used:
  8619 ;;		wreg, status,2, status,0, cstack
  8620 ;; Tracked objects:
  8621 ;;		On entry : 0/0
  8622 ;;		On exit  : 0/0
  8623 ;;		Unchanged: 0/0
  8624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8625 ;;      Params:         0       0       0       0       0       0       0
  8626 ;;      Locals:         0       0       0       0       0       0       0
  8627 ;;      Temps:          0       0       0       0       0       0       0
  8628 ;;      Totals:         0       0       0       0       0       0       0
  8629 ;;Total ram usage:        0 bytes
  8630 ;; Hardware stack levels used:    1
  8631 ;; Hardware stack levels required when called:    6
  8632 ;; This function calls:
  8633 ;;		_ADC_Initialize
  8634 ;;		_EUSART1_Initialize
  8635 ;;		_INTERRUPT_Initialize
  8636 ;;		_OSCILLATOR_Initialize
  8637 ;;		_PIN_MANAGER_Initialize
  8638 ;;		_TMR0_Initialize
  8639 ;; This function is called by:
  8640 ;;		_SetMcuSystem
  8641 ;; This function uses a non-reentrant model
  8642 ;;
  8643                           
  8644                           	psect	text38
  8645  0041D4                     __ptext38:
  8646                           	opt stack 0
  8647  0041D4                     _SYSTEM_Initialize:
  8648                           	opt stack 23
  8649                           
  8650                           ;mcc.c: 114: INTERRUPT_Initialize();
  8651                           
  8652                           ;incstack = 0
  8653  0041D4  EC98  F021         	call	_INTERRUPT_Initialize	;wreg free
  8654                           
  8655                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  8656  0041D8  EC29  F01B         	call	_PIN_MANAGER_Initialize	;wreg free
  8657                           
  8658                           ;mcc.c: 116: OSCILLATOR_Initialize();
  8659  0041DC  EC57  F021         	call	_OSCILLATOR_Initialize	;wreg free
  8660                           
  8661                           ;mcc.c: 117: TMR0_Initialize();
  8662  0041E0  EC42  F01F         	call	_TMR0_Initialize	;wreg free
  8663                           
  8664                           ;mcc.c: 118: ADC_Initialize();
  8665  0041E4  EC03  F021         	call	_ADC_Initialize	;wreg free
  8666                           
  8667                           ;mcc.c: 119: EUSART1_Initialize();
  8668  0041E8  EC82  F01E         	call	_EUSART1_Initialize	;wreg free
  8669  0041EC  0012               	return		;funcret
  8670  0041EE                     __end_of_SYSTEM_Initialize:
  8671                           	opt stack 0
  8672                           tosu	equ	0xFFF
  8673                           tosh	equ	0xFFE
  8674                           tosl	equ	0xFFD
  8675                           pclath	equ	0xFFA
  8676                           tblptru	equ	0xFF8
  8677                           tblptrh	equ	0xFF7
  8678                           tblptrl	equ	0xFF6
  8679                           tablat	equ	0xFF5
  8680                           prodh	equ	0xFF4
  8681                           prodl	equ	0xFF3
  8682                           intcon	equ	0xFF2
  8683                           postinc0	equ	0xFEE
  8684                           plusw0	equ	0xFEB
  8685                           wreg	equ	0xFE8
  8686                           indf1	equ	0xFE7
  8687                           postdec1	equ	0xFE5
  8688                           fsr1h	equ	0xFE2
  8689                           fsr1l	equ	0xFE1
  8690                           indf2	equ	0xFDF
  8691                           postinc2	equ	0xFDE
  8692                           postdec2	equ	0xFDD
  8693                           plusw2	equ	0xFDB
  8694                           fsr2h	equ	0xFDA
  8695                           fsr2l	equ	0xFD9
  8696                           status	equ	0xFD8
  8697                           
  8698 ;; *************** function _TMR0_Initialize *****************
  8699 ;; Defined at:
  8700 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  8701 ;; Parameters:    Size  Location     Type
  8702 ;;		None
  8703 ;; Auto vars:     Size  Location     Type
  8704 ;;		None
  8705 ;; Return value:  Size  Location     Type
  8706 ;;                  1    wreg      void 
  8707 ;; Registers used:
  8708 ;;		wreg, status,2, status,0, cstack
  8709 ;; Tracked objects:
  8710 ;;		On entry : 0/0
  8711 ;;		On exit  : 0/0
  8712 ;;		Unchanged: 0/0
  8713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8714 ;;      Params:         0       0       0       0       0       0       0
  8715 ;;      Locals:         0       0       0       0       0       0       0
  8716 ;;      Temps:          2       0       0       0       0       0       0
  8717 ;;      Totals:         2       0       0       0       0       0       0
  8718 ;;Total ram usage:        2 bytes
  8719 ;; Hardware stack levels used:    1
  8720 ;; Hardware stack levels required when called:    5
  8721 ;; This function calls:
  8722 ;;		_TMR0_SetInterruptHandler
  8723 ;; This function is called by:
  8724 ;;		_SYSTEM_Initialize
  8725 ;; This function uses a non-reentrant model
  8726 ;;
  8727                           
  8728                           	psect	text39
  8729  003E84                     __ptext39:
  8730                           	opt stack 0
  8731  003E84                     _TMR0_Initialize:
  8732                           	opt stack 23
  8733                           
  8734                           ;tmr0.c: 71: TMR0H = 0xF8;
  8735                           
  8736                           ;incstack = 0
  8737  003E84  0EF8               	movlw	248
  8738  003E86  6ED7               	movwf	4055,c	;volatile
  8739                           
  8740                           ;tmr0.c: 74: TMR0L = 0x2F;
  8741  003E88  0E2F               	movlw	47
  8742  003E8A  6ED6               	movwf	4054,c	;volatile
  8743                           
  8744                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  8745  003E8C  50D6               	movf	4054,w,c	;volatile
  8746  003E8E  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  8747  003E92  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  8748  003E94  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  8749  003E98  6A1A               	clrf	??_TMR0_Initialize,c
  8750  003E9A  101A               	iorwf	??_TMR0_Initialize,w,c
  8751  003E9C  6E46               	movwf	_timer0ReloadVal,c	;volatile
  8752  003E9E  501B               	movf	??_TMR0_Initialize+1,w,c
  8753  003EA0  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  8754                           
  8755                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  8756  003EA2  94F2               	bcf	intcon,2,c	;volatile
  8757                           
  8758                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  8759  003EA4  8AF2               	bsf	intcon,5,c	;volatile
  8760                           
  8761                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  8762  003EA6  0E00               	movlw	0
  8763  003EA8  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  8764  003EAA  0E00               	movlw	0
  8765  003EAC  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  8766  003EAE  EC7D  F021         	call	_TMR0_SetInterruptHandler	;wreg free
  8767                           
  8768                           ;tmr0.c: 90: T0CON = 0x90;
  8769  003EB2  0E90               	movlw	144
  8770  003EB4  6ED5               	movwf	4053,c	;volatile
  8771  003EB6  0012               	return		;funcret
  8772  003EB8                     __end_of_TMR0_Initialize:
  8773                           	opt stack 0
  8774                           tosu	equ	0xFFF
  8775                           tosh	equ	0xFFE
  8776                           tosl	equ	0xFFD
  8777                           pclath	equ	0xFFA
  8778                           tblptru	equ	0xFF8
  8779                           tblptrh	equ	0xFF7
  8780                           tblptrl	equ	0xFF6
  8781                           tablat	equ	0xFF5
  8782                           prodh	equ	0xFF4
  8783                           prodl	equ	0xFF3
  8784                           intcon	equ	0xFF2
  8785                           postinc0	equ	0xFEE
  8786                           plusw0	equ	0xFEB
  8787                           wreg	equ	0xFE8
  8788                           indf1	equ	0xFE7
  8789                           postdec1	equ	0xFE5
  8790                           fsr1h	equ	0xFE2
  8791                           fsr1l	equ	0xFE1
  8792                           indf2	equ	0xFDF
  8793                           postinc2	equ	0xFDE
  8794                           postdec2	equ	0xFDD
  8795                           plusw2	equ	0xFDB
  8796                           fsr2h	equ	0xFDA
  8797                           fsr2l	equ	0xFD9
  8798                           status	equ	0xFD8
  8799                           
  8800 ;; *************** function _TMR0_SetInterruptHandler *****************
  8801 ;; Defined at:
  8802 ;;		line 179 in file "mcc_generated_files/tmr0.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8805 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8806 ;; Auto vars:     Size  Location     Type
  8807 ;;		None
  8808 ;; Return value:  Size  Location     Type
  8809 ;;                  1    wreg      void 
  8810 ;; Registers used:
  8811 ;;		wreg, status,2, status,0
  8812 ;; Tracked objects:
  8813 ;;		On entry : 0/0
  8814 ;;		On exit  : 0/0
  8815 ;;		Unchanged: 0/0
  8816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8817 ;;      Params:         2       0       0       0       0       0       0
  8818 ;;      Locals:         0       0       0       0       0       0       0
  8819 ;;      Temps:          0       0       0       0       0       0       0
  8820 ;;      Totals:         2       0       0       0       0       0       0
  8821 ;;Total ram usage:        2 bytes
  8822 ;; Hardware stack levels used:    1
  8823 ;; Hardware stack levels required when called:    4
  8824 ;; This function calls:
  8825 ;;		Nothing
  8826 ;; This function is called by:
  8827 ;;		_TMR0_Initialize
  8828 ;; This function uses a non-reentrant model
  8829 ;;
  8830                           
  8831                           	psect	text40
  8832  0042FA                     __ptext40:
  8833                           	opt stack 0
  8834  0042FA                     _TMR0_SetInterruptHandler:
  8835                           	opt stack 23
  8836                           
  8837                           ;tmr0.c: 180: TMR0_InterruptHandler = InterruptHandler;
  8838                           
  8839                           ;incstack = 0
  8840  0042FA  C018  F1CC         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  8841  0042FE  C019  F1CD         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  8842  004302  0012               	return		;funcret
  8843  004304                     __end_of_TMR0_SetInterruptHandler:
  8844                           	opt stack 0
  8845                           tosu	equ	0xFFF
  8846                           tosh	equ	0xFFE
  8847                           tosl	equ	0xFFD
  8848                           pclath	equ	0xFFA
  8849                           tblptru	equ	0xFF8
  8850                           tblptrh	equ	0xFF7
  8851                           tblptrl	equ	0xFF6
  8852                           tablat	equ	0xFF5
  8853                           prodh	equ	0xFF4
  8854                           prodl	equ	0xFF3
  8855                           intcon	equ	0xFF2
  8856                           postinc0	equ	0xFEE
  8857                           plusw0	equ	0xFEB
  8858                           wreg	equ	0xFE8
  8859                           indf1	equ	0xFE7
  8860                           postdec1	equ	0xFE5
  8861                           fsr1h	equ	0xFE2
  8862                           fsr1l	equ	0xFE1
  8863                           indf2	equ	0xFDF
  8864                           postinc2	equ	0xFDE
  8865                           postdec2	equ	0xFDD
  8866                           plusw2	equ	0xFDB
  8867                           fsr2h	equ	0xFDA
  8868                           fsr2l	equ	0xFD9
  8869                           status	equ	0xFD8
  8870                           
  8871 ;; *************** function _PIN_MANAGER_Initialize *****************
  8872 ;; Defined at:
  8873 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;		None
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;		None
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  1    wreg      void 
  8880 ;; Registers used:
  8881 ;;		wreg, status,2, status,0, cstack
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8887 ;;      Params:         0       0       0       0       0       0       0
  8888 ;;      Locals:         0       0       0       0       0       0       0
  8889 ;;      Temps:          0       0       0       0       0       0       0
  8890 ;;      Totals:         0       0       0       0       0       0       0
  8891 ;;Total ram usage:        0 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    5
  8894 ;; This function calls:
  8895 ;;		_IOCB4_SetInterruptHandler
  8896 ;;		_IOCB5_SetInterruptHandler
  8897 ;; This function is called by:
  8898 ;;		_SYSTEM_Initialize
  8899 ;; This function uses a non-reentrant model
  8900 ;;
  8901                           
  8902                           	psect	text41
  8903  003652                     __ptext41:
  8904                           	opt stack 0
  8905  003652                     _PIN_MANAGER_Initialize:
  8906                           	opt stack 23
  8907                           
  8908                           ;pin_manager.c: 60: LATE = 0x00;
  8909                           
  8910                           ;incstack = 0
  8911  003652  0E00               	movlw	0
  8912  003654  6E8D               	movwf	3981,c	;volatile
  8913                           
  8914                           ;pin_manager.c: 61: LATD = 0x00;
  8915  003656  0E00               	movlw	0
  8916  003658  6E8C               	movwf	3980,c	;volatile
  8917                           
  8918                           ;pin_manager.c: 62: LATA = 0x06;
  8919  00365A  0E06               	movlw	6
  8920  00365C  6E89               	movwf	3977,c	;volatile
  8921                           
  8922                           ;pin_manager.c: 63: LATB = 0x00;
  8923  00365E  0E00               	movlw	0
  8924  003660  6E8A               	movwf	3978,c	;volatile
  8925                           
  8926                           ;pin_manager.c: 64: LATC = 0x00;
  8927  003662  0E00               	movlw	0
  8928  003664  6E8B               	movwf	3979,c	;volatile
  8929                           
  8930                           ;pin_manager.c: 69: TRISE = 0x07;
  8931  003666  0E07               	movlw	7
  8932  003668  6E96               	movwf	3990,c	;volatile
  8933                           
  8934                           ;pin_manager.c: 70: TRISA = 0xE1;
  8935  00366A  0EE1               	movlw	225
  8936  00366C  6E92               	movwf	3986,c	;volatile
  8937                           
  8938                           ;pin_manager.c: 71: TRISB = 0xEF;
  8939  00366E  0EEF               	movlw	239
  8940  003670  6E93               	movwf	3987,c	;volatile
  8941                           
  8942                           ;pin_manager.c: 72: TRISC = 0x80;
  8943  003672  0E80               	movlw	128
  8944  003674  6E94               	movwf	3988,c	;volatile
  8945                           
  8946                           ;pin_manager.c: 73: TRISD = 0xF2;
  8947  003676  0EF2               	movlw	242
  8948  003678  6E95               	movwf	3989,c	;volatile
  8949                           
  8950                           ;pin_manager.c: 78: ANSELC = 0x34;
  8951  00367A  0E34               	movlw	52
  8952  00367C  010F               	movlb	15	; () banked
  8953  00367E  6F3A               	movwf	58,b	;volatile
  8954                           
  8955                           ;pin_manager.c: 79: ANSELB = 0x3E;
  8956  003680  0E3E               	movlw	62
  8957  003682  6F39               	movwf	57,b	;volatile
  8958                           
  8959                           ;pin_manager.c: 80: ANSELD = 0xE4;
  8960  003684  0EE4               	movlw	228
  8961  003686  6F3B               	movwf	59,b	;volatile
  8962                           
  8963                           ;pin_manager.c: 81: ANSELE = 0x07;
  8964  003688  0E07               	movlw	7
  8965  00368A  6F3C               	movwf	60,b	;volatile
  8966                           
  8967                           ;pin_manager.c: 82: ANSELA = 0x2F;
  8968  00368C  0E2F               	movlw	47
  8969  00368E  6F38               	movwf	56,b	;volatile
  8970                           
  8971                           ;pin_manager.c: 87: WPUB = 0xC3;
  8972  003690  0EC3               	movlw	195
  8973  003692  6E61               	movwf	3937,c	;volatile
  8974                           
  8975                           ; BSR set to: 15
  8976                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 0;
  8977  003694  9EF1               	bcf	intcon2,7,c	;volatile
  8978                           
  8979                           ; BSR set to: 15
  8980                           ;pin_manager.c: 96: IOCBbits.IOCB4 = 1;
  8981  003696  8862               	bsf	3938,4,c	;volatile
  8982                           
  8983                           ; BSR set to: 15
  8984                           ;pin_manager.c: 97: IOCBbits.IOCB5 = 1;
  8985  003698  8A62               	bsf	3938,5,c	;volatile
  8986                           
  8987                           ; BSR set to: 15
  8988                           ;pin_manager.c: 100: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  8989  00369A  0E3E               	movlw	low _IOCB4_DefaultInterruptHandler
  8990  00369C  6E18               	movwf	IOCB4_SetInterruptHandler@InterruptHandler,c
  8991  00369E  0E43               	movlw	high _IOCB4_DefaultInterruptHandler
  8992  0036A0  6E19               	movwf	IOCB4_SetInterruptHandler@InterruptHandler+1,c
  8993  0036A2  EC87  F021         	call	_IOCB4_SetInterruptHandler	;wreg free
  8994                           
  8995                           ;pin_manager.c: 101: IOCB5_SetInterruptHandler(IOCB5_DefaultInterruptHandler);
  8996  0036A6  0E3C               	movlw	low _IOCB5_DefaultInterruptHandler
  8997  0036A8  6E18               	movwf	IOCB5_SetInterruptHandler@InterruptHandler,c
  8998  0036AA  0E43               	movlw	high _IOCB5_DefaultInterruptHandler
  8999  0036AC  6E19               	movwf	IOCB5_SetInterruptHandler@InterruptHandler+1,c
  9000  0036AE  EC82  F021         	call	_IOCB5_SetInterruptHandler	;wreg free
  9001                           
  9002                           ;pin_manager.c: 104: INTCONbits.RBIE = 1;
  9003  0036B2  86F2               	bsf	intcon,3,c	;volatile
  9004  0036B4  0012               	return		;funcret
  9005  0036B6                     __end_of_PIN_MANAGER_Initialize:
  9006                           	opt stack 0
  9007                           tosu	equ	0xFFF
  9008                           tosh	equ	0xFFE
  9009                           tosl	equ	0xFFD
  9010                           pclath	equ	0xFFA
  9011                           tblptru	equ	0xFF8
  9012                           tblptrh	equ	0xFF7
  9013                           tblptrl	equ	0xFF6
  9014                           tablat	equ	0xFF5
  9015                           prodh	equ	0xFF4
  9016                           prodl	equ	0xFF3
  9017                           intcon	equ	0xFF2
  9018                           intcon2	equ	0xFF1
  9019                           postinc0	equ	0xFEE
  9020                           plusw0	equ	0xFEB
  9021                           wreg	equ	0xFE8
  9022                           indf1	equ	0xFE7
  9023                           postdec1	equ	0xFE5
  9024                           fsr1h	equ	0xFE2
  9025                           fsr1l	equ	0xFE1
  9026                           indf2	equ	0xFDF
  9027                           postinc2	equ	0xFDE
  9028                           postdec2	equ	0xFDD
  9029                           plusw2	equ	0xFDB
  9030                           fsr2h	equ	0xFDA
  9031                           fsr2l	equ	0xFD9
  9032                           status	equ	0xFD8
  9033                           
  9034 ;; *************** function _IOCB5_SetInterruptHandler *****************
  9035 ;; Defined at:
  9036 ;;		line 172 in file "mcc_generated_files/pin_manager.c"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9039 ;;		 -> IOCB5_DefaultInterruptHandler(1), 
  9040 ;; Auto vars:     Size  Location     Type
  9041 ;;		None
  9042 ;; Return value:  Size  Location     Type
  9043 ;;                  1    wreg      void 
  9044 ;; Registers used:
  9045 ;;		wreg, status,2, status,0
  9046 ;; Tracked objects:
  9047 ;;		On entry : 0/0
  9048 ;;		On exit  : 0/0
  9049 ;;		Unchanged: 0/0
  9050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9051 ;;      Params:         2       0       0       0       0       0       0
  9052 ;;      Locals:         0       0       0       0       0       0       0
  9053 ;;      Temps:          0       0       0       0       0       0       0
  9054 ;;      Totals:         2       0       0       0       0       0       0
  9055 ;;Total ram usage:        2 bytes
  9056 ;; Hardware stack levels used:    1
  9057 ;; Hardware stack levels required when called:    4
  9058 ;; This function calls:
  9059 ;;		Nothing
  9060 ;; This function is called by:
  9061 ;;		_PIN_MANAGER_Initialize
  9062 ;; This function uses a non-reentrant model
  9063 ;;
  9064                           
  9065                           	psect	text42
  9066  004304                     __ptext42:
  9067                           	opt stack 0
  9068  004304                     _IOCB5_SetInterruptHandler:
  9069                           	opt stack 23
  9070                           
  9071                           ;pin_manager.c: 173: IOCB5_InterruptHandler = InterruptHandler;
  9072                           
  9073                           ;incstack = 0
  9074  004304  C018  F1CE         	movff	IOCB5_SetInterruptHandler@InterruptHandler,_IOCB5_InterruptHandler
  9075  004308  C019  F1CF         	movff	IOCB5_SetInterruptHandler@InterruptHandler+1,_IOCB5_InterruptHandler+1
  9076  00430C  0012               	return		;funcret
  9077  00430E                     __end_of_IOCB5_SetInterruptHandler:
  9078                           	opt stack 0
  9079                           tosu	equ	0xFFF
  9080                           tosh	equ	0xFFE
  9081                           tosl	equ	0xFFD
  9082                           pclath	equ	0xFFA
  9083                           tblptru	equ	0xFF8
  9084                           tblptrh	equ	0xFF7
  9085                           tblptrl	equ	0xFF6
  9086                           tablat	equ	0xFF5
  9087                           prodh	equ	0xFF4
  9088                           prodl	equ	0xFF3
  9089                           intcon	equ	0xFF2
  9090                           intcon2	equ	0xFF1
  9091                           postinc0	equ	0xFEE
  9092                           plusw0	equ	0xFEB
  9093                           wreg	equ	0xFE8
  9094                           indf1	equ	0xFE7
  9095                           postdec1	equ	0xFE5
  9096                           fsr1h	equ	0xFE2
  9097                           fsr1l	equ	0xFE1
  9098                           indf2	equ	0xFDF
  9099                           postinc2	equ	0xFDE
  9100                           postdec2	equ	0xFDD
  9101                           plusw2	equ	0xFDB
  9102                           fsr2h	equ	0xFDA
  9103                           fsr2l	equ	0xFD9
  9104                           status	equ	0xFD8
  9105                           
  9106 ;; *************** function _IOCB4_SetInterruptHandler *****************
  9107 ;; Defined at:
  9108 ;;		line 143 in file "mcc_generated_files/pin_manager.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9111 ;;		 -> IOCB4_DefaultInterruptHandler(1), 
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;		None
  9114 ;; Return value:  Size  Location     Type
  9115 ;;                  1    wreg      void 
  9116 ;; Registers used:
  9117 ;;		wreg, status,2, status,0
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9123 ;;      Params:         2       0       0       0       0       0       0
  9124 ;;      Locals:         0       0       0       0       0       0       0
  9125 ;;      Temps:          0       0       0       0       0       0       0
  9126 ;;      Totals:         2       0       0       0       0       0       0
  9127 ;;Total ram usage:        2 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; Hardware stack levels required when called:    4
  9130 ;; This function calls:
  9131 ;;		Nothing
  9132 ;; This function is called by:
  9133 ;;		_PIN_MANAGER_Initialize
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           	psect	text43
  9138  00430E                     __ptext43:
  9139                           	opt stack 0
  9140  00430E                     _IOCB4_SetInterruptHandler:
  9141                           	opt stack 23
  9142                           
  9143                           ;pin_manager.c: 144: IOCB4_InterruptHandler = InterruptHandler;
  9144                           
  9145                           ;incstack = 0
  9146  00430E  C018  F1D0         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  9147  004312  C019  F1D1         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  9148  004316  0012               	return		;funcret
  9149  004318                     __end_of_IOCB4_SetInterruptHandler:
  9150                           	opt stack 0
  9151                           tosu	equ	0xFFF
  9152                           tosh	equ	0xFFE
  9153                           tosl	equ	0xFFD
  9154                           pclath	equ	0xFFA
  9155                           tblptru	equ	0xFF8
  9156                           tblptrh	equ	0xFF7
  9157                           tblptrl	equ	0xFF6
  9158                           tablat	equ	0xFF5
  9159                           prodh	equ	0xFF4
  9160                           prodl	equ	0xFF3
  9161                           intcon	equ	0xFF2
  9162                           intcon2	equ	0xFF1
  9163                           postinc0	equ	0xFEE
  9164                           plusw0	equ	0xFEB
  9165                           wreg	equ	0xFE8
  9166                           indf1	equ	0xFE7
  9167                           postdec1	equ	0xFE5
  9168                           fsr1h	equ	0xFE2
  9169                           fsr1l	equ	0xFE1
  9170                           indf2	equ	0xFDF
  9171                           postinc2	equ	0xFDE
  9172                           postdec2	equ	0xFDD
  9173                           plusw2	equ	0xFDB
  9174                           fsr2h	equ	0xFDA
  9175                           fsr2l	equ	0xFD9
  9176                           status	equ	0xFD8
  9177                           
  9178 ;; *************** function _OSCILLATOR_Initialize *****************
  9179 ;; Defined at:
  9180 ;;		line 122 in file "mcc_generated_files/mcc.c"
  9181 ;; Parameters:    Size  Location     Type
  9182 ;;		None
  9183 ;; Auto vars:     Size  Location     Type
  9184 ;;		None
  9185 ;; Return value:  Size  Location     Type
  9186 ;;                  1    wreg      void 
  9187 ;; Registers used:
  9188 ;;		wreg, status,2
  9189 ;; Tracked objects:
  9190 ;;		On entry : 0/0
  9191 ;;		On exit  : 0/0
  9192 ;;		Unchanged: 0/0
  9193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9194 ;;      Params:         0       0       0       0       0       0       0
  9195 ;;      Locals:         0       0       0       0       0       0       0
  9196 ;;      Temps:          0       0       0       0       0       0       0
  9197 ;;      Totals:         0       0       0       0       0       0       0
  9198 ;;Total ram usage:        0 bytes
  9199 ;; Hardware stack levels used:    1
  9200 ;; Hardware stack levels required when called:    4
  9201 ;; This function calls:
  9202 ;;		Nothing
  9203 ;; This function is called by:
  9204 ;;		_SYSTEM_Initialize
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           	psect	text44
  9209  0042AE                     __ptext44:
  9210                           	opt stack 0
  9211  0042AE                     _OSCILLATOR_Initialize:
  9212                           	opt stack 24
  9213                           
  9214                           ;mcc.c: 125: OSCCON = 0x60;
  9215                           
  9216                           ;incstack = 0
  9217  0042AE  0E60               	movlw	96
  9218  0042B0  6ED3               	movwf	4051,c	;volatile
  9219                           
  9220                           ;mcc.c: 127: OSCCON2 = 0x04;
  9221  0042B2  0E04               	movlw	4
  9222  0042B4  6ED2               	movwf	4050,c	;volatile
  9223                           
  9224                           ;mcc.c: 129: OSCTUNE = 0x80;
  9225  0042B6  0E80               	movlw	128
  9226  0042B8  6E9B               	movwf	3995,c	;volatile
  9227  0042BA  0012               	return		;funcret
  9228  0042BC                     __end_of_OSCILLATOR_Initialize:
  9229                           	opt stack 0
  9230                           tosu	equ	0xFFF
  9231                           tosh	equ	0xFFE
  9232                           tosl	equ	0xFFD
  9233                           pclath	equ	0xFFA
  9234                           tblptru	equ	0xFF8
  9235                           tblptrh	equ	0xFF7
  9236                           tblptrl	equ	0xFF6
  9237                           tablat	equ	0xFF5
  9238                           prodh	equ	0xFF4
  9239                           prodl	equ	0xFF3
  9240                           intcon	equ	0xFF2
  9241                           intcon2	equ	0xFF1
  9242                           postinc0	equ	0xFEE
  9243                           plusw0	equ	0xFEB
  9244                           wreg	equ	0xFE8
  9245                           indf1	equ	0xFE7
  9246                           postdec1	equ	0xFE5
  9247                           fsr1h	equ	0xFE2
  9248                           fsr1l	equ	0xFE1
  9249                           indf2	equ	0xFDF
  9250                           postinc2	equ	0xFDE
  9251                           postdec2	equ	0xFDD
  9252                           plusw2	equ	0xFDB
  9253                           fsr2h	equ	0xFDA
  9254                           fsr2l	equ	0xFD9
  9255                           status	equ	0xFD8
  9256                           
  9257 ;; *************** function _INTERRUPT_Initialize *****************
  9258 ;; Defined at:
  9259 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9260 ;; Parameters:    Size  Location     Type
  9261 ;;		None
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;		None
  9264 ;; Return value:  Size  Location     Type
  9265 ;;                  1    wreg      void 
  9266 ;; Registers used:
  9267 ;;		None
  9268 ;; Tracked objects:
  9269 ;;		On entry : 0/0
  9270 ;;		On exit  : 0/0
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9273 ;;      Params:         0       0       0       0       0       0       0
  9274 ;;      Locals:         0       0       0       0       0       0       0
  9275 ;;      Temps:          0       0       0       0       0       0       0
  9276 ;;      Totals:         0       0       0       0       0       0       0
  9277 ;;Total ram usage:        0 bytes
  9278 ;; Hardware stack levels used:    1
  9279 ;; Hardware stack levels required when called:    4
  9280 ;; This function calls:
  9281 ;;		Nothing
  9282 ;; This function is called by:
  9283 ;;		_SYSTEM_Initialize
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           	psect	text45
  9288  004330                     __ptext45:
  9289                           	opt stack 0
  9290  004330                     _INTERRUPT_Initialize:
  9291                           	opt stack 24
  9292                           
  9293                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  9294                           
  9295                           ;incstack = 0
  9296  004330  9ED0               	bcf	4048,7,c	;volatile
  9297  004332  0012               	return		;funcret
  9298  004334                     __end_of_INTERRUPT_Initialize:
  9299                           	opt stack 0
  9300                           tosu	equ	0xFFF
  9301                           tosh	equ	0xFFE
  9302                           tosl	equ	0xFFD
  9303                           pclath	equ	0xFFA
  9304                           tblptru	equ	0xFF8
  9305                           tblptrh	equ	0xFF7
  9306                           tblptrl	equ	0xFF6
  9307                           tablat	equ	0xFF5
  9308                           prodh	equ	0xFF4
  9309                           prodl	equ	0xFF3
  9310                           intcon	equ	0xFF2
  9311                           intcon2	equ	0xFF1
  9312                           postinc0	equ	0xFEE
  9313                           plusw0	equ	0xFEB
  9314                           wreg	equ	0xFE8
  9315                           indf1	equ	0xFE7
  9316                           postdec1	equ	0xFE5
  9317                           fsr1h	equ	0xFE2
  9318                           fsr1l	equ	0xFE1
  9319                           indf2	equ	0xFDF
  9320                           postinc2	equ	0xFDE
  9321                           postdec2	equ	0xFDD
  9322                           plusw2	equ	0xFDB
  9323                           fsr2h	equ	0xFDA
  9324                           fsr2l	equ	0xFD9
  9325                           status	equ	0xFD8
  9326                           
  9327 ;; *************** function _EUSART1_Initialize *****************
  9328 ;; Defined at:
  9329 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;		None
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;		None
  9334 ;; Return value:  Size  Location     Type
  9335 ;;                  1    wreg      void 
  9336 ;; Registers used:
  9337 ;;		wreg, status,2
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9343 ;;      Params:         0       0       0       0       0       0       0
  9344 ;;      Locals:         0       0       0       0       0       0       0
  9345 ;;      Temps:          0       0       0       0       0       0       0
  9346 ;;      Totals:         0       0       0       0       0       0       0
  9347 ;;Total ram usage:        0 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    4
  9350 ;; This function calls:
  9351 ;;		Nothing
  9352 ;; This function is called by:
  9353 ;;		_SYSTEM_Initialize
  9354 ;; This function uses a non-reentrant model
  9355 ;;
  9356                           
  9357                           	psect	text46
  9358  003D04                     __ptext46:
  9359                           	opt stack 0
  9360  003D04                     _EUSART1_Initialize:
  9361                           	opt stack 24
  9362                           
  9363                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  9364                           
  9365                           ;incstack = 0
  9366  003D04  9A9D               	bcf	3997,5,c	;volatile
  9367                           
  9368                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  9369  003D06  989D               	bcf	3997,4,c	;volatile
  9370                           
  9371                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  9372  003D08  0E08               	movlw	8
  9373  003D0A  6EB8               	movwf	4024,c	;volatile
  9374                           
  9375                           ;eusart1.c: 85: RCSTA1 = 0x90;
  9376  003D0C  0E90               	movlw	144
  9377  003D0E  6EAB               	movwf	4011,c	;volatile
  9378                           
  9379                           ;eusart1.c: 88: TXSTA1 = 0x24;
  9380  003D10  0E24               	movlw	36
  9381  003D12  6EAC               	movwf	4012,c	;volatile
  9382                           
  9383                           ;eusart1.c: 91: SPBRG1 = 0x10;
  9384  003D14  0E10               	movlw	16
  9385  003D16  6EAF               	movwf	4015,c	;volatile
  9386                           
  9387                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  9388  003D18  0E00               	movlw	0
  9389  003D1A  6EB0               	movwf	4016,c	;volatile
  9390                           
  9391                           ;eusart1.c: 98: eusart1TxHead = 0;
  9392  003D1C  0E00               	movlw	0
  9393  003D1E  6E36               	movwf	_eusart1TxHead,c	;volatile
  9394                           
  9395                           ;eusart1.c: 99: eusart1TxTail = 0;
  9396  003D20  0E00               	movlw	0
  9397  003D22  6E35               	movwf	_eusart1TxTail,c	;volatile
  9398                           
  9399                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9400  003D24  0E46               	movlw	70
  9401  003D26  0101               	movlb	1	; () banked
  9402  003D28  6FD2               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  9403                           
  9404                           ;eusart1.c: 102: eusart1RxHead = 0;
  9405  003D2A  0E00               	movlw	0
  9406  003D2C  6E34               	movwf	_eusart1RxHead,c	;volatile
  9407                           
  9408                           ;eusart1.c: 103: eusart1RxTail = 0;
  9409  003D2E  0E00               	movlw	0
  9410  003D30  6E33               	movwf	_eusart1RxTail,c	;volatile
  9411                           
  9412                           ;eusart1.c: 104: eusart1RxCount = 0;
  9413  003D32  0E00               	movlw	0
  9414  003D34  0100               	movlb	0	; () banked
  9415  003D36  6FF5               	movwf	_eusart1RxCount& (0+255),b	;volatile
  9416                           
  9417                           ; BSR set to: 0
  9418                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  9419  003D38  8A9D               	bsf	3997,5,c	;volatile
  9420                           
  9421                           ; BSR set to: 0
  9422  003D3A  0012               	return		;funcret
  9423  003D3C                     __end_of_EUSART1_Initialize:
  9424                           	opt stack 0
  9425                           tosu	equ	0xFFF
  9426                           tosh	equ	0xFFE
  9427                           tosl	equ	0xFFD
  9428                           pclath	equ	0xFFA
  9429                           tblptru	equ	0xFF8
  9430                           tblptrh	equ	0xFF7
  9431                           tblptrl	equ	0xFF6
  9432                           tablat	equ	0xFF5
  9433                           prodh	equ	0xFF4
  9434                           prodl	equ	0xFF3
  9435                           intcon	equ	0xFF2
  9436                           intcon2	equ	0xFF1
  9437                           postinc0	equ	0xFEE
  9438                           plusw0	equ	0xFEB
  9439                           wreg	equ	0xFE8
  9440                           indf1	equ	0xFE7
  9441                           postdec1	equ	0xFE5
  9442                           fsr1h	equ	0xFE2
  9443                           fsr1l	equ	0xFE1
  9444                           indf2	equ	0xFDF
  9445                           postinc2	equ	0xFDE
  9446                           postdec2	equ	0xFDD
  9447                           plusw2	equ	0xFDB
  9448                           fsr2h	equ	0xFDA
  9449                           fsr2l	equ	0xFD9
  9450                           status	equ	0xFD8
  9451                           
  9452 ;; *************** function _ADC_Initialize *****************
  9453 ;; Defined at:
  9454 ;;		line 58 in file "mcc_generated_files/adc.c"
  9455 ;; Parameters:    Size  Location     Type
  9456 ;;		None
  9457 ;; Auto vars:     Size  Location     Type
  9458 ;;		None
  9459 ;; Return value:  Size  Location     Type
  9460 ;;                  1    wreg      void 
  9461 ;; Registers used:
  9462 ;;		wreg, status,2
  9463 ;; Tracked objects:
  9464 ;;		On entry : 0/0
  9465 ;;		On exit  : 0/0
  9466 ;;		Unchanged: 0/0
  9467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9468 ;;      Params:         0       0       0       0       0       0       0
  9469 ;;      Locals:         0       0       0       0       0       0       0
  9470 ;;      Temps:          0       0       0       0       0       0       0
  9471 ;;      Totals:         0       0       0       0       0       0       0
  9472 ;;Total ram usage:        0 bytes
  9473 ;; Hardware stack levels used:    1
  9474 ;; Hardware stack levels required when called:    4
  9475 ;; This function calls:
  9476 ;;		Nothing
  9477 ;; This function is called by:
  9478 ;;		_SYSTEM_Initialize
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           	psect	text47
  9483  004206                     __ptext47:
  9484                           	opt stack 0
  9485  004206                     _ADC_Initialize:
  9486                           	opt stack 24
  9487                           
  9488                           ;adc.c: 63: ADCON0 = 0x05;
  9489                           
  9490                           ; BSR set to: 0
  9491                           ;incstack = 0
  9492  004206  0E05               	movlw	5
  9493  004208  6EC2               	movwf	4034,c	;volatile
  9494                           
  9495                           ;adc.c: 66: ADCON1 = 0x00;
  9496  00420A  0E00               	movlw	0
  9497  00420C  6EC1               	movwf	4033,c	;volatile
  9498                           
  9499                           ;adc.c: 69: ADCON2 = 0x87;
  9500  00420E  0E87               	movlw	135
  9501  004210  6EC0               	movwf	4032,c	;volatile
  9502                           
  9503                           ;adc.c: 72: ADRESL = 0x00;
  9504  004212  0E00               	movlw	0
  9505  004214  6EC3               	movwf	4035,c	;volatile
  9506                           
  9507                           ;adc.c: 75: ADRESH = 0x00;
  9508  004216  0E00               	movlw	0
  9509  004218  6EC4               	movwf	4036,c	;volatile
  9510  00421A  0012               	return		;funcret
  9511  00421C                     __end_of_ADC_Initialize:
  9512                           	opt stack 0
  9513                           tosu	equ	0xFFF
  9514                           tosh	equ	0xFFE
  9515                           tosl	equ	0xFFD
  9516                           pclath	equ	0xFFA
  9517                           tblptru	equ	0xFF8
  9518                           tblptrh	equ	0xFF7
  9519                           tblptrl	equ	0xFF6
  9520                           tablat	equ	0xFF5
  9521                           prodh	equ	0xFF4
  9522                           prodl	equ	0xFF3
  9523                           intcon	equ	0xFF2
  9524                           intcon2	equ	0xFF1
  9525                           postinc0	equ	0xFEE
  9526                           plusw0	equ	0xFEB
  9527                           wreg	equ	0xFE8
  9528                           indf1	equ	0xFE7
  9529                           postdec1	equ	0xFE5
  9530                           fsr1h	equ	0xFE2
  9531                           fsr1l	equ	0xFE1
  9532                           indf2	equ	0xFDF
  9533                           postinc2	equ	0xFDE
  9534                           postdec2	equ	0xFDD
  9535                           plusw2	equ	0xFDB
  9536                           fsr2h	equ	0xFDA
  9537                           fsr2l	equ	0xFD9
  9538                           status	equ	0xFD8
  9539                           
  9540 ;; *************** function _SetMcuRunTime *****************
  9541 ;; Defined at:
  9542 ;;		line 69 in file "SystemStatus.c"
  9543 ;; Parameters:    Size  Location     Type
  9544 ;;		None
  9545 ;; Auto vars:     Size  Location     Type
  9546 ;;		None
  9547 ;; Return value:  Size  Location     Type
  9548 ;;                  1    wreg      void 
  9549 ;; Registers used:
  9550 ;;		wreg, status,2, status,0, cstack
  9551 ;; Tracked objects:
  9552 ;;		On entry : 0/0
  9553 ;;		On exit  : 0/0
  9554 ;;		Unchanged: 0/0
  9555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9556 ;;      Params:         0       0       0       0       0       0       0
  9557 ;;      Locals:         0       0       0       0       0       0       0
  9558 ;;      Temps:          0       0       0       0       0       0       0
  9559 ;;      Totals:         0       0       0       0       0       0       0
  9560 ;;Total ram usage:        0 bytes
  9561 ;; Hardware stack levels used:    1
  9562 ;; Hardware stack levels required when called:    5
  9563 ;; This function calls:
  9564 ;;		___llmod
  9565 ;; This function is called by:
  9566 ;;		_main
  9567 ;; This function uses a non-reentrant model
  9568 ;;
  9569                           
  9570                           	psect	text48
  9571  003B12                     __ptext48:
  9572                           	opt stack 0
  9573  003B12                     _SetMcuRunTime:
  9574                           	opt stack 25
  9575                           
  9576                           ;SystemStatus.c: 71: mcuRunTimeIn5SecTicks++;
  9577                           
  9578                           ;incstack = 0
  9579  003B12  0E01               	movlw	1
  9580  003B14  0101               	movlb	1	; () banked
  9581  003B16  2728               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  9582  003B18  0E00               	movlw	0
  9583  003B1A  2329               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  9584  003B1C  232A               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  9585  003B1E  232B               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  9586                           
  9587                           ; BSR set to: 1
  9588                           ;SystemStatus.c: 72: mcuRunTimeIn5SecTicks %= (17280);
  9589  003B20  C128  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  9590  003B24  C129  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  9591  003B28  C12A  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  9592  003B2C  C12B  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  9593  003B30  0E80               	movlw	128
  9594  003B32  6E1C               	movwf	___llmod@divisor,c
  9595  003B34  0E43               	movlw	67
  9596  003B36  6E1D               	movwf	___llmod@divisor+1,c
  9597  003B38  0E00               	movlw	0
  9598  003B3A  6E1E               	movwf	___llmod@divisor+2,c
  9599  003B3C  0E00               	movlw	0
  9600  003B3E  6E1F               	movwf	___llmod@divisor+3,c
  9601  003B40  ECF6  F01A         	call	___llmod	;wreg free
  9602  003B44  C018  F128         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  9603  003B48  C019  F129         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  9604  003B4C  C01A  F12A         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  9605  003B50  C01B  F12B         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  9606  003B54  0012               	return		;funcret
  9607  003B56                     __end_of_SetMcuRunTime:
  9608                           	opt stack 0
  9609                           tosu	equ	0xFFF
  9610                           tosh	equ	0xFFE
  9611                           tosl	equ	0xFFD
  9612                           pclath	equ	0xFFA
  9613                           tblptru	equ	0xFF8
  9614                           tblptrh	equ	0xFF7
  9615                           tblptrl	equ	0xFF6
  9616                           tablat	equ	0xFF5
  9617                           prodh	equ	0xFF4
  9618                           prodl	equ	0xFF3
  9619                           intcon	equ	0xFF2
  9620                           intcon2	equ	0xFF1
  9621                           postinc0	equ	0xFEE
  9622                           plusw0	equ	0xFEB
  9623                           wreg	equ	0xFE8
  9624                           indf1	equ	0xFE7
  9625                           postdec1	equ	0xFE5
  9626                           fsr1h	equ	0xFE2
  9627                           fsr1l	equ	0xFE1
  9628                           indf2	equ	0xFDF
  9629                           postinc2	equ	0xFDE
  9630                           postdec2	equ	0xFDD
  9631                           plusw2	equ	0xFDB
  9632                           fsr2h	equ	0xFDA
  9633                           fsr2l	equ	0xFD9
  9634                           status	equ	0xFD8
  9635                           
  9636 ;; *************** function ___llmod *****************
  9637 ;; Defined at:
  9638 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9639 ;; Parameters:    Size  Location     Type
  9640 ;;  dividend        4   23[COMRAM] unsigned long 
  9641 ;;  divisor         4   27[COMRAM] unsigned long 
  9642 ;; Auto vars:     Size  Location     Type
  9643 ;;  counter         1   31[COMRAM] unsigned char 
  9644 ;; Return value:  Size  Location     Type
  9645 ;;                  4   23[COMRAM] unsigned long 
  9646 ;; Registers used:
  9647 ;;		wreg, status,2, status,0
  9648 ;; Tracked objects:
  9649 ;;		On entry : 0/0
  9650 ;;		On exit  : 0/0
  9651 ;;		Unchanged: 0/0
  9652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9653 ;;      Params:         8       0       0       0       0       0       0
  9654 ;;      Locals:         1       0       0       0       0       0       0
  9655 ;;      Temps:          0       0       0       0       0       0       0
  9656 ;;      Totals:         9       0       0       0       0       0       0
  9657 ;;Total ram usage:        9 bytes
  9658 ;; Hardware stack levels used:    1
  9659 ;; Hardware stack levels required when called:    4
  9660 ;; This function calls:
  9661 ;;		Nothing
  9662 ;; This function is called by:
  9663 ;;		_SetMcuRunTime
  9664 ;;		_GetMcuRunTime
  9665 ;; This function uses a non-reentrant model
  9666 ;;
  9667                           
  9668                           	psect	text49
  9669  0035EC                     __ptext49:
  9670                           	opt stack 0
  9671  0035EC                     ___llmod:
  9672                           	opt stack 23
  9673                           
  9674                           ;incstack = 0
  9675  0035EC  501C               	movf	___llmod@divisor,w,c
  9676  0035EE  101D               	iorwf	___llmod@divisor+1,w,c
  9677  0035F0  101E               	iorwf	___llmod@divisor+2,w,c
  9678  0035F2  101F               	iorwf	___llmod@divisor+3,w,c
  9679  0035F4  B4D8               	btfsc	status,2,c
  9680  0035F6  D024               	goto	l1969
  9681  0035F8  0E01               	movlw	1
  9682  0035FA  6E20               	movwf	___llmod@counter,c
  9683  0035FC  D006               	goto	l1964
  9684  0035FE  90D8               	bcf	status,0,c
  9685  003600  361C               	rlcf	___llmod@divisor,f,c
  9686  003602  361D               	rlcf	___llmod@divisor+1,f,c
  9687  003604  361E               	rlcf	___llmod@divisor+2,f,c
  9688  003606  361F               	rlcf	___llmod@divisor+3,f,c
  9689  003608  2A20               	incf	___llmod@counter,f,c
  9690  00360A                     l1964:
  9691  00360A  AE1F               	btfss	___llmod@divisor+3,7,c
  9692  00360C  D7F8               	goto	l1965
  9693  00360E                     u8300:
  9694  00360E  501C               	movf	___llmod@divisor,w,c
  9695  003610  5C18               	subwf	___llmod@dividend,w,c
  9696  003612  501D               	movf	___llmod@divisor+1,w,c
  9697  003614  5819               	subwfb	___llmod@dividend+1,w,c
  9698  003616  501E               	movf	___llmod@divisor+2,w,c
  9699  003618  581A               	subwfb	___llmod@dividend+2,w,c
  9700  00361A  501F               	movf	___llmod@divisor+3,w,c
  9701  00361C  581B               	subwfb	___llmod@dividend+3,w,c
  9702  00361E  A0D8               	btfss	status,0,c
  9703  003620  D008               	goto	l1968
  9704  003622  501C               	movf	___llmod@divisor,w,c
  9705  003624  5E18               	subwf	___llmod@dividend,f,c
  9706  003626  501D               	movf	___llmod@divisor+1,w,c
  9707  003628  5A19               	subwfb	___llmod@dividend+1,f,c
  9708  00362A  501E               	movf	___llmod@divisor+2,w,c
  9709  00362C  5A1A               	subwfb	___llmod@dividend+2,f,c
  9710  00362E  501F               	movf	___llmod@divisor+3,w,c
  9711  003630  5A1B               	subwfb	___llmod@dividend+3,f,c
  9712  003632                     l1968:
  9713  003632  90D8               	bcf	status,0,c
  9714  003634  321F               	rrcf	___llmod@divisor+3,f,c
  9715  003636  321E               	rrcf	___llmod@divisor+2,f,c
  9716  003638  321D               	rrcf	___llmod@divisor+1,f,c
  9717  00363A  321C               	rrcf	___llmod@divisor,f,c
  9718  00363C  2E20               	decfsz	___llmod@counter,f,c
  9719  00363E  D7E7               	goto	u8300
  9720  003640                     l1969:
  9721  003640  C018  F018         	movff	___llmod@dividend,?___llmod
  9722  003644  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  9723  003648  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  9724  00364C  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  9725  003650  0012               	return		;funcret
  9726  003652                     __end_of___llmod:
  9727                           	opt stack 0
  9728                           tosu	equ	0xFFF
  9729                           tosh	equ	0xFFE
  9730                           tosl	equ	0xFFD
  9731                           pclath	equ	0xFFA
  9732                           tblptru	equ	0xFF8
  9733                           tblptrh	equ	0xFF7
  9734                           tblptrl	equ	0xFF6
  9735                           tablat	equ	0xFF5
  9736                           prodh	equ	0xFF4
  9737                           prodl	equ	0xFF3
  9738                           intcon	equ	0xFF2
  9739                           intcon2	equ	0xFF1
  9740                           postinc0	equ	0xFEE
  9741                           plusw0	equ	0xFEB
  9742                           wreg	equ	0xFE8
  9743                           indf1	equ	0xFE7
  9744                           postdec1	equ	0xFE5
  9745                           fsr1h	equ	0xFE2
  9746                           fsr1l	equ	0xFE1
  9747                           indf2	equ	0xFDF
  9748                           postinc2	equ	0xFDE
  9749                           postdec2	equ	0xFDD
  9750                           plusw2	equ	0xFDB
  9751                           fsr2h	equ	0xFDA
  9752                           fsr2l	equ	0xFD9
  9753                           status	equ	0xFD8
  9754                           
  9755 ;; *************** function _SendSystemStartAck *****************
  9756 ;; Defined at:
  9757 ;;		line 153 in file "SystemCommon.c"
  9758 ;; Parameters:    Size  Location     Type
  9759 ;;		None
  9760 ;; Auto vars:     Size  Location     Type
  9761 ;;		None
  9762 ;; Return value:  Size  Location     Type
  9763 ;;                  1    wreg      void 
  9764 ;; Registers used:
  9765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9766 ;; Tracked objects:
  9767 ;;		On entry : 0/0
  9768 ;;		On exit  : 0/0
  9769 ;;		Unchanged: 0/0
  9770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9771 ;;      Params:         0       0       0       0       0       0       0
  9772 ;;      Locals:         0       0       0       0       0       0       0
  9773 ;;      Temps:          0       0       0       0       0       0       0
  9774 ;;      Totals:         0       0       0       0       0       0       0
  9775 ;;Total ram usage:        0 bytes
  9776 ;; Hardware stack levels used:    1
  9777 ;; Hardware stack levels required when called:    7
  9778 ;; This function calls:
  9779 ;;		_SendAckMessage
  9780 ;; This function is called by:
  9781 ;;		_main
  9782 ;; This function uses a non-reentrant model
  9783 ;;
  9784                           
  9785                           	psect	text50
  9786  0042E4                     __ptext50:
  9787                           	opt stack 0
  9788  0042E4                     _SendSystemStartAck:
  9789                           	opt stack 23
  9790                           
  9791                           ;SystemCommon.c: 155: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  9792                           
  9793                           ;incstack = 0
  9794  0042E4  0E10               	movlw	16
  9795  0042E6  6E24               	movwf	SendAckMessage@inRequest,c
  9796  0042E8  0E01               	movlw	1
  9797  0042EA  EC17  F01D         	call	_SendAckMessage
  9798  0042EE  0012               	return		;funcret
  9799  0042F0                     __end_of_SendSystemStartAck:
  9800                           	opt stack 0
  9801                           tosu	equ	0xFFF
  9802                           tosh	equ	0xFFE
  9803                           tosl	equ	0xFFD
  9804                           pclath	equ	0xFFA
  9805                           tblptru	equ	0xFF8
  9806                           tblptrh	equ	0xFF7
  9807                           tblptrl	equ	0xFF6
  9808                           tablat	equ	0xFF5
  9809                           prodh	equ	0xFF4
  9810                           prodl	equ	0xFF3
  9811                           intcon	equ	0xFF2
  9812                           intcon2	equ	0xFF1
  9813                           postinc0	equ	0xFEE
  9814                           plusw0	equ	0xFEB
  9815                           wreg	equ	0xFE8
  9816                           indf1	equ	0xFE7
  9817                           postdec1	equ	0xFE5
  9818                           fsr1h	equ	0xFE2
  9819                           fsr1l	equ	0xFE1
  9820                           indf2	equ	0xFDF
  9821                           postinc2	equ	0xFDE
  9822                           postdec2	equ	0xFDD
  9823                           plusw2	equ	0xFDB
  9824                           fsr2h	equ	0xFDA
  9825                           fsr2l	equ	0xFD9
  9826                           status	equ	0xFD8
  9827                           
  9828 ;; *************** function _SendAckMessage *****************
  9829 ;; Defined at:
  9830 ;;		line 171 in file "EusartApp.c"
  9831 ;; Parameters:    Size  Location     Type
  9832 ;;  inGroup         1    wreg     enum E7193
  9833 ;;  inRequest       1   35[COMRAM] enum E7201
  9834 ;; Auto vars:     Size  Location     Type
  9835 ;;  inGroup         1   36[COMRAM] enum E7193
  9836 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  9837 ;; Return value:  Size  Location     Type
  9838 ;;                  1    wreg      void 
  9839 ;; Registers used:
  9840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9841 ;; Tracked objects:
  9842 ;;		On entry : 0/0
  9843 ;;		On exit  : 0/0
  9844 ;;		Unchanged: 0/0
  9845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9846 ;;      Params:         1       0       0       0       0       0       0
  9847 ;;      Locals:         7       0       0       0       0       0       0
  9848 ;;      Temps:          0       0       0       0       0       0       0
  9849 ;;      Totals:         8       0       0       0       0       0       0
  9850 ;;Total ram usage:        8 bytes
  9851 ;; Hardware stack levels used:    1
  9852 ;; Hardware stack levels required when called:    6
  9853 ;; This function calls:
  9854 ;;		_WriteUartMessage
  9855 ;;		_ZeroArray
  9856 ;;		_crc8
  9857 ;; This function is called by:
  9858 ;;		_testLeds
  9859 ;;		_SetChannelMode
  9860 ;;		_FlashReadUart
  9861 ;;		_FlashEreaseMem
  9862 ;;		_DacSetValue
  9863 ;;		_UpdateSynthFreq
  9864 ;;		_SetSynthOper
  9865 ;;		_ResetMcu
  9866 ;;		_SendSystemStartAck
  9867 ;;		_keepAliveSignalUart
  9868 ;; This function uses a non-reentrant model
  9869 ;;
  9870                           
  9871                           	psect	text51
  9872  003A2E                     __ptext51:
  9873                           	opt stack 0
  9874  003A2E                     _SendAckMessage:
  9875                           	opt stack 21
  9876                           
  9877                           ;incstack = 0
  9878                           ;SendAckMessage@inGroup stored from wreg
  9879  003A2E  6E25               	movwf	SendAckMessage@inGroup,c
  9880                           
  9881                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  9882                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  9883  003A30  0E26               	movlw	low SendAckMessage@TxMsg
  9884  003A32  6E20               	movwf	ZeroArray@array,c
  9885  003A34  0E00               	movlw	high SendAckMessage@TxMsg
  9886  003A36  6E21               	movwf	ZeroArray@array+1,c
  9887  003A38  0E00               	movlw	0
  9888  003A3A  6E23               	movwf	ZeroArray@size+1,c
  9889  003A3C  0E06               	movlw	6
  9890  003A3E  6E22               	movwf	ZeroArray@size,c
  9891  003A40  ECBF  F020         	call	_ZeroArray	;wreg free
  9892                           
  9893                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  9894  003A44  0E24               	movlw	36
  9895  003A46  6E26               	movwf	SendAckMessage@TxMsg,c
  9896                           
  9897                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  9898  003A48  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  9899                           
  9900                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  9901  003A4C  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  9902                           
  9903                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  9904  003A50  0E00               	movlw	0
  9905  003A52  6E29               	movwf	SendAckMessage@TxMsg+3,c
  9906                           
  9907                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  9908  003A54  0E26               	movlw	low SendAckMessage@TxMsg
  9909  003A56  6E18               	movwf	crc8@dataArray,c
  9910  003A58  0E00               	movlw	high SendAckMessage@TxMsg
  9911  003A5A  6E19               	movwf	crc8@dataArray+1,c
  9912  003A5C  0E00               	movlw	0
  9913  003A5E  6E1B               	movwf	crc8@dataSize+1,c
  9914  003A60  0E05               	movlw	5
  9915  003A62  6E1A               	movwf	crc8@dataSize,c
  9916  003A64  EC40  F01D         	call	_crc8	;wreg free
  9917  003A68  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  9918                           
  9919                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  9920  003A6A  0E26               	movlw	low SendAckMessage@TxMsg
  9921  003A6C  6E19               	movwf	WriteUartMessage@dataBuf,c
  9922  003A6E  0E00               	movlw	high SendAckMessage@TxMsg
  9923  003A70  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  9924  003A72  0E00               	movlw	0
  9925  003A74  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  9926  003A76  0E06               	movlw	6
  9927  003A78  6E1B               	movwf	WriteUartMessage@dataSize,c
  9928  003A7A  ECF2  F01E         	call	_WriteUartMessage	;wreg free
  9929  003A7E  0012               	return		;funcret
  9930  003A80                     __end_of_SendAckMessage:
  9931                           	opt stack 0
  9932                           tosu	equ	0xFFF
  9933                           tosh	equ	0xFFE
  9934                           tosl	equ	0xFFD
  9935                           pclath	equ	0xFFA
  9936                           tblptru	equ	0xFF8
  9937                           tblptrh	equ	0xFF7
  9938                           tblptrl	equ	0xFF6
  9939                           tablat	equ	0xFF5
  9940                           prodh	equ	0xFF4
  9941                           prodl	equ	0xFF3
  9942                           intcon	equ	0xFF2
  9943                           intcon2	equ	0xFF1
  9944                           postinc0	equ	0xFEE
  9945                           plusw0	equ	0xFEB
  9946                           wreg	equ	0xFE8
  9947                           indf1	equ	0xFE7
  9948                           postdec1	equ	0xFE5
  9949                           fsr1h	equ	0xFE2
  9950                           fsr1l	equ	0xFE1
  9951                           indf2	equ	0xFDF
  9952                           postinc2	equ	0xFDE
  9953                           postdec2	equ	0xFDD
  9954                           plusw2	equ	0xFDB
  9955                           fsr2h	equ	0xFDA
  9956                           fsr2l	equ	0xFD9
  9957                           status	equ	0xFD8
  9958                           
  9959 ;; *************** function _crc8 *****************
  9960 ;; Defined at:
  9961 ;;		line 13 in file "SystemCommon.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  9964 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(29), DacReadValue@TxMsg(7), 
  9965 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  9966 ;;  dataSize        2   25[COMRAM] int 
  9967 ;; Auto vars:     Size  Location     Type
  9968 ;;  i               2   30[COMRAM] int 
  9969 ;;  crc             2   28[COMRAM] int 
  9970 ;; Return value:  Size  Location     Type
  9971 ;;                  1    wreg      unsigned char 
  9972 ;; Registers used:
  9973 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9974 ;; Tracked objects:
  9975 ;;		On entry : 0/0
  9976 ;;		On exit  : 0/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9979 ;;      Params:         4       0       0       0       0       0       0
  9980 ;;      Locals:         4       0       0       0       0       0       0
  9981 ;;      Temps:          1       0       0       0       0       0       0
  9982 ;;      Totals:         9       0       0       0       0       0       0
  9983 ;;Total ram usage:        9 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; Hardware stack levels required when called:    4
  9986 ;; This function calls:
  9987 ;;		Nothing
  9988 ;; This function is called by:
  9989 ;;		_readUartMessage
  9990 ;;		_SendAckMessage
  9991 ;;		_FlashReadUart
  9992 ;;		_FlashReadCondition
  9993 ;;		_DacReadValue
  9994 ;;		_SynthReadData
  9995 ;;		_GetMcuFwVersion
  9996 ;;		_GetMcuRunTime
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           	psect	text52
 10001  003A80                     __ptext52:
 10002                           	opt stack 0
 10003  003A80                     _crc8:
 10004                           	opt stack 25
 10005                           
 10006                           ;SystemCommon.c: 15: int crc = 0;
 10007                           
 10008                           ;incstack = 0
 10009  003A80  0E00               	movlw	0
 10010  003A82  6E1E               	movwf	crc8@crc+1,c
 10011  003A84  0E00               	movlw	0
 10012  003A86  6E1D               	movwf	crc8@crc,c
 10013                           
 10014                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
 10015  003A88  0E00               	movlw	0
 10016  003A8A  6E20               	movwf	crc8@i+1,c
 10017  003A8C  0E00               	movlw	0
 10018  003A8E  6E1F               	movwf	crc8@i,c
 10019  003A90  D00E               	goto	l1396
 10020  003A92                     
 10021                           ;SystemCommon.c: 17: {
 10022                           ;SystemCommon.c: 18: crc += dataArray[i];
 10023  003A92  501F               	movf	crc8@i,w,c
 10024  003A94  2418               	addwf	crc8@dataArray,w,c
 10025  003A96  6ED9               	movwf	fsr2l,c
 10026  003A98  5020               	movf	crc8@i+1,w,c
 10027  003A9A  2019               	addwfc	crc8@dataArray+1,w,c
 10028  003A9C  6EDA               	movwf	fsr2h,c
 10029  003A9E  50DF               	movf	indf2,w,c
 10030  003AA0  6E1C               	movwf	??_crc8& (0+255),c
 10031  003AA2  501C               	movf	??_crc8,w,c
 10032  003AA4  261D               	addwf	crc8@crc,f,c
 10033  003AA6  0E00               	movlw	0
 10034  003AA8  221E               	addwfc	crc8@crc+1,f,c
 10035  003AAA  4A1F               	infsnz	crc8@i,f,c
 10036  003AAC  2A20               	incf	crc8@i+1,f,c
 10037  003AAE                     l1396:
 10038  003AAE  501A               	movf	crc8@dataSize,w,c
 10039  003AB0  5C1F               	subwf	crc8@i,w,c
 10040  003AB2  5020               	movf	crc8@i+1,w,c
 10041  003AB4  0A80               	xorlw	128
 10042  003AB6  6E1C               	movwf	??_crc8& (0+255),c
 10043  003AB8  501B               	movf	crc8@dataSize+1,w,c
 10044  003ABA  0A80               	xorlw	128
 10045  003ABC  581C               	subwfb	??_crc8& (0+255),w,c
 10046  003ABE  A0D8               	btfss	status,0,c
 10047  003AC0  D7E8               	goto	l1397
 10048                           
 10049                           ;SystemCommon.c: 19: }
 10050                           ;SystemCommon.c: 20: crc &= 0xff;
 10051  003AC2  0EFF               	movlw	255
 10052  003AC4  161D               	andwf	crc8@crc,f,c
 10053  003AC6  0E00               	movlw	0
 10054  003AC8  161E               	andwf	crc8@crc+1,f,c
 10055                           
 10056                           ;SystemCommon.c: 21: return crc;
 10057  003ACA  501D               	movf	crc8@crc,w,c
 10058  003ACC  0012               	return	
 10059  003ACE                     __end_of_crc8:
 10060                           	opt stack 0
 10061                           tosu	equ	0xFFF
 10062                           tosh	equ	0xFFE
 10063                           tosl	equ	0xFFD
 10064                           pclath	equ	0xFFA
 10065                           tblptru	equ	0xFF8
 10066                           tblptrh	equ	0xFF7
 10067                           tblptrl	equ	0xFF6
 10068                           tablat	equ	0xFF5
 10069                           prodh	equ	0xFF4
 10070                           prodl	equ	0xFF3
 10071                           intcon	equ	0xFF2
 10072                           intcon2	equ	0xFF1
 10073                           postinc0	equ	0xFEE
 10074                           plusw0	equ	0xFEB
 10075                           wreg	equ	0xFE8
 10076                           indf1	equ	0xFE7
 10077                           postdec1	equ	0xFE5
 10078                           fsr1h	equ	0xFE2
 10079                           fsr1l	equ	0xFE1
 10080                           indf2	equ	0xFDF
 10081                           postinc2	equ	0xFDE
 10082                           postdec2	equ	0xFDD
 10083                           plusw2	equ	0xFDB
 10084                           fsr2h	equ	0xFDA
 10085                           fsr2l	equ	0xFD9
 10086                           status	equ	0xFD8
 10087                           
 10088 ;; *************** function _ZeroArray *****************
 10089 ;; Defined at:
 10090 ;;		line 24 in file "SystemCommon.c"
 10091 ;; Parameters:    Size  Location     Type
 10092 ;;  array           2   31[COMRAM] PTR unsigned char 
 10093 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SynthReadData@TxMsg(29), SynthReadData@eepromDataA
      +rray(20), 
 10094 ;;		 -> DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
 10095 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 10096 ;;  size            2   33[COMRAM] int 
 10097 ;; Auto vars:     Size  Location     Type
 10098 ;;		None
 10099 ;; Return value:  Size  Location     Type
 10100 ;;                  1    wreg      void 
 10101 ;; Registers used:
 10102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10103 ;; Tracked objects:
 10104 ;;		On entry : 0/0
 10105 ;;		On exit  : 0/0
 10106 ;;		Unchanged: 0/0
 10107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10108 ;;      Params:         4       0       0       0       0       0       0
 10109 ;;      Locals:         0       0       0       0       0       0       0
 10110 ;;      Temps:          0       0       0       0       0       0       0
 10111 ;;      Totals:         4       0       0       0       0       0       0
 10112 ;;Total ram usage:        4 bytes
 10113 ;; Hardware stack levels used:    1
 10114 ;; Hardware stack levels required when called:    5
 10115 ;; This function calls:
 10116 ;;		_memset
 10117 ;; This function is called by:
 10118 ;;		_readUartMessage
 10119 ;;		_InitRxMessageParams
 10120 ;;		_SendAckMessage
 10121 ;;		_FlashReadUart
 10122 ;;		_FlashEreaseMem
 10123 ;;		_FlashReadCondition
 10124 ;;		_DacReadValue
 10125 ;;		_SynthReadData
 10126 ;;		_GetIntFromUartData
 10127 ;;		_GetMcuFwVersion
 10128 ;; This function uses a non-reentrant model
 10129 ;;
 10130                           
 10131                           	psect	text53
 10132  00417E                     __ptext53:
 10133                           	opt stack 0
 10134  00417E                     _ZeroArray:
 10135                           	opt stack 24
 10136                           
 10137                           ;SystemCommon.c: 26: memset(array, 0x0, size);
 10138                           
 10139                           ;incstack = 0
 10140  00417E  C020  F018         	movff	ZeroArray@array,memset@p1
 10141  004182  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
 10142  004186  0E00               	movlw	0
 10143  004188  6E1B               	movwf	memset@c+1,c
 10144  00418A  0E00               	movlw	0
 10145  00418C  6E1A               	movwf	memset@c,c
 10146  00418E  C022  F01C         	movff	ZeroArray@size,memset@n
 10147  004192  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
 10148  004196  ECD5  F01F         	call	_memset	;wreg free
 10149  00419A  0012               	return		;funcret
 10150  00419C                     __end_of_ZeroArray:
 10151                           	opt stack 0
 10152                           tosu	equ	0xFFF
 10153                           tosh	equ	0xFFE
 10154                           tosl	equ	0xFFD
 10155                           pclath	equ	0xFFA
 10156                           tblptru	equ	0xFF8
 10157                           tblptrh	equ	0xFF7
 10158                           tblptrl	equ	0xFF6
 10159                           tablat	equ	0xFF5
 10160                           prodh	equ	0xFF4
 10161                           prodl	equ	0xFF3
 10162                           intcon	equ	0xFF2
 10163                           intcon2	equ	0xFF1
 10164                           postinc0	equ	0xFEE
 10165                           plusw0	equ	0xFEB
 10166                           wreg	equ	0xFE8
 10167                           indf1	equ	0xFE7
 10168                           postdec1	equ	0xFE5
 10169                           fsr1h	equ	0xFE2
 10170                           fsr1l	equ	0xFE1
 10171                           indf2	equ	0xFDF
 10172                           postinc2	equ	0xFDE
 10173                           postdec2	equ	0xFDD
 10174                           plusw2	equ	0xFDB
 10175                           fsr2h	equ	0xFDA
 10176                           fsr2l	equ	0xFD9
 10177                           status	equ	0xFD8
 10178                           
 10179 ;; *************** function _WriteUartMessage *****************
 10180 ;; Defined at:
 10181 ;;		line 158 in file "EusartApp.c"
 10182 ;; Parameters:    Size  Location     Type
 10183 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
 10184 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(29), DacReadValue@TxMsg(7), 
 10185 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
 10186 ;;  dataSize        2   26[COMRAM] int 
 10187 ;; Auto vars:     Size  Location     Type
 10188 ;;  idx             2   29[COMRAM] int 
 10189 ;; Return value:  Size  Location     Type
 10190 ;;                  1    wreg      void 
 10191 ;; Registers used:
 10192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10193 ;; Tracked objects:
 10194 ;;		On entry : 0/0
 10195 ;;		On exit  : 0/0
 10196 ;;		Unchanged: 0/0
 10197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10198 ;;      Params:         4       0       0       0       0       0       0
 10199 ;;      Locals:         2       0       0       0       0       0       0
 10200 ;;      Temps:          1       0       0       0       0       0       0
 10201 ;;      Totals:         7       0       0       0       0       0       0
 10202 ;;Total ram usage:        7 bytes
 10203 ;; Hardware stack levels used:    1
 10204 ;; Hardware stack levels required when called:    5
 10205 ;; This function calls:
 10206 ;;		_EUSART1_Write
 10207 ;; This function is called by:
 10208 ;;		_SendAckMessage
 10209 ;;		_FlashReadUart
 10210 ;;		_FlashReadCondition
 10211 ;;		_DacReadValue
 10212 ;;		_SynthReadData
 10213 ;;		_GetMcuFwVersion
 10214 ;;		_GetMcuRunTime
 10215 ;; This function uses a non-reentrant model
 10216 ;;
 10217                           
 10218                           	psect	text54
 10219  003DE4                     __ptext54:
 10220                           	opt stack 0
 10221  003DE4                     _WriteUartMessage:
 10222                           	opt stack 21
 10223                           
 10224                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
 10225                           
 10226                           ;incstack = 0
 10227  003DE4  0E00               	movlw	0
 10228  003DE6  6E1F               	movwf	WriteUartMessage@idx+1,c
 10229  003DE8  0E00               	movlw	0
 10230  003DEA  6E1E               	movwf	WriteUartMessage@idx,c
 10231  003DEC  D00B               	goto	l234
 10232  003DEE                     
 10233                           ;EusartApp.c: 161: {
 10234                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
 10235  003DEE  501E               	movf	WriteUartMessage@idx,w,c
 10236  003DF0  2419               	addwf	WriteUartMessage@dataBuf,w,c
 10237  003DF2  6ED9               	movwf	fsr2l,c
 10238  003DF4  501F               	movf	WriteUartMessage@idx+1,w,c
 10239  003DF6  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
 10240  003DF8  6EDA               	movwf	fsr2h,c
 10241  003DFA  50DF               	movf	indf2,w,c
 10242  003DFC  EC0C  F01E         	call	_EUSART1_Write
 10243  003E00  4A1E               	infsnz	WriteUartMessage@idx,f,c
 10244  003E02  2A1F               	incf	WriteUartMessage@idx+1,f,c
 10245  003E04                     l234:
 10246  003E04  501B               	movf	WriteUartMessage@dataSize,w,c
 10247  003E06  5C1E               	subwf	WriteUartMessage@idx,w,c
 10248  003E08  501F               	movf	WriteUartMessage@idx+1,w,c
 10249  003E0A  0A80               	xorlw	128
 10250  003E0C  6E1D               	movwf	??_WriteUartMessage& (0+255),c
 10251  003E0E  501C               	movf	WriteUartMessage@dataSize+1,w,c
 10252  003E10  0A80               	xorlw	128
 10253  003E12  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
 10254  003E14  B0D8               	btfsc	status,0,c
 10255  003E16  0012               	return	
 10256  003E18  D7EA               	goto	l235
 10257  003E1A                     __end_of_WriteUartMessage:
 10258                           	opt stack 0
 10259                           tosu	equ	0xFFF
 10260                           tosh	equ	0xFFE
 10261                           tosl	equ	0xFFD
 10262                           pclath	equ	0xFFA
 10263                           tblptru	equ	0xFF8
 10264                           tblptrh	equ	0xFF7
 10265                           tblptrl	equ	0xFF6
 10266                           tablat	equ	0xFF5
 10267                           prodh	equ	0xFF4
 10268                           prodl	equ	0xFF3
 10269                           intcon	equ	0xFF2
 10270                           intcon2	equ	0xFF1
 10271                           postinc0	equ	0xFEE
 10272                           plusw0	equ	0xFEB
 10273                           wreg	equ	0xFE8
 10274                           indf1	equ	0xFE7
 10275                           postdec1	equ	0xFE5
 10276                           fsr1h	equ	0xFE2
 10277                           fsr1l	equ	0xFE1
 10278                           indf2	equ	0xFDF
 10279                           postinc2	equ	0xFDE
 10280                           postdec2	equ	0xFDD
 10281                           plusw2	equ	0xFDB
 10282                           fsr2h	equ	0xFDA
 10283                           fsr2l	equ	0xFD9
 10284                           status	equ	0xFD8
 10285                           
 10286 ;; *************** function _EUSART1_Write *****************
 10287 ;; Defined at:
 10288 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 10289 ;; Parameters:    Size  Location     Type
 10290 ;;  txData          1    wreg     unsigned char 
 10291 ;; Auto vars:     Size  Location     Type
 10292 ;;  txData          1   23[COMRAM] unsigned char 
 10293 ;; Return value:  Size  Location     Type
 10294 ;;                  1    wreg      void 
 10295 ;; Registers used:
 10296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10297 ;; Tracked objects:
 10298 ;;		On entry : 0/0
 10299 ;;		On exit  : 0/0
 10300 ;;		Unchanged: 0/0
 10301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10302 ;;      Params:         0       0       0       0       0       0       0
 10303 ;;      Locals:         1       0       0       0       0       0       0
 10304 ;;      Temps:          0       0       0       0       0       0       0
 10305 ;;      Totals:         1       0       0       0       0       0       0
 10306 ;;Total ram usage:        1 bytes
 10307 ;; Hardware stack levels used:    1
 10308 ;; Hardware stack levels required when called:    4
 10309 ;; This function calls:
 10310 ;;		Nothing
 10311 ;; This function is called by:
 10312 ;;		_WriteUartMessage
 10313 ;; This function uses a non-reentrant model
 10314 ;;
 10315                           
 10316                           	psect	text55
 10317  003C18                     __ptext55:
 10318                           	opt stack 0
 10319  003C18                     _EUSART1_Write:
 10320                           	opt stack 21
 10321                           
 10322                           ;incstack = 0
 10323                           ;EUSART1_Write@txData stored from wreg
 10324  003C18  6E18               	movwf	EUSART1_Write@txData,c
 10325  003C1A                     
 10326                           ;eusart1.c: 160: {
 10327                           
 10328                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 10329  003C1A  0101               	movlb	1	; () banked
 10330  003C1C  51D2               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 10331  003C1E  B4D8               	btfsc	status,2,c
 10332  003C20  D7FC               	goto	l7690
 10333                           
 10334                           ; BSR set to: 1
 10335                           ;eusart1.c: 161: }
 10336                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 10337  003C22  B89D               	btfsc	3997,4,c	;volatile
 10338  003C24  D003               	goto	l915
 10339                           
 10340                           ; BSR set to: 1
 10341                           ;eusart1.c: 164: {
 10342                           ;eusart1.c: 165: TXREG1 = txData;
 10343  003C26  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 10344                           
 10345                           ;eusart1.c: 166: }
 10346  003C2A  D012               	goto	l916
 10347  003C2C                     l915:
 10348                           
 10349                           ; BSR set to: 1
 10350                           ;eusart1.c: 167: else
 10351                           ;eusart1.c: 168: {
 10352                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 10353  003C2C  989D               	bcf	3997,4,c	;volatile
 10354                           
 10355                           ; BSR set to: 1
 10356                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 10357  003C2E  5036               	movf	_eusart1TxHead,w,c	;volatile
 10358  003C30  0D01               	mullw	1
 10359  003C32  0E00               	movlw	low _eusart1TxBuffer
 10360  003C34  24F3               	addwf	prodl,w,c
 10361  003C36  6ED9               	movwf	fsr2l,c
 10362  003C38  0E02               	movlw	high _eusart1TxBuffer
 10363  003C3A  20F4               	addwfc	prodh,w,c
 10364  003C3C  6EDA               	movwf	fsr2h,c
 10365  003C3E  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 10366                           
 10367                           ; BSR set to: 1
 10368  003C42  2A36               	incf	_eusart1TxHead,f,c	;volatile
 10369                           
 10370                           ; BSR set to: 1
 10371                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 10372  003C44  0E45               	movlw	69
 10373  003C46  6436               	cpfsgt	_eusart1TxHead,c	;volatile
 10374  003C48  D002               	goto	l917
 10375                           
 10376                           ; BSR set to: 1
 10377                           ;eusart1.c: 172: {
 10378                           ;eusart1.c: 173: eusart1TxHead = 0;
 10379  003C4A  0E00               	movlw	0
 10380  003C4C  6E36               	movwf	_eusart1TxHead,c	;volatile
 10381  003C4E                     l917:
 10382                           
 10383                           ; BSR set to: 1
 10384                           ;eusart1.c: 174: }
 10385                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 10386                           
 10387                           ; BSR set to: 1
 10388  003C4E  07D2               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 10389  003C50                     l916:
 10390                           
 10391                           ; BSR set to: 1
 10392                           ;eusart1.c: 176: }
 10393                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 10394                           
 10395                           ; BSR set to: 1
 10396  003C50  889D               	bsf	3997,4,c	;volatile
 10397                           
 10398                           ; BSR set to: 1
 10399  003C52  0012               	return		;funcret
 10400  003C54                     __end_of_EUSART1_Write:
 10401                           	opt stack 0
 10402                           tosu	equ	0xFFF
 10403                           tosh	equ	0xFFE
 10404                           tosl	equ	0xFFD
 10405                           pclath	equ	0xFFA
 10406                           tblptru	equ	0xFF8
 10407                           tblptrh	equ	0xFF7
 10408                           tblptrl	equ	0xFF6
 10409                           tablat	equ	0xFF5
 10410                           prodh	equ	0xFF4
 10411                           prodl	equ	0xFF3
 10412                           intcon	equ	0xFF2
 10413                           intcon2	equ	0xFF1
 10414                           postinc0	equ	0xFEE
 10415                           plusw0	equ	0xFEB
 10416                           wreg	equ	0xFE8
 10417                           indf1	equ	0xFE7
 10418                           postdec1	equ	0xFE5
 10419                           fsr1h	equ	0xFE2
 10420                           fsr1l	equ	0xFE1
 10421                           indf2	equ	0xFDF
 10422                           postinc2	equ	0xFDE
 10423                           postdec2	equ	0xFDD
 10424                           plusw2	equ	0xFDB
 10425                           fsr2h	equ	0xFDA
 10426                           fsr2l	equ	0xFD9
 10427                           status	equ	0xFD8
 10428                           
 10429 ;; *************** function _InitSystemApplicationManagers *****************
 10430 ;; Defined at:
 10431 ;;		line 33 in file "SystemSettings.c"
 10432 ;; Parameters:    Size  Location     Type
 10433 ;;		None
 10434 ;; Auto vars:     Size  Location     Type
 10435 ;;		None
 10436 ;; Return value:  Size  Location     Type
 10437 ;;                  1    wreg      void 
 10438 ;; Registers used:
 10439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10440 ;; Tracked objects:
 10441 ;;		On entry : 0/0
 10442 ;;		On exit  : 0/0
 10443 ;;		Unchanged: 0/0
 10444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10445 ;;      Params:         0       0       0       0       0       0       0
 10446 ;;      Locals:         0       0       0       0       0       0       0
 10447 ;;      Temps:          0       0       0       0       0       0       0
 10448 ;;      Totals:         0       0       0       0       0       0       0
 10449 ;;Total ram usage:        0 bytes
 10450 ;; Hardware stack levels used:    1
 10451 ;; Hardware stack levels required when called:   12
 10452 ;; This function calls:
 10453 ;;		_ClearMcuRunTime
 10454 ;;		_DacInit
 10455 ;;		_InitAdcApplicationMgr
 10456 ;;		_PLLInitialize
 10457 ;;		_TMR0_StartTimer
 10458 ;; This function is called by:
 10459 ;;		_main
 10460 ;; This function uses a non-reentrant model
 10461 ;;
 10462                           
 10463                           	psect	text56
 10464  00421C                     __ptext56:
 10465                           	opt stack 0
 10466  00421C                     _InitSystemApplicationManagers:
 10467                           	opt stack 18
 10468                           
 10469                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 10470                           
 10471                           ; BSR set to: 1
 10472                           ;incstack = 0
 10473  00421C  EC95  F021         	call	_InitAdcApplicationMgr	;wreg free
 10474                           
 10475                           ;SystemSettings.c: 39: TMR0_StartTimer();
 10476  004220  EC9A  F021         	call	_TMR0_StartTimer	;wreg free
 10477                           
 10478                           ;SystemSettings.c: 42: PLLInitialize();
 10479  004224  ECED  F01D         	call	_PLLInitialize	;wreg free
 10480                           
 10481                           ;SystemSettings.c: 45: ClearMcuRunTime();
 10482  004228  EC2D  F021         	call	_ClearMcuRunTime	;wreg free
 10483                           
 10484                           ;SystemSettings.c: 48: DacInit();
 10485  00422C  ECC1  F013         	call	_DacInit	;wreg free
 10486  004230  0012               	return		;funcret
 10487  004232                     __end_of_InitSystemApplicationManagers:
 10488                           	opt stack 0
 10489                           tosu	equ	0xFFF
 10490                           tosh	equ	0xFFE
 10491                           tosl	equ	0xFFD
 10492                           pclath	equ	0xFFA
 10493                           tblptru	equ	0xFF8
 10494                           tblptrh	equ	0xFF7
 10495                           tblptrl	equ	0xFF6
 10496                           tablat	equ	0xFF5
 10497                           prodh	equ	0xFF4
 10498                           prodl	equ	0xFF3
 10499                           intcon	equ	0xFF2
 10500                           intcon2	equ	0xFF1
 10501                           postinc0	equ	0xFEE
 10502                           plusw0	equ	0xFEB
 10503                           wreg	equ	0xFE8
 10504                           indf1	equ	0xFE7
 10505                           postdec1	equ	0xFE5
 10506                           fsr1h	equ	0xFE2
 10507                           fsr1l	equ	0xFE1
 10508                           indf2	equ	0xFDF
 10509                           postinc2	equ	0xFDE
 10510                           postdec2	equ	0xFDD
 10511                           plusw2	equ	0xFDB
 10512                           fsr2h	equ	0xFDA
 10513                           fsr2l	equ	0xFD9
 10514                           status	equ	0xFD8
 10515                           
 10516 ;; *************** function _TMR0_StartTimer *****************
 10517 ;; Defined at:
 10518 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 10519 ;; Parameters:    Size  Location     Type
 10520 ;;		None
 10521 ;; Auto vars:     Size  Location     Type
 10522 ;;		None
 10523 ;; Return value:  Size  Location     Type
 10524 ;;                  1    wreg      void 
 10525 ;; Registers used:
 10526 ;;		None
 10527 ;; Tracked objects:
 10528 ;;		On entry : 0/0
 10529 ;;		On exit  : 0/0
 10530 ;;		Unchanged: 0/0
 10531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10532 ;;      Params:         0       0       0       0       0       0       0
 10533 ;;      Locals:         0       0       0       0       0       0       0
 10534 ;;      Temps:          0       0       0       0       0       0       0
 10535 ;;      Totals:         0       0       0       0       0       0       0
 10536 ;;Total ram usage:        0 bytes
 10537 ;; Hardware stack levels used:    1
 10538 ;; Hardware stack levels required when called:    4
 10539 ;; This function calls:
 10540 ;;		Nothing
 10541 ;; This function is called by:
 10542 ;;		_InitSystemApplicationManagers
 10543 ;; This function uses a non-reentrant model
 10544 ;;
 10545                           
 10546                           	psect	text57
 10547  004334                     __ptext57:
 10548                           	opt stack 0
 10549  004334                     _TMR0_StartTimer:
 10550                           	opt stack 25
 10551                           
 10552                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 10553                           
 10554                           ;incstack = 0
 10555  004334  8ED5               	bsf	4053,7,c	;volatile
 10556  004336  0012               	return		;funcret
 10557  004338                     __end_of_TMR0_StartTimer:
 10558                           	opt stack 0
 10559                           tosu	equ	0xFFF
 10560                           tosh	equ	0xFFE
 10561                           tosl	equ	0xFFD
 10562                           pclath	equ	0xFFA
 10563                           tblptru	equ	0xFF8
 10564                           tblptrh	equ	0xFF7
 10565                           tblptrl	equ	0xFF6
 10566                           tablat	equ	0xFF5
 10567                           prodh	equ	0xFF4
 10568                           prodl	equ	0xFF3
 10569                           intcon	equ	0xFF2
 10570                           intcon2	equ	0xFF1
 10571                           postinc0	equ	0xFEE
 10572                           plusw0	equ	0xFEB
 10573                           wreg	equ	0xFE8
 10574                           indf1	equ	0xFE7
 10575                           postdec1	equ	0xFE5
 10576                           fsr1h	equ	0xFE2
 10577                           fsr1l	equ	0xFE1
 10578                           indf2	equ	0xFDF
 10579                           postinc2	equ	0xFDE
 10580                           postdec2	equ	0xFDD
 10581                           plusw2	equ	0xFDB
 10582                           fsr2h	equ	0xFDA
 10583                           fsr2l	equ	0xFD9
 10584                           status	equ	0xFD8
 10585                           
 10586 ;; *************** function _PLLInitialize *****************
 10587 ;; Defined at:
 10588 ;;		line 29 in file "SyntApp.c"
 10589 ;; Parameters:    Size  Location     Type
 10590 ;;		None
 10591 ;; Auto vars:     Size  Location     Type
 10592 ;;		None
 10593 ;; Return value:  Size  Location     Type
 10594 ;;                  1    wreg      void 
 10595 ;; Registers used:
 10596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10597 ;; Tracked objects:
 10598 ;;		On entry : 0/0
 10599 ;;		On exit  : 0/0
 10600 ;;		Unchanged: 0/0
 10601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10602 ;;      Params:         0       0       0       0       0       0       0
 10603 ;;      Locals:         0       0       0       0       0       0       0
 10604 ;;      Temps:          0       0       0       0       0       0       0
 10605 ;;      Totals:         0       0       0       0       0       0       0
 10606 ;;Total ram usage:        0 bytes
 10607 ;; Hardware stack levels used:    1
 10608 ;; Hardware stack levels required when called:   11
 10609 ;; This function calls:
 10610 ;;		_FillArray
 10611 ;;		_InitSynth
 10612 ;; This function is called by:
 10613 ;;		_InitSystemApplicationManagers
 10614 ;; This function uses a non-reentrant model
 10615 ;;
 10616                           
 10617                           	psect	text58
 10618  003BDA                     __ptext58:
 10619                           	opt stack 0
 10620  003BDA                     _PLLInitialize:
 10621                           	opt stack 18
 10622                           
 10623                           ;SyntApp.c: 31: InitSynth(SYNTH_TX);
 10624                           
 10625                           ;incstack = 0
 10626  003BDA  0E00               	movlw	0
 10627  003BDC  ECF4  F005         	call	_InitSynth
 10628                           
 10629                           ;SyntApp.c: 32: InitSynth(SYNTH_RX);
 10630  003BE0  0E01               	movlw	1
 10631  003BE2  ECF4  F005         	call	_InitSynth
 10632                           
 10633                           ;SyntApp.c: 35: FillArray(synthLdRxArray, sizeof(synthLdRxArray), 0x0);
 10634  003BE6  0EB0               	movlw	low _synthLdRxArray
 10635  003BE8  6E20               	movwf	FillArray@array,c
 10636  003BEA  0E01               	movlw	high _synthLdRxArray
 10637  003BEC  6E21               	movwf	FillArray@array+1,c
 10638  003BEE  0E00               	movlw	0
 10639  003BF0  6E23               	movwf	FillArray@size+1,c
 10640  003BF2  0E0C               	movlw	12
 10641  003BF4  6E22               	movwf	FillArray@size,c
 10642  003BF6  0E00               	movlw	0
 10643  003BF8  6E24               	movwf	FillArray@value,c
 10644  003BFA  ECDC  F020         	call	_FillArray	;wreg free
 10645                           
 10646                           ;SyntApp.c: 36: FillArray(synthLdTxArray, sizeof(synthLdTxArray), 0x0);
 10647  003BFE  0EA4               	movlw	low _synthLdTxArray
 10648  003C00  6E20               	movwf	FillArray@array,c
 10649  003C02  0E01               	movlw	high _synthLdTxArray
 10650  003C04  6E21               	movwf	FillArray@array+1,c
 10651  003C06  0E00               	movlw	0
 10652  003C08  6E23               	movwf	FillArray@size+1,c
 10653  003C0A  0E0C               	movlw	12
 10654  003C0C  6E22               	movwf	FillArray@size,c
 10655  003C0E  0E00               	movlw	0
 10656  003C10  6E24               	movwf	FillArray@value,c
 10657  003C12  ECDC  F020         	call	_FillArray	;wreg free
 10658  003C16  0012               	return		;funcret
 10659  003C18                     __end_of_PLLInitialize:
 10660                           	opt stack 0
 10661                           tosu	equ	0xFFF
 10662                           tosh	equ	0xFFE
 10663                           tosl	equ	0xFFD
 10664                           pclath	equ	0xFFA
 10665                           tblptru	equ	0xFF8
 10666                           tblptrh	equ	0xFF7
 10667                           tblptrl	equ	0xFF6
 10668                           tablat	equ	0xFF5
 10669                           prodh	equ	0xFF4
 10670                           prodl	equ	0xFF3
 10671                           intcon	equ	0xFF2
 10672                           intcon2	equ	0xFF1
 10673                           postinc0	equ	0xFEE
 10674                           plusw0	equ	0xFEB
 10675                           wreg	equ	0xFE8
 10676                           indf1	equ	0xFE7
 10677                           postdec1	equ	0xFE5
 10678                           fsr1h	equ	0xFE2
 10679                           fsr1l	equ	0xFE1
 10680                           indf2	equ	0xFDF
 10681                           postinc2	equ	0xFDE
 10682                           postdec2	equ	0xFDD
 10683                           plusw2	equ	0xFDB
 10684                           fsr2h	equ	0xFDA
 10685                           fsr2l	equ	0xFD9
 10686                           status	equ	0xFD8
 10687                           
 10688 ;; *************** function _InitSynth *****************
 10689 ;; Defined at:
 10690 ;;		line 39 in file "SyntApp.c"
 10691 ;; Parameters:    Size  Location     Type
 10692 ;;  cType           1    wreg     enum E1
 10693 ;; Auto vars:     Size  Location     Type
 10694 ;;  cType           1  108[BANK0 ] enum E1
 10695 ;;  idx             1  109[BANK0 ] unsigned char 
 10696 ;;  EepromVal       4  104[BANK0 ] unsigned long 
 10697 ;;  regNum          1  110[BANK0 ] unsigned char 
 10698 ;; Return value:  Size  Location     Type
 10699 ;;                  1    wreg      void 
 10700 ;; Registers used:
 10701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10702 ;; Tracked objects:
 10703 ;;		On entry : 0/0
 10704 ;;		On exit  : 0/0
 10705 ;;		Unchanged: 0/0
 10706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10707 ;;      Params:         0       0       0       0       0       0       0
 10708 ;;      Locals:         0       7       0       0       0       0       0
 10709 ;;      Temps:          0       0       0       0       0       0       0
 10710 ;;      Totals:         0       7       0       0       0       0       0
 10711 ;;Total ram usage:        7 bytes
 10712 ;; Hardware stack levels used:    1
 10713 ;; Hardware stack levels required when called:   10
 10714 ;; This function calls:
 10715 ;;		_ReadIntFromEeprom
 10716 ;;		_SWSPI_send_word
 10717 ;;		_StoreIntInEeprom
 10718 ;;		_SwSpi_Set_CE_Pin
 10719 ;; This function is called by:
 10720 ;;		_PLLInitialize
 10721 ;;		_SetSynthOper
 10722 ;;		_SynthLdDetect
 10723 ;; This function uses a non-reentrant model
 10724 ;;
 10725                           
 10726                           	psect	text59
 10727  000BE8                     __ptext59:
 10728                           	opt stack 0
 10729  000BE8                     _InitSynth:
 10730                           	opt stack 17
 10731                           
 10732                           ;incstack = 0
 10733                           ;InitSynth@cType stored from wreg
 10734  000BE8  0100               	movlb	0	; () banked
 10735  000BEA  6FCC               	movwf	InitSynth@cType& (0+255),b
 10736                           
 10737                           ;SyntApp.c: 41: SwSpi_Set_CE_Pin(cType, 1);
 10738  000BEC  0E01               	movlw	1
 10739  000BEE  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 10740  000BF0  0100               	movlb	0	; () banked
 10741  000BF2  51CC               	movf	InitSynth@cType& (0+255),w,b
 10742  000BF4  EC2A  F01E         	call	_SwSpi_Set_CE_Pin
 10743                           
 10744                           ;SyntApp.c: 43: uint8_t regNum = 0;
 10745  000BF8  0E00               	movlw	0
 10746  000BFA  0100               	movlb	0	; () banked
 10747  000BFC  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;SyntApp.c: 44: uint32_t EepromVal = 0x0;
 10751  000BFE  0E00               	movlw	0
 10752  000C00  6FC8               	movwf	InitSynth@EepromVal& (0+255),b
 10753  000C02  0E00               	movlw	0
 10754  000C04  6FC9               	movwf	(InitSynth@EepromVal+1)& (0+255),b
 10755  000C06  0E00               	movlw	0
 10756  000C08  6FCA               	movwf	(InitSynth@EepromVal+2)& (0+255),b
 10757  000C0A  0E00               	movlw	0
 10758  000C0C  6FCB               	movwf	(InitSynth@EepromVal+3)& (0+255),b
 10759                           
 10760                           ; BSR set to: 0
 10761                           ;SyntApp.c: 47: for(uint8_t idx = 0; idx < 13; idx++)
 10762  000C0E  0E00               	movlw	0
 10763  000C10  6FCD               	movwf	InitSynth@idx& (0+255),b
 10764  000C12                     l8118:
 10765                           
 10766                           ; BSR set to: 0
 10767  000C12  0E0C               	movlw	12
 10768  000C14  65CD               	cpfsgt	InitSynth@idx& (0+255),b
 10769  000C16  D001               	goto	l507
 10770  000C18  0012               	return	
 10771  000C1A                     l507:
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;SyntApp.c: 48: {
 10775                           ;SyntApp.c: 49: regNum = 13 - idx - 1;
 10776                           
 10777                           ; BSR set to: 0
 10778  000C1A  29CD               	incf	InitSynth@idx& (0+255),w,b
 10779  000C1C  0800               	sublw	0
 10780  000C1E  0F0D               	addlw	13
 10781  000C20  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10782                           
 10783                           ; BSR set to: 0
 10784                           ;SyntApp.c: 50: if(regNum == 0x0 || regNum == 0x1 || regNum == 0x2 || regNum == 0x4 || r
      +                          egNum == 0x6 || regNum == 0xA)
 10785  000C22  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10786  000C24  B4D8               	btfsc	status,2,c
 10787  000C26  D013               	goto	u8190
 10788                           
 10789                           ; BSR set to: 0
 10790  000C28  05CE               	decf	InitSynth@regNum& (0+255),w,b
 10791  000C2A  B4D8               	btfsc	status,2,c
 10792  000C2C  D010               	goto	u8190
 10793                           
 10794                           ; BSR set to: 0
 10795  000C2E  0E02               	movlw	2
 10796  000C30  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10797  000C32  B4D8               	btfsc	status,2,c
 10798  000C34  D00C               	goto	u8190
 10799                           
 10800                           ; BSR set to: 0
 10801  000C36  0E04               	movlw	4
 10802  000C38  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10803  000C3A  B4D8               	btfsc	status,2,c
 10804  000C3C  D008               	goto	u8190
 10805                           
 10806                           ; BSR set to: 0
 10807  000C3E  0E06               	movlw	6
 10808  000C40  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10809  000C42  B4D8               	btfsc	status,2,c
 10810  000C44  D004               	goto	u8190
 10811                           
 10812                           ; BSR set to: 0
 10813  000C46  0E0A               	movlw	10
 10814  000C48  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10815  000C4A  A4D8               	btfss	status,2,c
 10816  000C4C  D0EB               	goto	l509
 10817  000C4E                     u8190:
 10818                           
 10819                           ; BSR set to: 0
 10820                           ;SyntApp.c: 51: {
 10821                           ;SyntApp.c: 52: if(cType == SYNTH_TX)
 10822                           
 10823                           ; BSR set to: 0
 10824  000C4E  51CC               	movf	InitSynth@cType& (0+255),w,b
 10825  000C50  A4D8               	btfss	status,2,c
 10826  000C52  D071               	goto	l512
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;SyntApp.c: 53: {
 10830                           ;SyntApp.c: 54: EepromVal = ReadIntFromEeprom((0) | SYNTH_ADDRES[regNum], 4);
 10831  000C54  0E00               	movlw	0
 10832  000C56  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10833  000C58  0E04               	movlw	4
 10834  000C5A  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10835  000C5C  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10836  000C5E  0D01               	mullw	1
 10837  000C60  0E35               	movlw	low _SYNTH_ADDRES
 10838  000C62  24F3               	addwf	prodl,w,c
 10839  000C64  6EF6               	movwf	tblptrl,c
 10840  000C66  0E06               	movlw	high _SYNTH_ADDRES
 10841  000C68  20F4               	addwfc	prodh,w,c
 10842  000C6A  6EF7               	movwf	tblptrh,c
 10843  000C6C                     	if	0	;There are less than 3 active tblptr bytes
 10844  000C6C                     	endif
 10845  000C6C  0008               	tblrd		*
 10846  000C6E  50F5               	movf	tablat,w,c
 10847  000C70  ECD7  F00F         	call	_ReadIntFromEeprom
 10848  000C74  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 10849  000C78  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 10850  000C7C  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 10851  000C80  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 10852                           
 10853                           ;SyntApp.c: 55: if(EepromVal == 0xFFFFFFFF)
 10854  000C84  0100               	movlb	0	; () banked
 10855  000C86  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 10856  000C88  E147               	bnz	l8146
 10857  000C8A  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 10858  000C8C  E145               	bnz	l8146
 10859  000C8E  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 10860  000C90  E143               	bnz	l8146
 10861  000C92  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 10862  000C94  A4D8               	btfss	status,2,c
 10863  000C96  D040               	goto	l513
 10864                           
 10865                           ; BSR set to: 0
 10866                           ;SyntApp.c: 56: {
 10867                           ;SyntApp.c: 57: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 10868  000C98  51CD               	movf	InitSynth@idx& (0+255),w,b
 10869  000C9A  0D04               	mullw	4
 10870  000C9C  0E01               	movlw	low _SYNTH_REGS
 10871  000C9E  24F3               	addwf	prodl,w,c
 10872  000CA0  6EF6               	movwf	tblptrl,c
 10873  000CA2  0E06               	movlw	high _SYNTH_REGS
 10874  000CA4  20F4               	addwfc	prodh,w,c
 10875  000CA6  6EF7               	movwf	tblptrh,c
 10876  000CA8                     	if	0	;There are less than 3 active tblptr bytes
 10877  000CA8                     	endif
 10878  000CA8  0009               	tblrd		*+
 10879  000CAA  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 10880  000CAE  0009               	tblrd		*+
 10881  000CB0  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 10882  000CB4  0009               	tblrd		*+
 10883  000CB6  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 10884  000CBA  000A               	tblrd		*-
 10885  000CBC  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 10886  000CC0  0E03               	movlw	3
 10887  000CC2  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10888  000CC4  51CC               	movf	InitSynth@cType& (0+255),w,b
 10889  000CC6  ECA6  F017         	call	_SWSPI_send_word
 10890                           
 10891                           ;SyntApp.c: 58: StoreIntInEeprom(SYNTH_REGS[idx], (0) | SYNTH_ADDRES[regNum], 4);
 10892  000CCA  0100               	movlb	0	; () banked
 10893  000CCC  51CD               	movf	InitSynth@idx& (0+255),w,b
 10894  000CCE  0D04               	mullw	4
 10895  000CD0  0E01               	movlw	low _SYNTH_REGS
 10896  000CD2  24F3               	addwf	prodl,w,c
 10897  000CD4  6EF6               	movwf	tblptrl,c
 10898  000CD6  0E06               	movlw	high _SYNTH_REGS
 10899  000CD8  20F4               	addwfc	prodh,w,c
 10900  000CDA  6EF7               	movwf	tblptrh,c
 10901  000CDC                     	if	0	;There are less than 3 active tblptr bytes
 10902  000CDC                     	endif
 10903  000CDC  0009               	tblrd		*+
 10904  000CDE  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 10905  000CE2  0009               	tblrd		*+
 10906  000CE4  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 10907  000CE8  0009               	tblrd		*+
 10908  000CEA  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 10909  000CEE  000A               	tblrd		*-
 10910  000CF0  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 10911  000CF4  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10912  000CF6  0D01               	mullw	1
 10913  000CF8  0E35               	movlw	low _SYNTH_ADDRES
 10914  000CFA  24F3               	addwf	prodl,w,c
 10915  000CFC  6EF6               	movwf	tblptrl,c
 10916  000CFE  0E06               	movlw	high _SYNTH_ADDRES
 10917  000D00  20F4               	addwfc	prodh,w,c
 10918  000D02  6EF7               	movwf	tblptrh,c
 10919  000D04                     	if	0	;There are less than 3 active tblptr bytes
 10920  000D04                     	endif
 10921  000D04  0008               	tblrd		*
 10922  000D06  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
 10923  000D0A  0E00               	movlw	0
 10924  000D0C  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 10925  000D0E  0E04               	movlw	4
 10926  000D10  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 10927  000D12  EC9E  F01E         	call	_StoreIntInEeprom	;wreg free
 10928                           
 10929                           ;SyntApp.c: 59: }
 10930  000D16  D0A0               	goto	l519
 10931  000D18                     l513:
 10932  000D18                     l8146:
 10933                           
 10934                           ;SyntApp.c: 60: else
 10935                           ;SyntApp.c: 61: {
 10936                           ;SyntApp.c: 62: SWSPI_send_word(cType, EepromVal,3);
 10937  000D18  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 10938  000D1C  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 10939  000D20  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 10940  000D24  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 10941  000D28  0E03               	movlw	3
 10942  000D2A  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10943  000D2C  0100               	movlb	0	; () banked
 10944  000D2E  51CC               	movf	InitSynth@cType& (0+255),w,b
 10945  000D30  ECA6  F017         	call	_SWSPI_send_word
 10946                           
 10947                           ;SyntApp.c: 63: }
 10948                           ;SyntApp.c: 64: }
 10949  000D34  D091               	goto	l519
 10950  000D36                     l512:
 10951                           
 10952                           ;SyntApp.c: 65: else if (cType == SYNTH_RX)
 10953  000D36  0100               	movlb	0	; () banked
 10954  000D38  05CC               	decf	InitSynth@cType& (0+255),w,b
 10955  000D3A  A4D8               	btfss	status,2,c
 10956  000D3C  D08D               	goto	l519
 10957                           
 10958                           ; BSR set to: 0
 10959                           ;SyntApp.c: 66: {
 10960                           ;SyntApp.c: 67: EepromVal = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[regNum], 4);
 10961  000D3E  0E00               	movlw	0
 10962  000D40  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10963  000D42  0E04               	movlw	4
 10964  000D44  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10965  000D46  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10966  000D48  0D01               	mullw	1
 10967  000D4A  0E35               	movlw	low _SYNTH_ADDRES
 10968  000D4C  24F3               	addwf	prodl,w,c
 10969  000D4E  6EF6               	movwf	tblptrl,c
 10970  000D50  0E06               	movlw	high _SYNTH_ADDRES
 10971  000D52  20F4               	addwfc	prodh,w,c
 10972  000D54  6EF7               	movwf	tblptrh,c
 10973  000D56                     	if	0	;There are less than 3 active tblptr bytes
 10974  000D56                     	endif
 10975  000D56  0008               	tblrd		*
 10976  000D58  50F5               	movf	tablat,w,c
 10977  000D5A  0920               	iorlw	32
 10978  000D5C  ECD7  F00F         	call	_ReadIntFromEeprom
 10979  000D60  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 10980  000D64  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 10981  000D68  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 10982  000D6C  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 10983                           
 10984                           ;SyntApp.c: 68: if(EepromVal == 0xFFFFFFFF)
 10985  000D70  0100               	movlb	0	; () banked
 10986  000D72  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 10987  000D74  E148               	bnz	l8158
 10988  000D76  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 10989  000D78  E146               	bnz	l8158
 10990  000D7A  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 10991  000D7C  E144               	bnz	l8158
 10992  000D7E  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 10993  000D80  A4D8               	btfss	status,2,c
 10994  000D82  D041               	goto	l517
 10995                           
 10996                           ; BSR set to: 0
 10997                           ;SyntApp.c: 69: {
 10998                           ;SyntApp.c: 70: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 10999  000D84  51CD               	movf	InitSynth@idx& (0+255),w,b
 11000  000D86  0D04               	mullw	4
 11001  000D88  0E01               	movlw	low _SYNTH_REGS
 11002  000D8A  24F3               	addwf	prodl,w,c
 11003  000D8C  6EF6               	movwf	tblptrl,c
 11004  000D8E  0E06               	movlw	high _SYNTH_REGS
 11005  000D90  20F4               	addwfc	prodh,w,c
 11006  000D92  6EF7               	movwf	tblptrh,c
 11007  000D94                     	if	0	;There are less than 3 active tblptr bytes
 11008  000D94                     	endif
 11009  000D94  0009               	tblrd		*+
 11010  000D96  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11011  000D9A  0009               	tblrd		*+
 11012  000D9C  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11013  000DA0  0009               	tblrd		*+
 11014  000DA2  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11015  000DA6  000A               	tblrd		*-
 11016  000DA8  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11017  000DAC  0E03               	movlw	3
 11018  000DAE  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11019  000DB0  51CC               	movf	InitSynth@cType& (0+255),w,b
 11020  000DB2  ECA6  F017         	call	_SWSPI_send_word
 11021                           
 11022                           ;SyntApp.c: 71: StoreIntInEeprom(SYNTH_REGS[idx], (0x20) | SYNTH_ADDRES[regNum], 4);
 11023  000DB6  0100               	movlb	0	; () banked
 11024  000DB8  51CD               	movf	InitSynth@idx& (0+255),w,b
 11025  000DBA  0D04               	mullw	4
 11026  000DBC  0E01               	movlw	low _SYNTH_REGS
 11027  000DBE  24F3               	addwf	prodl,w,c
 11028  000DC0  6EF6               	movwf	tblptrl,c
 11029  000DC2  0E06               	movlw	high _SYNTH_REGS
 11030  000DC4  20F4               	addwfc	prodh,w,c
 11031  000DC6  6EF7               	movwf	tblptrh,c
 11032  000DC8                     	if	0	;There are less than 3 active tblptr bytes
 11033  000DC8                     	endif
 11034  000DC8  0009               	tblrd		*+
 11035  000DCA  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 11036  000DCE  0009               	tblrd		*+
 11037  000DD0  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 11038  000DD4  0009               	tblrd		*+
 11039  000DD6  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 11040  000DDA  000A               	tblrd		*-
 11041  000DDC  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 11042  000DE0  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11043  000DE2  0D01               	mullw	1
 11044  000DE4  0E35               	movlw	low _SYNTH_ADDRES
 11045  000DE6  24F3               	addwf	prodl,w,c
 11046  000DE8  6EF6               	movwf	tblptrl,c
 11047  000DEA  0E06               	movlw	high _SYNTH_ADDRES
 11048  000DEC  20F4               	addwfc	prodh,w,c
 11049  000DEE  6EF7               	movwf	tblptrh,c
 11050  000DF0                     	if	0	;There are less than 3 active tblptr bytes
 11051  000DF0                     	endif
 11052  000DF0  0008               	tblrd		*
 11053  000DF2  50F5               	movf	tablat,w,c
 11054  000DF4  0920               	iorlw	32
 11055  000DF6  6E25               	movwf	StoreIntInEeprom@address,c
 11056  000DF8  0E00               	movlw	0
 11057  000DFA  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11058  000DFC  0E04               	movlw	4
 11059  000DFE  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11060  000E00  EC9E  F01E         	call	_StoreIntInEeprom	;wreg free
 11061                           
 11062                           ;SyntApp.c: 72: }
 11063  000E04  D029               	goto	l519
 11064  000E06                     l517:
 11065  000E06                     l8158:
 11066                           
 11067                           ;SyntApp.c: 73: else
 11068                           ;SyntApp.c: 74: {
 11069                           ;SyntApp.c: 75: SWSPI_send_word(cType, EepromVal,3);
 11070  000E06  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 11071  000E0A  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 11072  000E0E  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 11073  000E12  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 11074  000E16  0E03               	movlw	3
 11075  000E18  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11076  000E1A  0100               	movlb	0	; () banked
 11077  000E1C  51CC               	movf	InitSynth@cType& (0+255),w,b
 11078  000E1E  ECA6  F017         	call	_SWSPI_send_word
 11079                           
 11080                           ;SyntApp.c: 76: }
 11081                           ;SyntApp.c: 77: }
 11082                           ;SyntApp.c: 78: }
 11083  000E22  D01A               	goto	l519
 11084  000E24                     l509:
 11085                           
 11086                           ;SyntApp.c: 79: else
 11087                           ;SyntApp.c: 80: {
 11088                           ;SyntApp.c: 81: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11089  000E24  0100               	movlb	0	; () banked
 11090  000E26  51CD               	movf	InitSynth@idx& (0+255),w,b
 11091  000E28  0D04               	mullw	4
 11092  000E2A  0E01               	movlw	low _SYNTH_REGS
 11093  000E2C  24F3               	addwf	prodl,w,c
 11094  000E2E  6EF6               	movwf	tblptrl,c
 11095  000E30  0E06               	movlw	high _SYNTH_REGS
 11096  000E32  20F4               	addwfc	prodh,w,c
 11097  000E34  6EF7               	movwf	tblptrh,c
 11098  000E36                     	if	0	;There are less than 3 active tblptr bytes
 11099  000E36                     	endif
 11100  000E36  0009               	tblrd		*+
 11101  000E38  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11102  000E3C  0009               	tblrd		*+
 11103  000E3E  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11104  000E42  0009               	tblrd		*+
 11105  000E44  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11106  000E48  000A               	tblrd		*-
 11107  000E4A  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11108  000E4E  0E03               	movlw	3
 11109  000E50  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11110  000E52  51CC               	movf	InitSynth@cType& (0+255),w,b
 11111  000E54  ECA6  F017         	call	_SWSPI_send_word
 11112  000E58                     l519:
 11113  000E58  0100               	movlb	0	; () banked
 11114  000E5A  2BCD               	incf	InitSynth@idx& (0+255),f,b
 11115  000E5C  D6DA               	goto	l8118
 11116  000E5E                     __end_of_InitSynth:
 11117                           	opt stack 0
 11118                           tosu	equ	0xFFF
 11119                           tosh	equ	0xFFE
 11120                           tosl	equ	0xFFD
 11121                           pclath	equ	0xFFA
 11122                           tblptru	equ	0xFF8
 11123                           tblptrh	equ	0xFF7
 11124                           tblptrl	equ	0xFF6
 11125                           tablat	equ	0xFF5
 11126                           prodh	equ	0xFF4
 11127                           prodl	equ	0xFF3
 11128                           intcon	equ	0xFF2
 11129                           intcon2	equ	0xFF1
 11130                           postinc0	equ	0xFEE
 11131                           plusw0	equ	0xFEB
 11132                           wreg	equ	0xFE8
 11133                           indf1	equ	0xFE7
 11134                           postdec1	equ	0xFE5
 11135                           fsr1h	equ	0xFE2
 11136                           fsr1l	equ	0xFE1
 11137                           indf2	equ	0xFDF
 11138                           postinc2	equ	0xFDE
 11139                           postdec2	equ	0xFDD
 11140                           plusw2	equ	0xFDB
 11141                           fsr2h	equ	0xFDA
 11142                           fsr2l	equ	0xFD9
 11143                           status	equ	0xFD8
 11144                           
 11145 ;; *************** function _SwSpi_Set_CE_Pin *****************
 11146 ;; Defined at:
 11147 ;;		line 201 in file "SwSpiApp.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;  phrType         1    wreg     enum E1
 11150 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;  phrType         1   24[COMRAM] enum E1
 11153 ;; Return value:  Size  Location     Type
 11154 ;;                  1    wreg      void 
 11155 ;; Registers used:
 11156 ;;		wreg, status,2, status,0
 11157 ;; Tracked objects:
 11158 ;;		On entry : 0/0
 11159 ;;		On exit  : 0/0
 11160 ;;		Unchanged: 0/0
 11161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11162 ;;      Params:         1       0       0       0       0       0       0
 11163 ;;      Locals:         1       0       0       0       0       0       0
 11164 ;;      Temps:          0       0       0       0       0       0       0
 11165 ;;      Totals:         2       0       0       0       0       0       0
 11166 ;;Total ram usage:        2 bytes
 11167 ;; Hardware stack levels used:    1
 11168 ;; Hardware stack levels required when called:    4
 11169 ;; This function calls:
 11170 ;;		Nothing
 11171 ;; This function is called by:
 11172 ;;		_InitSynth
 11173 ;;		_SetSynthOper
 11174 ;; This function uses a non-reentrant model
 11175 ;;
 11176                           
 11177                           	psect	text60
 11178  003C54                     __ptext60:
 11179                           	opt stack 0
 11180  003C54                     _SwSpi_Set_CE_Pin:
 11181                           	opt stack 23
 11182                           
 11183                           ; BSR set to: 0
 11184                           ;incstack = 0
 11185                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 11186  003C54  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 11187                           
 11188                           ;SwSpiApp.c: 203: switch(phrType)
 11189  003C56  D014               	goto	l730
 11190  003C58                     
 11191                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 11192  003C58  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11193  003C5A  A4D8               	btfss	status,2,c
 11194  003C5C  D002               	goto	l732
 11195                           
 11196                           ;SwSpiApp.c: 207: {
 11197                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 11198  003C5E  828B               	bsf	3979,1,c	;volatile
 11199                           
 11200                           ;SwSpiApp.c: 209: }
 11201  003C60  0012               	return	
 11202  003C62                     l732:
 11203                           
 11204                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 11205  003C62  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11206  003C64  A4D8               	btfss	status,2,c
 11207  003C66  0012               	return	
 11208                           
 11209                           ;SwSpiApp.c: 211: {
 11210                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 11211  003C68  928B               	bcf	3979,1,c	;volatile
 11212                           
 11213                           ;SwSpiApp.c: 213: }
 11214                           ;SwSpiApp.c: 214: break;
 11215  003C6A  0012               	return	
 11216  003C6C                     
 11217                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 11218  003C6C  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11219  003C6E  A4D8               	btfss	status,2,c
 11220  003C70  D002               	goto	l741
 11221                           
 11222                           ;SwSpiApp.c: 218: {
 11223                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 11224  003C72  848C               	bsf	3980,2,c	;volatile
 11225                           
 11226                           ;SwSpiApp.c: 220: }
 11227  003C74  0012               	return	
 11228  003C76                     l741:
 11229                           
 11230                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 11231  003C76  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11232  003C78  A4D8               	btfss	status,2,c
 11233  003C7A  0012               	return	
 11234                           
 11235                           ;SwSpiApp.c: 222: {
 11236                           ;SwSpiApp.c: 223: do { LATDbits.LATD2 = 0; } while(0);
 11237  003C7C  948C               	bcf	3980,2,c	;volatile
 11238                           
 11239                           ;SwSpiApp.c: 226: }
 11240                           
 11241                           ;SwSpiApp.c: 224: }
 11242                           ;SwSpiApp.c: 225: break;
 11243  003C7E  0012               	return	
 11244  003C80                     l730:
 11245  003C80  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 11246                           
 11247                           ; Switch size 1, requested type "space"
 11248                           ; Number of cases is 2, Range of values is 0 to 1
 11249                           ; switch strategies available:
 11250                           ; Name         Instructions Cycles
 11251                           ; simple_byte            7     4 (average)
 11252                           ;	Chosen strategy is simple_byte
 11253  003C82  0A00               	xorlw	0	; case 0
 11254  003C84  B4D8               	btfsc	status,2,c
 11255  003C86  D7E8               	goto	l731
 11256  003C88  0A01               	xorlw	1	; case 1
 11257  003C8A  A4D8               	btfss	status,2,c
 11258  003C8C  0012               	return	
 11259  003C8E  D7EE               	goto	l740
 11260  003C90                     __end_of_SwSpi_Set_CE_Pin:
 11261                           	opt stack 0
 11262                           tosu	equ	0xFFF
 11263                           tosh	equ	0xFFE
 11264                           tosl	equ	0xFFD
 11265                           pclath	equ	0xFFA
 11266                           tblptru	equ	0xFF8
 11267                           tblptrh	equ	0xFF7
 11268                           tblptrl	equ	0xFF6
 11269                           tablat	equ	0xFF5
 11270                           prodh	equ	0xFF4
 11271                           prodl	equ	0xFF3
 11272                           intcon	equ	0xFF2
 11273                           intcon2	equ	0xFF1
 11274                           postinc0	equ	0xFEE
 11275                           plusw0	equ	0xFEB
 11276                           wreg	equ	0xFE8
 11277                           indf1	equ	0xFE7
 11278                           postdec1	equ	0xFE5
 11279                           fsr1h	equ	0xFE2
 11280                           fsr1l	equ	0xFE1
 11281                           indf2	equ	0xFDF
 11282                           postinc2	equ	0xFDE
 11283                           postdec2	equ	0xFDD
 11284                           plusw2	equ	0xFDB
 11285                           fsr2h	equ	0xFDA
 11286                           fsr2l	equ	0xFD9
 11287                           status	equ	0xFD8
 11288                           
 11289 ;; *************** function _InitAdcApplicationMgr *****************
 11290 ;; Defined at:
 11291 ;;		line 20 in file "AdcApp.c"
 11292 ;; Parameters:    Size  Location     Type
 11293 ;;		None
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;		None
 11296 ;; Return value:  Size  Location     Type
 11297 ;;                  1    wreg      void 
 11298 ;; Registers used:
 11299 ;;		wreg, status,2
 11300 ;; Tracked objects:
 11301 ;;		On entry : 0/0
 11302 ;;		On exit  : 0/0
 11303 ;;		Unchanged: 0/0
 11304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11305 ;;      Params:         0       0       0       0       0       0       0
 11306 ;;      Locals:         0       0       0       0       0       0       0
 11307 ;;      Temps:          0       0       0       0       0       0       0
 11308 ;;      Totals:         0       0       0       0       0       0       0
 11309 ;;Total ram usage:        0 bytes
 11310 ;; Hardware stack levels used:    1
 11311 ;; Hardware stack levels required when called:    4
 11312 ;; This function calls:
 11313 ;;		Nothing
 11314 ;; This function is called by:
 11315 ;;		_InitSystemApplicationManagers
 11316 ;; This function uses a non-reentrant model
 11317 ;;
 11318                           
 11319                           	psect	text61
 11320  00432A                     __ptext61:
 11321                           	opt stack 0
 11322  00432A                     _InitAdcApplicationMgr:
 11323                           	opt stack 25
 11324                           
 11325                           ;AdcApp.c: 22: adcSampleMode = CIRCULAR;
 11326                           
 11327                           ;incstack = 0
 11328  00432A  0E00               	movlw	0
 11329  00432C  6E3D               	movwf	_adcSampleMode,c
 11330  00432E  0012               	return		;funcret
 11331  004330                     __end_of_InitAdcApplicationMgr:
 11332                           	opt stack 0
 11333                           tosu	equ	0xFFF
 11334                           tosh	equ	0xFFE
 11335                           tosl	equ	0xFFD
 11336                           pclath	equ	0xFFA
 11337                           tblptru	equ	0xFF8
 11338                           tblptrh	equ	0xFF7
 11339                           tblptrl	equ	0xFF6
 11340                           tablat	equ	0xFF5
 11341                           prodh	equ	0xFF4
 11342                           prodl	equ	0xFF3
 11343                           intcon	equ	0xFF2
 11344                           intcon2	equ	0xFF1
 11345                           postinc0	equ	0xFEE
 11346                           plusw0	equ	0xFEB
 11347                           wreg	equ	0xFE8
 11348                           indf1	equ	0xFE7
 11349                           postdec1	equ	0xFE5
 11350                           fsr1h	equ	0xFE2
 11351                           fsr1l	equ	0xFE1
 11352                           indf2	equ	0xFDF
 11353                           postinc2	equ	0xFDE
 11354                           postdec2	equ	0xFDD
 11355                           plusw2	equ	0xFDB
 11356                           fsr2h	equ	0xFDA
 11357                           fsr2l	equ	0xFD9
 11358                           status	equ	0xFD8
 11359                           
 11360 ;; *************** function _DacInit *****************
 11361 ;; Defined at:
 11362 ;;		line 11 in file "DacApp.c"
 11363 ;; Parameters:    Size  Location     Type
 11364 ;;		None
 11365 ;; Auto vars:     Size  Location     Type
 11366 ;;  dacInput        2  106[BANK0 ] unsigned int 
 11367 ;;  idx             1  108[BANK0 ] char 
 11368 ;; Return value:  Size  Location     Type
 11369 ;;                  1    wreg      void 
 11370 ;; Registers used:
 11371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11372 ;; Tracked objects:
 11373 ;;		On entry : 0/0
 11374 ;;		On exit  : 0/0
 11375 ;;		Unchanged: 0/0
 11376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11377 ;;      Params:         0       0       0       0       0       0       0
 11378 ;;      Locals:         0       3       0       0       0       0       0
 11379 ;;      Temps:          0       2       0       0       0       0       0
 11380 ;;      Totals:         0       5       0       0       0       0       0
 11381 ;;Total ram usage:        5 bytes
 11382 ;; Hardware stack levels used:    1
 11383 ;; Hardware stack levels required when called:   10
 11384 ;; This function calls:
 11385 ;;		_ReadIntFromEeprom
 11386 ;;		_SWSPI_send_word
 11387 ;;		_StoreIntInEeprom
 11388 ;; This function is called by:
 11389 ;;		_InitSystemApplicationManagers
 11390 ;; This function uses a non-reentrant model
 11391 ;;
 11392                           
 11393                           	psect	text62
 11394  002782                     __ptext62:
 11395                           	opt stack 0
 11396  002782                     _DacInit:
 11397                           	opt stack 19
 11398                           
 11399                           ;DacApp.c: 13: for(int8_t idx = 0; idx < (4); idx++)
 11400                           
 11401                           ;incstack = 0
 11402  002782  0E00               	movlw	0
 11403  002784  0100               	movlb	0	; () banked
 11404  002786  6FCC               	movwf	DacInit@idx& (0+255),b
 11405  002788                     l8682:
 11406                           
 11407                           ; BSR set to: 0
 11408  002788  51CC               	movf	DacInit@idx& (0+255),w,b
 11409  00278A  0A80               	xorlw	128
 11410  00278C  0F7C               	addlw	-132
 11411  00278E  B0D8               	btfsc	status,0,c
 11412  002790  0012               	return	
 11413                           
 11414                           ; BSR set to: 0
 11415                           ;DacApp.c: 14: {
 11416                           ;DacApp.c: 15: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 11417                           
 11418                           ; BSR set to: 0
 11419                           
 11420                           ; BSR set to: 0
 11421  002792  0E00               	movlw	0
 11422  002794  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11423  002796  0E02               	movlw	2
 11424  002798  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11425  00279A  51CC               	movf	DacInit@idx& (0+255),w,b
 11426  00279C  0D01               	mullw	1
 11427  00279E  0E53               	movlw	low _DAC_ADDRES
 11428  0027A0  24F3               	addwf	prodl,w,c
 11429  0027A2  6EF6               	movwf	tblptrl,c
 11430  0027A4  0E06               	movlw	high _DAC_ADDRES
 11431  0027A6  20F4               	addwfc	prodh,w,c
 11432  0027A8  6EF7               	movwf	tblptrh,c
 11433  0027AA                     	if	0	;There are less than 3 active tblptr bytes
 11434  0027AA                     	endif
 11435  0027AA  0008               	tblrd		*
 11436  0027AC  50F5               	movf	tablat,w,c
 11437  0027AE  0940               	iorlw	64
 11438  0027B0  ECD7  F00F         	call	_ReadIntFromEeprom
 11439  0027B4  C0B1  F0CA         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 11440  0027B8  C0B2  F0CB         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 11441                           
 11442                           ;DacApp.c: 16: if(dacInput == 0xFFFF)
 11443  0027BC  0100               	movlb	0	; () banked
 11444  0027BE  29CA               	incf	DacInit@dacInput& (0+255),w,b
 11445  0027C0  E144               	bnz	l8694
 11446  0027C2  29CB               	incf	(DacInit@dacInput+1)& (0+255),w,b
 11447  0027C4  A4D8               	btfss	status,2,c
 11448  0027C6  D041               	goto	l411
 11449                           
 11450                           ; BSR set to: 0
 11451                           ;DacApp.c: 17: {
 11452                           ;DacApp.c: 18: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 11453  0027C8  51CC               	movf	DacInit@idx& (0+255),w,b
 11454  0027CA  0D02               	mullw	2
 11455  0027CC  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11456  0027CE  24F3               	addwf	prodl,w,c
 11457  0027D0  6EF6               	movwf	tblptrl,c
 11458  0027D2  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11459  0027D4  20F4               	addwfc	prodh,w,c
 11460  0027D6  6EF7               	movwf	tblptrh,c
 11461  0027D8                     	if	0	;There are less than 3 active tblptr bytes
 11462  0027D8                     	endif
 11463  0027D8  0009               	tblrd		*+
 11464  0027DA  CFF5 F0C8          	movff	tablat,??_DacInit
 11465  0027DE  0009               	tblrd		*+
 11466  0027E0  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11467  0027E4  C0C8  F029         	movff	??_DacInit,SWSPI_send_word@data
 11468  0027E8  C0C9  F02A         	movff	??_DacInit+1,SWSPI_send_word@data+1
 11469  0027EC  6A2B               	clrf	SWSPI_send_word@data+2,c
 11470  0027EE  6A2C               	clrf	SWSPI_send_word@data+3,c
 11471  0027F0  0E01               	movlw	1
 11472  0027F2  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11473  0027F4  0E02               	movlw	2
 11474  0027F6  ECA6  F017         	call	_SWSPI_send_word
 11475                           
 11476                           ;DacApp.c: 19: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 11477  0027FA  0100               	movlb	0	; () banked
 11478  0027FC  51CC               	movf	DacInit@idx& (0+255),w,b
 11479  0027FE  0D02               	mullw	2
 11480  002800  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11481  002802  24F3               	addwf	prodl,w,c
 11482  002804  6EF6               	movwf	tblptrl,c
 11483  002806  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11484  002808  20F4               	addwfc	prodh,w,c
 11485  00280A  6EF7               	movwf	tblptrh,c
 11486  00280C                     	if	0	;There are less than 3 active tblptr bytes
 11487  00280C                     	endif
 11488  00280C  0009               	tblrd		*+
 11489  00280E  CFF5 F0C8          	movff	tablat,??_DacInit
 11490  002812  0009               	tblrd		*+
 11491  002814  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11492  002818  C0C8  F021         	movff	??_DacInit,StoreIntInEeprom@data
 11493  00281C  C0C9  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 11494  002820  6A23               	clrf	StoreIntInEeprom@data+2,c
 11495  002822  6A24               	clrf	StoreIntInEeprom@data+3,c
 11496  002824  51CC               	movf	DacInit@idx& (0+255),w,b
 11497  002826  0D01               	mullw	1
 11498  002828  0E53               	movlw	low _DAC_ADDRES
 11499  00282A  24F3               	addwf	prodl,w,c
 11500  00282C  6EF6               	movwf	tblptrl,c
 11501  00282E  0E06               	movlw	high _DAC_ADDRES
 11502  002830  20F4               	addwfc	prodh,w,c
 11503  002832  6EF7               	movwf	tblptrh,c
 11504  002834                     	if	0	;There are less than 3 active tblptr bytes
 11505  002834                     	endif
 11506  002834  0008               	tblrd		*
 11507  002836  50F5               	movf	tablat,w,c
 11508  002838  0940               	iorlw	64
 11509  00283A  6E25               	movwf	StoreIntInEeprom@address,c
 11510  00283C  0E00               	movlw	0
 11511  00283E  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11512  002840  0E02               	movlw	2
 11513  002842  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11514  002844  EC9E  F01E         	call	_StoreIntInEeprom	;wreg free
 11515                           
 11516                           ;DacApp.c: 20: }
 11517  002848  D00B               	goto	l412
 11518  00284A                     l411:
 11519  00284A                     l8694:
 11520                           
 11521                           ;DacApp.c: 21: else
 11522                           ;DacApp.c: 22: {
 11523                           ;DacApp.c: 23: SWSPI_send_word(EXT_DAC, dacInput, 1);
 11524  00284A  C0CA  F029         	movff	DacInit@dacInput,SWSPI_send_word@data
 11525  00284E  C0CB  F02A         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 11526  002852  6A2B               	clrf	SWSPI_send_word@data+2,c
 11527  002854  6A2C               	clrf	SWSPI_send_word@data+3,c
 11528  002856  0E01               	movlw	1
 11529  002858  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11530  00285A  0E02               	movlw	2
 11531  00285C  ECA6  F017         	call	_SWSPI_send_word
 11532  002860                     l412:
 11533  002860  0100               	movlb	0	; () banked
 11534  002862  2BCC               	incf	DacInit@idx& (0+255),f,b
 11535  002864  D791               	goto	l8682
 11536  002866                     __end_of_DacInit:
 11537                           	opt stack 0
 11538                           tosu	equ	0xFFF
 11539                           tosh	equ	0xFFE
 11540                           tosl	equ	0xFFD
 11541                           pclath	equ	0xFFA
 11542                           tblptru	equ	0xFF8
 11543                           tblptrh	equ	0xFF7
 11544                           tblptrl	equ	0xFF6
 11545                           tablat	equ	0xFF5
 11546                           prodh	equ	0xFF4
 11547                           prodl	equ	0xFF3
 11548                           intcon	equ	0xFF2
 11549                           intcon2	equ	0xFF1
 11550                           postinc0	equ	0xFEE
 11551                           plusw0	equ	0xFEB
 11552                           wreg	equ	0xFE8
 11553                           indf1	equ	0xFE7
 11554                           postdec1	equ	0xFE5
 11555                           fsr1h	equ	0xFE2
 11556                           fsr1l	equ	0xFE1
 11557                           indf2	equ	0xFDF
 11558                           postinc2	equ	0xFDE
 11559                           postdec2	equ	0xFDD
 11560                           plusw2	equ	0xFDB
 11561                           fsr2h	equ	0xFDA
 11562                           fsr2l	equ	0xFD9
 11563                           status	equ	0xFD8
 11564                           
 11565 ;; *************** function _StoreIntInEeprom *****************
 11566 ;; Defined at:
 11567 ;;		line 122 in file "SystemCommon.c"
 11568 ;; Parameters:    Size  Location     Type
 11569 ;;  data            4   32[COMRAM] unsigned long 
 11570 ;;  address         1   36[COMRAM] unsigned char 
 11571 ;;  numOfByes       2   37[COMRAM] int 
 11572 ;; Auto vars:     Size  Location     Type
 11573 ;;  val             1   39[COMRAM] unsigned char 
 11574 ;;  idx             1   40[COMRAM] unsigned char 
 11575 ;; Return value:  Size  Location     Type
 11576 ;;                  1    wreg      void 
 11577 ;; Registers used:
 11578 ;;		wreg, status,2, status,0, cstack
 11579 ;; Tracked objects:
 11580 ;;		On entry : 0/0
 11581 ;;		On exit  : 0/0
 11582 ;;		Unchanged: 0/0
 11583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11584 ;;      Params:         7       0       0       0       0       0       0
 11585 ;;      Locals:         2       0       0       0       0       0       0
 11586 ;;      Temps:          0       0       0       0       0       0       0
 11587 ;;      Totals:         9       0       0       0       0       0       0
 11588 ;;Total ram usage:        9 bytes
 11589 ;; Hardware stack levels used:    1
 11590 ;; Hardware stack levels required when called:    6
 11591 ;; This function calls:
 11592 ;;		_EepromWrite
 11593 ;;		_make8
 11594 ;; This function is called by:
 11595 ;;		_DacInit
 11596 ;;		_DacSetValue
 11597 ;;		_InitSynth
 11598 ;;		_UpdateSynthFreq
 11599 ;; This function uses a non-reentrant model
 11600 ;;
 11601                           
 11602                           	psect	text63
 11603  003D3C                     __ptext63:
 11604                           	opt stack 0
 11605  003D3C                     _StoreIntInEeprom:
 11606                           	opt stack 21
 11607                           
 11608                           ;SystemCommon.c: 124: for(uint8_t idx = numOfByes; idx; idx--)
 11609                           
 11610                           ; BSR set to: 0
 11611                           ;incstack = 0
 11612  003D3C  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 11613  003D40  D015               	goto	l1441
 11614  003D42                     
 11615                           ;SystemCommon.c: 125: {
 11616                           ;SystemCommon.c: 126: uint8_t val = make8(data, idx - 1);
 11617  003D42  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 11618  003D46  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 11619  003D4A  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 11620  003D4E  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 11621  003D52  0429               	decf	StoreIntInEeprom@idx,w,c
 11622  003D54  6E1C               	movwf	make8@dataLocation,c
 11623  003D56  ECB9  F01B         	call	_make8	;wreg free
 11624  003D5A  6E28               	movwf	StoreIntInEeprom@val,c
 11625                           
 11626                           ;SystemCommon.c: 127: EepromWrite(address - idx, val);
 11627  003D5C  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 11628  003D60  5029               	movf	StoreIntInEeprom@idx,w,c
 11629  003D62  0800               	sublw	0
 11630  003D64  2425               	addwf	StoreIntInEeprom@address,w,c
 11631  003D66  EC5E  F021         	call	_EepromWrite
 11632  003D6A  0629               	decf	StoreIntInEeprom@idx,f,c
 11633  003D6C                     l1441:
 11634  003D6C  5029               	movf	StoreIntInEeprom@idx,w,c
 11635  003D6E  B4D8               	btfsc	status,2,c
 11636  003D70  0012               	return	
 11637  003D72  D7E7               	goto	l1442
 11638  003D74                     __end_of_StoreIntInEeprom:
 11639                           	opt stack 0
 11640                           tosu	equ	0xFFF
 11641                           tosh	equ	0xFFE
 11642                           tosl	equ	0xFFD
 11643                           pclath	equ	0xFFA
 11644                           tblptru	equ	0xFF8
 11645                           tblptrh	equ	0xFF7
 11646                           tblptrl	equ	0xFF6
 11647                           tablat	equ	0xFF5
 11648                           prodh	equ	0xFF4
 11649                           prodl	equ	0xFF3
 11650                           intcon	equ	0xFF2
 11651                           intcon2	equ	0xFF1
 11652                           postinc0	equ	0xFEE
 11653                           plusw0	equ	0xFEB
 11654                           wreg	equ	0xFE8
 11655                           indf1	equ	0xFE7
 11656                           postdec1	equ	0xFE5
 11657                           fsr1h	equ	0xFE2
 11658                           fsr1l	equ	0xFE1
 11659                           indf2	equ	0xFDF
 11660                           postinc2	equ	0xFDE
 11661                           postdec2	equ	0xFDD
 11662                           plusw2	equ	0xFDB
 11663                           fsr2h	equ	0xFDA
 11664                           fsr2l	equ	0xFD9
 11665                           status	equ	0xFD8
 11666                           
 11667 ;; *************** function _EepromWrite *****************
 11668 ;; Defined at:
 11669 ;;		line 180 in file "FlashApp.c"
 11670 ;; Parameters:    Size  Location     Type
 11671 ;;  address         1    wreg     unsigned char 
 11672 ;;  data            1   26[COMRAM] unsigned char 
 11673 ;; Auto vars:     Size  Location     Type
 11674 ;;  address         1   27[COMRAM] unsigned char 
 11675 ;; Return value:  Size  Location     Type
 11676 ;;                  1    wreg      void 
 11677 ;; Registers used:
 11678 ;;		wreg, status,2, cstack
 11679 ;; Tracked objects:
 11680 ;;		On entry : 0/0
 11681 ;;		On exit  : 0/0
 11682 ;;		Unchanged: 0/0
 11683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11684 ;;      Params:         1       0       0       0       0       0       0
 11685 ;;      Locals:         1       0       0       0       0       0       0
 11686 ;;      Temps:          0       0       0       0       0       0       0
 11687 ;;      Totals:         2       0       0       0       0       0       0
 11688 ;;Total ram usage:        2 bytes
 11689 ;; Hardware stack levels used:    1
 11690 ;; Hardware stack levels required when called:    5
 11691 ;; This function calls:
 11692 ;;		_DATAEE_WriteByte
 11693 ;; This function is called by:
 11694 ;;		_StoreIntInEeprom
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           	psect	text64
 11699  0042BC                     __ptext64:
 11700                           	opt stack 0
 11701  0042BC                     _EepromWrite:
 11702                           	opt stack 21
 11703                           
 11704                           ;incstack = 0
 11705                           ;EepromWrite@address stored from wreg
 11706  0042BC  6E1C               	movwf	EepromWrite@address,c
 11707                           
 11708                           ;FlashApp.c: 182: DATAEE_WriteByte(address, data);
 11709  0042BE  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 11710  0042C2  501C               	movf	EepromWrite@address,w,c
 11711  0042C4  EC0D  F01F         	call	_DATAEE_WriteByte
 11712  0042C8  0012               	return		;funcret
 11713  0042CA                     __end_of_EepromWrite:
 11714                           	opt stack 0
 11715                           tosu	equ	0xFFF
 11716                           tosh	equ	0xFFE
 11717                           tosl	equ	0xFFD
 11718                           pclath	equ	0xFFA
 11719                           tblptru	equ	0xFF8
 11720                           tblptrh	equ	0xFF7
 11721                           tblptrl	equ	0xFF6
 11722                           tablat	equ	0xFF5
 11723                           prodh	equ	0xFF4
 11724                           prodl	equ	0xFF3
 11725                           intcon	equ	0xFF2
 11726                           intcon2	equ	0xFF1
 11727                           postinc0	equ	0xFEE
 11728                           plusw0	equ	0xFEB
 11729                           wreg	equ	0xFE8
 11730                           indf1	equ	0xFE7
 11731                           postdec1	equ	0xFE5
 11732                           fsr1h	equ	0xFE2
 11733                           fsr1l	equ	0xFE1
 11734                           indf2	equ	0xFDF
 11735                           postinc2	equ	0xFDE
 11736                           postdec2	equ	0xFDD
 11737                           plusw2	equ	0xFDB
 11738                           fsr2h	equ	0xFDA
 11739                           fsr2l	equ	0xFD9
 11740                           status	equ	0xFD8
 11741                           
 11742 ;; *************** function _DATAEE_WriteByte *****************
 11743 ;; Defined at:
 11744 ;;		line 167 in file "mcc_generated_files/memory.c"
 11745 ;; Parameters:    Size  Location     Type
 11746 ;;  bAdd            1    wreg     unsigned char 
 11747 ;;  bData           1   23[COMRAM] unsigned char 
 11748 ;; Auto vars:     Size  Location     Type
 11749 ;;  bAdd            1   24[COMRAM] unsigned char 
 11750 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 11751 ;; Return value:  Size  Location     Type
 11752 ;;                  1    wreg      void 
 11753 ;; Registers used:
 11754 ;;		wreg, status,2
 11755 ;; Tracked objects:
 11756 ;;		On entry : 0/0
 11757 ;;		On exit  : 0/0
 11758 ;;		Unchanged: 0/0
 11759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11760 ;;      Params:         1       0       0       0       0       0       0
 11761 ;;      Locals:         2       0       0       0       0       0       0
 11762 ;;      Temps:          0       0       0       0       0       0       0
 11763 ;;      Totals:         3       0       0       0       0       0       0
 11764 ;;Total ram usage:        3 bytes
 11765 ;; Hardware stack levels used:    1
 11766 ;; Hardware stack levels required when called:    4
 11767 ;; This function calls:
 11768 ;;		Nothing
 11769 ;; This function is called by:
 11770 ;;		_EepromWrite
 11771 ;; This function uses a non-reentrant model
 11772 ;;
 11773                           
 11774                           	psect	text65
 11775  003E1A                     __ptext65:
 11776                           	opt stack 0
 11777  003E1A                     _DATAEE_WriteByte:
 11778                           	opt stack 21
 11779                           
 11780                           ;incstack = 0
 11781                           ;DATAEE_WriteByte@bAdd stored from wreg
 11782  003E1A  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 11783                           
 11784                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 11785  003E1C  0E00               	movlw	0
 11786  003E1E  BEF2               	btfsc	intcon,7,c	;volatile
 11787  003E20  0E01               	movlw	1
 11788  003E22  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 11789                           
 11790                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 11791  003E24  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 11792                           
 11793                           ;memory.c: 172: EEDATA = bData;
 11794  003E28  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 11795                           
 11796                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 11797  003E2C  9EA6               	bcf	4006,7,c	;volsfr
 11798                           
 11799                           ;memory.c: 174: EECON1bits.CFGS = 0;
 11800  003E2E  9CA6               	bcf	4006,6,c	;volsfr
 11801                           
 11802                           ;memory.c: 175: EECON1bits.WREN = 1;
 11803  003E30  84A6               	bsf	4006,2,c	;volsfr
 11804                           
 11805                           ;memory.c: 176: INTCONbits.GIE = 0;
 11806  003E32  9EF2               	bcf	intcon,7,c	;volatile
 11807                           
 11808                           ;memory.c: 177: EECON2 = 0x55;
 11809  003E34  0E55               	movlw	85
 11810  003E36  6EA7               	movwf	4007,c	;volsfr
 11811                           
 11812                           ;memory.c: 178: EECON2 = 0xAA;
 11813  003E38  0EAA               	movlw	170
 11814  003E3A  6EA7               	movwf	4007,c	;volsfr
 11815                           
 11816                           ;memory.c: 179: EECON1bits.WR = 1;
 11817  003E3C  82A6               	bsf	4006,1,c	;volsfr
 11818  003E3E                     
 11819                           ;memory.c: 182: {
 11820  003E3E  B2A6               	btfsc	4006,1,c	;volsfr
 11821  003E40  D7FE               	goto	l1063
 11822                           
 11823                           ;memory.c: 183: }
 11824                           ;memory.c: 185: EECON1bits.WREN = 0;
 11825  003E42  94A6               	bcf	4006,2,c	;volsfr
 11826                           
 11827                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 11828  003E44  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 11829  003E46  D002               	bra	u7175
 11830  003E48  9EF2               	bcf	intcon,7,c	;volatile
 11831  003E4A  D001               	bra	u7176
 11832  003E4C                     u7175:
 11833  003E4C  8EF2               	bsf	intcon,7,c	;volatile
 11834  003E4E                     u7176:
 11835  003E4E  0012               	return		;funcret
 11836  003E50                     __end_of_DATAEE_WriteByte:
 11837                           	opt stack 0
 11838                           tosu	equ	0xFFF
 11839                           tosh	equ	0xFFE
 11840                           tosl	equ	0xFFD
 11841                           pclath	equ	0xFFA
 11842                           tblptru	equ	0xFF8
 11843                           tblptrh	equ	0xFF7
 11844                           tblptrl	equ	0xFF6
 11845                           tablat	equ	0xFF5
 11846                           prodh	equ	0xFF4
 11847                           prodl	equ	0xFF3
 11848                           intcon	equ	0xFF2
 11849                           intcon2	equ	0xFF1
 11850                           postinc0	equ	0xFEE
 11851                           plusw0	equ	0xFEB
 11852                           wreg	equ	0xFE8
 11853                           indf1	equ	0xFE7
 11854                           postdec1	equ	0xFE5
 11855                           fsr1h	equ	0xFE2
 11856                           fsr1l	equ	0xFE1
 11857                           indf2	equ	0xFDF
 11858                           postinc2	equ	0xFDE
 11859                           postdec2	equ	0xFDD
 11860                           plusw2	equ	0xFDB
 11861                           fsr2h	equ	0xFDA
 11862                           fsr2l	equ	0xFD9
 11863                           status	equ	0xFD8
 11864                           
 11865 ;; *************** function _SWSPI_send_word *****************
 11866 ;; Defined at:
 11867 ;;		line 17 in file "SwSpiApp.c"
 11868 ;; Parameters:    Size  Location     Type
 11869 ;;  phrType         1    wreg     enum E1
 11870 ;;  data            4   40[COMRAM] unsigned long 
 11871 ;;  dataSize        1   44[COMRAM] unsigned char 
 11872 ;; Auto vars:     Size  Location     Type
 11873 ;;  phrType         1   41[BANK0 ] enum E1
 11874 ;;  datac           1   38[BANK0 ] unsigned char 
 11875 ;;  idx             2   39[BANK0 ] int 
 11876 ;; Return value:  Size  Location     Type
 11877 ;;                  1    wreg      void 
 11878 ;; Registers used:
 11879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11880 ;; Tracked objects:
 11881 ;;		On entry : 0/0
 11882 ;;		On exit  : 0/0
 11883 ;;		Unchanged: 0/0
 11884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11885 ;;      Params:         5       0       0       0       0       0       0
 11886 ;;      Locals:         0       4       0       0       0       0       0
 11887 ;;      Temps:          0       0       0       0       0       0       0
 11888 ;;      Totals:         5       4       0       0       0       0       0
 11889 ;;Total ram usage:        9 bytes
 11890 ;; Hardware stack levels used:    1
 11891 ;; Hardware stack levels required when called:    7
 11892 ;; This function calls:
 11893 ;;		_SWSPI_DAC_send_bits
 11894 ;;		_SWSPI_Synth_send_bits
 11895 ;;		_SwSpi_Set_Dac_Sync_Pin
 11896 ;;		_SwSpi_Set_Synth_Le_Pin
 11897 ;;		_make8
 11898 ;; This function is called by:
 11899 ;;		_DacInit
 11900 ;;		_DacSetValue
 11901 ;;		_InitSynth
 11902 ;;		_UpdateSynthFreq
 11903 ;; This function uses a non-reentrant model
 11904 ;;
 11905                           
 11906                           	psect	text66
 11907  002F4C                     __ptext66:
 11908                           	opt stack 0
 11909  002F4C                     _SWSPI_send_word:
 11910                           	opt stack 20
 11911                           
 11912                           ;incstack = 0
 11913                           ;SWSPI_send_word@phrType stored from wreg
 11914  002F4C  0100               	movlb	0	; () banked
 11915  002F4E  6F89               	movwf	SWSPI_send_word@phrType& (0+255),b
 11916                           
 11917                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 11918  002F50  9EF2               	bcf	intcon,7,c	;volatile
 11919                           
 11920                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 11921  002F52  0100               	movlb	0	; () banked
 11922  002F54  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11923  002F56  B4D8               	btfsc	status,2,c
 11924  002F58  D003               	goto	u7800
 11925                           
 11926                           ; BSR set to: 0
 11927  002F5A  0589               	decf	SWSPI_send_word@phrType& (0+255),w,b
 11928  002F5C  A4D8               	btfss	status,2,c
 11929  002F5E  D018               	goto	l639
 11930  002F60                     u7800:
 11931                           
 11932                           ; BSR set to: 0
 11933                           ;SwSpiApp.c: 24: {
 11934                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 11935                           
 11936                           ; BSR set to: 0
 11937  002F60  0E00               	movlw	0
 11938  002F62  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 11939  002F64  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11940  002F66  EC48  F01E         	call	_SwSpi_Set_Synth_Le_Pin
 11941                           
 11942                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 11943  002F6A  C029  F025         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 11944  002F6E  C02A  F026         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 11945  002F72  C02B  F027         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 11946  002F76  C02C  F028         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 11947  002F7A  0100               	movlb	0	; () banked
 11948  002F7C  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11949  002F7E  ECE1  F015         	call	_SWSPI_Synth_send_bits
 11950                           
 11951                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 11952  002F82  0E01               	movlw	1
 11953  002F84  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 11954  002F86  0100               	movlb	0	; () banked
 11955  002F88  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11956  002F8A  EC48  F01E         	call	_SwSpi_Set_Synth_Le_Pin
 11957                           
 11958                           ;SwSpiApp.c: 28: }
 11959  002F8E  D031               	goto	l643
 11960  002F90                     l639:
 11961                           
 11962                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 11963  002F90  0E02               	movlw	2
 11964  002F92  0100               	movlb	0	; () banked
 11965  002F94  1989               	xorwf	SWSPI_send_word@phrType& (0+255),w,b
 11966  002F96  A4D8               	btfss	status,2,c
 11967  002F98  D02C               	goto	l643
 11968                           
 11969                           ; BSR set to: 0
 11970                           ;SwSpiApp.c: 30: {
 11971                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 11972  002F9A  0E00               	movlw	0
 11973  002F9C  ECCE  F020         	call	_SwSpi_Set_Dac_Sync_Pin
 11974                           
 11975                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 11976  002FA0  0E01               	movlw	1
 11977  002FA2  242D               	addwf	SWSPI_send_word@dataSize,w,c
 11978  002FA4  0100               	movlb	0	; () banked
 11979  002FA6  6F87               	movwf	SWSPI_send_word@idx& (0+255),b
 11980  002FA8  6B88               	clrf	(SWSPI_send_word@idx+1)& (0+255),b
 11981  002FAA  0E00               	movlw	0
 11982  002FAC  2388               	addwfc	(SWSPI_send_word@idx+1)& (0+255),f,b
 11983  002FAE                     l7928:
 11984                           
 11985                           ; BSR set to: 0
 11986  002FAE  BF88               	btfsc	(SWSPI_send_word@idx+1)& (0+255),7,b
 11987  002FB0  D01D               	goto	u7830
 11988  002FB2  5188               	movf	(SWSPI_send_word@idx+1)& (0+255),w,b
 11989  002FB4  E103               	bnz	l7932
 11990  002FB6  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 11991  002FB8  A0D8               	btfss	status,0,c
 11992  002FBA  D018               	goto	u7830
 11993  002FBC                     l7932:
 11994                           
 11995                           ; BSR set to: 0
 11996                           ;SwSpiApp.c: 33: {
 11997                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 11998  002FBC  C029  F018         	movff	SWSPI_send_word@data,make8@data
 11999  002FC0  C02A  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 12000  002FC4  C02B  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 12001  002FC8  C02C  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 12002  002FCC  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 12003  002FCE  6E1C               	movwf	make8@dataLocation,c
 12004  002FD0  ECB9  F01B         	call	_make8	;wreg free
 12005  002FD4  0100               	movlb	0	; () banked
 12006  002FD6  6F86               	movwf	SWSPI_send_word@datac& (0+255),b
 12007                           
 12008                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 12009  002FD8  C086  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 12010  002FDC  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12011  002FDE  EC41  F01C         	call	_SWSPI_DAC_send_bits
 12012  002FE2  0100               	movlb	0	; () banked
 12013  002FE4  0787               	decf	SWSPI_send_word@idx& (0+255),f,b
 12014  002FE6  A0D8               	btfss	status,0,c
 12015  002FE8  0788               	decf	(SWSPI_send_word@idx+1)& (0+255),f,b
 12016  002FEA  D7E1               	goto	l7928
 12017  002FEC                     u7830:
 12018                           
 12019                           ; BSR set to: 0
 12020                           ;SwSpiApp.c: 36: }
 12021                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 12022                           
 12023                           ; BSR set to: 0
 12024  002FEC  0E01               	movlw	1
 12025  002FEE  ECCE  F020         	call	_SwSpi_Set_Dac_Sync_Pin
 12026  002FF2                     l643:
 12027                           
 12028                           ;SwSpiApp.c: 38: }
 12029                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 12030  002FF2  8EF2               	bsf	intcon,7,c	;volatile
 12031  002FF4  0012               	return		;funcret
 12032  002FF6                     __end_of_SWSPI_send_word:
 12033                           	opt stack 0
 12034                           tosu	equ	0xFFF
 12035                           tosh	equ	0xFFE
 12036                           tosl	equ	0xFFD
 12037                           pclath	equ	0xFFA
 12038                           tblptru	equ	0xFF8
 12039                           tblptrh	equ	0xFF7
 12040                           tblptrl	equ	0xFF6
 12041                           tablat	equ	0xFF5
 12042                           prodh	equ	0xFF4
 12043                           prodl	equ	0xFF3
 12044                           intcon	equ	0xFF2
 12045                           intcon2	equ	0xFF1
 12046                           postinc0	equ	0xFEE
 12047                           plusw0	equ	0xFEB
 12048                           wreg	equ	0xFE8
 12049                           indf1	equ	0xFE7
 12050                           postdec1	equ	0xFE5
 12051                           fsr1h	equ	0xFE2
 12052                           fsr1l	equ	0xFE1
 12053                           indf2	equ	0xFDF
 12054                           postinc2	equ	0xFDE
 12055                           postdec2	equ	0xFDD
 12056                           plusw2	equ	0xFDB
 12057                           fsr2h	equ	0xFDA
 12058                           fsr2l	equ	0xFD9
 12059                           status	equ	0xFD8
 12060                           
 12061 ;; *************** function _make8 *****************
 12062 ;; Defined at:
 12063 ;;		line 92 in file "SystemCommon.c"
 12064 ;; Parameters:    Size  Location     Type
 12065 ;;  data            4   23[COMRAM] unsigned long 
 12066 ;;  dataLocation    1   27[COMRAM] unsigned char 
 12067 ;; Auto vars:     Size  Location     Type
 12068 ;;		None
 12069 ;; Return value:  Size  Location     Type
 12070 ;;                  1    wreg      unsigned char 
 12071 ;; Registers used:
 12072 ;;		wreg, status,2, status,0
 12073 ;; Tracked objects:
 12074 ;;		On entry : 0/0
 12075 ;;		On exit  : 0/0
 12076 ;;		Unchanged: 0/0
 12077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12078 ;;      Params:         5       0       0       0       0       0       0
 12079 ;;      Locals:         0       0       0       0       0       0       0
 12080 ;;      Temps:          4       0       0       0       0       0       0
 12081 ;;      Totals:         9       0       0       0       0       0       0
 12082 ;;Total ram usage:        9 bytes
 12083 ;; Hardware stack levels used:    1
 12084 ;; Hardware stack levels required when called:    4
 12085 ;; This function calls:
 12086 ;;		Nothing
 12087 ;; This function is called by:
 12088 ;;		_FlashReadCondition
 12089 ;;		_DacReadValue
 12090 ;;		_SynthReadData
 12091 ;;		_SWSPI_send_word
 12092 ;;		_StoreIntInEeprom
 12093 ;; This function uses a non-reentrant model
 12094 ;;
 12095                           
 12096                           	psect	text67
 12097  003772                     __ptext67:
 12098                           	opt stack 0
 12099  003772                     _make8:
 12100                           	opt stack 22
 12101                           
 12102                           ;SystemCommon.c: 94: switch(dataLocation)
 12103                           
 12104                           ;incstack = 0
 12105  003772  D01F               	goto	l1426
 12106  003774                     
 12107                           ;SystemCommon.c: 97: return (data & 0x000000ff);
 12108  003774  5018               	movf	make8@data,w,c
 12109  003776  0012               	return	
 12110  003778                     
 12111                           ;SystemCommon.c: 100: return (data & 0x0000ff00) >> 8;
 12112  003778  5019               	movf	make8@data+1,w,c
 12113  00377A  0012               	return	
 12114  00377C                     
 12115                           ;SystemCommon.c: 103: return (data & 0x00ff0000) >> 16;
 12116  00377C  501A               	movf	make8@data+2,w,c
 12117  00377E  0012               	return	
 12118  003780                     
 12119                           ;SystemCommon.c: 106: return (data & 0xff000000) >> 24;
 12120  003780  0E00               	movlw	0
 12121  003782  1418               	andwf	make8@data,w,c
 12122  003784  6E1D               	movwf	??_make8& (0+255),c
 12123  003786  0E00               	movlw	0
 12124  003788  1419               	andwf	make8@data+1,w,c
 12125  00378A  6E1E               	movwf	(??_make8+1)& (0+255),c
 12126  00378C  0E00               	movlw	0
 12127  00378E  141A               	andwf	make8@data+2,w,c
 12128  003790  6E1F               	movwf	(??_make8+2)& (0+255),c
 12129  003792  0EFF               	movlw	255
 12130  003794  141B               	andwf	make8@data+3,w,c
 12131  003796  6E20               	movwf	(??_make8+3)& (0+255),c
 12132  003798  0E19               	movlw	25
 12133  00379A  D005               	goto	u7540
 12134  00379C                     u7545:
 12135  00379C  90D8               	bcf	status,0,c
 12136  00379E  3220               	rrcf	??_make8+3,f,c
 12137  0037A0  321F               	rrcf	??_make8+2,f,c
 12138  0037A2  321E               	rrcf	??_make8+1,f,c
 12139  0037A4  321D               	rrcf	??_make8,f,c
 12140  0037A6                     u7540:
 12141  0037A6  2EE8               	decfsz	wreg,f,c
 12142  0037A8  D7F9               	goto	u7545
 12143  0037AA  501D               	movf	??_make8,w,c
 12144  0037AC  0012               	return	
 12145  0037AE                     
 12146                           ;SystemCommon.c: 109: return (0);
 12147  0037AE  0E00               	movlw	0
 12148                           
 12149                           ;SystemCommon.c: 110: }
 12150  0037B0  0012               	return	
 12151  0037B2                     l1426:
 12152  0037B2  501C               	movf	make8@dataLocation,w,c
 12153                           
 12154                           ; Switch size 1, requested type "space"
 12155                           ; Number of cases is 4, Range of values is 0 to 3
 12156                           ; switch strategies available:
 12157                           ; Name         Instructions Cycles
 12158                           ; simple_byte           13     7 (average)
 12159                           ;	Chosen strategy is simple_byte
 12160  0037B4  0A00               	xorlw	0	; case 0
 12161  0037B6  B4D8               	btfsc	status,2,c
 12162  0037B8  D7DD               	goto	l1427
 12163  0037BA  0A01               	xorlw	1	; case 1
 12164  0037BC  B4D8               	btfsc	status,2,c
 12165  0037BE  D7DC               	goto	l1429
 12166  0037C0  0A03               	xorlw	3	; case 2
 12167  0037C2  B4D8               	btfsc	status,2,c
 12168  0037C4  D7DB               	goto	l1430
 12169  0037C6  0A01               	xorlw	1	; case 3
 12170  0037C8  B4D8               	btfsc	status,2,c
 12171  0037CA  D7DA               	goto	l1431
 12172  0037CC  D7F0               	goto	l1432
 12173  0037CE                     __end_of_make8:
 12174                           	opt stack 0
 12175                           tosu	equ	0xFFF
 12176                           tosh	equ	0xFFE
 12177                           tosl	equ	0xFFD
 12178                           pclath	equ	0xFFA
 12179                           tblptru	equ	0xFF8
 12180                           tblptrh	equ	0xFF7
 12181                           tblptrl	equ	0xFF6
 12182                           tablat	equ	0xFF5
 12183                           prodh	equ	0xFF4
 12184                           prodl	equ	0xFF3
 12185                           intcon	equ	0xFF2
 12186                           intcon2	equ	0xFF1
 12187                           postinc0	equ	0xFEE
 12188                           plusw0	equ	0xFEB
 12189                           wreg	equ	0xFE8
 12190                           indf1	equ	0xFE7
 12191                           postdec1	equ	0xFE5
 12192                           fsr1h	equ	0xFE2
 12193                           fsr1l	equ	0xFE1
 12194                           indf2	equ	0xFDF
 12195                           postinc2	equ	0xFDE
 12196                           postdec2	equ	0xFDD
 12197                           plusw2	equ	0xFDB
 12198                           fsr2h	equ	0xFDA
 12199                           fsr2l	equ	0xFD9
 12200                           status	equ	0xFD8
 12201                           
 12202 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 12203 ;; Defined at:
 12204 ;;		line 232 in file "SwSpiApp.c"
 12205 ;; Parameters:    Size  Location     Type
 12206 ;;  phrType         1    wreg     enum E1
 12207 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12208 ;; Auto vars:     Size  Location     Type
 12209 ;;  phrType         1   24[COMRAM] enum E1
 12210 ;; Return value:  Size  Location     Type
 12211 ;;                  1    wreg      void 
 12212 ;; Registers used:
 12213 ;;		wreg, status,2, status,0
 12214 ;; Tracked objects:
 12215 ;;		On entry : 0/0
 12216 ;;		On exit  : 0/0
 12217 ;;		Unchanged: 0/0
 12218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12219 ;;      Params:         1       0       0       0       0       0       0
 12220 ;;      Locals:         1       0       0       0       0       0       0
 12221 ;;      Temps:          0       0       0       0       0       0       0
 12222 ;;      Totals:         2       0       0       0       0       0       0
 12223 ;;Total ram usage:        2 bytes
 12224 ;; Hardware stack levels used:    1
 12225 ;; Hardware stack levels required when called:    4
 12226 ;; This function calls:
 12227 ;;		Nothing
 12228 ;; This function is called by:
 12229 ;;		_SWSPI_send_word
 12230 ;; This function uses a non-reentrant model
 12231 ;;
 12232                           
 12233                           	psect	text68
 12234  003C90                     __ptext68:
 12235                           	opt stack 0
 12236  003C90                     _SwSpi_Set_Synth_Le_Pin:
 12237                           	opt stack 22
 12238                           
 12239                           ;incstack = 0
 12240                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 12241  003C90  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 12242                           
 12243                           ;SwSpiApp.c: 234: switch(phrType)
 12244  003C92  D014               	goto	l751
 12245  003C94                     
 12246                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 12247  003C94  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12248  003C96  A4D8               	btfss	status,2,c
 12249  003C98  D002               	goto	l753
 12250                           
 12251                           ;SwSpiApp.c: 238: {
 12252                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 12253  003C9A  848B               	bsf	3979,2,c	;volatile
 12254                           
 12255                           ;SwSpiApp.c: 240: }
 12256  003C9C  0012               	return	
 12257  003C9E                     l753:
 12258                           
 12259                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 12260  003C9E  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12261  003CA0  A4D8               	btfss	status,2,c
 12262  003CA2  0012               	return	
 12263                           
 12264                           ;SwSpiApp.c: 242: {
 12265                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 12266  003CA4  948B               	bcf	3979,2,c	;volatile
 12267                           
 12268                           ;SwSpiApp.c: 244: }
 12269                           ;SwSpiApp.c: 245: break;
 12270  003CA6  0012               	return	
 12271  003CA8                     
 12272                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 12273  003CA8  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12274  003CAA  A4D8               	btfss	status,2,c
 12275  003CAC  D002               	goto	l762
 12276                           
 12277                           ;SwSpiApp.c: 249: {
 12278                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 12279  003CAE  868C               	bsf	3980,3,c	;volatile
 12280                           
 12281                           ;SwSpiApp.c: 251: }
 12282  003CB0  0012               	return	
 12283  003CB2                     l762:
 12284                           
 12285                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 12286  003CB2  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12287  003CB4  A4D8               	btfss	status,2,c
 12288  003CB6  0012               	return	
 12289                           
 12290                           ;SwSpiApp.c: 253: {
 12291                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 12292  003CB8  968C               	bcf	3980,3,c	;volatile
 12293                           
 12294                           ;SwSpiApp.c: 257: }
 12295                           
 12296                           ;SwSpiApp.c: 255: }
 12297                           ;SwSpiApp.c: 256: break;
 12298  003CBA  0012               	return	
 12299  003CBC                     l751:
 12300  003CBC  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 12301                           
 12302                           ; Switch size 1, requested type "space"
 12303                           ; Number of cases is 2, Range of values is 0 to 1
 12304                           ; switch strategies available:
 12305                           ; Name         Instructions Cycles
 12306                           ; simple_byte            7     4 (average)
 12307                           ;	Chosen strategy is simple_byte
 12308  003CBE  0A00               	xorlw	0	; case 0
 12309  003CC0  B4D8               	btfsc	status,2,c
 12310  003CC2  D7E8               	goto	l752
 12311  003CC4  0A01               	xorlw	1	; case 1
 12312  003CC6  A4D8               	btfss	status,2,c
 12313  003CC8  0012               	return	
 12314  003CCA  D7EE               	goto	l761
 12315  003CCC                     __end_of_SwSpi_Set_Synth_Le_Pin:
 12316                           	opt stack 0
 12317                           tosu	equ	0xFFF
 12318                           tosh	equ	0xFFE
 12319                           tosl	equ	0xFFD
 12320                           pclath	equ	0xFFA
 12321                           tblptru	equ	0xFF8
 12322                           tblptrh	equ	0xFF7
 12323                           tblptrl	equ	0xFF6
 12324                           tablat	equ	0xFF5
 12325                           prodh	equ	0xFF4
 12326                           prodl	equ	0xFF3
 12327                           intcon	equ	0xFF2
 12328                           intcon2	equ	0xFF1
 12329                           postinc0	equ	0xFEE
 12330                           plusw0	equ	0xFEB
 12331                           wreg	equ	0xFE8
 12332                           indf1	equ	0xFE7
 12333                           postdec1	equ	0xFE5
 12334                           fsr1h	equ	0xFE2
 12335                           fsr1l	equ	0xFE1
 12336                           indf2	equ	0xFDF
 12337                           postinc2	equ	0xFDE
 12338                           postdec2	equ	0xFDD
 12339                           plusw2	equ	0xFDB
 12340                           fsr2h	equ	0xFDA
 12341                           fsr2l	equ	0xFD9
 12342                           status	equ	0xFD8
 12343                           
 12344 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 12345 ;; Defined at:
 12346 ;;		line 260 in file "SwSpiApp.c"
 12347 ;; Parameters:    Size  Location     Type
 12348 ;;  cPinMode        1    wreg     unsigned char 
 12349 ;; Auto vars:     Size  Location     Type
 12350 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12351 ;; Return value:  Size  Location     Type
 12352 ;;                  1    wreg      void 
 12353 ;; Registers used:
 12354 ;;		wreg, status,2, status,0
 12355 ;; Tracked objects:
 12356 ;;		On entry : 0/0
 12357 ;;		On exit  : 0/0
 12358 ;;		Unchanged: 0/0
 12359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12360 ;;      Params:         0       0       0       0       0       0       0
 12361 ;;      Locals:         1       0       0       0       0       0       0
 12362 ;;      Temps:          0       0       0       0       0       0       0
 12363 ;;      Totals:         1       0       0       0       0       0       0
 12364 ;;Total ram usage:        1 bytes
 12365 ;; Hardware stack levels used:    1
 12366 ;; Hardware stack levels required when called:    4
 12367 ;; This function calls:
 12368 ;;		Nothing
 12369 ;; This function is called by:
 12370 ;;		_SWSPI_send_word
 12371 ;; This function uses a non-reentrant model
 12372 ;;
 12373                           
 12374                           	psect	text69
 12375  00419C                     __ptext69:
 12376                           	opt stack 0
 12377  00419C                     _SwSpi_Set_Dac_Sync_Pin:
 12378                           	opt stack 22
 12379                           
 12380                           ;incstack = 0
 12381                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 12382  00419C  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 12383                           
 12384                           ;SwSpiApp.c: 262: switch(cPinMode)
 12385  00419E  D004               	goto	l772
 12386  0041A0                     
 12387                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 12388  0041A0  9489               	bcf	3977,2,c	;volatile
 12389                           
 12390                           ;SwSpiApp.c: 266: break;
 12391  0041A2  0012               	return	
 12392  0041A4                     
 12393                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 12394  0041A4  8489               	bsf	3977,2,c	;volatile
 12395                           
 12396                           ;SwSpiApp.c: 271: }
 12397                           
 12398                           ;SwSpiApp.c: 270: break;
 12399  0041A6  0012               	return	
 12400  0041A8                     l772:
 12401  0041A8  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 12402                           
 12403                           ; Switch size 1, requested type "space"
 12404                           ; Number of cases is 2, Range of values is 0 to 1
 12405                           ; switch strategies available:
 12406                           ; Name         Instructions Cycles
 12407                           ; simple_byte            7     4 (average)
 12408                           ;	Chosen strategy is simple_byte
 12409  0041AA  0A00               	xorlw	0	; case 0
 12410  0041AC  B4D8               	btfsc	status,2,c
 12411  0041AE  D7F8               	goto	l773
 12412  0041B0  0A01               	xorlw	1	; case 1
 12413  0041B2  A4D8               	btfss	status,2,c
 12414  0041B4  0012               	return	
 12415  0041B6  D7F6               	goto	l777
 12416  0041B8                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 12417                           	opt stack 0
 12418                           tosu	equ	0xFFF
 12419                           tosh	equ	0xFFE
 12420                           tosl	equ	0xFFD
 12421                           pclath	equ	0xFFA
 12422                           tblptru	equ	0xFF8
 12423                           tblptrh	equ	0xFF7
 12424                           tblptrl	equ	0xFF6
 12425                           tablat	equ	0xFF5
 12426                           prodh	equ	0xFF4
 12427                           prodl	equ	0xFF3
 12428                           intcon	equ	0xFF2
 12429                           intcon2	equ	0xFF1
 12430                           postinc0	equ	0xFEE
 12431                           plusw0	equ	0xFEB
 12432                           wreg	equ	0xFE8
 12433                           indf1	equ	0xFE7
 12434                           postdec1	equ	0xFE5
 12435                           fsr1h	equ	0xFE2
 12436                           fsr1l	equ	0xFE1
 12437                           indf2	equ	0xFDF
 12438                           postinc2	equ	0xFDE
 12439                           postdec2	equ	0xFDD
 12440                           plusw2	equ	0xFDB
 12441                           fsr2h	equ	0xFDA
 12442                           fsr2l	equ	0xFD9
 12443                           status	equ	0xFD8
 12444                           
 12445 ;; *************** function _SWSPI_Synth_send_bits *****************
 12446 ;; Defined at:
 12447 ;;		line 67 in file "SwSpiApp.c"
 12448 ;; Parameters:    Size  Location     Type
 12449 ;;  phrType         1    wreg     enum E1
 12450 ;;  data            4   36[COMRAM] unsigned long 
 12451 ;; Auto vars:     Size  Location     Type
 12452 ;;  phrType         1   37[BANK0 ] enum E1
 12453 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 12454 ;;  mask            4   32[BANK0 ] unsigned long 
 12455 ;;  count           1   36[BANK0 ] unsigned char 
 12456 ;; Return value:  Size  Location     Type
 12457 ;;                  1    wreg      void 
 12458 ;; Registers used:
 12459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12460 ;; Tracked objects:
 12461 ;;		On entry : 0/0
 12462 ;;		On exit  : 0/0
 12463 ;;		Unchanged: 0/0
 12464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12465 ;;      Params:         4       0       0       0       0       0       0
 12466 ;;      Locals:         0      38       0       0       0       0       0
 12467 ;;      Temps:          0       0       0       0       0       0       0
 12468 ;;      Totals:         4      38       0       0       0       0       0
 12469 ;;Total ram usage:       42 bytes
 12470 ;; Hardware stack levels used:    1
 12471 ;; Hardware stack levels required when called:    6
 12472 ;; This function calls:
 12473 ;;		_FillArray
 12474 ;;		_Make32bitsArray
 12475 ;;		_SwSpi_Clk_Pin
 12476 ;;		_SwSpi_Data_Pin
 12477 ;; This function is called by:
 12478 ;;		_SWSPI_send_word
 12479 ;; This function uses a non-reentrant model
 12480 ;;
 12481                           
 12482                           	psect	text70
 12483  002BC2                     __ptext70:
 12484                           	opt stack 0
 12485  002BC2                     _SWSPI_Synth_send_bits:
 12486                           	opt stack 20
 12487                           
 12488                           ;incstack = 0
 12489                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 12490  002BC2  0100               	movlb	0	; () banked
 12491  002BC4  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 12492                           
 12493                           ;SwSpiApp.c: 69: uint8_t count;
 12494                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 12495  002BC6  0E01               	movlw	1
 12496  002BC8  0100               	movlb	0	; () banked
 12497  002BCA  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 12498  002BCC  0E00               	movlw	0
 12499  002BCE  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 12500  002BD0  0E00               	movlw	0
 12501  002BD2  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 12502  002BD4  0E00               	movlw	0
 12503  002BD6  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 12504                           
 12505                           ; BSR set to: 0
 12506                           ;SwSpiApp.c: 72: bool bitArray[32];
 12507                           ;SwSpiApp.c: 73: FillArray(bitArray, sizeof(bitArray), 0x0);
 12508  002BD8  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12509  002BDA  6E20               	movwf	FillArray@array,c
 12510  002BDC  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12511  002BDE  6E21               	movwf	FillArray@array+1,c
 12512  002BE0  0E00               	movlw	0
 12513  002BE2  6E23               	movwf	FillArray@size+1,c
 12514  002BE4  0E20               	movlw	32
 12515  002BE6  6E22               	movwf	FillArray@size,c
 12516  002BE8  0E00               	movlw	0
 12517  002BEA  6E24               	movwf	FillArray@value,c
 12518  002BEC  ECDC  F020         	call	_FillArray	;wreg free
 12519                           
 12520                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 12521  002BF0  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12522  002BF2  6E18               	movwf	Make32bitsArray@array,c
 12523  002BF4  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12524  002BF6  6E19               	movwf	Make32bitsArray@array+1,c
 12525  002BF8  C025  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 12526  002BFC  C026  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 12527  002C00  C027  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 12528  002C04  C028  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 12529  002C08  EC15  F01C         	call	_Make32bitsArray	;wreg free
 12530                           
 12531                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 12532  002C0C  0E00               	movlw	0
 12533  002C0E  0100               	movlb	0	; () banked
 12534  002C10  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 12535  002C12                     l7762:
 12536                           
 12537                           ; BSR set to: 0
 12538  002C12  0E1F               	movlw	31
 12539  002C14  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 12540  002C16  D001               	goto	l657
 12541  002C18  D026               	goto	u7610
 12542  002C1A                     l657:
 12543                           
 12544                           ; BSR set to: 0
 12545                           ;SwSpiApp.c: 78: {
 12546                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 12547                           
 12548                           ; BSR set to: 0
 12549  002C1A  0E00               	movlw	0
 12550  002C1C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12551  002C1E  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12552  002C20  EC98  F01C         	call	_SwSpi_Clk_Pin
 12553                           
 12554                           ;SwSpiApp.c: 82: if (bitArray[count])
 12555  002C24  0100               	movlb	0	; () banked
 12556  002C26  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 12557  002C28  0D01               	mullw	1
 12558  002C2A  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12559  002C2C  24F3               	addwf	prodl,w,c
 12560  002C2E  6ED9               	movwf	fsr2l,c
 12561  002C30  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12562  002C32  20F4               	addwfc	prodh,w,c
 12563  002C34  6EDA               	movwf	fsr2h,c
 12564  002C36  50DF               	movf	indf2,w,c
 12565  002C38  B4D8               	btfsc	status,2,c
 12566  002C3A  D006               	goto	l659
 12567                           
 12568                           ; BSR set to: 0
 12569                           ;SwSpiApp.c: 83: {
 12570                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 12571  002C3C  0E01               	movlw	1
 12572  002C3E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12573  002C40  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12574  002C42  EC6D  F01C         	call	_SwSpi_Data_Pin
 12575                           
 12576                           ;SwSpiApp.c: 85: }
 12577  002C46  D006               	goto	l660
 12578  002C48                     l659:
 12579                           
 12580                           ;SwSpiApp.c: 86: else
 12581                           ;SwSpiApp.c: 87: {
 12582                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 12583  002C48  0E00               	movlw	0
 12584  002C4A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12585  002C4C  0100               	movlb	0	; () banked
 12586  002C4E  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12587  002C50  EC6D  F01C         	call	_SwSpi_Data_Pin
 12588  002C54                     l660:
 12589                           
 12590                           ;SwSpiApp.c: 89: }
 12591                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 12592  002C54  0E01               	movlw	1
 12593  002C56  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12594  002C58  0100               	movlb	0	; () banked
 12595  002C5A  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12596  002C5C  EC98  F01C         	call	_SwSpi_Clk_Pin
 12597  002C60  0100               	movlb	0	; () banked
 12598  002C62  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 12599  002C64  D7D6               	goto	l7762
 12600  002C66                     u7610:
 12601                           
 12602                           ; BSR set to: 0
 12603                           ;SwSpiApp.c: 92: }
 12604                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 12605                           
 12606                           ; BSR set to: 0
 12607  002C66  0E21               	movlw	33
 12608  002C68                     u9267:
 12609  002C68  2EE8               	decfsz	wreg,f,c
 12610  002C6A  D7FE               	bra	u9267
 12611  002C6C  F000               	nop	
 12612                           
 12613                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 12614  002C6E  0E00               	movlw	0
 12615  002C70  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12616  002C72  0100               	movlb	0	; () banked
 12617  002C74  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12618  002C76  EC6D  F01C         	call	_SwSpi_Data_Pin
 12619                           
 12620                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 12621  002C7A  0E00               	movlw	0
 12622  002C7C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12623  002C7E  0100               	movlb	0	; () banked
 12624  002C80  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12625  002C82  EC98  F01C         	call	_SwSpi_Clk_Pin
 12626  002C86  0012               	return		;funcret
 12627  002C88                     __end_of_SWSPI_Synth_send_bits:
 12628                           	opt stack 0
 12629                           tosu	equ	0xFFF
 12630                           tosh	equ	0xFFE
 12631                           tosl	equ	0xFFD
 12632                           pclath	equ	0xFFA
 12633                           tblptru	equ	0xFF8
 12634                           tblptrh	equ	0xFF7
 12635                           tblptrl	equ	0xFF6
 12636                           tablat	equ	0xFF5
 12637                           prodh	equ	0xFF4
 12638                           prodl	equ	0xFF3
 12639                           intcon	equ	0xFF2
 12640                           intcon2	equ	0xFF1
 12641                           postinc0	equ	0xFEE
 12642                           plusw0	equ	0xFEB
 12643                           wreg	equ	0xFE8
 12644                           indf1	equ	0xFE7
 12645                           postdec1	equ	0xFE5
 12646                           fsr1h	equ	0xFE2
 12647                           fsr1l	equ	0xFE1
 12648                           indf2	equ	0xFDF
 12649                           postinc2	equ	0xFDE
 12650                           postdec2	equ	0xFDD
 12651                           plusw2	equ	0xFDB
 12652                           fsr2h	equ	0xFDA
 12653                           fsr2l	equ	0xFD9
 12654                           status	equ	0xFD8
 12655                           
 12656 ;; *************** function _Make32bitsArray *****************
 12657 ;; Defined at:
 12658 ;;		line 113 in file "SystemCommon.c"
 12659 ;; Parameters:    Size  Location     Type
 12660 ;;  array           2   23[COMRAM] PTR unsigned char 
 12661 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 12662 ;;  data            4   25[COMRAM] unsigned long 
 12663 ;; Auto vars:     Size  Location     Type
 12664 ;;  idx             2   31[COMRAM] int 
 12665 ;; Return value:  Size  Location     Type
 12666 ;;                  1    wreg      void 
 12667 ;; Registers used:
 12668 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12669 ;; Tracked objects:
 12670 ;;		On entry : 0/0
 12671 ;;		On exit  : 0/0
 12672 ;;		Unchanged: 0/0
 12673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12674 ;;      Params:         6       0       0       0       0       0       0
 12675 ;;      Locals:         2       0       0       0       0       0       0
 12676 ;;      Temps:          2       0       0       0       0       0       0
 12677 ;;      Totals:        10       0       0       0       0       0       0
 12678 ;;Total ram usage:       10 bytes
 12679 ;; Hardware stack levels used:    1
 12680 ;; Hardware stack levels required when called:    4
 12681 ;; This function calls:
 12682 ;;		Nothing
 12683 ;; This function is called by:
 12684 ;;		_SWSPI_Synth_send_bits
 12685 ;; This function uses a non-reentrant model
 12686 ;;
 12687                           
 12688                           	psect	text71
 12689  00382A                     __ptext71:
 12690                           	opt stack 0
 12691  00382A                     _Make32bitsArray:
 12692                           	opt stack 21
 12693                           
 12694                           ;SystemCommon.c: 115: for(int idx = 0; idx <= 32; idx++)
 12695                           
 12696                           ;incstack = 0
 12697  00382A  0E00               	movlw	0
 12698  00382C  6E21               	movwf	Make32bitsArray@idx+1,c
 12699  00382E  0E00               	movlw	0
 12700  003830  6E20               	movwf	Make32bitsArray@idx,c
 12701  003832                     l7550:
 12702  003832  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 12703  003834  D006               	goto	l1436
 12704  003836  5021               	movf	Make32bitsArray@idx+1,w,c
 12705  003838  E123               	bnz	l1438
 12706  00383A  0E21               	movlw	33
 12707  00383C  5C20               	subwf	Make32bitsArray@idx,w,c
 12708  00383E  B0D8               	btfsc	status,0,c
 12709  003840  0012               	return	
 12710  003842                     l1436:
 12711                           
 12712                           ;SystemCommon.c: 116: {
 12713                           ;SystemCommon.c: 117: array[32 - idx - 1] = data % 2;
 12714  003842  0E01               	movlw	1
 12715  003844  2420               	addwf	Make32bitsArray@idx,w,c
 12716  003846  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 12717  003848  0E00               	movlw	0
 12718  00384A  2021               	addwfc	Make32bitsArray@idx+1,w,c
 12719  00384C  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 12720  00384E  1E1E               	comf	??_Make32bitsArray,f,c
 12721  003850  1E1F               	comf	??_Make32bitsArray+1,f,c
 12722  003852  4A1E               	infsnz	??_Make32bitsArray,f,c
 12723  003854  2A1F               	incf	??_Make32bitsArray+1,f,c
 12724  003856  0E20               	movlw	32
 12725  003858  261E               	addwf	??_Make32bitsArray,f,c
 12726  00385A  0E00               	movlw	0
 12727  00385C  221F               	addwfc	??_Make32bitsArray+1,f,c
 12728  00385E  501E               	movf	??_Make32bitsArray,w,c
 12729  003860  2418               	addwf	Make32bitsArray@array,w,c
 12730  003862  6ED9               	movwf	fsr2l,c
 12731  003864  501F               	movf	??_Make32bitsArray+1,w,c
 12732  003866  2019               	addwfc	Make32bitsArray@array+1,w,c
 12733  003868  6EDA               	movwf	fsr2h,c
 12734  00386A  501A               	movf	Make32bitsArray@data,w,c
 12735  00386C  0B01               	andlw	1
 12736  00386E  6EDF               	movwf	indf2,c
 12737                           
 12738                           ;SystemCommon.c: 118: data /= 2;
 12739  003870  90D8               	bcf	status,0,c
 12740  003872  321D               	rrcf	Make32bitsArray@data+3,f,c
 12741  003874  321C               	rrcf	Make32bitsArray@data+2,f,c
 12742  003876  321B               	rrcf	Make32bitsArray@data+1,f,c
 12743  003878  321A               	rrcf	Make32bitsArray@data,f,c
 12744  00387A  4A20               	infsnz	Make32bitsArray@idx,f,c
 12745  00387C  2A21               	incf	Make32bitsArray@idx+1,f,c
 12746  00387E  D7D9               	goto	l7550
 12747  003880                     l1438:
 12748  003880  0012               	return		;funcret
 12749  003882                     __end_of_Make32bitsArray:
 12750                           	opt stack 0
 12751                           tosu	equ	0xFFF
 12752                           tosh	equ	0xFFE
 12753                           tosl	equ	0xFFD
 12754                           pclath	equ	0xFFA
 12755                           tblptru	equ	0xFF8
 12756                           tblptrh	equ	0xFF7
 12757                           tblptrl	equ	0xFF6
 12758                           tablat	equ	0xFF5
 12759                           prodh	equ	0xFF4
 12760                           prodl	equ	0xFF3
 12761                           intcon	equ	0xFF2
 12762                           intcon2	equ	0xFF1
 12763                           postinc0	equ	0xFEE
 12764                           plusw0	equ	0xFEB
 12765                           wreg	equ	0xFE8
 12766                           indf1	equ	0xFE7
 12767                           postdec1	equ	0xFE5
 12768                           fsr1h	equ	0xFE2
 12769                           fsr1l	equ	0xFE1
 12770                           indf2	equ	0xFDF
 12771                           postinc2	equ	0xFDE
 12772                           postdec2	equ	0xFDD
 12773                           plusw2	equ	0xFDB
 12774                           fsr2h	equ	0xFDA
 12775                           fsr2l	equ	0xFD9
 12776                           status	equ	0xFD8
 12777                           
 12778 ;; *************** function _FillArray *****************
 12779 ;; Defined at:
 12780 ;;		line 29 in file "SystemCommon.c"
 12781 ;; Parameters:    Size  Location     Type
 12782 ;;  array           2   31[COMRAM] PTR unsigned char 
 12783 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), synthLdTxArray(12), synthLdRxArray(12), 
 12784 ;;  size            2   33[COMRAM] int 
 12785 ;;  value           1   35[COMRAM] unsigned char 
 12786 ;; Auto vars:     Size  Location     Type
 12787 ;;		None
 12788 ;; Return value:  Size  Location     Type
 12789 ;;                  1    wreg      void 
 12790 ;; Registers used:
 12791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12792 ;; Tracked objects:
 12793 ;;		On entry : 0/0
 12794 ;;		On exit  : 0/0
 12795 ;;		Unchanged: 0/0
 12796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12797 ;;      Params:         5       0       0       0       0       0       0
 12798 ;;      Locals:         0       0       0       0       0       0       0
 12799 ;;      Temps:          0       0       0       0       0       0       0
 12800 ;;      Totals:         5       0       0       0       0       0       0
 12801 ;;Total ram usage:        5 bytes
 12802 ;; Hardware stack levels used:    1
 12803 ;; Hardware stack levels required when called:    5
 12804 ;; This function calls:
 12805 ;;		_memset
 12806 ;; This function is called by:
 12807 ;;		_PLLInitialize
 12808 ;;		_SWSPI_Synth_send_bits
 12809 ;; This function uses a non-reentrant model
 12810 ;;
 12811                           
 12812                           	psect	text72
 12813  0041B8                     __ptext72:
 12814                           	opt stack 0
 12815  0041B8                     _FillArray:
 12816                           	opt stack 20
 12817                           
 12818                           ;SystemCommon.c: 31: memset(array, value, size);
 12819                           
 12820                           ;incstack = 0
 12821  0041B8  C020  F018         	movff	FillArray@array,memset@p1
 12822  0041BC  C021  F019         	movff	FillArray@array+1,memset@p1+1
 12823  0041C0  C024  F01A         	movff	FillArray@value,memset@c
 12824  0041C4  6A1B               	clrf	memset@c+1,c
 12825  0041C6  C022  F01C         	movff	FillArray@size,memset@n
 12826  0041CA  C023  F01D         	movff	FillArray@size+1,memset@n+1
 12827  0041CE  ECD5  F01F         	call	_memset	;wreg free
 12828  0041D2  0012               	return		;funcret
 12829  0041D4                     __end_of_FillArray:
 12830                           	opt stack 0
 12831                           tosu	equ	0xFFF
 12832                           tosh	equ	0xFFE
 12833                           tosl	equ	0xFFD
 12834                           pclath	equ	0xFFA
 12835                           tblptru	equ	0xFF8
 12836                           tblptrh	equ	0xFF7
 12837                           tblptrl	equ	0xFF6
 12838                           tablat	equ	0xFF5
 12839                           prodh	equ	0xFF4
 12840                           prodl	equ	0xFF3
 12841                           intcon	equ	0xFF2
 12842                           intcon2	equ	0xFF1
 12843                           postinc0	equ	0xFEE
 12844                           plusw0	equ	0xFEB
 12845                           wreg	equ	0xFE8
 12846                           indf1	equ	0xFE7
 12847                           postdec1	equ	0xFE5
 12848                           fsr1h	equ	0xFE2
 12849                           fsr1l	equ	0xFE1
 12850                           indf2	equ	0xFDF
 12851                           postinc2	equ	0xFDE
 12852                           postdec2	equ	0xFDD
 12853                           plusw2	equ	0xFDB
 12854                           fsr2h	equ	0xFDA
 12855                           fsr2l	equ	0xFD9
 12856                           status	equ	0xFD8
 12857                           
 12858 ;; *************** function _memset *****************
 12859 ;; Defined at:
 12860 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 12861 ;; Parameters:    Size  Location     Type
 12862 ;;  p1              2   23[COMRAM] PTR void 
 12863 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(29), 
 12864 ;;		 -> SynthReadData@eepromDataArray(20), DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
 12865 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 12866 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 12867 ;;  c               2   25[COMRAM] int 
 12868 ;;  n               2   27[COMRAM] unsigned int 
 12869 ;; Auto vars:     Size  Location     Type
 12870 ;;  p               2   29[COMRAM] PTR unsigned char 
 12871 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(29), 
 12872 ;;		 -> SynthReadData@eepromDataArray(20), DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
 12873 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 12874 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 12875 ;; Return value:  Size  Location     Type
 12876 ;;                  2   23[COMRAM] PTR void 
 12877 ;; Registers used:
 12878 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12879 ;; Tracked objects:
 12880 ;;		On entry : 0/0
 12881 ;;		On exit  : 0/0
 12882 ;;		Unchanged: 0/0
 12883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12884 ;;      Params:         6       0       0       0       0       0       0
 12885 ;;      Locals:         2       0       0       0       0       0       0
 12886 ;;      Temps:          0       0       0       0       0       0       0
 12887 ;;      Totals:         8       0       0       0       0       0       0
 12888 ;;Total ram usage:        8 bytes
 12889 ;; Hardware stack levels used:    1
 12890 ;; Hardware stack levels required when called:    4
 12891 ;; This function calls:
 12892 ;;		Nothing
 12893 ;; This function is called by:
 12894 ;;		_ZeroArray
 12895 ;;		_FillArray
 12896 ;; This function uses a non-reentrant model
 12897 ;;
 12898                           
 12899                           	psect	text73
 12900  003FAA                     __ptext73:
 12901                           	opt stack 0
 12902  003FAA                     _memset:
 12903                           	opt stack 24
 12904                           
 12905                           ;incstack = 0
 12906  003FAA  C018  F01E         	movff	memset@p1,memset@p
 12907  003FAE  C019  F01F         	movff	memset@p1+1,memset@p+1
 12908  003FB2  D008               	goto	l2031
 12909  003FB4                     l7332:
 12910  003FB4  C01E  FFD9         	movff	memset@p,fsr2l
 12911  003FB8  C01F  FFDA         	movff	memset@p+1,fsr2h
 12912  003FBC  C01A  FFDF         	movff	memset@c,indf2
 12913  003FC0  4A1E               	infsnz	memset@p,f,c
 12914  003FC2  2A1F               	incf	memset@p+1,f,c
 12915  003FC4                     l2031:
 12916  003FC4  061C               	decf	memset@n,f,c
 12917  003FC6  A0D8               	btfss	status,0,c
 12918  003FC8  061D               	decf	memset@n+1,f,c
 12919  003FCA  281C               	incf	memset@n,w,c
 12920  003FCC  E1F3               	bnz	l7332
 12921  003FCE  281D               	incf	memset@n+1,w,c
 12922  003FD0  B4D8               	btfsc	status,2,c
 12923  003FD2  0012               	return	
 12924  003FD4  D7EF               	goto	l2032
 12925  003FD6                     __end_of_memset:
 12926                           	opt stack 0
 12927                           tosu	equ	0xFFF
 12928                           tosh	equ	0xFFE
 12929                           tosl	equ	0xFFD
 12930                           pclath	equ	0xFFA
 12931                           tblptru	equ	0xFF8
 12932                           tblptrh	equ	0xFF7
 12933                           tblptrl	equ	0xFF6
 12934                           tablat	equ	0xFF5
 12935                           prodh	equ	0xFF4
 12936                           prodl	equ	0xFF3
 12937                           intcon	equ	0xFF2
 12938                           intcon2	equ	0xFF1
 12939                           postinc0	equ	0xFEE
 12940                           plusw0	equ	0xFEB
 12941                           wreg	equ	0xFE8
 12942                           indf1	equ	0xFE7
 12943                           postdec1	equ	0xFE5
 12944                           fsr1h	equ	0xFE2
 12945                           fsr1l	equ	0xFE1
 12946                           indf2	equ	0xFDF
 12947                           postinc2	equ	0xFDE
 12948                           postdec2	equ	0xFDD
 12949                           plusw2	equ	0xFDB
 12950                           fsr2h	equ	0xFDA
 12951                           fsr2l	equ	0xFD9
 12952                           status	equ	0xFD8
 12953                           
 12954 ;; *************** function _SWSPI_DAC_send_bits *****************
 12955 ;; Defined at:
 12956 ;;		line 43 in file "SwSpiApp.c"
 12957 ;; Parameters:    Size  Location     Type
 12958 ;;  phrType         1    wreg     enum E1
 12959 ;;  data            1   25[COMRAM] unsigned char 
 12960 ;; Auto vars:     Size  Location     Type
 12961 ;;  phrType         1   27[COMRAM] enum E1
 12962 ;;  count           1   26[COMRAM] unsigned char 
 12963 ;; Return value:  Size  Location     Type
 12964 ;;                  1    wreg      void 
 12965 ;; Registers used:
 12966 ;;		wreg, status,2, status,0, cstack
 12967 ;; Tracked objects:
 12968 ;;		On entry : 0/0
 12969 ;;		On exit  : 0/0
 12970 ;;		Unchanged: 0/0
 12971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12972 ;;      Params:         1       0       0       0       0       0       0
 12973 ;;      Locals:         2       0       0       0       0       0       0
 12974 ;;      Temps:          0       0       0       0       0       0       0
 12975 ;;      Totals:         3       0       0       0       0       0       0
 12976 ;;Total ram usage:        3 bytes
 12977 ;; Hardware stack levels used:    1
 12978 ;; Hardware stack levels required when called:    5
 12979 ;; This function calls:
 12980 ;;		_SwSpi_Clk_Pin
 12981 ;;		_SwSpi_Data_Pin
 12982 ;; This function is called by:
 12983 ;;		_SWSPI_send_word
 12984 ;; This function uses a non-reentrant model
 12985 ;;
 12986                           
 12987                           	psect	text74
 12988  003882                     __ptext74:
 12989                           	opt stack 0
 12990  003882                     _SWSPI_DAC_send_bits:
 12991                           	opt stack 21
 12992                           
 12993                           ;incstack = 0
 12994                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 12995  003882  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 12996                           
 12997                           ;SwSpiApp.c: 45: uint8_t count;
 12998                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 12999  003884  0E08               	movlw	8
 13000  003886  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 13001  003888  D01A               	goto	l649
 13002  00388A                     
 13003                           ;SwSpiApp.c: 47: {
 13004                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 13005  00388A  0E01               	movlw	1
 13006  00388C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13007  00388E  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13008  003890  EC98  F01C         	call	_SwSpi_Clk_Pin
 13009                           
 13010                           ;SwSpiApp.c: 50: if (data & 0X80)
 13011  003894  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 13012  003896  D006               	goto	l651
 13013                           
 13014                           ;SwSpiApp.c: 51: {
 13015                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 13016  003898  0E01               	movlw	1
 13017  00389A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13018  00389C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13019  00389E  EC6D  F01C         	call	_SwSpi_Data_Pin
 13020                           
 13021                           ;SwSpiApp.c: 54: }
 13022  0038A2  D005               	goto	l652
 13023  0038A4                     l651:
 13024                           
 13025                           ;SwSpiApp.c: 55: else
 13026                           ;SwSpiApp.c: 56: {
 13027                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 13028  0038A4  0E00               	movlw	0
 13029  0038A6  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13030  0038A8  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13031  0038AA  EC6D  F01C         	call	_SwSpi_Data_Pin
 13032  0038AE                     l652:
 13033                           
 13034                           ;SwSpiApp.c: 58: }
 13035                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 13036  0038AE  0E00               	movlw	0
 13037  0038B0  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13038  0038B2  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13039  0038B4  EC98  F01C         	call	_SwSpi_Clk_Pin
 13040  0038B8  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 13041  0038BA  90D8               	bcf	status,0,c
 13042  0038BC  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 13043  0038BE                     l649:
 13044  0038BE  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 13045  0038C0  A4D8               	btfss	status,2,c
 13046  0038C2  D7E3               	goto	l650
 13047                           
 13048                           ;SwSpiApp.c: 61: }
 13049                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 13050  0038C4  0E00               	movlw	0
 13051  0038C6  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13052  0038C8  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13053  0038CA  EC6D  F01C         	call	_SwSpi_Data_Pin
 13054                           
 13055                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 13056  0038CE  0E00               	movlw	0
 13057  0038D0  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13058  0038D2  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13059  0038D4  EC98  F01C         	call	_SwSpi_Clk_Pin
 13060  0038D8  0012               	return		;funcret
 13061  0038DA                     __end_of_SWSPI_DAC_send_bits:
 13062                           	opt stack 0
 13063                           tosu	equ	0xFFF
 13064                           tosh	equ	0xFFE
 13065                           tosl	equ	0xFFD
 13066                           pclath	equ	0xFFA
 13067                           tblptru	equ	0xFF8
 13068                           tblptrh	equ	0xFF7
 13069                           tblptrl	equ	0xFF6
 13070                           tablat	equ	0xFF5
 13071                           prodh	equ	0xFF4
 13072                           prodl	equ	0xFF3
 13073                           intcon	equ	0xFF2
 13074                           intcon2	equ	0xFF1
 13075                           postinc0	equ	0xFEE
 13076                           plusw0	equ	0xFEB
 13077                           wreg	equ	0xFE8
 13078                           indf1	equ	0xFE7
 13079                           postdec1	equ	0xFE5
 13080                           fsr1h	equ	0xFE2
 13081                           fsr1l	equ	0xFE1
 13082                           indf2	equ	0xFDF
 13083                           postinc2	equ	0xFDE
 13084                           postdec2	equ	0xFDD
 13085                           plusw2	equ	0xFDB
 13086                           fsr2h	equ	0xFDA
 13087                           fsr2l	equ	0xFD9
 13088                           status	equ	0xFD8
 13089                           
 13090 ;; *************** function _SwSpi_Data_Pin *****************
 13091 ;; Defined at:
 13092 ;;		line 103 in file "SwSpiApp.c"
 13093 ;; Parameters:    Size  Location     Type
 13094 ;;  phrType         1    wreg     enum E1
 13095 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13096 ;; Auto vars:     Size  Location     Type
 13097 ;;  phrType         1   24[COMRAM] enum E1
 13098 ;; Return value:  Size  Location     Type
 13099 ;;                  1    wreg      void 
 13100 ;; Registers used:
 13101 ;;		wreg, status,2, status,0
 13102 ;; Tracked objects:
 13103 ;;		On entry : 0/0
 13104 ;;		On exit  : 0/0
 13105 ;;		Unchanged: 0/0
 13106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13107 ;;      Params:         1       0       0       0       0       0       0
 13108 ;;      Locals:         1       0       0       0       0       0       0
 13109 ;;      Temps:          0       0       0       0       0       0       0
 13110 ;;      Totals:         2       0       0       0       0       0       0
 13111 ;;Total ram usage:        2 bytes
 13112 ;; Hardware stack levels used:    1
 13113 ;; Hardware stack levels required when called:    4
 13114 ;; This function calls:
 13115 ;;		Nothing
 13116 ;; This function is called by:
 13117 ;;		_SWSPI_DAC_send_bits
 13118 ;;		_SWSPI_Synth_send_bits
 13119 ;; This function uses a non-reentrant model
 13120 ;;
 13121                           
 13122                           	psect	text75
 13123  0038DA                     __ptext75:
 13124                           	opt stack 0
 13125  0038DA                     _SwSpi_Data_Pin:
 13126                           	opt stack 21
 13127                           
 13128                           ;incstack = 0
 13129                           ;SwSpi_Data_Pin@phrType stored from wreg
 13130  0038DA  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 13131                           
 13132                           ;SwSpiApp.c: 105: switch(phrType)
 13133  0038DC  D01E               	goto	l664
 13134  0038DE                     
 13135                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 13136  0038DE  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13137  0038E0  A4D8               	btfss	status,2,c
 13138  0038E2  D002               	goto	l666
 13139                           
 13140                           ;SwSpiApp.c: 109: {
 13141                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 13142  0038E4  808C               	bsf	3980,0,c	;volatile
 13143                           
 13144                           ;SwSpiApp.c: 111: }
 13145  0038E6  0012               	return	
 13146  0038E8                     l666:
 13147                           
 13148                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 13149  0038E8  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13150  0038EA  A4D8               	btfss	status,2,c
 13151  0038EC  0012               	return	
 13152                           
 13153                           ;SwSpiApp.c: 113: {
 13154                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 13155  0038EE  908C               	bcf	3980,0,c	;volatile
 13156                           
 13157                           ;SwSpiApp.c: 115: }
 13158                           ;SwSpiApp.c: 116: break;
 13159  0038F0  0012               	return	
 13160  0038F2                     
 13161                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 13162  0038F2  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13163  0038F4  A4D8               	btfss	status,2,c
 13164  0038F6  D002               	goto	l675
 13165                           
 13166                           ;SwSpiApp.c: 120: {
 13167                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 13168  0038F8  8A8B               	bsf	3979,5,c	;volatile
 13169                           
 13170                           ;SwSpiApp.c: 122: }
 13171  0038FA  0012               	return	
 13172  0038FC                     l675:
 13173                           
 13174                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 13175  0038FC  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13176  0038FE  A4D8               	btfss	status,2,c
 13177  003900  0012               	return	
 13178                           
 13179                           ;SwSpiApp.c: 124: {
 13180                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 13181  003902  9A8B               	bcf	3979,5,c	;volatile
 13182                           
 13183                           ;SwSpiApp.c: 126: }
 13184                           ;SwSpiApp.c: 127: break;
 13185  003904  0012               	return	
 13186  003906                     
 13187                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 13188  003906  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13189  003908  A4D8               	btfss	status,2,c
 13190  00390A  D002               	goto	l683
 13191                           
 13192                           ;SwSpiApp.c: 131: {
 13193                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 13194  00390C  8889               	bsf	3977,4,c	;volatile
 13195                           
 13196                           ;SwSpiApp.c: 133: }
 13197  00390E  0012               	return	
 13198  003910                     l683:
 13199                           
 13200                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 13201  003910  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13202  003912  A4D8               	btfss	status,2,c
 13203  003914  0012               	return	
 13204                           
 13205                           ;SwSpiApp.c: 135: {
 13206                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 13207  003916  9889               	bcf	3977,4,c	;volatile
 13208                           
 13209                           ;SwSpiApp.c: 139: }
 13210                           
 13211                           ;SwSpiApp.c: 137: }
 13212                           ;SwSpiApp.c: 138: break;
 13213  003918  0012               	return	
 13214  00391A                     l664:
 13215  00391A  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 13216                           
 13217                           ; Switch size 1, requested type "space"
 13218                           ; Number of cases is 3, Range of values is 0 to 2
 13219                           ; switch strategies available:
 13220                           ; Name         Instructions Cycles
 13221                           ; simple_byte           10     6 (average)
 13222                           ;	Chosen strategy is simple_byte
 13223  00391C  0A00               	xorlw	0	; case 0
 13224  00391E  B4D8               	btfsc	status,2,c
 13225  003920  D7DE               	goto	l665
 13226  003922  0A01               	xorlw	1	; case 1
 13227  003924  B4D8               	btfsc	status,2,c
 13228  003926  D7E5               	goto	l674
 13229  003928  0A03               	xorlw	3	; case 2
 13230  00392A  A4D8               	btfss	status,2,c
 13231  00392C  0012               	return	
 13232  00392E  D7EB               	goto	l682
 13233  003930                     __end_of_SwSpi_Data_Pin:
 13234                           	opt stack 0
 13235                           tosu	equ	0xFFF
 13236                           tosh	equ	0xFFE
 13237                           tosl	equ	0xFFD
 13238                           pclath	equ	0xFFA
 13239                           tblptru	equ	0xFF8
 13240                           tblptrh	equ	0xFF7
 13241                           tblptrl	equ	0xFF6
 13242                           tablat	equ	0xFF5
 13243                           prodh	equ	0xFF4
 13244                           prodl	equ	0xFF3
 13245                           intcon	equ	0xFF2
 13246                           intcon2	equ	0xFF1
 13247                           postinc0	equ	0xFEE
 13248                           plusw0	equ	0xFEB
 13249                           wreg	equ	0xFE8
 13250                           indf1	equ	0xFE7
 13251                           postdec1	equ	0xFE5
 13252                           fsr1h	equ	0xFE2
 13253                           fsr1l	equ	0xFE1
 13254                           indf2	equ	0xFDF
 13255                           postinc2	equ	0xFDE
 13256                           postdec2	equ	0xFDD
 13257                           plusw2	equ	0xFDB
 13258                           fsr2h	equ	0xFDA
 13259                           fsr2l	equ	0xFD9
 13260                           status	equ	0xFD8
 13261                           
 13262 ;; *************** function _SwSpi_Clk_Pin *****************
 13263 ;; Defined at:
 13264 ;;		line 142 in file "SwSpiApp.c"
 13265 ;; Parameters:    Size  Location     Type
 13266 ;;  phrType         1    wreg     enum E1
 13267 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13268 ;; Auto vars:     Size  Location     Type
 13269 ;;  phrType         1   24[COMRAM] enum E1
 13270 ;; Return value:  Size  Location     Type
 13271 ;;                  1    wreg      void 
 13272 ;; Registers used:
 13273 ;;		wreg, status,2, status,0
 13274 ;; Tracked objects:
 13275 ;;		On entry : 0/0
 13276 ;;		On exit  : 0/0
 13277 ;;		Unchanged: 0/0
 13278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13279 ;;      Params:         1       0       0       0       0       0       0
 13280 ;;      Locals:         1       0       0       0       0       0       0
 13281 ;;      Temps:          0       0       0       0       0       0       0
 13282 ;;      Totals:         2       0       0       0       0       0       0
 13283 ;;Total ram usage:        2 bytes
 13284 ;; Hardware stack levels used:    1
 13285 ;; Hardware stack levels required when called:    4
 13286 ;; This function calls:
 13287 ;;		Nothing
 13288 ;; This function is called by:
 13289 ;;		_SWSPI_DAC_send_bits
 13290 ;;		_SWSPI_Synth_send_bits
 13291 ;;		_SwSpi_Synth_Toggle_Clock
 13292 ;; This function uses a non-reentrant model
 13293 ;;
 13294                           
 13295                           	psect	text76
 13296  003930                     __ptext76:
 13297                           	opt stack 0
 13298  003930                     _SwSpi_Clk_Pin:
 13299                           	opt stack 21
 13300                           
 13301                           ;incstack = 0
 13302                           ;SwSpi_Clk_Pin@phrType stored from wreg
 13303  003930  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 13304                           
 13305                           ;SwSpiApp.c: 144: switch(phrType)
 13306  003932  D01E               	goto	l693
 13307  003934                     
 13308                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 13309  003934  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13310  003936  A4D8               	btfss	status,2,c
 13311  003938  D002               	goto	l695
 13312                           
 13313                           ;SwSpiApp.c: 148: {
 13314                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 13315  00393A  868B               	bsf	3979,3,c	;volatile
 13316                           
 13317                           ;SwSpiApp.c: 150: }
 13318  00393C  0012               	return	
 13319  00393E                     l695:
 13320                           
 13321                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 13322  00393E  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13323  003940  A4D8               	btfss	status,2,c
 13324  003942  0012               	return	
 13325                           
 13326                           ;SwSpiApp.c: 152: {
 13327                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 13328  003944  968B               	bcf	3979,3,c	;volatile
 13329                           
 13330                           ;SwSpiApp.c: 154: }
 13331                           ;SwSpiApp.c: 155: break;
 13332  003946  0012               	return	
 13333  003948                     
 13334                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 13335  003948  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13336  00394A  A4D8               	btfss	status,2,c
 13337  00394C  D002               	goto	l704
 13338                           
 13339                           ;SwSpiApp.c: 159: {
 13340                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 13341  00394E  888B               	bsf	3979,4,c	;volatile
 13342                           
 13343                           ;SwSpiApp.c: 161: }
 13344  003950  0012               	return	
 13345  003952                     l704:
 13346                           
 13347                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 13348  003952  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13349  003954  A4D8               	btfss	status,2,c
 13350  003956  0012               	return	
 13351                           
 13352                           ;SwSpiApp.c: 163: {
 13353                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 13354  003958  988B               	bcf	3979,4,c	;volatile
 13355                           
 13356                           ;SwSpiApp.c: 165: }
 13357                           ;SwSpiApp.c: 167: break;
 13358  00395A  0012               	return	
 13359  00395C                     
 13360                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 13361  00395C  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13362  00395E  A4D8               	btfss	status,2,c
 13363  003960  D002               	goto	l712
 13364                           
 13365                           ;SwSpiApp.c: 171: {
 13366                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 13367  003962  8689               	bsf	3977,3,c	;volatile
 13368                           
 13369                           ;SwSpiApp.c: 173: }
 13370  003964  0012               	return	
 13371  003966                     l712:
 13372                           
 13373                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 13374  003966  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13375  003968  A4D8               	btfss	status,2,c
 13376  00396A  0012               	return	
 13377                           
 13378                           ;SwSpiApp.c: 175: {
 13379                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 13380  00396C  9689               	bcf	3977,3,c	;volatile
 13381                           
 13382                           ;SwSpiApp.c: 179: }
 13383                           
 13384                           ;SwSpiApp.c: 177: }
 13385                           ;SwSpiApp.c: 178: break;
 13386  00396E  0012               	return	
 13387  003970                     l693:
 13388  003970  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 13389                           
 13390                           ; Switch size 1, requested type "space"
 13391                           ; Number of cases is 3, Range of values is 0 to 2
 13392                           ; switch strategies available:
 13393                           ; Name         Instructions Cycles
 13394                           ; simple_byte           10     6 (average)
 13395                           ;	Chosen strategy is simple_byte
 13396  003972  0A00               	xorlw	0	; case 0
 13397  003974  B4D8               	btfsc	status,2,c
 13398  003976  D7DE               	goto	l694
 13399  003978  0A01               	xorlw	1	; case 1
 13400  00397A  B4D8               	btfsc	status,2,c
 13401  00397C  D7E5               	goto	l703
 13402  00397E  0A03               	xorlw	3	; case 2
 13403  003980  A4D8               	btfss	status,2,c
 13404  003982  0012               	return	
 13405  003984  D7EB               	goto	l711
 13406  003986                     __end_of_SwSpi_Clk_Pin:
 13407                           	opt stack 0
 13408                           tosu	equ	0xFFF
 13409                           tosh	equ	0xFFE
 13410                           tosl	equ	0xFFD
 13411                           pclath	equ	0xFFA
 13412                           tblptru	equ	0xFF8
 13413                           tblptrh	equ	0xFF7
 13414                           tblptrl	equ	0xFF6
 13415                           tablat	equ	0xFF5
 13416                           prodh	equ	0xFF4
 13417                           prodl	equ	0xFF3
 13418                           intcon	equ	0xFF2
 13419                           intcon2	equ	0xFF1
 13420                           postinc0	equ	0xFEE
 13421                           plusw0	equ	0xFEB
 13422                           wreg	equ	0xFE8
 13423                           indf1	equ	0xFE7
 13424                           postdec1	equ	0xFE5
 13425                           fsr1h	equ	0xFE2
 13426                           fsr1l	equ	0xFE1
 13427                           indf2	equ	0xFDF
 13428                           postinc2	equ	0xFDE
 13429                           postdec2	equ	0xFDD
 13430                           plusw2	equ	0xFDB
 13431                           fsr2h	equ	0xFDA
 13432                           fsr2l	equ	0xFD9
 13433                           status	equ	0xFD8
 13434                           
 13435 ;; *************** function _ReadIntFromEeprom *****************
 13436 ;; Defined at:
 13437 ;;		line 131 in file "SystemCommon.c"
 13438 ;; Parameters:    Size  Location     Type
 13439 ;;  address         1    wreg     unsigned char 
 13440 ;;  numOfByes       2   81[BANK0 ] int 
 13441 ;; Auto vars:     Size  Location     Type
 13442 ;;  address         1   98[BANK0 ] unsigned char 
 13443 ;;  base            4   88[BANK0 ] unsigned long 
 13444 ;;  idx             1  103[BANK0 ] unsigned char 
 13445 ;;  retVal          4   99[BANK0 ] unsigned long 
 13446 ;; Return value:  Size  Location     Type
 13447 ;;                  4   81[BANK0 ] unsigned long 
 13448 ;; Registers used:
 13449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13450 ;; Tracked objects:
 13451 ;;		On entry : 0/0
 13452 ;;		On exit  : 0/0
 13453 ;;		Unchanged: 0/0
 13454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13455 ;;      Params:         0       4       0       0       0       0       0
 13456 ;;      Locals:         0      16       0       0       0       0       0
 13457 ;;      Temps:          0       3       0       0       0       0       0
 13458 ;;      Totals:         0      23       0       0       0       0       0
 13459 ;;Total ram usage:       23 bytes
 13460 ;; Hardware stack levels used:    1
 13461 ;; Hardware stack levels required when called:    9
 13462 ;; This function calls:
 13463 ;;		_EepromRead
 13464 ;;		___awtoft
 13465 ;;		___fttol
 13466 ;;		___lmul
 13467 ;;		_pow
 13468 ;; This function is called by:
 13469 ;;		_DacInit
 13470 ;;		_DacReadValue
 13471 ;;		_InitSynth
 13472 ;;		_SynthReadData
 13473 ;; This function uses a non-reentrant model
 13474 ;;
 13475                           
 13476                           	psect	text77
 13477  001FAE                     __ptext77:
 13478                           	opt stack 0
 13479  001FAE                     _ReadIntFromEeprom:
 13480                           	opt stack 18
 13481                           
 13482                           ;incstack = 0
 13483                           ;ReadIntFromEeprom@address stored from wreg
 13484  001FAE  0100               	movlb	0	; () banked
 13485  001FB0  6FC2               	movwf	ReadIntFromEeprom@address& (0+255),b
 13486                           
 13487                           ;SystemCommon.c: 133: uint32_t retVal = 0x00;
 13488  001FB2  0E00               	movlw	0
 13489  001FB4  0100               	movlb	0	; () banked
 13490  001FB6  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13491  001FB8  0E00               	movlw	0
 13492  001FBA  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13493  001FBC  0E00               	movlw	0
 13494  001FBE  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13495  001FC0  0E00               	movlw	0
 13496  001FC2  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13497                           
 13498                           ; BSR set to: 0
 13499                           ;SystemCommon.c: 134: address -= numOfByes;
 13500  001FC4  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13501  001FC6  5FC2               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 13502                           
 13503                           ; BSR set to: 0
 13504                           ;SystemCommon.c: 136: for(uint8_t idx = 0; idx < numOfByes; idx++)
 13505  001FC8  0E00               	movlw	0
 13506  001FCA  6FC7               	movwf	ReadIntFromEeprom@idx& (0+255),b
 13507  001FCC  D06D               	goto	l1447
 13508  001FCE                     
 13509                           ; BSR set to: 0
 13510                           ;SystemCommon.c: 137: {
 13511                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13512                           
 13513                           ; BSR set to: 0
 13514  001FCE  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13515  001FD0  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13516  001FD2  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13517  001FD4  0E01               	movlw	1
 13518  001FD6  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13519  001FD8  0E00               	movlw	0
 13520  001FDA  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13521  001FDC  1FB5               	comf	??_ReadIntFromEeprom& (0+255),f,b
 13522  001FDE  1FB6               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13523  001FE0  4BB5               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 13524  001FE2  2BB6               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13525  001FE4  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13526  001FE6  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13527  001FE8  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13528  001FEA  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13529  001FEC  90D8               	bcf	status,0,c
 13530  001FEE  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13531  001FF0  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13532  001FF2  90D8               	bcf	status,0,c
 13533  001FF4  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13534  001FF6  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13535  001FF8  90D8               	bcf	status,0,c
 13536  001FFA  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13537  001FFC  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13538  001FFE  C0B5  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 13539  002002  C0B6  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 13540  002006  ECBA  F01E         	call	___awtoft	;wreg free
 13541  00200A  C020  F0BC         	movff	?___awtoft,_ReadIntFromEeprom$3588
 13542  00200E  C021  F0BD         	movff	?___awtoft+1,_ReadIntFromEeprom$3588+1
 13543  002012  C022  F0BE         	movff	?___awtoft+2,_ReadIntFromEeprom$3588+2
 13544                           
 13545                           ;SystemCommon.c: 137: {
 13546                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13547  002016  C0BC  F0A3         	movff	_ReadIntFromEeprom$3588,pow@y
 13548  00201A  C0BD  F0A4         	movff	_ReadIntFromEeprom$3588+1,pow@y+1
 13549  00201E  C0BE  F0A5         	movff	_ReadIntFromEeprom$3588+2,pow@y+2
 13550  002022  0E00               	movlw	0
 13551  002024  0100               	movlb	0	; () banked
 13552  002026  6FA0               	movwf	pow@x& (0+255),b
 13553  002028  0E00               	movlw	0
 13554  00202A  6FA1               	movwf	(pow@x+1)& (0+255),b
 13555  00202C  0E40               	movlw	64
 13556  00202E  6FA2               	movwf	(pow@x+2)& (0+255),b
 13557  002030  ECC4  F00D         	call	_pow	;wreg free
 13558  002034  C0A0  F0BF         	movff	?_pow,_ReadIntFromEeprom$3589
 13559  002038  C0A1  F0C0         	movff	?_pow+1,_ReadIntFromEeprom$3589+1
 13560  00203C  C0A2  F0C1         	movff	?_pow+2,_ReadIntFromEeprom$3589+2
 13561                           
 13562                           ;SystemCommon.c: 137: {
 13563                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13564  002040  C0BF  F078         	movff	_ReadIntFromEeprom$3589,___fttol@f1
 13565  002044  C0C0  F079         	movff	_ReadIntFromEeprom$3589+1,___fttol@f1+1
 13566  002048  C0C1  F07A         	movff	_ReadIntFromEeprom$3589+2,___fttol@f1+2
 13567  00204C  EC72  F011         	call	___fttol	;wreg free
 13568  002050  C078  F0B8         	movff	?___fttol,ReadIntFromEeprom@base
 13569  002054  C079  F0B9         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 13570  002058  C07A  F0BA         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 13571  00205C  C07B  F0BB         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 13572                           
 13573                           ;SystemCommon.c: 139: retVal = retVal | EepromRead(address + idx) * base;
 13574  002060  0100               	movlb	0	; () banked
 13575  002062  51C2               	movf	ReadIntFromEeprom@address& (0+255),w,b
 13576  002064  25C7               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 13577  002066  EC8C  F021         	call	_EepromRead
 13578  00206A  0100               	movlb	0	; () banked
 13579  00206C  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13580  00206E  51B5               	movf	??_ReadIntFromEeprom& (0+255),w,b
 13581  002070  6E1A               	movwf	___lmul@multiplier,c
 13582  002072  6A1B               	clrf	___lmul@multiplier+1,c
 13583  002074  6A1C               	clrf	___lmul@multiplier+2,c
 13584  002076  6A1D               	clrf	___lmul@multiplier+3,c
 13585  002078  C0B8  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 13586  00207C  C0B9  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 13587  002080  C0BA  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 13588  002084  C0BB  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 13589  002088  ECC3  F01C         	call	___lmul	;wreg free
 13590  00208C  0100               	movlb	0	; () banked
 13591  00208E  51C3               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 13592  002090  101A               	iorwf	?___lmul,w,c
 13593  002092  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13594  002094  51C4               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 13595  002096  101B               	iorwf	?___lmul+1,w,c
 13596  002098  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13597  00209A  51C5               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 13598  00209C  101C               	iorwf	?___lmul+2,w,c
 13599  00209E  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13600  0020A0  51C6               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 13601  0020A2  101D               	iorwf	?___lmul+3,w,c
 13602  0020A4  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13603                           
 13604                           ; BSR set to: 0
 13605  0020A6  2BC7               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 13606  0020A8                     l1447:
 13607                           
 13608                           ; BSR set to: 0
 13609                           
 13610                           ; BSR set to: 0
 13611  0020A8  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13612  0020AA  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13613  0020AC  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13614  0020AE  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13615  0020B0  5DB5               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 13616  0020B2  51B6               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 13617  0020B4  0A80               	xorlw	128
 13618  0020B6  6FB7               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 13619  0020B8  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13620  0020BA  0A80               	xorlw	128
 13621  0020BC  59B7               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 13622  0020BE  A0D8               	btfss	status,0,c
 13623  0020C0  D786               	goto	l1448
 13624                           
 13625                           ; BSR set to: 0
 13626                           ;SystemCommon.c: 140: }
 13627                           ;SystemCommon.c: 141: return retVal;
 13628  0020C2  C0C3  F0B1         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 13629  0020C6  C0C4  F0B2         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 13630  0020CA  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 13631  0020CE  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 13632                           
 13633                           ; BSR set to: 0
 13634  0020D2  0012               	return		;funcret
 13635  0020D4                     __end_of_ReadIntFromEeprom:
 13636                           	opt stack 0
 13637                           tosu	equ	0xFFF
 13638                           tosh	equ	0xFFE
 13639                           tosl	equ	0xFFD
 13640                           pclath	equ	0xFFA
 13641                           tblptru	equ	0xFF8
 13642                           tblptrh	equ	0xFF7
 13643                           tblptrl	equ	0xFF6
 13644                           tablat	equ	0xFF5
 13645                           prodh	equ	0xFF4
 13646                           prodl	equ	0xFF3
 13647                           intcon	equ	0xFF2
 13648                           intcon2	equ	0xFF1
 13649                           postinc0	equ	0xFEE
 13650                           plusw0	equ	0xFEB
 13651                           wreg	equ	0xFE8
 13652                           indf1	equ	0xFE7
 13653                           postdec1	equ	0xFE5
 13654                           fsr1h	equ	0xFE2
 13655                           fsr1l	equ	0xFE1
 13656                           indf2	equ	0xFDF
 13657                           postinc2	equ	0xFDE
 13658                           postdec2	equ	0xFDD
 13659                           plusw2	equ	0xFDB
 13660                           fsr2h	equ	0xFDA
 13661                           fsr2l	equ	0xFD9
 13662                           status	equ	0xFD8
 13663                           
 13664 ;; *************** function ___lmul *****************
 13665 ;; Defined at:
 13666 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13667 ;; Parameters:    Size  Location     Type
 13668 ;;  multiplier      4   25[COMRAM] unsigned long 
 13669 ;;  multiplicand    4   29[COMRAM] unsigned long 
 13670 ;; Auto vars:     Size  Location     Type
 13671 ;;  product         4   33[COMRAM] unsigned long 
 13672 ;; Return value:  Size  Location     Type
 13673 ;;                  4   25[COMRAM] unsigned long 
 13674 ;; Registers used:
 13675 ;;		wreg, status,2, status,0
 13676 ;; Tracked objects:
 13677 ;;		On entry : 0/0
 13678 ;;		On exit  : 0/0
 13679 ;;		Unchanged: 0/0
 13680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13681 ;;      Params:         8       0       0       0       0       0       0
 13682 ;;      Locals:         4       0       0       0       0       0       0
 13683 ;;      Temps:          0       0       0       0       0       0       0
 13684 ;;      Totals:        12       0       0       0       0       0       0
 13685 ;;Total ram usage:       12 bytes
 13686 ;; Hardware stack levels used:    1
 13687 ;; Hardware stack levels required when called:    4
 13688 ;; This function calls:
 13689 ;;		Nothing
 13690 ;; This function is called by:
 13691 ;;		_ReadIntFromEeprom
 13692 ;;		_strtol
 13693 ;; This function uses a non-reentrant model
 13694 ;;
 13695                           
 13696                           	psect	text78
 13697  003986                     __ptext78:
 13698                           	opt stack 0
 13699  003986                     ___lmul:
 13700                           	opt stack 21
 13701                           
 13702                           ; BSR set to: 0
 13703                           ;incstack = 0
 13704  003986  0E00               	movlw	0
 13705  003988  6E22               	movwf	___lmul@product,c
 13706  00398A  0E00               	movlw	0
 13707  00398C  6E23               	movwf	___lmul@product+1,c
 13708  00398E  0E00               	movlw	0
 13709  003990  6E24               	movwf	___lmul@product+2,c
 13710  003992  0E00               	movlw	0
 13711  003994  6E25               	movwf	___lmul@product+3,c
 13712  003996  A01A               	btfss	___lmul@multiplier,0,c
 13713  003998  D008               	goto	l1616
 13714  00399A  501E               	movf	___lmul@multiplicand,w,c
 13715  00399C  2622               	addwf	___lmul@product,f,c
 13716  00399E  501F               	movf	___lmul@multiplicand+1,w,c
 13717  0039A0  2223               	addwfc	___lmul@product+1,f,c
 13718  0039A2  5020               	movf	___lmul@multiplicand+2,w,c
 13719  0039A4  2224               	addwfc	___lmul@product+2,f,c
 13720  0039A6  5021               	movf	___lmul@multiplicand+3,w,c
 13721  0039A8  2225               	addwfc	___lmul@product+3,f,c
 13722  0039AA                     l1616:
 13723  0039AA  90D8               	bcf	status,0,c
 13724  0039AC  361E               	rlcf	___lmul@multiplicand,f,c
 13725  0039AE  361F               	rlcf	___lmul@multiplicand+1,f,c
 13726  0039B0  3620               	rlcf	___lmul@multiplicand+2,f,c
 13727  0039B2  3621               	rlcf	___lmul@multiplicand+3,f,c
 13728  0039B4  90D8               	bcf	status,0,c
 13729  0039B6  321D               	rrcf	___lmul@multiplier+3,f,c
 13730  0039B8  321C               	rrcf	___lmul@multiplier+2,f,c
 13731  0039BA  321B               	rrcf	___lmul@multiplier+1,f,c
 13732  0039BC  321A               	rrcf	___lmul@multiplier,f,c
 13733  0039BE  501A               	movf	___lmul@multiplier,w,c
 13734  0039C0  101B               	iorwf	___lmul@multiplier+1,w,c
 13735  0039C2  101C               	iorwf	___lmul@multiplier+2,w,c
 13736  0039C4  101D               	iorwf	___lmul@multiplier+3,w,c
 13737  0039C6  A4D8               	btfss	status,2,c
 13738  0039C8  D7E6               	goto	l1615
 13739  0039CA  C022  F01A         	movff	___lmul@product,?___lmul
 13740  0039CE  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 13741  0039D2  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 13742  0039D6  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 13743  0039DA  0012               	return		;funcret
 13744  0039DC                     __end_of___lmul:
 13745                           	opt stack 0
 13746                           tosu	equ	0xFFF
 13747                           tosh	equ	0xFFE
 13748                           tosl	equ	0xFFD
 13749                           pclath	equ	0xFFA
 13750                           tblptru	equ	0xFF8
 13751                           tblptrh	equ	0xFF7
 13752                           tblptrl	equ	0xFF6
 13753                           tablat	equ	0xFF5
 13754                           prodh	equ	0xFF4
 13755                           prodl	equ	0xFF3
 13756                           intcon	equ	0xFF2
 13757                           intcon2	equ	0xFF1
 13758                           postinc0	equ	0xFEE
 13759                           plusw0	equ	0xFEB
 13760                           wreg	equ	0xFE8
 13761                           indf1	equ	0xFE7
 13762                           postdec1	equ	0xFE5
 13763                           fsr1h	equ	0xFE2
 13764                           fsr1l	equ	0xFE1
 13765                           indf2	equ	0xFDF
 13766                           postinc2	equ	0xFDE
 13767                           postdec2	equ	0xFDD
 13768                           plusw2	equ	0xFDB
 13769                           fsr2h	equ	0xFDA
 13770                           fsr2l	equ	0xFD9
 13771                           status	equ	0xFD8
 13772                           
 13773 ;; *************** function _EepromRead *****************
 13774 ;; Defined at:
 13775 ;;		line 175 in file "FlashApp.c"
 13776 ;; Parameters:    Size  Location     Type
 13777 ;;  address         1    wreg     unsigned char 
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;  address         1   24[COMRAM] unsigned char 
 13780 ;; Return value:  Size  Location     Type
 13781 ;;                  1    wreg      unsigned char 
 13782 ;; Registers used:
 13783 ;;		wreg, status,2, cstack
 13784 ;; Tracked objects:
 13785 ;;		On entry : 0/0
 13786 ;;		On exit  : 0/0
 13787 ;;		Unchanged: 0/0
 13788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13789 ;;      Params:         0       0       0       0       0       0       0
 13790 ;;      Locals:         1       0       0       0       0       0       0
 13791 ;;      Temps:          0       0       0       0       0       0       0
 13792 ;;      Totals:         1       0       0       0       0       0       0
 13793 ;;Total ram usage:        1 bytes
 13794 ;; Hardware stack levels used:    1
 13795 ;; Hardware stack levels required when called:    5
 13796 ;; This function calls:
 13797 ;;		_DATAEE_ReadByte
 13798 ;; This function is called by:
 13799 ;;		_ReadIntFromEeprom
 13800 ;; This function uses a non-reentrant model
 13801 ;;
 13802                           
 13803                           	psect	text79
 13804  004318                     __ptext79:
 13805                           	opt stack 0
 13806  004318                     _EepromRead:
 13807                           	opt stack 21
 13808                           
 13809                           ;incstack = 0
 13810                           ;EepromRead@address stored from wreg
 13811  004318  6E19               	movwf	EepromRead@address,c
 13812                           
 13813                           ;FlashApp.c: 177: return DATAEE_ReadByte(address);
 13814  00431A  5019               	movf	EepromRead@address,w,c
 13815  00431C  EC23  F021         	call	_DATAEE_ReadByte
 13816  004320  0012               	return	
 13817  004322                     __end_of_EepromRead:
 13818                           	opt stack 0
 13819                           tosu	equ	0xFFF
 13820                           tosh	equ	0xFFE
 13821                           tosl	equ	0xFFD
 13822                           pclath	equ	0xFFA
 13823                           tblptru	equ	0xFF8
 13824                           tblptrh	equ	0xFF7
 13825                           tblptrl	equ	0xFF6
 13826                           tablat	equ	0xFF5
 13827                           prodh	equ	0xFF4
 13828                           prodl	equ	0xFF3
 13829                           intcon	equ	0xFF2
 13830                           intcon2	equ	0xFF1
 13831                           postinc0	equ	0xFEE
 13832                           plusw0	equ	0xFEB
 13833                           wreg	equ	0xFE8
 13834                           indf1	equ	0xFE7
 13835                           postdec1	equ	0xFE5
 13836                           fsr1h	equ	0xFE2
 13837                           fsr1l	equ	0xFE1
 13838                           indf2	equ	0xFDF
 13839                           postinc2	equ	0xFDE
 13840                           postdec2	equ	0xFDD
 13841                           plusw2	equ	0xFDB
 13842                           fsr2h	equ	0xFDA
 13843                           fsr2l	equ	0xFD9
 13844                           status	equ	0xFD8
 13845                           
 13846 ;; *************** function _DATAEE_ReadByte *****************
 13847 ;; Defined at:
 13848 ;;		line 194 in file "mcc_generated_files/memory.c"
 13849 ;; Parameters:    Size  Location     Type
 13850 ;;  bAdd            1    wreg     unsigned char 
 13851 ;; Auto vars:     Size  Location     Type
 13852 ;;  bAdd            1   23[COMRAM] unsigned char 
 13853 ;; Return value:  Size  Location     Type
 13854 ;;                  1    wreg      unsigned char 
 13855 ;; Registers used:
 13856 ;;		wreg, status,2
 13857 ;; Tracked objects:
 13858 ;;		On entry : 0/0
 13859 ;;		On exit  : 0/0
 13860 ;;		Unchanged: 0/0
 13861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13862 ;;      Params:         0       0       0       0       0       0       0
 13863 ;;      Locals:         1       0       0       0       0       0       0
 13864 ;;      Temps:          0       0       0       0       0       0       0
 13865 ;;      Totals:         1       0       0       0       0       0       0
 13866 ;;Total ram usage:        1 bytes
 13867 ;; Hardware stack levels used:    1
 13868 ;; Hardware stack levels required when called:    4
 13869 ;; This function calls:
 13870 ;;		Nothing
 13871 ;; This function is called by:
 13872 ;;		_EepromRead
 13873 ;; This function uses a non-reentrant model
 13874 ;;
 13875                           
 13876                           	psect	text80
 13877  004246                     __ptext80:
 13878                           	opt stack 0
 13879  004246                     _DATAEE_ReadByte:
 13880                           	opt stack 21
 13881                           
 13882                           ;incstack = 0
 13883                           ;DATAEE_ReadByte@bAdd stored from wreg
 13884  004246  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 13885                           
 13886                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 13887  004248  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 13888                           
 13889                           ;memory.c: 198: EECON1bits.CFGS = 0;
 13890  00424C  9CA6               	bcf	4006,6,c	;volsfr
 13891                           
 13892                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 13893  00424E  9EA6               	bcf	4006,7,c	;volsfr
 13894                           
 13895                           ;memory.c: 200: EECON1bits.RD = 1;
 13896  004250  80A6               	bsf	4006,0,c	;volsfr
 13897                           
 13898                           ;memory.c: 201: __nop();
 13899  004252  F000               	nop	
 13900                           
 13901                           ;memory.c: 202: __nop();
 13902  004254  F000               	nop	
 13903                           
 13904                           ;memory.c: 204: return (EEDATA);
 13905  004256  50A8               	movf	4008,w,c	;volatile
 13906  004258  0012               	return	
 13907  00425A                     __end_of_DATAEE_ReadByte:
 13908                           	opt stack 0
 13909                           tosu	equ	0xFFF
 13910                           tosh	equ	0xFFE
 13911                           tosl	equ	0xFFD
 13912                           pclath	equ	0xFFA
 13913                           tblptru	equ	0xFF8
 13914                           tblptrh	equ	0xFF7
 13915                           tblptrl	equ	0xFF6
 13916                           tablat	equ	0xFF5
 13917                           prodh	equ	0xFF4
 13918                           prodl	equ	0xFF3
 13919                           intcon	equ	0xFF2
 13920                           intcon2	equ	0xFF1
 13921                           postinc0	equ	0xFEE
 13922                           plusw0	equ	0xFEB
 13923                           wreg	equ	0xFE8
 13924                           indf1	equ	0xFE7
 13925                           postdec1	equ	0xFE5
 13926                           fsr1h	equ	0xFE2
 13927                           fsr1l	equ	0xFE1
 13928                           indf2	equ	0xFDF
 13929                           postinc2	equ	0xFDE
 13930                           postdec2	equ	0xFDD
 13931                           plusw2	equ	0xFDB
 13932                           fsr2h	equ	0xFDA
 13933                           fsr2l	equ	0xFD9
 13934                           status	equ	0xFD8
 13935                           
 13936 ;; *************** function _ClearMcuRunTime *****************
 13937 ;; Defined at:
 13938 ;;		line 75 in file "SystemStatus.c"
 13939 ;; Parameters:    Size  Location     Type
 13940 ;;		None
 13941 ;; Auto vars:     Size  Location     Type
 13942 ;;		None
 13943 ;; Return value:  Size  Location     Type
 13944 ;;                  1    wreg      void 
 13945 ;; Registers used:
 13946 ;;		wreg, status,2
 13947 ;; Tracked objects:
 13948 ;;		On entry : 0/0
 13949 ;;		On exit  : 0/0
 13950 ;;		Unchanged: 0/0
 13951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13952 ;;      Params:         0       0       0       0       0       0       0
 13953 ;;      Locals:         0       0       0       0       0       0       0
 13954 ;;      Temps:          0       0       0       0       0       0       0
 13955 ;;      Totals:         0       0       0       0       0       0       0
 13956 ;;Total ram usage:        0 bytes
 13957 ;; Hardware stack levels used:    1
 13958 ;; Hardware stack levels required when called:    4
 13959 ;; This function calls:
 13960 ;;		Nothing
 13961 ;; This function is called by:
 13962 ;;		_InitSystemApplicationManagers
 13963 ;; This function uses a non-reentrant model
 13964 ;;
 13965                           
 13966                           	psect	text81
 13967  00425A                     __ptext81:
 13968                           	opt stack 0
 13969  00425A                     _ClearMcuRunTime:
 13970                           	opt stack 25
 13971                           
 13972                           ;SystemStatus.c: 77: mcuRunTimeIn5SecTicks = 0;
 13973                           
 13974                           ;incstack = 0
 13975  00425A  0E00               	movlw	0
 13976  00425C  0101               	movlb	1	; () banked
 13977  00425E  6F28               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 13978  004260  0E00               	movlw	0
 13979  004262  6F29               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 13980  004264  0E00               	movlw	0
 13981  004266  6F2A               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 13982  004268  0E00               	movlw	0
 13983  00426A  6F2B               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 13984                           
 13985                           ; BSR set to: 1
 13986  00426C  0012               	return		;funcret
 13987  00426E                     __end_of_ClearMcuRunTime:
 13988                           	opt stack 0
 13989                           tosu	equ	0xFFF
 13990                           tosh	equ	0xFFE
 13991                           tosl	equ	0xFFD
 13992                           pclath	equ	0xFFA
 13993                           tblptru	equ	0xFF8
 13994                           tblptrh	equ	0xFF7
 13995                           tblptrl	equ	0xFF6
 13996                           tablat	equ	0xFF5
 13997                           prodh	equ	0xFF4
 13998                           prodl	equ	0xFF3
 13999                           intcon	equ	0xFF2
 14000                           intcon2	equ	0xFF1
 14001                           postinc0	equ	0xFEE
 14002                           plusw0	equ	0xFEB
 14003                           wreg	equ	0xFE8
 14004                           indf1	equ	0xFE7
 14005                           postdec1	equ	0xFE5
 14006                           fsr1h	equ	0xFE2
 14007                           fsr1l	equ	0xFE1
 14008                           indf2	equ	0xFDF
 14009                           postinc2	equ	0xFDE
 14010                           postdec2	equ	0xFDD
 14011                           plusw2	equ	0xFDB
 14012                           fsr2h	equ	0xFDA
 14013                           fsr2l	equ	0xFD9
 14014                           status	equ	0xFD8
 14015                           
 14016 ;; *************** function _CheckFlashPrecentage *****************
 14017 ;; Defined at:
 14018 ;;		line 165 in file "FlashApp.c"
 14019 ;; Parameters:    Size  Location     Type
 14020 ;;		None
 14021 ;; Auto vars:     Size  Location     Type
 14022 ;;  precentage      3   28[BANK0 ] void 
 14023 ;; Return value:  Size  Location     Type
 14024 ;;                  1    wreg      unsigned char 
 14025 ;; Registers used:
 14026 ;;		wreg, status,2, status,0, cstack
 14027 ;; Tracked objects:
 14028 ;;		On entry : 0/0
 14029 ;;		On exit  : 0/0
 14030 ;;		Unchanged: 0/0
 14031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14032 ;;      Params:         0       0       0       0       0       0       0
 14033 ;;      Locals:         0       3       0       0       0       0       0
 14034 ;;      Temps:          0       4       0       0       0       0       0
 14035 ;;      Totals:         0       7       0       0       0       0       0
 14036 ;;Total ram usage:        7 bytes
 14037 ;; Hardware stack levels used:    1
 14038 ;; Hardware stack levels required when called:    6
 14039 ;; This function calls:
 14040 ;;		___ftdiv
 14041 ;;		___ftge
 14042 ;;		___ftmul
 14043 ;;		___lltoft
 14044 ;; This function is called by:
 14045 ;;		_main
 14046 ;; This function uses a non-reentrant model
 14047 ;;
 14048                           
 14049                           	psect	text82
 14050  002D44                     __ptext82:
 14051                           	opt stack 0
 14052  002D44                     _CheckFlashPrecentage:
 14053                           	opt stack 24
 14054                           
 14055                           ;FlashApp.c: 167: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 14056                           
 14057                           ; BSR set to: 1
 14058                           ;incstack = 0
 14059  002D44  0EE0               	movlw	224
 14060  002D46  6E2C               	movwf	___ftdiv@f2,c
 14061  002D48  0EFF               	movlw	255
 14062  002D4A  6E2D               	movwf	___ftdiv@f2+1,c
 14063  002D4C  0E46               	movlw	70
 14064  002D4E  6E2E               	movwf	___ftdiv@f2+2,c
 14065  002D50  C03E  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 14066  002D54  C03F  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 14067  002D58  C040  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 14068  002D5C  C041  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 14069  002D60  0100               	movlb	0	; () banked
 14070  002D62  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 14071  002D64  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14072  002D66  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14073  002D68  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14074  002D6A  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 14075  002D6C  0E00               	movlw	0
 14076  002D6E  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14077  002D70  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14078  002D72  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14079  002D74  0EF0               	movlw	240
 14080  002D76  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 14081  002D78  6E20               	movwf	___lltoft@c,c
 14082  002D7A  0E7F               	movlw	127
 14083  002D7C  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 14084  002D7E  6E21               	movwf	___lltoft@c+1,c
 14085  002D80  0E00               	movlw	0
 14086  002D82  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 14087  002D84  6E22               	movwf	___lltoft@c+2,c
 14088  002D86  0E00               	movlw	0
 14089  002D88  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 14090  002D8A  6E23               	movwf	___lltoft@c+3,c
 14091  002D8C  ECE7  F01B         	call	___lltoft	;wreg free
 14092  002D90  C020  F029         	movff	?___lltoft,___ftdiv@f1
 14093  002D94  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 14094  002D98  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 14095  002D9C  EC69  F012         	call	___ftdiv	;wreg free
 14096  002DA0  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14097  002DA4  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14098  002DA8  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14099  002DAC  0E00               	movlw	0
 14100  002DAE  0100               	movlb	0	; () banked
 14101  002DB0  6F6C               	movwf	___ftmul@f2& (0+255),b
 14102  002DB2  0EC8               	movlw	200
 14103  002DB4  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14104  002DB6  0E42               	movlw	66
 14105  002DB8  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14106  002DBA  ECEE  F011         	call	___ftmul	;wreg free
 14107  002DBE  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 14108  002DC2  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 14109  002DC6  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 14110                           
 14111                           ;FlashApp.c: 168: return (precentage > 75) ? 1 : 0;
 14112  002DCA  0E00               	movlw	0
 14113  002DCC  6E18               	movwf	___ftge@ff1,c
 14114  002DCE  0E96               	movlw	150
 14115  002DD0  6E19               	movwf	___ftge@ff1+1,c
 14116  002DD2  0E42               	movlw	66
 14117  002DD4  6E1A               	movwf	___ftge@ff1+2,c
 14118  002DD6  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 14119  002DDA  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 14120  002DDE  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 14121  002DE2  EC92  F018         	call	___ftge	;wreg free
 14122  002DE6  B0D8               	btfsc	status,0,c
 14123  002DE8  D002               	goto	u9060
 14124  002DEA  0E01               	movlw	1
 14125  002DEC  0012               	return	
 14126  002DEE                     u9060:
 14127  002DEE  0E00               	movlw	0
 14128  002DF0  0012               	return	
 14129  002DF2                     __end_of_CheckFlashPrecentage:
 14130                           	opt stack 0
 14131                           tosu	equ	0xFFF
 14132                           tosh	equ	0xFFE
 14133                           tosl	equ	0xFFD
 14134                           pclath	equ	0xFFA
 14135                           tblptru	equ	0xFF8
 14136                           tblptrh	equ	0xFF7
 14137                           tblptrl	equ	0xFF6
 14138                           tablat	equ	0xFF5
 14139                           prodh	equ	0xFF4
 14140                           prodl	equ	0xFF3
 14141                           intcon	equ	0xFF2
 14142                           intcon2	equ	0xFF1
 14143                           postinc0	equ	0xFEE
 14144                           plusw0	equ	0xFEB
 14145                           wreg	equ	0xFE8
 14146                           indf1	equ	0xFE7
 14147                           postdec1	equ	0xFE5
 14148                           fsr1h	equ	0xFE2
 14149                           fsr1l	equ	0xFE1
 14150                           indf2	equ	0xFDF
 14151                           postinc2	equ	0xFDE
 14152                           postdec2	equ	0xFDD
 14153                           plusw2	equ	0xFDB
 14154                           fsr2h	equ	0xFDA
 14155                           fsr2l	equ	0xFD9
 14156                           status	equ	0xFD8
 14157                           
 14158 ;; *************** function _BlinkOkLeds *****************
 14159 ;; Defined at:
 14160 ;;		line 24 in file "LedsApp.c"
 14161 ;; Parameters:    Size  Location     Type
 14162 ;;  state           1    wreg     enum E7595
 14163 ;; Auto vars:     Size  Location     Type
 14164 ;;  state           1   26[COMRAM] enum E7595
 14165 ;;  idx             2   27[COMRAM] int 
 14166 ;; Return value:  Size  Location     Type
 14167 ;;                  1    wreg      void 
 14168 ;; Registers used:
 14169 ;;		wreg, status,2, status,0
 14170 ;; Tracked objects:
 14171 ;;		On entry : 0/0
 14172 ;;		On exit  : 0/0
 14173 ;;		Unchanged: 0/0
 14174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14175 ;;      Params:         0       0       0       0       0       0       0
 14176 ;;      Locals:         3       0       0       0       0       0       0
 14177 ;;      Temps:          3       0       0       0       0       0       0
 14178 ;;      Totals:         6       0       0       0       0       0       0
 14179 ;;Total ram usage:        6 bytes
 14180 ;; Hardware stack levels used:    1
 14181 ;; Hardware stack levels required when called:    4
 14182 ;; This function calls:
 14183 ;;		Nothing
 14184 ;; This function is called by:
 14185 ;;		_main
 14186 ;; This function uses a non-reentrant model
 14187 ;;
 14188                           
 14189                           	psect	text83
 14190  003714                     __ptext83:
 14191                           	opt stack 0
 14192  003714                     _BlinkOkLeds:
 14193                           	opt stack 26
 14194                           
 14195                           ;incstack = 0
 14196                           ;BlinkOkLeds@state stored from wreg
 14197  003714  6E1B               	movwf	BlinkOkLeds@state,c
 14198                           
 14199                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 14200  003716  0E00               	movlw	0
 14201  003718  6E1D               	movwf	BlinkOkLeds@idx+1,c
 14202  00371A  0E00               	movlw	0
 14203  00371C  6E1C               	movwf	BlinkOkLeds@idx,c
 14204  00371E                     l6668:
 14205  00371E  501B               	movf	BlinkOkLeds@state,w,c
 14206  003720  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14207  003722  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 14208  003724  5018               	movf	??_BlinkOkLeds,w,c
 14209  003726  5C1C               	subwf	BlinkOkLeds@idx,w,c
 14210  003728  501D               	movf	BlinkOkLeds@idx+1,w,c
 14211  00372A  0A80               	xorlw	128
 14212  00372C  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 14213  00372E  5019               	movf	??_BlinkOkLeds+1,w,c
 14214  003730  0A80               	xorlw	128
 14215  003732  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 14216  003734  B0D8               	btfsc	status,0,c
 14217  003736  0012               	return	
 14218                           
 14219                           ;LedsApp.c: 27: {
 14220                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 14221  003738  908B               	bcf	3979,0,c	;volatile
 14222                           
 14223                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 14224  00373A  0E02               	movlw	2
 14225  00373C  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14226  00373E  0E04               	movlw	4
 14227  003740  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14228  003742  0EBA               	movlw	186
 14229  003744                     u9277:
 14230  003744  2EE8               	decfsz	wreg,f,c
 14231  003746  D7FE               	bra	u9277
 14232  003748  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14233  00374A  D7FC               	bra	u9277
 14234  00374C  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14235  00374E  D7FA               	bra	u9277
 14236  003750  D000               	nop2	
 14237                           
 14238                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 14239  003752  808B               	bsf	3979,0,c	;volatile
 14240                           
 14241                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 14242  003754  0E02               	movlw	2
 14243  003756  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14244  003758  0E04               	movlw	4
 14245  00375A  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14246  00375C  0EBA               	movlw	186
 14247  00375E                     u9287:
 14248  00375E  2EE8               	decfsz	wreg,f,c
 14249  003760  D7FE               	bra	u9287
 14250  003762  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14251  003764  D7FC               	bra	u9287
 14252  003766  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14253  003768  D7FA               	bra	u9287
 14254  00376A  D000               	nop2	
 14255  00376C  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 14256  00376E  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 14257  003770  D7D6               	goto	l6668
 14258  003772                     __end_of_BlinkOkLeds:
 14259                           	opt stack 0
 14260                           tosu	equ	0xFFF
 14261                           tosh	equ	0xFFE
 14262                           tosl	equ	0xFFD
 14263                           pclath	equ	0xFFA
 14264                           tblptru	equ	0xFF8
 14265                           tblptrh	equ	0xFF7
 14266                           tblptrl	equ	0xFF6
 14267                           tablat	equ	0xFF5
 14268                           prodh	equ	0xFF4
 14269                           prodl	equ	0xFF3
 14270                           intcon	equ	0xFF2
 14271                           intcon2	equ	0xFF1
 14272                           postinc0	equ	0xFEE
 14273                           plusw0	equ	0xFEB
 14274                           wreg	equ	0xFE8
 14275                           indf1	equ	0xFE7
 14276                           postdec1	equ	0xFE5
 14277                           fsr1h	equ	0xFE2
 14278                           fsr1l	equ	0xFE1
 14279                           indf2	equ	0xFDF
 14280                           postinc2	equ	0xFDE
 14281                           postdec2	equ	0xFDD
 14282                           plusw2	equ	0xFDB
 14283                           fsr2h	equ	0xFDA
 14284                           fsr2l	equ	0xFD9
 14285                           status	equ	0xFD8
 14286                           
 14287 ;; *************** function _AdcConvert *****************
 14288 ;; Defined at:
 14289 ;;		line 43 in file "AdcApp.c"
 14290 ;; Parameters:    Size  Location     Type
 14291 ;;		None
 14292 ;; Auto vars:     Size  Location     Type
 14293 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 14294 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 14295 ;;  adcRes          2   91[BANK0 ] unsigned int 
 14296 ;;  ldTxSate        2   89[BANK0 ] unsigned int 
 14297 ;;  ldRxSate        2   87[BANK0 ] unsigned int 
 14298 ;;  idx             1   96[BANK0 ] unsigned char 
 14299 ;; Return value:  Size  Location     Type
 14300 ;;                  1    wreg      void 
 14301 ;; Registers used:
 14302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14303 ;; Tracked objects:
 14304 ;;		On entry : 0/0
 14305 ;;		On exit  : 0/0
 14306 ;;		Unchanged: 0/0
 14307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14308 ;;      Params:         0       0       0       0       0       0       0
 14309 ;;      Locals:         0      14       0       0       0       0       0
 14310 ;;      Temps:          0       2       0       0       0       0       0
 14311 ;;      Totals:         0      16       0       0       0       0       0
 14312 ;;Total ram usage:       16 bytes
 14313 ;; Hardware stack levels used:    1
 14314 ;; Hardware stack levels required when called:    9
 14315 ;; This function calls:
 14316 ;;		_ADC_GetConversion
 14317 ;;		_FlashSampleWrite
 14318 ;;		_GetUint16FromBitArray
 14319 ;;		___ftdiv
 14320 ;;		___ftmul
 14321 ;;		___fttol
 14322 ;;		___lwtoft
 14323 ;;		_pow
 14324 ;; This function is called by:
 14325 ;;		_main
 14326 ;; This function uses a non-reentrant model
 14327 ;;
 14328                           
 14329                           	psect	text84
 14330  000E5E                     __ptext84:
 14331                           	opt stack 0
 14332  000E5E                     _AdcConvert:
 14333                           	opt stack 21
 14334                           
 14335                           ;AdcApp.c: 48: uint16_t adcRes = 0;
 14336                           
 14337                           ;incstack = 0
 14338  000E5E  0E00               	movlw	0
 14339  000E60  0100               	movlb	0	; () banked
 14340  000E62  6FBC               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 14341  000E64  0E00               	movlw	0
 14342  000E66  6FBB               	movwf	AdcConvert@adcRes& (0+255),b
 14343                           
 14344                           ;AdcApp.c: 49: uint8_t idx = 0;
 14345  000E68  0E00               	movlw	0
 14346  000E6A  6FC0               	movwf	AdcConvert@idx& (0+255),b
 14347                           
 14348                           ;AdcApp.c: 50: uint16_t ldRxSate = 0, ldTxSate = 0;
 14349  000E6C  0E00               	movlw	0
 14350  000E6E  6FB8               	movwf	(AdcConvert@ldRxSate+1)& (0+255),b
 14351  000E70  0E00               	movlw	0
 14352  000E72  6FB7               	movwf	AdcConvert@ldRxSate& (0+255),b
 14353  000E74  0E00               	movlw	0
 14354  000E76  6FBA               	movwf	(AdcConvert@ldTxSate+1)& (0+255),b
 14355  000E78  0E00               	movlw	0
 14356  000E7A  6FB9               	movwf	AdcConvert@ldTxSate& (0+255),b
 14357                           
 14358                           ;AdcApp.c: 51: if (adcSampleMode == CIRCULAR)
 14359  000E7C  503D               	movf	_adcSampleMode,w,c
 14360  000E7E  A4D8               	btfss	status,2,c
 14361  000E80  D0A3               	goto	l126
 14362                           
 14363                           ; BSR set to: 0
 14364                           ;AdcApp.c: 52: {
 14365                           ;AdcApp.c: 53: for(idx = 0; idx < (9); idx++)
 14366  000E82  0E00               	movlw	0
 14367  000E84  6FC0               	movwf	AdcConvert@idx& (0+255),b
 14368  000E86                     l8782:
 14369                           
 14370                           ; BSR set to: 0
 14371  000E86  0E08               	movlw	8
 14372  000E88  65C0               	cpfsgt	AdcConvert@idx& (0+255),b
 14373  000E8A  D001               	goto	l127
 14374  000E8C  D06D               	goto	u8920
 14375  000E8E                     l127:
 14376                           
 14377                           ; BSR set to: 0
 14378                           ;AdcApp.c: 54: {
 14379                           ;AdcApp.c: 55: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 14380                           
 14381                           ; BSR set to: 0
 14382  000E8E  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14383  000E90  0D01               	mullw	1
 14384  000E92  0E42               	movlw	low _channelArr
 14385  000E94  24F3               	addwf	prodl,w,c
 14386  000E96  6EF6               	movwf	tblptrl,c
 14387  000E98  0E06               	movlw	high _channelArr
 14388  000E9A  20F4               	addwfc	prodh,w,c
 14389  000E9C  6EF7               	movwf	tblptrh,c
 14390  000E9E                     	if	0	;There are less than 3 active tblptr bytes
 14391  000E9E                     	endif
 14392  000E9E  0008               	tblrd		*
 14393  000EA0  50F5               	movf	tablat,w,c
 14394  000EA2  ECA6  F01F         	call	_ADC_GetConversion
 14395  000EA6  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 14396  000EAA  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 14397                           
 14398                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14399  000EAE  0E00               	movlw	0
 14400  000EB0  0100               	movlb	0	; () banked
 14401  000EB2  6FA3               	movwf	pow@y& (0+255),b
 14402  000EB4  0E20               	movlw	32
 14403  000EB6  6FA4               	movwf	(pow@y+1)& (0+255),b
 14404  000EB8  0E41               	movlw	65
 14405  000EBA  6FA5               	movwf	(pow@y+2)& (0+255),b
 14406  000EBC  0E00               	movlw	0
 14407  000EBE  6FA0               	movwf	pow@x& (0+255),b
 14408  000EC0  0E00               	movlw	0
 14409  000EC2  6FA1               	movwf	(pow@x+1)& (0+255),b
 14410  000EC4  0E40               	movlw	64
 14411  000EC6  6FA2               	movwf	(pow@x+2)& (0+255),b
 14412  000EC8  ECC4  F00D         	call	_pow	;wreg free
 14413  000ECC  C0A0  F0BD         	movff	?_pow,_AdcConvert$3587
 14414  000ED0  C0A1  F0BE         	movff	?_pow+1,_AdcConvert$3587+1
 14415  000ED4  C0A2  F0BF         	movff	?_pow+2,_AdcConvert$3587+2
 14416                           
 14417                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14418  000ED8  0EC0               	movlw	192
 14419  000EDA  0100               	movlb	0	; () banked
 14420  000EDC  6F6C               	movwf	___ftmul@f2& (0+255),b
 14421  000EDE  0E50               	movlw	80
 14422  000EE0  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14423  000EE2  0E45               	movlw	69
 14424  000EE4  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14425  000EE6  C0BD  F02C         	movff	_AdcConvert$3587,___ftdiv@f2
 14426  000EEA  C0BE  F02D         	movff	_AdcConvert$3587+1,___ftdiv@f2+1
 14427  000EEE  C0BF  F02E         	movff	_AdcConvert$3587+2,___ftdiv@f2+2
 14428  000EF2  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 14429  000EF6  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 14430  000EFA  EC5D  F020         	call	___lwtoft	;wreg free
 14431  000EFE  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14432  000F02  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14433  000F06  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14434  000F0A  EC69  F012         	call	___ftdiv	;wreg free
 14435  000F0E  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14436  000F12  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14437  000F16  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14438  000F1A  ECEE  F011         	call	___ftmul	;wreg free
 14439  000F1E  C069  F078         	movff	?___ftmul,___fttol@f1
 14440  000F22  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14441  000F26  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14442  000F2A  EC72  F011         	call	___fttol	;wreg free
 14443  000F2E  C078  F0BB         	movff	?___fttol,AdcConvert@adcRes
 14444  000F32  C079  F0BC         	movff	?___fttol+1,AdcConvert@adcRes+1
 14445                           
 14446                           ;AdcApp.c: 57: FlashSampleWrite(adcRes, idx + 1);
 14447  000F36  C0BB  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 14448  000F3A  C0BC  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 14449  000F3E  0100               	movlb	0	; () banked
 14450  000F40  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14451  000F42  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14452  000F44  ECF0  F010         	call	_FlashSampleWrite	;wreg free
 14453                           
 14454                           ;AdcApp.c: 58: _delay((unsigned long)((250)*(8000000/4000.0)));
 14455  000F48  0E03               	movlw	3
 14456  000F4A  0100               	movlb	0	; () banked
 14457  000F4C  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 14458  000F4E  0E8A               	movlw	138
 14459  000F50  6FB1               	movwf	??_AdcConvert& (0+255),b
 14460  000F52  0E55               	movlw	85
 14461  000F54                     u9297:
 14462  000F54  2EE8               	decfsz	wreg,f,c
 14463  000F56  D7FE               	bra	u9297
 14464  000F58  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 14465  000F5A  D7FC               	bra	u9297
 14466  000F5C  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 14467  000F5E  D7FA               	bra	u9297
 14468  000F60  D000               	nop2	
 14469  000F62  0100               	movlb	0	; () banked
 14470  000F64  2BC0               	incf	AdcConvert@idx& (0+255),f,b
 14471  000F66  D78F               	goto	l8782
 14472  000F68                     u8920:
 14473                           
 14474                           ; BSR set to: 0
 14475                           ;AdcApp.c: 59: }
 14476                           ;AdcApp.c: 62: ldRxSate = GetUint16FromBitArray(synthLdRxArray, 12);
 14477                           
 14478                           ; BSR set to: 0
 14479  000F68  0EB0               	movlw	low _synthLdRxArray
 14480  000F6A  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14481  000F6C  0E01               	movlw	high _synthLdRxArray
 14482  000F6E  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14483  000F70  0E00               	movlw	0
 14484  000F72  6E1B               	movwf	GetUint16FromBitArray@numOfBits+1,c
 14485  000F74  0E0C               	movlw	12
 14486  000F76  6E1A               	movwf	GetUint16FromBitArray@numOfBits,c
 14487  000F78  ECC2  F01A         	call	_GetUint16FromBitArray	;wreg free
 14488  000F7C  C018  F0B7         	movff	?_GetUint16FromBitArray,AdcConvert@ldRxSate
 14489  000F80  C019  F0B8         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldRxSate+1
 14490                           
 14491                           ;AdcApp.c: 63: FlashSampleWrite(ldRxSate, idx + 1);
 14492  000F84  C0B7  F02D         	movff	AdcConvert@ldRxSate,FlashSampleWrite@sampleData
 14493  000F88  C0B8  F02E         	movff	AdcConvert@ldRxSate+1,FlashSampleWrite@sampleData+1
 14494  000F8C  0100               	movlb	0	; () banked
 14495  000F8E  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14496  000F90  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14497  000F92  ECF0  F010         	call	_FlashSampleWrite	;wreg free
 14498                           
 14499                           ;AdcApp.c: 64: ldTxSate = GetUint16FromBitArray(synthLdTxArray, 12);
 14500  000F96  0EA4               	movlw	low _synthLdTxArray
 14501  000F98  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14502  000F9A  0E01               	movlw	high _synthLdTxArray
 14503  000F9C  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14504  000F9E  0E00               	movlw	0
 14505  000FA0  6E1B               	movwf	GetUint16FromBitArray@numOfBits+1,c
 14506  000FA2  0E0C               	movlw	12
 14507  000FA4  6E1A               	movwf	GetUint16FromBitArray@numOfBits,c
 14508  000FA6  ECC2  F01A         	call	_GetUint16FromBitArray	;wreg free
 14509  000FAA  C018  F0B9         	movff	?_GetUint16FromBitArray,AdcConvert@ldTxSate
 14510  000FAE  C019  F0BA         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldTxSate+1
 14511                           
 14512                           ;AdcApp.c: 65: FlashSampleWrite(ldTxSate, idx + 2);
 14513  000FB2  C0B9  F02D         	movff	AdcConvert@ldTxSate,FlashSampleWrite@sampleData
 14514  000FB6  C0BA  F02E         	movff	AdcConvert@ldTxSate+1,FlashSampleWrite@sampleData+1
 14515  000FBA  0100               	movlb	0	; () banked
 14516  000FBC  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14517  000FBE  0F02               	addlw	2
 14518  000FC0  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14519  000FC2  ECF0  F010         	call	_FlashSampleWrite	;wreg free
 14520                           
 14521                           ;AdcApp.c: 67: }
 14522  000FC6  0012               	return	
 14523  000FC8                     l126:
 14524                           
 14525                           ;AdcApp.c: 68: else if (adcSampleMode == SINGLE_CHANNEL)
 14526  000FC8  043D               	decf	_adcSampleMode,w,c
 14527  000FCA  A4D8               	btfss	status,2,c
 14528  000FCC  0012               	return	
 14529                           
 14530                           ;AdcApp.c: 69: {
 14531                           ;AdcApp.c: 70: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 14532  000FCE  0100               	movlb	0	; () banked
 14533  000FD0  51F6               	movf	_channel& (0+255),w,b
 14534  000FD2  0D01               	mullw	1
 14535  000FD4  0E42               	movlw	low _channelArr
 14536  000FD6  24F3               	addwf	prodl,w,c
 14537  000FD8  6EF6               	movwf	tblptrl,c
 14538  000FDA  0E06               	movlw	high _channelArr
 14539  000FDC  20F4               	addwfc	prodh,w,c
 14540  000FDE  6EF7               	movwf	tblptrh,c
 14541  000FE0                     	if	0	;There are less than 3 active tblptr bytes
 14542  000FE0                     	endif
 14543  000FE0  0008               	tblrd		*
 14544  000FE2  50F5               	movf	tablat,w,c
 14545  000FE4  ECA6  F01F         	call	_ADC_GetConversion
 14546  000FE8  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_350
 14547  000FEC  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_350+1
 14548                           
 14549                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14550  000FF0  0E00               	movlw	0
 14551  000FF2  0100               	movlb	0	; () banked
 14552  000FF4  6FA3               	movwf	pow@y& (0+255),b
 14553  000FF6  0E20               	movlw	32
 14554  000FF8  6FA4               	movwf	(pow@y+1)& (0+255),b
 14555  000FFA  0E41               	movlw	65
 14556  000FFC  6FA5               	movwf	(pow@y+2)& (0+255),b
 14557  000FFE  0E00               	movlw	0
 14558  001000  6FA0               	movwf	pow@x& (0+255),b
 14559  001002  0E00               	movlw	0
 14560  001004  6FA1               	movwf	(pow@x+1)& (0+255),b
 14561  001006  0E40               	movlw	64
 14562  001008  6FA2               	movwf	(pow@x+2)& (0+255),b
 14563  00100A  ECC4  F00D         	call	_pow	;wreg free
 14564  00100E  C0A0  F0BD         	movff	?_pow,_AdcConvert$3587
 14565  001012  C0A1  F0BE         	movff	?_pow+1,_AdcConvert$3587+1
 14566  001016  C0A2  F0BF         	movff	?_pow+2,_AdcConvert$3587+2
 14567                           
 14568                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14569  00101A  0EC0               	movlw	192
 14570  00101C  0100               	movlb	0	; () banked
 14571  00101E  6F6C               	movwf	___ftmul@f2& (0+255),b
 14572  001020  0E50               	movlw	80
 14573  001022  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14574  001024  0E45               	movlw	69
 14575  001026  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14576  001028  C0BD  F02C         	movff	_AdcConvert$3587,___ftdiv@f2
 14577  00102C  C0BE  F02D         	movff	_AdcConvert$3587+1,___ftdiv@f2+1
 14578  001030  C0BF  F02E         	movff	_AdcConvert$3587+2,___ftdiv@f2+2
 14579  001034  C0B5  F020         	movff	AdcConvert@_adcResult_350,___lwtoft@c
 14580  001038  C0B6  F021         	movff	AdcConvert@_adcResult_350+1,___lwtoft@c+1
 14581  00103C  EC5D  F020         	call	___lwtoft	;wreg free
 14582  001040  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14583  001044  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14584  001048  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14585  00104C  EC69  F012         	call	___ftdiv	;wreg free
 14586  001050  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14587  001054  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14588  001058  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14589  00105C  ECEE  F011         	call	___ftmul	;wreg free
 14590  001060  C069  F078         	movff	?___ftmul,___fttol@f1
 14591  001064  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14592  001068  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14593  00106C  EC72  F011         	call	___fttol	;wreg free
 14594  001070  C078  F0BB         	movff	?___fttol,AdcConvert@adcRes
 14595  001074  C079  F0BC         	movff	?___fttol+1,AdcConvert@adcRes+1
 14596  001078  0012               	return	
 14597  00107A                     __end_of_AdcConvert:
 14598                           	opt stack 0
 14599                           tosu	equ	0xFFF
 14600                           tosh	equ	0xFFE
 14601                           tosl	equ	0xFFD
 14602                           pclath	equ	0xFFA
 14603                           tblptru	equ	0xFF8
 14604                           tblptrh	equ	0xFF7
 14605                           tblptrl	equ	0xFF6
 14606                           tablat	equ	0xFF5
 14607                           prodh	equ	0xFF4
 14608                           prodl	equ	0xFF3
 14609                           intcon	equ	0xFF2
 14610                           intcon2	equ	0xFF1
 14611                           postinc0	equ	0xFEE
 14612                           plusw0	equ	0xFEB
 14613                           wreg	equ	0xFE8
 14614                           indf1	equ	0xFE7
 14615                           postdec1	equ	0xFE5
 14616                           fsr1h	equ	0xFE2
 14617                           fsr1l	equ	0xFE1
 14618                           indf2	equ	0xFDF
 14619                           postinc2	equ	0xFDE
 14620                           postdec2	equ	0xFDD
 14621                           plusw2	equ	0xFDB
 14622                           fsr2h	equ	0xFDA
 14623                           fsr2l	equ	0xFD9
 14624                           status	equ	0xFD8
 14625                           
 14626 ;; *************** function _pow *****************
 14627 ;; Defined at:
 14628 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 14629 ;; Parameters:    Size  Location     Type
 14630 ;;  x               3   64[BANK0 ] void 
 14631 ;;  y               3   67[BANK0 ] void 
 14632 ;; Auto vars:     Size  Location     Type
 14633 ;;  yi              4   77[BANK0 ] unsigned long 
 14634 ;;  sign            1   76[BANK0 ] unsigned char 
 14635 ;; Return value:  Size  Location     Type
 14636 ;;                  3   64[BANK0 ] unsigned char 
 14637 ;; Registers used:
 14638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14639 ;; Tracked objects:
 14640 ;;		On entry : 0/0
 14641 ;;		On exit  : 0/0
 14642 ;;		Unchanged: 0/0
 14643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14644 ;;      Params:         0       6       0       0       0       0       0
 14645 ;;      Locals:         0      11       0       0       0       0       0
 14646 ;;      Temps:          0       0       0       0       0       0       0
 14647 ;;      Totals:         0      17       0       0       0       0       0
 14648 ;;Total ram usage:       17 bytes
 14649 ;; Hardware stack levels used:    1
 14650 ;; Hardware stack levels required when called:    8
 14651 ;; This function calls:
 14652 ;;		___ftge
 14653 ;;		___ftmul
 14654 ;;		___ftneg
 14655 ;;		___fttol
 14656 ;;		___lltoft
 14657 ;;		_exp
 14658 ;;		_log
 14659 ;; This function is called by:
 14660 ;;		_AdcConvert
 14661 ;;		_ReadIntFromEeprom
 14662 ;; This function uses a non-reentrant model
 14663 ;;
 14664                           
 14665                           	psect	text85
 14666  001B88                     __ptext85:
 14667                           	opt stack 0
 14668  001B88                     _pow:
 14669                           	opt stack 18
 14670                           
 14671                           ;incstack = 0
 14672  001B88  0E00               	movlw	0
 14673  001B8A  0100               	movlb	0	; () banked
 14674  001B8C  6FAC               	movwf	pow@sign& (0+255),b
 14675                           
 14676                           ; BSR set to: 0
 14677  001B8E  51A0               	movf	pow@x& (0+255),w,b
 14678  001B90  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 14679  001B92  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 14680  001B94  A4D8               	btfss	status,2,c
 14681  001B96  D01D               	goto	l2043
 14682                           
 14683                           ; BSR set to: 0
 14684  001B98  0E00               	movlw	0
 14685  001B9A  6E18               	movwf	___ftge@ff1,c
 14686  001B9C  0E00               	movlw	0
 14687  001B9E  6E19               	movwf	___ftge@ff1+1,c
 14688  001BA0  0E00               	movlw	0
 14689  001BA2  6E1A               	movwf	___ftge@ff1+2,c
 14690  001BA4  C0A3  F01B         	movff	pow@y,___ftge@ff2
 14691  001BA8  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 14692  001BAC  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 14693  001BB0  EC92  F018         	call	___ftge	;wreg free
 14694  001BB4  A0D8               	btfss	status,0,c
 14695  001BB6  D005               	goto	l2044
 14696  001BB8  0E00               	movlw	0
 14697  001BBA  0101               	movlb	1	; () banked
 14698  001BBC  6F35               	movwf	(_errno+1)& (0+255),b
 14699  001BBE  0E21               	movlw	33
 14700  001BC0  6F34               	movwf	_errno& (0+255),b
 14701  001BC2                     l2044:
 14702  001BC2  0E00               	movlw	0
 14703  001BC4  0100               	movlb	0	; () banked
 14704  001BC6  6FA0               	movwf	?_pow& (0+255),b
 14705  001BC8  0E00               	movlw	0
 14706  001BCA  6FA1               	movwf	(?_pow+1)& (0+255),b
 14707  001BCC  0E00               	movlw	0
 14708  001BCE  6FA2               	movwf	(?_pow+2)& (0+255),b
 14709                           
 14710                           ; BSR set to: 0
 14711  001BD0  0012               	return	
 14712  001BD2                     l2043:
 14713                           
 14714                           ; BSR set to: 0
 14715                           
 14716                           ; BSR set to: 0
 14717  001BD2  51A3               	movf	pow@y& (0+255),w,b
 14718  001BD4  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 14719  001BD6  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 14720  001BD8  A4D8               	btfss	status,2,c
 14721  001BDA  D007               	goto	l2046
 14722                           
 14723                           ; BSR set to: 0
 14724  001BDC  0E00               	movlw	0
 14725  001BDE  6FA0               	movwf	?_pow& (0+255),b
 14726  001BE0  0E80               	movlw	128
 14727  001BE2  6FA1               	movwf	(?_pow+1)& (0+255),b
 14728  001BE4  0E3F               	movlw	63
 14729  001BE6  6FA2               	movwf	(?_pow+2)& (0+255),b
 14730                           
 14731                           ; BSR set to: 0
 14732  001BE8  0012               	return	
 14733  001BEA                     l2046:
 14734                           
 14735                           ; BSR set to: 0
 14736                           
 14737                           ; BSR set to: 0
 14738  001BEA  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 14739  001BEC  D043               	goto	l2047
 14740                           
 14741                           ; BSR set to: 0
 14742  001BEE  C0A3  F078         	movff	pow@y,___fttol@f1
 14743  001BF2  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 14744  001BF6  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 14745  001BFA  EC72  F011         	call	___fttol	;wreg free
 14746  001BFE  C078  F0AD         	movff	?___fttol,pow@yi
 14747  001C02  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 14748  001C06  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 14749  001C0A  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 14750  001C0E  C0AD  F020         	movff	pow@yi,___lltoft@c
 14751  001C12  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 14752  001C16  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 14753  001C1A  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 14754  001C1E  ECE7  F01B         	call	___lltoft	;wreg free
 14755  001C22  0100               	movlb	0	; () banked
 14756  001C24  51A3               	movf	pow@y& (0+255),w,b
 14757  001C26  1820               	xorwf	?___lltoft,w,c
 14758  001C28  E107               	bnz	u7490
 14759  001C2A  51A4               	movf	(pow@y+1)& (0+255),w,b
 14760  001C2C  1821               	xorwf	?___lltoft+1,w,c
 14761  001C2E  E104               	bnz	u7490
 14762  001C30  51A5               	movf	(pow@y+2)& (0+255),w,b
 14763  001C32  1822               	xorwf	?___lltoft+2,w,c
 14764  001C34  B4D8               	btfsc	status,2,c
 14765  001C36  D00D               	goto	l2048
 14766  001C38                     u7490:
 14767                           
 14768                           ; BSR set to: 0
 14769  001C38  0E00               	movlw	0
 14770  001C3A  0101               	movlb	1	; () banked
 14771  001C3C  6F35               	movwf	(_errno+1)& (0+255),b
 14772  001C3E  0E21               	movlw	33
 14773  001C40  6F34               	movwf	_errno& (0+255),b
 14774  001C42  0E00               	movlw	0
 14775  001C44  0100               	movlb	0	; () banked
 14776  001C46  6FA0               	movwf	?_pow& (0+255),b
 14777  001C48  0E00               	movlw	0
 14778  001C4A  6FA1               	movwf	(?_pow+1)& (0+255),b
 14779  001C4C  0E00               	movlw	0
 14780  001C4E  6FA2               	movwf	(?_pow+2)& (0+255),b
 14781                           
 14782                           ; BSR set to: 0
 14783  001C50  0012               	return	
 14784  001C52                     l2048:
 14785                           
 14786                           ; BSR set to: 0
 14787                           
 14788                           ; BSR set to: 0
 14789  001C52  51AD               	movf	pow@yi& (0+255),w,b
 14790  001C54  0B01               	andlw	1
 14791  001C56  6FAC               	movwf	pow@sign& (0+255),b
 14792                           
 14793                           ; BSR set to: 0
 14794  001C58  C0A0  F018         	movff	pow@x,___ftneg@f1
 14795  001C5C  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14796  001C60  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14797  001C64  EC4B  F020         	call	___ftneg	;wreg free
 14798  001C68  C018  F0A0         	movff	?___ftneg,pow@x
 14799  001C6C  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 14800  001C70  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 14801  001C74                     l2047:
 14802  001C74  C0A0  F08E         	movff	pow@x,log@x
 14803  001C78  C0A1  F08F         	movff	pow@x+1,log@x+1
 14804  001C7C  C0A2  F090         	movff	pow@x+2,log@x+2
 14805  001C80  EC42  F00F         	call	_log	;wreg free
 14806  001C84  C08E  F0A6         	movff	?_log,_pow$3590
 14807  001C88  C08F  F0A7         	movff	?_log+1,_pow$3590+1
 14808  001C8C  C090  F0A8         	movff	?_log+2,_pow$3590+2
 14809  001C90  C0A6  F069         	movff	_pow$3590,___ftmul@f1
 14810  001C94  C0A7  F06A         	movff	_pow$3590+1,___ftmul@f1+1
 14811  001C98  C0A8  F06B         	movff	_pow$3590+2,___ftmul@f1+2
 14812  001C9C  C0A3  F06C         	movff	pow@y,___ftmul@f2
 14813  001CA0  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 14814  001CA4  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 14815  001CA8  ECEE  F011         	call	___ftmul	;wreg free
 14816  001CAC  C069  F0A9         	movff	?___ftmul,_pow$3591
 14817  001CB0  C06A  F0AA         	movff	?___ftmul+1,_pow$3591+1
 14818  001CB4  C06B  F0AB         	movff	?___ftmul+2,_pow$3591+2
 14819  001CB8  C0A9  F097         	movff	_pow$3591,exp@x
 14820  001CBC  C0AA  F098         	movff	_pow$3591+1,exp@x+1
 14821  001CC0  C0AB  F099         	movff	_pow$3591+2,exp@x+2
 14822  001CC4  EC39  F009         	call	_exp	;wreg free
 14823  001CC8  C097  F0A0         	movff	?_exp,pow@x
 14824  001CCC  C098  F0A1         	movff	?_exp+1,pow@x+1
 14825  001CD0  C099  F0A2         	movff	?_exp+2,pow@x+2
 14826  001CD4  0100               	movlb	0	; () banked
 14827  001CD6  51AC               	movf	pow@sign& (0+255),w,b
 14828  001CD8  B4D8               	btfsc	status,2,c
 14829  001CDA  D00F               	goto	l2049
 14830                           
 14831                           ; BSR set to: 0
 14832  001CDC  C0A0  F018         	movff	pow@x,___ftneg@f1
 14833  001CE0  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14834  001CE4  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14835  001CE8  EC4B  F020         	call	___ftneg	;wreg free
 14836  001CEC  C018  F0A0         	movff	?___ftneg,?_pow
 14837  001CF0  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 14838  001CF4  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 14839  001CF8  0012               	return	
 14840  001CFA                     l2049:
 14841                           
 14842                           ; BSR set to: 0
 14843  001CFA  C0A0  F0A0         	movff	pow@x,?_pow
 14844  001CFE  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 14845  001D02  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 14846  001D06  0012               	return		;funcret
 14847  001D08                     __end_of_pow:
 14848                           	opt stack 0
 14849                           tosu	equ	0xFFF
 14850                           tosh	equ	0xFFE
 14851                           tosl	equ	0xFFD
 14852                           pclath	equ	0xFFA
 14853                           tblptru	equ	0xFF8
 14854                           tblptrh	equ	0xFF7
 14855                           tblptrl	equ	0xFF6
 14856                           tablat	equ	0xFF5
 14857                           prodh	equ	0xFF4
 14858                           prodl	equ	0xFF3
 14859                           intcon	equ	0xFF2
 14860                           intcon2	equ	0xFF1
 14861                           postinc0	equ	0xFEE
 14862                           plusw0	equ	0xFEB
 14863                           wreg	equ	0xFE8
 14864                           indf1	equ	0xFE7
 14865                           postdec1	equ	0xFE5
 14866                           fsr1h	equ	0xFE2
 14867                           fsr1l	equ	0xFE1
 14868                           indf2	equ	0xFDF
 14869                           postinc2	equ	0xFDE
 14870                           postdec2	equ	0xFDD
 14871                           plusw2	equ	0xFDB
 14872                           fsr2h	equ	0xFDA
 14873                           fsr2l	equ	0xFD9
 14874                           status	equ	0xFD8
 14875                           
 14876 ;; *************** function _log *****************
 14877 ;; Defined at:
 14878 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 14879 ;; Parameters:    Size  Location     Type
 14880 ;;  x               3   46[BANK0 ] unsigned char 
 14881 ;; Auto vars:     Size  Location     Type
 14882 ;;  exponent        2   49[BANK0 ] int 
 14883 ;; Return value:  Size  Location     Type
 14884 ;;                  3   46[BANK0 ] int 
 14885 ;; Registers used:
 14886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14887 ;; Tracked objects:
 14888 ;;		On entry : 0/0
 14889 ;;		On exit  : 0/0
 14890 ;;		Unchanged: 0/0
 14891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14892 ;;      Params:         0       3       0       0       0       0       0
 14893 ;;      Locals:         0       2       0       0       0       0       0
 14894 ;;      Temps:          0       0       0       0       0       0       0
 14895 ;;      Totals:         0       5       0       0       0       0       0
 14896 ;;Total ram usage:        5 bytes
 14897 ;; Hardware stack levels used:    1
 14898 ;; Hardware stack levels required when called:    7
 14899 ;; This function calls:
 14900 ;;		___awtoft
 14901 ;;		___ftadd
 14902 ;;		___ftmul
 14903 ;;		_eval_poly
 14904 ;;		_frexp
 14905 ;; This function is called by:
 14906 ;;		_pow
 14907 ;; This function uses a non-reentrant model
 14908 ;;
 14909                           
 14910                           	psect	text86
 14911  001E84                     __ptext86:
 14912                           	opt stack 0
 14913  001E84                     _log:
 14914                           	opt stack 18
 14915                           
 14916                           ;incstack = 0
 14917  001E84  0100               	movlb	0	; () banked
 14918  001E86  AF90               	btfss	(log@x+2)& (0+255),7,b
 14919  001E88  D00D               	goto	l2305
 14920                           
 14921                           ; BSR set to: 0
 14922  001E8A  0E00               	movlw	0
 14923  001E8C  0101               	movlb	1	; () banked
 14924  001E8E  6F35               	movwf	(_errno+1)& (0+255),b
 14925  001E90  0E21               	movlw	33
 14926  001E92  6F34               	movwf	_errno& (0+255),b
 14927  001E94  0E00               	movlw	0
 14928  001E96  0100               	movlb	0	; () banked
 14929  001E98  6F8E               	movwf	?_log& (0+255),b
 14930  001E9A  0E00               	movlw	0
 14931  001E9C  6F8F               	movwf	(?_log+1)& (0+255),b
 14932  001E9E  0E00               	movlw	0
 14933  001EA0  6F90               	movwf	(?_log+2)& (0+255),b
 14934                           
 14935                           ; BSR set to: 0
 14936  001EA2  0012               	return	
 14937  001EA4                     l2305:
 14938                           
 14939                           ; BSR set to: 0
 14940                           
 14941                           ; BSR set to: 0
 14942  001EA4  518E               	movf	log@x& (0+255),w,b
 14943  001EA6  118F               	iorwf	(log@x+1)& (0+255),w,b
 14944  001EA8  1190               	iorwf	(log@x+2)& (0+255),w,b
 14945  001EAA  A4D8               	btfss	status,2,c
 14946  001EAC  D00D               	goto	l2307
 14947                           
 14948                           ; BSR set to: 0
 14949  001EAE  0E00               	movlw	0
 14950  001EB0  0101               	movlb	1	; () banked
 14951  001EB2  6F35               	movwf	(_errno+1)& (0+255),b
 14952  001EB4  0E22               	movlw	34
 14953  001EB6  6F34               	movwf	_errno& (0+255),b
 14954  001EB8  0E00               	movlw	0
 14955  001EBA  0100               	movlb	0	; () banked
 14956  001EBC  6F8E               	movwf	?_log& (0+255),b
 14957  001EBE  0E00               	movlw	0
 14958  001EC0  6F8F               	movwf	(?_log+1)& (0+255),b
 14959  001EC2  0E00               	movlw	0
 14960  001EC4  6F90               	movwf	(?_log+2)& (0+255),b
 14961                           
 14962                           ; BSR set to: 0
 14963  001EC6  0012               	return	
 14964  001EC8                     l2307:
 14965                           
 14966                           ; BSR set to: 0
 14967                           
 14968                           ; BSR set to: 0
 14969  001EC8  0E00               	movlw	0
 14970  001ECA  6F6C               	movwf	___ftmul@f2& (0+255),b
 14971  001ECC  0E00               	movlw	0
 14972  001ECE  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14973  001ED0  0E40               	movlw	64
 14974  001ED2  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14975  001ED4  0E91               	movlw	low log@exponent
 14976  001ED6  6E1B               	movwf	frexp@eptr,c
 14977  001ED8  0E00               	movlw	high log@exponent
 14978  001EDA  6E1C               	movwf	frexp@eptr+1,c
 14979  001EDC  C08E  F018         	movff	log@x,frexp@value
 14980  001EE0  C08F  F019         	movff	log@x+1,frexp@value+1
 14981  001EE4  C090  F01A         	movff	log@x+2,frexp@value+2
 14982  001EE8  EC4A  F018         	call	_frexp	;wreg free
 14983  001EEC  C018  F069         	movff	?_frexp,___ftmul@f1
 14984  001EF0  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 14985  001EF4  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 14986  001EF8  ECEE  F011         	call	___ftmul	;wreg free
 14987  001EFC  C069  F078         	movff	?___ftmul,___ftadd@f1
 14988  001F00  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 14989  001F04  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 14990  001F08  0E00               	movlw	0
 14991  001F0A  0100               	movlb	0	; () banked
 14992  001F0C  6F7B               	movwf	___ftadd@f2& (0+255),b
 14993  001F0E  0E80               	movlw	128
 14994  001F10  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 14995  001F12  0EBF               	movlw	191
 14996  001F14  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 14997  001F16  ECED  F00C         	call	___ftadd	;wreg free
 14998  001F1A  C078  F08E         	movff	?___ftadd,log@x
 14999  001F1E  C079  F08F         	movff	?___ftadd+1,log@x+1
 15000  001F22  C07A  F090         	movff	?___ftadd+2,log@x+2
 15001  001F26  0100               	movlb	0	; () banked
 15002  001F28  0791               	decf	log@exponent& (0+255),f,b
 15003  001F2A  A0D8               	btfss	status,0,c
 15004  001F2C  0792               	decf	(log@exponent+1)& (0+255),f,b
 15005                           
 15006                           ; BSR set to: 0
 15007  001F2E  C08E  F084         	movff	log@x,eval_poly@x
 15008  001F32  C08F  F085         	movff	log@x+1,eval_poly@x+1
 15009  001F36  C090  F086         	movff	log@x+2,eval_poly@x+2
 15010  001F3A  0E75               	movlw	low log@coeff
 15011  001F3C  6F87               	movwf	eval_poly@d& (0+255),b
 15012  001F3E  0E06               	movlw	high log@coeff
 15013  001F40  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15014  001F42  0E00               	movlw	0
 15015  001F44  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15016  001F46  0E08               	movlw	8
 15017  001F48  6F89               	movwf	eval_poly@n& (0+255),b
 15018  001F4A  EC0F  F015         	call	_eval_poly	;wreg free
 15019  001F4E  C084  F08E         	movff	?_eval_poly,log@x
 15020  001F52  C085  F08F         	movff	?_eval_poly+1,log@x+1
 15021  001F56  C086  F090         	movff	?_eval_poly+2,log@x+2
 15022  001F5A  0E72               	movlw	114
 15023  001F5C  0100               	movlb	0	; () banked
 15024  001F5E  6F6C               	movwf	___ftmul@f2& (0+255),b
 15025  001F60  0E31               	movlw	49
 15026  001F62  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15027  001F64  0E3F               	movlw	63
 15028  001F66  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15029  001F68  C091  F020         	movff	log@exponent,___awtoft@c
 15030  001F6C  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 15031  001F70  ECBA  F01E         	call	___awtoft	;wreg free
 15032  001F74  C020  F069         	movff	?___awtoft,___ftmul@f1
 15033  001F78  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 15034  001F7C  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 15035  001F80  ECEE  F011         	call	___ftmul	;wreg free
 15036  001F84  C069  F078         	movff	?___ftmul,___ftadd@f1
 15037  001F88  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15038  001F8C  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15039  001F90  C08E  F07B         	movff	log@x,___ftadd@f2
 15040  001F94  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 15041  001F98  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 15042  001F9C  ECED  F00C         	call	___ftadd	;wreg free
 15043  001FA0  C078  F08E         	movff	?___ftadd,?_log
 15044  001FA4  C079  F08F         	movff	?___ftadd+1,?_log+1
 15045  001FA8  C07A  F090         	movff	?___ftadd+2,?_log+2
 15046  001FAC  0012               	return	
 15047  001FAE                     __end_of_log:
 15048                           	opt stack 0
 15049                           tosu	equ	0xFFF
 15050                           tosh	equ	0xFFE
 15051                           tosl	equ	0xFFD
 15052                           pclath	equ	0xFFA
 15053                           tblptru	equ	0xFF8
 15054                           tblptrh	equ	0xFF7
 15055                           tblptrl	equ	0xFF6
 15056                           tablat	equ	0xFF5
 15057                           prodh	equ	0xFF4
 15058                           prodl	equ	0xFF3
 15059                           intcon	equ	0xFF2
 15060                           intcon2	equ	0xFF1
 15061                           postinc0	equ	0xFEE
 15062                           plusw0	equ	0xFEB
 15063                           wreg	equ	0xFE8
 15064                           indf1	equ	0xFE7
 15065                           postdec1	equ	0xFE5
 15066                           fsr1h	equ	0xFE2
 15067                           fsr1l	equ	0xFE1
 15068                           indf2	equ	0xFDF
 15069                           postinc2	equ	0xFDE
 15070                           postdec2	equ	0xFDD
 15071                           plusw2	equ	0xFDB
 15072                           fsr2h	equ	0xFDA
 15073                           fsr2l	equ	0xFD9
 15074                           status	equ	0xFD8
 15075                           
 15076 ;; *************** function _exp *****************
 15077 ;; Defined at:
 15078 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 15079 ;; Parameters:    Size  Location     Type
 15080 ;;  x               3   55[BANK0 ] int 
 15081 ;; Auto vars:     Size  Location     Type
 15082 ;;  exponent        2   61[BANK0 ] int 
 15083 ;;  sign            1   63[BANK0 ] unsigned char 
 15084 ;; Return value:  Size  Location     Type
 15085 ;;                  3   55[BANK0 ] unsigned char 
 15086 ;; Registers used:
 15087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15088 ;; Tracked objects:
 15089 ;;		On entry : 0/0
 15090 ;;		On exit  : 0/0
 15091 ;;		Unchanged: 0/0
 15092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15093 ;;      Params:         0       3       0       0       0       0       0
 15094 ;;      Locals:         0       6       0       0       0       0       0
 15095 ;;      Temps:          0       0       0       0       0       0       0
 15096 ;;      Totals:         0       9       0       0       0       0       0
 15097 ;;Total ram usage:        9 bytes
 15098 ;; Hardware stack levels used:    1
 15099 ;; Hardware stack levels required when called:    7
 15100 ;; This function calls:
 15101 ;;		___awtoft
 15102 ;;		___ftdiv
 15103 ;;		___ftge
 15104 ;;		___ftmul
 15105 ;;		___ftneg
 15106 ;;		___ftsub
 15107 ;;		___fttol
 15108 ;;		_eval_poly
 15109 ;;		_floor
 15110 ;;		_ldexp
 15111 ;; This function is called by:
 15112 ;;		_pow
 15113 ;; This function uses a non-reentrant model
 15114 ;;
 15115                           
 15116                           	psect	text87
 15117  001272                     __ptext87:
 15118                           	opt stack 0
 15119  001272                     _exp:
 15120                           	opt stack 18
 15121                           
 15122                           ;incstack = 0
 15123  001272  0100               	movlb	0	; () banked
 15124  001274  5197               	movf	exp@x& (0+255),w,b
 15125  001276  1198               	iorwf	(exp@x+1)& (0+255),w,b
 15126  001278  1199               	iorwf	(exp@x+2)& (0+255),w,b
 15127  00127A  A4D8               	btfss	status,2,c
 15128  00127C  D007               	goto	l2241
 15129                           
 15130                           ; BSR set to: 0
 15131  00127E  0E00               	movlw	0
 15132  001280  6F97               	movwf	?_exp& (0+255),b
 15133  001282  0E80               	movlw	128
 15134  001284  6F98               	movwf	(?_exp+1)& (0+255),b
 15135  001286  0E3F               	movlw	63
 15136  001288  6F99               	movwf	(?_exp+2)& (0+255),b
 15137                           
 15138                           ; BSR set to: 0
 15139  00128A  0012               	return	
 15140  00128C                     l2241:
 15141                           
 15142                           ; BSR set to: 0
 15143                           
 15144                           ; BSR set to: 0
 15145  00128C  0E72               	movlw	114
 15146  00128E  6E18               	movwf	___ftge@ff1,c
 15147  001290  0E31               	movlw	49
 15148  001292  6E19               	movwf	___ftge@ff1+1,c
 15149  001294  0E44               	movlw	68
 15150  001296  6E1A               	movwf	___ftge@ff1+2,c
 15151  001298  C097  F01B         	movff	exp@x,___ftge@ff2
 15152  00129C  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 15153  0012A0  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 15154  0012A4  EC92  F018         	call	___ftge	;wreg free
 15155  0012A8  B0D8               	btfsc	status,0,c
 15156  0012AA  D00D               	goto	l2243
 15157  0012AC  0E00               	movlw	0
 15158  0012AE  0101               	movlb	1	; () banked
 15159  0012B0  6F35               	movwf	(_errno+1)& (0+255),b
 15160  0012B2  0E22               	movlw	34
 15161  0012B4  6F34               	movwf	_errno& (0+255),b
 15162  0012B6  0EFF               	movlw	255
 15163  0012B8  0100               	movlb	0	; () banked
 15164  0012BA  6F97               	movwf	?_exp& (0+255),b
 15165  0012BC  0E7F               	movlw	127
 15166  0012BE  6F98               	movwf	(?_exp+1)& (0+255),b
 15167  0012C0  0E7F               	movlw	127
 15168  0012C2  6F99               	movwf	(?_exp+2)& (0+255),b
 15169                           
 15170                           ; BSR set to: 0
 15171  0012C4  0012               	return	
 15172  0012C6                     l2243:
 15173                           
 15174                           ; BSR set to: 0
 15175  0012C6  C097  F018         	movff	exp@x,___ftge@ff1
 15176  0012CA  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 15177  0012CE  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 15178  0012D2  0E49               	movlw	73
 15179  0012D4  6E1B               	movwf	___ftge@ff2,c
 15180  0012D6  0E3A               	movlw	58
 15181  0012D8  6E1C               	movwf	___ftge@ff2+1,c
 15182  0012DA  0EC4               	movlw	196
 15183  0012DC  6E1D               	movwf	___ftge@ff2+2,c
 15184  0012DE  EC92  F018         	call	___ftge	;wreg free
 15185  0012E2  B0D8               	btfsc	status,0,c
 15186  0012E4  D00D               	goto	l2244
 15187  0012E6  0E00               	movlw	0
 15188  0012E8  0101               	movlb	1	; () banked
 15189  0012EA  6F35               	movwf	(_errno+1)& (0+255),b
 15190  0012EC  0E22               	movlw	34
 15191  0012EE  6F34               	movwf	_errno& (0+255),b
 15192  0012F0  0E00               	movlw	0
 15193  0012F2  0100               	movlb	0	; () banked
 15194  0012F4  6F97               	movwf	?_exp& (0+255),b
 15195  0012F6  0E00               	movlw	0
 15196  0012F8  6F98               	movwf	(?_exp+1)& (0+255),b
 15197  0012FA  0E00               	movlw	0
 15198  0012FC  6F99               	movwf	(?_exp+2)& (0+255),b
 15199                           
 15200                           ; BSR set to: 0
 15201  0012FE  0012               	return	
 15202  001300                     l2244:
 15203                           
 15204                           ; BSR set to: 0
 15205  001300  0100               	movlb	0	; () banked
 15206  001302  AF99               	btfss	(exp@x+2)& (0+255),7,b
 15207  001304  D002               	goto	u7380
 15208  001306  0E01               	movlw	1
 15209  001308  D001               	goto	u7390
 15210  00130A                     u7380:
 15211  00130A  0E00               	movlw	0
 15212  00130C                     u7390:
 15213  00130C  6F9F               	movwf	exp@sign& (0+255),b
 15214                           
 15215                           ; BSR set to: 0
 15216  00130E  519F               	movf	exp@sign& (0+255),w,b
 15217  001310  B4D8               	btfsc	status,2,c
 15218  001312  D00E               	goto	l2245
 15219                           
 15220                           ; BSR set to: 0
 15221  001314  C097  F018         	movff	exp@x,___ftneg@f1
 15222  001318  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 15223  00131C  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 15224  001320  EC4B  F020         	call	___ftneg	;wreg free
 15225  001324  C018  F097         	movff	?___ftneg,exp@x
 15226  001328  C019  F098         	movff	?___ftneg+1,exp@x+1
 15227  00132C  C01A  F099         	movff	?___ftneg+2,exp@x+2
 15228  001330                     l2245:
 15229  001330  C097  F069         	movff	exp@x,___ftmul@f1
 15230  001334  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 15231  001338  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 15232  00133C  0EAA               	movlw	170
 15233  00133E  0100               	movlb	0	; () banked
 15234  001340  6F6C               	movwf	___ftmul@f2& (0+255),b
 15235  001342  0EB8               	movlw	184
 15236  001344  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15237  001346  0E3F               	movlw	63
 15238  001348  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15239  00134A  ECEE  F011         	call	___ftmul	;wreg free
 15240  00134E  C069  F097         	movff	?___ftmul,exp@x
 15241  001352  C06A  F098         	movff	?___ftmul+1,exp@x+1
 15242  001356  C06B  F099         	movff	?___ftmul+2,exp@x+2
 15243  00135A  C097  F08F         	movff	exp@x,floor@x
 15244  00135E  C098  F090         	movff	exp@x+1,floor@x+1
 15245  001362  C099  F091         	movff	exp@x+2,floor@x+2
 15246  001366  EC33  F014         	call	_floor	;wreg free
 15247  00136A  C08F  F09A         	movff	?_floor,_exp$3592
 15248  00136E  C090  F09B         	movff	?_floor+1,_exp$3592+1
 15249  001372  C091  F09C         	movff	?_floor+2,_exp$3592+2
 15250  001376  C09A  F078         	movff	_exp$3592,___fttol@f1
 15251  00137A  C09B  F079         	movff	_exp$3592+1,___fttol@f1+1
 15252  00137E  C09C  F07A         	movff	_exp$3592+2,___fttol@f1+2
 15253  001382  EC72  F011         	call	___fttol	;wreg free
 15254  001386  C078  F09D         	movff	?___fttol,exp@exponent
 15255  00138A  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 15256  00138E  C097  F084         	movff	exp@x,___ftsub@f1
 15257  001392  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 15258  001396  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 15259  00139A  C09D  F020         	movff	exp@exponent,___awtoft@c
 15260  00139E  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 15261  0013A2  ECBA  F01E         	call	___awtoft	;wreg free
 15262  0013A6  C020  F087         	movff	?___awtoft,___ftsub@f2
 15263  0013AA  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 15264  0013AE  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 15265  0013B2  ECAB  F01D         	call	___ftsub	;wreg free
 15266  0013B6  C084  F097         	movff	?___ftsub,exp@x
 15267  0013BA  C085  F098         	movff	?___ftsub+1,exp@x+1
 15268  0013BE  C086  F099         	movff	?___ftsub+2,exp@x+2
 15269  0013C2  C097  F084         	movff	exp@x,eval_poly@x
 15270  0013C6  C098  F085         	movff	exp@x+1,eval_poly@x+1
 15271  0013CA  C099  F086         	movff	exp@x+2,eval_poly@x+2
 15272  0013CE  0E57               	movlw	low exp@coeff
 15273  0013D0  0100               	movlb	0	; () banked
 15274  0013D2  6F87               	movwf	eval_poly@d& (0+255),b
 15275  0013D4  0E06               	movlw	high exp@coeff
 15276  0013D6  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15277  0013D8  0E00               	movlw	0
 15278  0013DA  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15279  0013DC  0E09               	movlw	9
 15280  0013DE  6F89               	movwf	eval_poly@n& (0+255),b
 15281  0013E0  EC0F  F015         	call	_eval_poly	;wreg free
 15282  0013E4  C084  F08E         	movff	?_eval_poly,ldexp@value
 15283  0013E8  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 15284  0013EC  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 15285  0013F0  C09D  F091         	movff	exp@exponent,ldexp@newexp
 15286  0013F4  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 15287  0013F8  EC7A  F015         	call	_ldexp	;wreg free
 15288  0013FC  C08E  F097         	movff	?_ldexp,exp@x
 15289  001400  C08F  F098         	movff	?_ldexp+1,exp@x+1
 15290  001404  C090  F099         	movff	?_ldexp+2,exp@x+2
 15291  001408  0100               	movlb	0	; () banked
 15292  00140A  519F               	movf	exp@sign& (0+255),w,b
 15293  00140C  B4D8               	btfsc	status,2,c
 15294  00140E  D025               	goto	l2246
 15295                           
 15296                           ; BSR set to: 0
 15297  001410  2997               	incf	exp@x& (0+255),w,b
 15298  001412  E10E               	bnz	l7634
 15299  001414  0E7F               	movlw	127
 15300  001416  1998               	xorwf	(exp@x+1)& (0+255),w,b
 15301  001418  E10B               	bnz	l7634
 15302  00141A  0E7F               	movlw	127
 15303  00141C  1999               	xorwf	(exp@x+2)& (0+255),w,b
 15304  00141E  A4D8               	btfss	status,2,c
 15305  001420  D007               	goto	l2247
 15306                           
 15307                           ; BSR set to: 0
 15308  001422  0E00               	movlw	0
 15309  001424  6F97               	movwf	?_exp& (0+255),b
 15310  001426  0E00               	movlw	0
 15311  001428  6F98               	movwf	(?_exp+1)& (0+255),b
 15312  00142A  0E00               	movlw	0
 15313  00142C  6F99               	movwf	(?_exp+2)& (0+255),b
 15314                           
 15315                           ; BSR set to: 0
 15316  00142E  0012               	return	
 15317  001430                     l2247:
 15318  001430                     l7634:
 15319                           
 15320                           ; BSR set to: 0
 15321  001430  0E00               	movlw	0
 15322  001432  6E29               	movwf	___ftdiv@f1,c
 15323  001434  0E80               	movlw	128
 15324  001436  6E2A               	movwf	___ftdiv@f1+1,c
 15325  001438  0E3F               	movlw	63
 15326  00143A  6E2B               	movwf	___ftdiv@f1+2,c
 15327  00143C  C097  F02C         	movff	exp@x,___ftdiv@f2
 15328  001440  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 15329  001444  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 15330  001448  EC69  F012         	call	___ftdiv	;wreg free
 15331  00144C  C029  F097         	movff	?___ftdiv,?_exp
 15332  001450  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 15333  001454  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 15334  001458  0012               	return	
 15335  00145A                     l2246:
 15336                           
 15337                           ; BSR set to: 0
 15338  00145A  C097  F097         	movff	exp@x,?_exp
 15339  00145E  C098  F098         	movff	exp@x+1,?_exp+1
 15340  001462  C099  F099         	movff	exp@x+2,?_exp+2
 15341  001466  0012               	return		;funcret
 15342  001468                     __end_of_exp:
 15343                           	opt stack 0
 15344                           tosu	equ	0xFFF
 15345                           tosh	equ	0xFFE
 15346                           tosl	equ	0xFFD
 15347                           pclath	equ	0xFFA
 15348                           tblptru	equ	0xFF8
 15349                           tblptrh	equ	0xFF7
 15350                           tblptrl	equ	0xFF6
 15351                           tablat	equ	0xFF5
 15352                           prodh	equ	0xFF4
 15353                           prodl	equ	0xFF3
 15354                           intcon	equ	0xFF2
 15355                           intcon2	equ	0xFF1
 15356                           postinc0	equ	0xFEE
 15357                           plusw0	equ	0xFEB
 15358                           wreg	equ	0xFE8
 15359                           indf1	equ	0xFE7
 15360                           postdec1	equ	0xFE5
 15361                           fsr1h	equ	0xFE2
 15362                           fsr1l	equ	0xFE1
 15363                           indf2	equ	0xFDF
 15364                           postinc2	equ	0xFDE
 15365                           postdec2	equ	0xFDD
 15366                           plusw2	equ	0xFDB
 15367                           fsr2h	equ	0xFDA
 15368                           fsr2l	equ	0xFD9
 15369                           status	equ	0xFD8
 15370                           
 15371 ;; *************** function _ldexp *****************
 15372 ;; Defined at:
 15373 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15374 ;; Parameters:    Size  Location     Type
 15375 ;;  value           3   46[BANK0 ] unsigned char 
 15376 ;;  newexp          2   49[BANK0 ] int 
 15377 ;; Auto vars:     Size  Location     Type
 15378 ;;		None
 15379 ;; Return value:  Size  Location     Type
 15380 ;;                  3   46[BANK0 ] int 
 15381 ;; Registers used:
 15382 ;;		wreg, status,2, status,0
 15383 ;; Tracked objects:
 15384 ;;		On entry : 0/0
 15385 ;;		On exit  : 0/0
 15386 ;;		Unchanged: 0/0
 15387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15388 ;;      Params:         0       5       0       0       0       0       0
 15389 ;;      Locals:         0       0       0       0       0       0       0
 15390 ;;      Temps:          0       2       0       0       0       0       0
 15391 ;;      Totals:         0       7       0       0       0       0       0
 15392 ;;Total ram usage:        7 bytes
 15393 ;; Hardware stack levels used:    1
 15394 ;; Hardware stack levels required when called:    4
 15395 ;; This function calls:
 15396 ;;		Nothing
 15397 ;; This function is called by:
 15398 ;;		_exp
 15399 ;; This function uses a non-reentrant model
 15400 ;;
 15401                           
 15402                           	psect	text88
 15403  002AF4                     __ptext88:
 15404                           	opt stack 0
 15405  002AF4                     _ldexp:
 15406                           	opt stack 20
 15407                           
 15408                           ;incstack = 0
 15409  002AF4  0100               	movlb	0	; () banked
 15410  002AF6  518E               	movf	ldexp@value& (0+255),w,b
 15411  002AF8  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 15412  002AFA  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 15413  002AFC  A4D8               	btfss	status,2,c
 15414  002AFE  D007               	goto	l2265
 15415                           
 15416                           ; BSR set to: 0
 15417  002B00  0E00               	movlw	0
 15418  002B02  6F8E               	movwf	?_ldexp& (0+255),b
 15419  002B04  0E00               	movlw	0
 15420  002B06  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15421  002B08  0E00               	movlw	0
 15422  002B0A  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15423                           
 15424                           ; BSR set to: 0
 15425  002B0C  0012               	return	
 15426  002B0E                     l2265:
 15427                           
 15428                           ; BSR set to: 0
 15429                           
 15430                           ; BSR set to: 0
 15431  002B0E  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15432  002B10  0B7F               	andlw	127
 15433  002B12  6F93               	movwf	??_ldexp& (0+255),b
 15434  002B14  6B94               	clrf	(??_ldexp+1)& (0+255),b
 15435  002B16  90D8               	bcf	status,0,c
 15436  002B18  3793               	rlcf	??_ldexp& (0+255),f,b
 15437  002B1A  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 15438  002B1C  5193               	movf	??_ldexp& (0+255),w,b
 15439  002B1E  2791               	addwf	ldexp@newexp& (0+255),f,b
 15440  002B20  5194               	movf	(??_ldexp+1)& (0+255),w,b
 15441  002B22  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15442  002B24  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 15443  002B26  D003               	goto	u7120
 15444  002B28  6B93               	clrf	??_ldexp& (0+255),b
 15445  002B2A  2B93               	incf	??_ldexp& (0+255),f,b
 15446  002B2C  D002               	goto	u7128
 15447  002B2E                     u7120:
 15448  002B2E  0100               	movlb	0	; () banked
 15449  002B30  6B93               	clrf	??_ldexp& (0+255),b
 15450  002B32                     u7128:
 15451  002B32  5193               	movf	??_ldexp& (0+255),w,b
 15452  002B34  2791               	addwf	ldexp@newexp& (0+255),f,b
 15453  002B36  0E00               	movlw	0
 15454  002B38  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15455  002B3A  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 15456  002B3C  D00D               	goto	l2267
 15457                           
 15458                           ; BSR set to: 0
 15459  002B3E  0E00               	movlw	0
 15460  002B40  0101               	movlb	1	; () banked
 15461  002B42  6F35               	movwf	(_errno+1)& (0+255),b
 15462  002B44  0E22               	movlw	34
 15463  002B46  6F34               	movwf	_errno& (0+255),b
 15464  002B48  0E00               	movlw	0
 15465  002B4A  0100               	movlb	0	; () banked
 15466  002B4C  6F8E               	movwf	?_ldexp& (0+255),b
 15467  002B4E  0E00               	movlw	0
 15468  002B50  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15469  002B52  0E00               	movlw	0
 15470  002B54                     L4:
 15471  002B54  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15472                           
 15473                           ; BSR set to: 0
 15474  002B56  0012               	return	
 15475  002B58                     l2267:
 15476                           
 15477                           ; BSR set to: 0
 15478                           
 15479                           ; BSR set to: 0
 15480  002B58  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 15481  002B5A  D017               	goto	l2269
 15482  002B5C  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 15483  002B5E  A0D8               	btfss	status,0,c
 15484  002B60  D014               	goto	l2269
 15485                           
 15486                           ; BSR set to: 0
 15487  002B62  0E00               	movlw	0
 15488  002B64  0101               	movlb	1	; () banked
 15489  002B66  6F35               	movwf	(_errno+1)& (0+255),b
 15490  002B68  0E22               	movlw	34
 15491  002B6A  6F34               	movwf	_errno& (0+255),b
 15492                           
 15493                           ; BSR set to: 1
 15494  002B6C  0100               	movlb	0	; () banked
 15495  002B6E  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 15496  002B70  D006               	goto	l2270
 15497                           
 15498                           ; BSR set to: 0
 15499  002B72  0EFF               	movlw	255
 15500  002B74  6F8E               	movwf	?_ldexp& (0+255),b
 15501  002B76  0E7F               	movlw	127
 15502  002B78  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15503  002B7A  0EFF               	movlw	255
 15504  002B7C  D7EB               	goto	L4
 15505  002B7E                     l2270:
 15506                           
 15507                           ; BSR set to: 0
 15508                           
 15509                           ; BSR set to: 0
 15510  002B7E  0EFF               	movlw	255
 15511  002B80  6F8E               	movwf	?_ldexp& (0+255),b
 15512  002B82  0E7F               	movlw	127
 15513  002B84  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15514  002B86  0E7F               	movlw	127
 15515  002B88  D7E5               	goto	L4
 15516  002B8A                     l2269:
 15517                           
 15518                           ; BSR set to: 0
 15519                           
 15520                           ; BSR set to: 0
 15521  002B8A  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 15522  002B8C  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 15523  002B8E  6F94               	movwf	(??_ldexp+1)& (0+255),b
 15524  002B90  3191               	rrcf	ldexp@newexp& (0+255),w,b
 15525  002B92  6F93               	movwf	??_ldexp& (0+255),b
 15526  002B94  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15527  002B96  1993               	xorwf	??_ldexp& (0+255),w,b
 15528  002B98  0B80               	andlw	-128
 15529  002B9A  1993               	xorwf	??_ldexp& (0+255),w,b
 15530  002B9C  6F90               	movwf	(ldexp@value+2)& (0+255),b
 15531  002B9E  C091  F093         	movff	ldexp@newexp,??_ldexp
 15532  002BA2  0E01               	movlw	1
 15533  002BA4  1793               	andwf	??_ldexp& (0+255),f,b
 15534  002BA6  3393               	rrcf	??_ldexp& (0+255),f,b
 15535  002BA8  3393               	rrcf	??_ldexp& (0+255),f,b
 15536  002BAA  518F               	movf	(ldexp@value+1)& (0+255),w,b
 15537  002BAC  1993               	xorwf	??_ldexp& (0+255),w,b
 15538  002BAE  0B7F               	andlw	-129
 15539  002BB0  1993               	xorwf	??_ldexp& (0+255),w,b
 15540  002BB2  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 15541                           
 15542                           ; BSR set to: 0
 15543                           
 15544                           ; BSR set to: 0
 15545                           
 15546                           ; BSR set to: 0
 15547  002BB4  C08E  F08E         	movff	ldexp@value,?_ldexp
 15548  002BB8  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 15549  002BBC  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 15550  002BC0  0012               	return	
 15551  002BC2                     __end_of_ldexp:
 15552                           	opt stack 0
 15553                           tosu	equ	0xFFF
 15554                           tosh	equ	0xFFE
 15555                           tosl	equ	0xFFD
 15556                           pclath	equ	0xFFA
 15557                           tblptru	equ	0xFF8
 15558                           tblptrh	equ	0xFF7
 15559                           tblptrl	equ	0xFF6
 15560                           tablat	equ	0xFF5
 15561                           prodh	equ	0xFF4
 15562                           prodl	equ	0xFF3
 15563                           intcon	equ	0xFF2
 15564                           intcon2	equ	0xFF1
 15565                           postinc0	equ	0xFEE
 15566                           plusw0	equ	0xFEB
 15567                           wreg	equ	0xFE8
 15568                           indf1	equ	0xFE7
 15569                           postdec1	equ	0xFE5
 15570                           fsr1h	equ	0xFE2
 15571                           fsr1l	equ	0xFE1
 15572                           indf2	equ	0xFDF
 15573                           postinc2	equ	0xFDE
 15574                           postdec2	equ	0xFDD
 15575                           plusw2	equ	0xFDB
 15576                           fsr2h	equ	0xFDA
 15577                           fsr2l	equ	0xFD9
 15578                           status	equ	0xFD8
 15579                           
 15580 ;; *************** function _floor *****************
 15581 ;; Defined at:
 15582 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 15583 ;; Parameters:    Size  Location     Type
 15584 ;;  x               3   47[BANK0 ] int 
 15585 ;; Auto vars:     Size  Location     Type
 15586 ;;  i               3   50[BANK0 ] int 
 15587 ;;  expon           2   53[BANK0 ] int 
 15588 ;; Return value:  Size  Location     Type
 15589 ;;                  3   47[BANK0 ] int 
 15590 ;; Registers used:
 15591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15592 ;; Tracked objects:
 15593 ;;		On entry : 0/0
 15594 ;;		On exit  : 0/0
 15595 ;;		Unchanged: 0/0
 15596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15597 ;;      Params:         0       3       0       0       0       0       0
 15598 ;;      Locals:         0       5       0       0       0       0       0
 15599 ;;      Temps:          0       0       0       0       0       0       0
 15600 ;;      Totals:         0       8       0       0       0       0       0
 15601 ;;Total ram usage:        8 bytes
 15602 ;; Hardware stack levels used:    1
 15603 ;; Hardware stack levels required when called:    6
 15604 ;; This function calls:
 15605 ;;		___altoft
 15606 ;;		___ftadd
 15607 ;;		___ftge
 15608 ;;		___fttol
 15609 ;;		_frexp
 15610 ;; This function is called by:
 15611 ;;		_exp
 15612 ;; This function uses a non-reentrant model
 15613 ;;
 15614                           
 15615                           	psect	text89
 15616  002866                     __ptext89:
 15617                           	opt stack 0
 15618  002866                     _floor:
 15619                           	opt stack 18
 15620                           
 15621                           ; BSR set to: 0
 15622                           ;incstack = 0
 15623  002866  C08F  F018         	movff	floor@x,frexp@value
 15624  00286A  C090  F019         	movff	floor@x+1,frexp@value+1
 15625  00286E  C091  F01A         	movff	floor@x+2,frexp@value+2
 15626  002872  0E95               	movlw	low floor@expon
 15627  002874  6E1B               	movwf	frexp@eptr,c
 15628  002876  0E00               	movlw	high floor@expon
 15629  002878  6E1C               	movwf	frexp@eptr+1,c
 15630  00287A  EC4A  F018         	call	_frexp	;wreg free
 15631  00287E  0100               	movlb	0	; () banked
 15632  002880  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 15633  002882  D010               	goto	l2252
 15634                           
 15635                           ; BSR set to: 0
 15636  002884  AF91               	btfss	(floor@x+2)& (0+255),7,b
 15637  002886  D007               	goto	l2253
 15638                           
 15639                           ; BSR set to: 0
 15640  002888  0E00               	movlw	0
 15641  00288A  6F8F               	movwf	?_floor& (0+255),b
 15642  00288C  0E80               	movlw	128
 15643  00288E  6F90               	movwf	(?_floor+1)& (0+255),b
 15644  002890  0EBF               	movlw	191
 15645  002892  6F91               	movwf	(?_floor+2)& (0+255),b
 15646                           
 15647                           ; BSR set to: 0
 15648  002894  0012               	return	
 15649  002896                     l2253:
 15650                           
 15651                           ; BSR set to: 0
 15652                           
 15653                           ; BSR set to: 0
 15654  002896  0E00               	movlw	0
 15655  002898  6F8F               	movwf	?_floor& (0+255),b
 15656  00289A  0E00               	movlw	0
 15657  00289C  6F90               	movwf	(?_floor+1)& (0+255),b
 15658  00289E  0E00               	movlw	0
 15659  0028A0  6F91               	movwf	(?_floor+2)& (0+255),b
 15660                           
 15661                           ; BSR set to: 0
 15662  0028A2  0012               	return	
 15663  0028A4                     l2252:
 15664                           
 15665                           ; BSR set to: 0
 15666                           
 15667                           ; BSR set to: 0
 15668  0028A4  5196               	movf	(floor@expon+1)& (0+255),w,b
 15669  0028A6  E104               	bnz	u7080
 15670  0028A8  0E15               	movlw	21
 15671  0028AA  5D95               	subwf	floor@expon& (0+255),w,b
 15672  0028AC  A0D8               	btfss	status,0,c
 15673  0028AE  D007               	goto	l2255
 15674  0028B0                     u7080:
 15675                           
 15676                           ; BSR set to: 0
 15677  0028B0  C08F  F08F         	movff	floor@x,?_floor
 15678  0028B4  C090  F090         	movff	floor@x+1,?_floor+1
 15679  0028B8  C091  F091         	movff	floor@x+2,?_floor+2
 15680  0028BC  0012               	return	
 15681  0028BE                     l2255:
 15682                           
 15683                           ; BSR set to: 0
 15684                           
 15685                           ; BSR set to: 0
 15686  0028BE  C08F  F078         	movff	floor@x,___fttol@f1
 15687  0028C2  C090  F079         	movff	floor@x+1,___fttol@f1+1
 15688  0028C6  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 15689  0028CA  EC72  F011         	call	___fttol	;wreg free
 15690  0028CE  C078  F087         	movff	?___fttol,___altoft@c
 15691  0028D2  C079  F088         	movff	?___fttol+1,___altoft@c+1
 15692  0028D6  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 15693  0028DA  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 15694  0028DE  ECDE  F019         	call	___altoft	;wreg free
 15695  0028E2  C087  F092         	movff	?___altoft,floor@i
 15696  0028E6  C088  F093         	movff	?___altoft+1,floor@i+1
 15697  0028EA  C089  F094         	movff	?___altoft+2,floor@i+2
 15698  0028EE  C08F  F018         	movff	floor@x,___ftge@ff1
 15699  0028F2  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 15700  0028F6  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 15701  0028FA  C092  F01B         	movff	floor@i,___ftge@ff2
 15702  0028FE  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 15703  002902  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 15704  002906  EC92  F018         	call	___ftge	;wreg free
 15705  00290A  B0D8               	btfsc	status,0,c
 15706  00290C  D016               	goto	l2256
 15707  00290E  C092  F078         	movff	floor@i,___ftadd@f1
 15708  002912  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 15709  002916  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 15710  00291A  0E00               	movlw	0
 15711  00291C  0100               	movlb	0	; () banked
 15712  00291E  6F7B               	movwf	___ftadd@f2& (0+255),b
 15713  002920  0E80               	movlw	128
 15714  002922  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 15715  002924  0EBF               	movlw	191
 15716  002926  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 15717  002928  ECED  F00C         	call	___ftadd	;wreg free
 15718  00292C  C078  F08F         	movff	?___ftadd,?_floor
 15719  002930  C079  F090         	movff	?___ftadd+1,?_floor+1
 15720  002934  C07A  F091         	movff	?___ftadd+2,?_floor+2
 15721  002938  0012               	return	
 15722  00293A                     l2256:
 15723  00293A  C092  F08F         	movff	floor@i,?_floor
 15724  00293E  C093  F090         	movff	floor@i+1,?_floor+1
 15725  002942  C094  F091         	movff	floor@i+2,?_floor+2
 15726  002946  0012               	return		;funcret
 15727  002948                     __end_of_floor:
 15728                           	opt stack 0
 15729                           tosu	equ	0xFFF
 15730                           tosh	equ	0xFFE
 15731                           tosl	equ	0xFFD
 15732                           pclath	equ	0xFFA
 15733                           tblptru	equ	0xFF8
 15734                           tblptrh	equ	0xFF7
 15735                           tblptrl	equ	0xFF6
 15736                           tablat	equ	0xFF5
 15737                           prodh	equ	0xFF4
 15738                           prodl	equ	0xFF3
 15739                           intcon	equ	0xFF2
 15740                           intcon2	equ	0xFF1
 15741                           postinc0	equ	0xFEE
 15742                           plusw0	equ	0xFEB
 15743                           wreg	equ	0xFE8
 15744                           indf1	equ	0xFE7
 15745                           postdec1	equ	0xFE5
 15746                           fsr1h	equ	0xFE2
 15747                           fsr1l	equ	0xFE1
 15748                           indf2	equ	0xFDF
 15749                           postinc2	equ	0xFDE
 15750                           postdec2	equ	0xFDD
 15751                           plusw2	equ	0xFDB
 15752                           fsr2h	equ	0xFDA
 15753                           fsr2l	equ	0xFD9
 15754                           status	equ	0xFD8
 15755                           
 15756 ;; *************** function _frexp *****************
 15757 ;; Defined at:
 15758 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15759 ;; Parameters:    Size  Location     Type
 15760 ;;  value           3   23[COMRAM] int 
 15761 ;;  eptr            2   26[COMRAM] PTR int 
 15762 ;;		 -> log@exponent(2), floor@expon(2), 
 15763 ;; Auto vars:     Size  Location     Type
 15764 ;;		None
 15765 ;; Return value:  Size  Location     Type
 15766 ;;                  3   23[COMRAM] PTR int 
 15767 ;; Registers used:
 15768 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15769 ;; Tracked objects:
 15770 ;;		On entry : 0/0
 15771 ;;		On exit  : 0/0
 15772 ;;		Unchanged: 0/0
 15773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15774 ;;      Params:         5       0       0       0       0       0       0
 15775 ;;      Locals:         0       0       0       0       0       0       0
 15776 ;;      Temps:          2       0       0       0       0       0       0
 15777 ;;      Totals:         7       0       0       0       0       0       0
 15778 ;;Total ram usage:        7 bytes
 15779 ;; Hardware stack levels used:    1
 15780 ;; Hardware stack levels required when called:    4
 15781 ;; This function calls:
 15782 ;;		Nothing
 15783 ;; This function is called by:
 15784 ;;		_floor
 15785 ;;		_log
 15786 ;; This function uses a non-reentrant model
 15787 ;;
 15788                           
 15789                           	psect	text90
 15790  003094                     __ptext90:
 15791                           	opt stack 0
 15792  003094                     _frexp:
 15793                           	opt stack 20
 15794                           
 15795                           ;incstack = 0
 15796  003094  5018               	movf	frexp@value,w,c
 15797  003096  1019               	iorwf	frexp@value+1,w,c
 15798  003098  101A               	iorwf	frexp@value+2,w,c
 15799  00309A  A4D8               	btfss	status,2,c
 15800  00309C  D00F               	goto	l2261
 15801  00309E  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15802  0030A2  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15803  0030A6  0E00               	movlw	0
 15804  0030A8  6EDE               	movwf	postinc2,c
 15805  0030AA  0E00               	movlw	0
 15806  0030AC  6EDD               	movwf	postdec2,c
 15807  0030AE  0E00               	movlw	0
 15808  0030B0  6E18               	movwf	?_frexp,c
 15809  0030B2  0E00               	movlw	0
 15810  0030B4  6E19               	movwf	?_frexp+1,c
 15811  0030B6  0E00               	movlw	0
 15812  0030B8  6E1A               	movwf	?_frexp+2,c
 15813  0030BA  0012               	return	
 15814  0030BC                     l2261:
 15815  0030BC  501A               	movf	frexp@value+2,w,c
 15816  0030BE  0B7F               	andlw	127
 15817  0030C0  6E1D               	movwf	??_frexp& (0+255),c
 15818  0030C2  6A1E               	clrf	(??_frexp+1)& (0+255),c
 15819  0030C4  90D8               	bcf	status,0,c
 15820  0030C6  361D               	rlcf	??_frexp,f,c
 15821  0030C8  361E               	rlcf	??_frexp+1,f,c
 15822  0030CA  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15823  0030CE  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15824  0030D2  C01D  FFDE         	movff	??_frexp,postinc2
 15825  0030D6  C01E  FFDD         	movff	??_frexp+1,postdec2
 15826  0030DA  AE19               	btfss	frexp@value+1,7,c
 15827  0030DC  D003               	goto	u6960
 15828  0030DE  6A1D               	clrf	??_frexp& (0+255),c
 15829  0030E0  2A1D               	incf	??_frexp& (0+255),f,c
 15830  0030E2  D001               	goto	u6968
 15831  0030E4                     u6960:
 15832  0030E4  6A1D               	clrf	??_frexp& (0+255),c
 15833  0030E6                     u6968:
 15834  0030E6  501D               	movf	??_frexp,w,c
 15835  0030E8  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15836  0030EC  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15837  0030F0  12DE               	iorwf	postinc2,f,c
 15838  0030F2  0E00               	movlw	0
 15839  0030F4  12DD               	iorwf	postdec2,f,c
 15840  0030F6  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15841  0030FA  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15842  0030FE  0E82               	movlw	130
 15843  003100  26DE               	addwf	postinc2,f,c
 15844  003102  0EFF               	movlw	255
 15845  003104  22DD               	addwfc	postdec2,f,c
 15846  003106  801A               	bsf	frexp@value+2,0,c
 15847  003108  821A               	bsf	frexp@value+2,1,c
 15848  00310A  841A               	bsf	frexp@value+2,2,c
 15849  00310C  861A               	bsf	frexp@value+2,3,c
 15850  00310E  881A               	bsf	frexp@value+2,4,c
 15851  003110  8A1A               	bsf	frexp@value+2,5,c
 15852  003112  9C1A               	bcf	frexp@value+2,6,c
 15853  003114  9E19               	bcf	frexp@value+1,7,c
 15854  003116  C018  F018         	movff	frexp@value,?_frexp
 15855  00311A  C019  F019         	movff	frexp@value+1,?_frexp+1
 15856  00311E  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 15857  003122  0012               	return	
 15858  003124                     __end_of_frexp:
 15859                           	opt stack 0
 15860                           tosu	equ	0xFFF
 15861                           tosh	equ	0xFFE
 15862                           tosl	equ	0xFFD
 15863                           pclath	equ	0xFFA
 15864                           tblptru	equ	0xFF8
 15865                           tblptrh	equ	0xFF7
 15866                           tblptrl	equ	0xFF6
 15867                           tablat	equ	0xFF5
 15868                           prodh	equ	0xFF4
 15869                           prodl	equ	0xFF3
 15870                           intcon	equ	0xFF2
 15871                           intcon2	equ	0xFF1
 15872                           postinc0	equ	0xFEE
 15873                           plusw0	equ	0xFEB
 15874                           wreg	equ	0xFE8
 15875                           indf1	equ	0xFE7
 15876                           postdec1	equ	0xFE5
 15877                           fsr1h	equ	0xFE2
 15878                           fsr1l	equ	0xFE1
 15879                           indf2	equ	0xFDF
 15880                           postinc2	equ	0xFDE
 15881                           postdec2	equ	0xFDD
 15882                           plusw2	equ	0xFDB
 15883                           fsr2h	equ	0xFDA
 15884                           fsr2l	equ	0xFD9
 15885                           status	equ	0xFD8
 15886                           
 15887 ;; *************** function ___fttol *****************
 15888 ;; Defined at:
 15889 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 15890 ;; Parameters:    Size  Location     Type
 15891 ;;  f1              3   24[BANK0 ] float 
 15892 ;; Auto vars:     Size  Location     Type
 15893 ;;  lval            4   34[BANK0 ] unsigned long 
 15894 ;;  exp1            1   38[BANK0 ] unsigned char 
 15895 ;;  sign1           1   33[BANK0 ] unsigned char 
 15896 ;; Return value:  Size  Location     Type
 15897 ;;                  4   24[BANK0 ] long 
 15898 ;; Registers used:
 15899 ;;		wreg, status,2, status,0
 15900 ;; Tracked objects:
 15901 ;;		On entry : 0/0
 15902 ;;		On exit  : 0/0
 15903 ;;		Unchanged: 0/0
 15904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15905 ;;      Params:         0       4       0       0       0       0       0
 15906 ;;      Locals:         0       6       0       0       0       0       0
 15907 ;;      Temps:          0       5       0       0       0       0       0
 15908 ;;      Totals:         0      15       0       0       0       0       0
 15909 ;;Total ram usage:       15 bytes
 15910 ;; Hardware stack levels used:    1
 15911 ;; Hardware stack levels required when called:    4
 15912 ;; This function calls:
 15913 ;;		Nothing
 15914 ;; This function is called by:
 15915 ;;		_AdcConvert
 15916 ;;		_ReadIntFromEeprom
 15917 ;;		_pow
 15918 ;;		_exp
 15919 ;;		_floor
 15920 ;; This function uses a non-reentrant model
 15921 ;;
 15922                           
 15923                           	psect	text91
 15924  0022E4                     __ptext91:
 15925                           	opt stack 0
 15926  0022E4                     ___fttol:
 15927                           	opt stack 19
 15928                           
 15929                           ;incstack = 0
 15930  0022E4  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 15931  0022E8  0100               	movlb	0	; () banked
 15932  0022EA  6B7D               	clrf	(??___fttol+1)& (0+255),b
 15933  0022EC  6B7E               	clrf	(??___fttol+2)& (0+255),b
 15934  0022EE  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 15935  0022F0  377C               	rlcf	??___fttol& (0+255),f,b
 15936  0022F2  E301               	bnc	u6871
 15937  0022F4  817D               	bsf	(??___fttol+1)& (0+255),0,b
 15938  0022F6                     u6871:
 15939  0022F6  517C               	movf	??___fttol& (0+255),w,b
 15940  0022F8  6F86               	movwf	___fttol@exp1& (0+255),b
 15941  0022FA  5186               	movf	___fttol@exp1& (0+255),w,b
 15942  0022FC  A4D8               	btfss	status,2,c
 15943  0022FE  D009               	goto	l1918
 15944                           
 15945                           ; BSR set to: 0
 15946  002300  0E00               	movlw	0
 15947  002302  6F78               	movwf	?___fttol& (0+255),b
 15948  002304  0E00               	movlw	0
 15949  002306  6F79               	movwf	(?___fttol+1)& (0+255),b
 15950  002308  0E00               	movlw	0
 15951  00230A  6F7A               	movwf	(?___fttol+2)& (0+255),b
 15952  00230C  0E00               	movlw	0
 15953  00230E  6F7B               	movwf	(?___fttol+3)& (0+255),b
 15954                           
 15955                           ; BSR set to: 0
 15956  002310  0012               	return	
 15957  002312                     l1918:
 15958                           
 15959                           ; BSR set to: 0
 15960                           
 15961                           ; BSR set to: 0
 15962  002312  0E17               	movlw	23
 15963  002314  6F7C               	movwf	??___fttol& (0+255),b
 15964  002316  C078  F07D         	movff	___fttol@f1,??___fttol+1
 15965  00231A  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 15966  00231E  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 15967  002322  297C               	incf	??___fttol& (0+255),w,b
 15968  002324  6F80               	movwf	(??___fttol+4)& (0+255),b
 15969  002326  D004               	goto	u6890
 15970  002328                     u6895:
 15971  002328  90D8               	bcf	status,0,c
 15972  00232A  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 15973  00232C  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 15974  00232E  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 15975  002330                     u6890:
 15976  002330  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 15977  002332  D7FA               	goto	u6895
 15978  002334  0100               	movlb	0	; () banked
 15979  002336  517D               	movf	(??___fttol+1)& (0+255),w,b
 15980  002338  6F81               	movwf	___fttol@sign1& (0+255),b
 15981                           
 15982                           ; BSR set to: 0
 15983  00233A  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 15984                           
 15985                           ; BSR set to: 0
 15986  00233C  0EFF               	movlw	255
 15987  00233E  1778               	andwf	___fttol@f1& (0+255),f,b
 15988  002340  0EFF               	movlw	255
 15989  002342  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 15990  002344  0E00               	movlw	0
 15991  002346  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 15992                           
 15993                           ; BSR set to: 0
 15994  002348  5178               	movf	___fttol@f1& (0+255),w,b
 15995  00234A  6F82               	movwf	___fttol@lval& (0+255),b
 15996  00234C  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 15997  00234E  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 15998  002350  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 15999  002352  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 16000  002354  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 16001                           
 16002                           ; BSR set to: 0
 16003  002356  0E8E               	movlw	142
 16004  002358  5F86               	subwf	___fttol@exp1& (0+255),f,b
 16005                           
 16006                           ; BSR set to: 0
 16007  00235A  AF86               	btfss	___fttol@exp1& (0+255),7,b
 16008  00235C  D016               	goto	l1920
 16009                           
 16010                           ; BSR set to: 0
 16011  00235E  5186               	movf	___fttol@exp1& (0+255),w,b
 16012  002360  0A80               	xorlw	128
 16013  002362  0F8F               	addlw	143
 16014  002364  B0D8               	btfsc	status,0,c
 16015  002366  D009               	goto	l1921
 16016                           
 16017                           ; BSR set to: 0
 16018  002368  0E00               	movlw	0
 16019  00236A  6F78               	movwf	?___fttol& (0+255),b
 16020  00236C  0E00               	movlw	0
 16021  00236E  6F79               	movwf	(?___fttol+1)& (0+255),b
 16022  002370  0E00               	movlw	0
 16023  002372  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16024  002374  0E00               	movlw	0
 16025  002376  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16026                           
 16027                           ; BSR set to: 0
 16028  002378  0012               	return	
 16029  00237A                     l1921:
 16030                           
 16031                           ; BSR set to: 0
 16032                           
 16033                           ; BSR set to: 0
 16034                           
 16035                           ; BSR set to: 0
 16036  00237A  90D8               	bcf	status,0,c
 16037  00237C  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 16038  00237E  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 16039  002380  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 16040  002382  3382               	rrcf	___fttol@lval& (0+255),f,b
 16041                           
 16042                           ; BSR set to: 0
 16043  002384  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 16044  002386  D7F9               	goto	l1921
 16045                           
 16046                           ; BSR set to: 0
 16047  002388  D015               	goto	u6930
 16048  00238A                     l1920:
 16049                           
 16050                           ; BSR set to: 0
 16051                           
 16052                           ; BSR set to: 0
 16053  00238A  0E17               	movlw	23
 16054  00238C  6586               	cpfsgt	___fttol@exp1& (0+255),b
 16055  00238E  D00F               	goto	l1926
 16056                           
 16057                           ; BSR set to: 0
 16058  002390  0E00               	movlw	0
 16059  002392  6F78               	movwf	?___fttol& (0+255),b
 16060  002394  0E00               	movlw	0
 16061  002396  6F79               	movwf	(?___fttol+1)& (0+255),b
 16062  002398  0E00               	movlw	0
 16063  00239A  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16064  00239C  0E00               	movlw	0
 16065  00239E  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16066                           
 16067                           ; BSR set to: 0
 16068  0023A0  0012               	return	
 16069  0023A2                     
 16070                           ; BSR set to: 0
 16071                           
 16072                           ; BSR set to: 0
 16073  0023A2  90D8               	bcf	status,0,c
 16074  0023A4  3782               	rlcf	___fttol@lval& (0+255),f,b
 16075  0023A6  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 16076  0023A8  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 16077  0023AA  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 16078  0023AC  0786               	decf	___fttol@exp1& (0+255),f,b
 16079  0023AE                     l1926:
 16080                           
 16081                           ; BSR set to: 0
 16082                           
 16083                           ; BSR set to: 0
 16084  0023AE  5186               	movf	___fttol@exp1& (0+255),w,b
 16085  0023B0  A4D8               	btfss	status,2,c
 16086  0023B2  D7F7               	goto	l1927
 16087  0023B4                     u6930:
 16088                           
 16089                           ; BSR set to: 0
 16090                           
 16091                           ; BSR set to: 0
 16092                           
 16093                           ; BSR set to: 0
 16094  0023B4  5181               	movf	___fttol@sign1& (0+255),w,b
 16095  0023B6  B4D8               	btfsc	status,2,c
 16096  0023B8  D008               	goto	l1929
 16097                           
 16098                           ; BSR set to: 0
 16099  0023BA  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 16100  0023BC  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 16101  0023BE  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 16102  0023C0  6D82               	negf	___fttol@lval& (0+255),b
 16103  0023C2  0E00               	movlw	0
 16104  0023C4  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 16105  0023C6  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 16106  0023C8  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 16107  0023CA                     l1929:
 16108                           
 16109                           ; BSR set to: 0
 16110                           
 16111                           ; BSR set to: 0
 16112  0023CA  C082  F078         	movff	___fttol@lval,?___fttol
 16113  0023CE  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 16114  0023D2  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 16115  0023D6  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 16116  0023DA  0012               	return	
 16117  0023DC                     __end_of___fttol:
 16118                           	opt stack 0
 16119                           tosu	equ	0xFFF
 16120                           tosh	equ	0xFFE
 16121                           tosl	equ	0xFFD
 16122                           pclath	equ	0xFFA
 16123                           tblptru	equ	0xFF8
 16124                           tblptrh	equ	0xFF7
 16125                           tblptrl	equ	0xFF6
 16126                           tablat	equ	0xFF5
 16127                           prodh	equ	0xFF4
 16128                           prodl	equ	0xFF3
 16129                           intcon	equ	0xFF2
 16130                           intcon2	equ	0xFF1
 16131                           postinc0	equ	0xFEE
 16132                           plusw0	equ	0xFEB
 16133                           wreg	equ	0xFE8
 16134                           indf1	equ	0xFE7
 16135                           postdec1	equ	0xFE5
 16136                           fsr1h	equ	0xFE2
 16137                           fsr1l	equ	0xFE1
 16138                           indf2	equ	0xFDF
 16139                           postinc2	equ	0xFDE
 16140                           postdec2	equ	0xFDD
 16141                           plusw2	equ	0xFDB
 16142                           fsr2h	equ	0xFDA
 16143                           fsr2l	equ	0xFD9
 16144                           status	equ	0xFD8
 16145                           
 16146 ;; *************** function ___ftge *****************
 16147 ;; Defined at:
 16148 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 16149 ;; Parameters:    Size  Location     Type
 16150 ;;  ff1             3   23[COMRAM] float 
 16151 ;;  ff2             3   26[COMRAM] float 
 16152 ;; Auto vars:     Size  Location     Type
 16153 ;;		None
 16154 ;; Return value:  Size  Location     Type
 16155 ;;		None               void
 16156 ;; Registers used:
 16157 ;;		wreg, status,2, status,0
 16158 ;; Tracked objects:
 16159 ;;		On entry : 0/0
 16160 ;;		On exit  : 0/0
 16161 ;;		Unchanged: 0/0
 16162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16163 ;;      Params:         6       0       0       0       0       0       0
 16164 ;;      Locals:         0       0       0       0       0       0       0
 16165 ;;      Temps:          3       0       0       0       0       0       0
 16166 ;;      Totals:         9       0       0       0       0       0       0
 16167 ;;Total ram usage:        9 bytes
 16168 ;; Hardware stack levels used:    1
 16169 ;; Hardware stack levels required when called:    4
 16170 ;; This function calls:
 16171 ;;		Nothing
 16172 ;; This function is called by:
 16173 ;;		_CheckFlashPrecentage
 16174 ;;		_pow
 16175 ;;		_exp
 16176 ;;		_floor
 16177 ;; This function uses a non-reentrant model
 16178 ;;
 16179                           
 16180                           	psect	text92
 16181  003124                     __ptext92:
 16182                           	opt stack 0
 16183  003124                     ___ftge:
 16184                           	opt stack 19
 16185                           
 16186                           ; BSR set to: 0
 16187                           ;incstack = 0
 16188  003124  AE1A               	btfss	___ftge@ff1+2,7,c
 16189  003126  D016               	goto	l1890
 16190  003128  C018  F01E         	movff	___ftge@ff1,??___ftge
 16191  00312C  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 16192  003130  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 16193  003134  1E1E               	comf	??___ftge,f,c
 16194  003136  1E1F               	comf	??___ftge+1,f,c
 16195  003138  1E20               	comf	??___ftge+2,f,c
 16196  00313A  2A1E               	incf	??___ftge,f,c
 16197  00313C  0E00               	movlw	0
 16198  00313E  221F               	addwfc	??___ftge+1,f,c
 16199  003140  2220               	addwfc	??___ftge+2,f,c
 16200  003142  0E00               	movlw	0
 16201  003144  241E               	addwf	??___ftge,w,c
 16202  003146  6E18               	movwf	___ftge@ff1,c
 16203  003148  0E00               	movlw	0
 16204  00314A  201F               	addwfc	??___ftge+1,w,c
 16205  00314C  6E19               	movwf	___ftge@ff1+1,c
 16206  00314E  0E80               	movlw	128
 16207  003150  2020               	addwfc	??___ftge+2,w,c
 16208  003152  6E1A               	movwf	___ftge@ff1+2,c
 16209  003154                     l1890:
 16210  003154  AE1D               	btfss	___ftge@ff2+2,7,c
 16211  003156  D016               	goto	l1891
 16212  003158  C01B  F01E         	movff	___ftge@ff2,??___ftge
 16213  00315C  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 16214  003160  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 16215  003164  1E1E               	comf	??___ftge,f,c
 16216  003166  1E1F               	comf	??___ftge+1,f,c
 16217  003168  1E20               	comf	??___ftge+2,f,c
 16218  00316A  2A1E               	incf	??___ftge,f,c
 16219  00316C  0E00               	movlw	0
 16220  00316E  221F               	addwfc	??___ftge+1,f,c
 16221  003170  2220               	addwfc	??___ftge+2,f,c
 16222  003172  0E00               	movlw	0
 16223  003174  241E               	addwf	??___ftge,w,c
 16224  003176  6E1B               	movwf	___ftge@ff2,c
 16225  003178  0E00               	movlw	0
 16226  00317A  201F               	addwfc	??___ftge+1,w,c
 16227  00317C  6E1C               	movwf	___ftge@ff2+1,c
 16228  00317E  0E80               	movlw	128
 16229  003180  2020               	addwfc	??___ftge+2,w,c
 16230  003182  6E1D               	movwf	___ftge@ff2+2,c
 16231  003184                     l1891:
 16232  003184  0E00               	movlw	0
 16233  003186  1A18               	xorwf	___ftge@ff1,f,c
 16234  003188  0E00               	movlw	0
 16235  00318A  1A19               	xorwf	___ftge@ff1+1,f,c
 16236  00318C  0E80               	movlw	128
 16237  00318E  1A1A               	xorwf	___ftge@ff1+2,f,c
 16238  003190  0E00               	movlw	0
 16239  003192  1A1B               	xorwf	___ftge@ff2,f,c
 16240  003194  0E00               	movlw	0
 16241  003196  1A1C               	xorwf	___ftge@ff2+1,f,c
 16242  003198  0E80               	movlw	128
 16243  00319A  1A1D               	xorwf	___ftge@ff2+2,f,c
 16244  00319C  501B               	movf	___ftge@ff2,w,c
 16245  00319E  5C18               	subwf	___ftge@ff1,w,c
 16246  0031A0  501C               	movf	___ftge@ff2+1,w,c
 16247  0031A2  5819               	subwfb	___ftge@ff1+1,w,c
 16248  0031A4  501D               	movf	___ftge@ff2+2,w,c
 16249  0031A6  581A               	subwfb	___ftge@ff1+2,w,c
 16250  0031A8  B0D8               	btfsc	status,0,c
 16251  0031AA  D002               	goto	l7066
 16252  0031AC  90D8               	bcf	status,0,c
 16253  0031AE  0012               	return	
 16254  0031B0                     l7066:
 16255  0031B0  80D8               	bsf	status,0,c
 16256  0031B2  0012               	return	
 16257  0031B4                     __end_of___ftge:
 16258                           	opt stack 0
 16259                           tosu	equ	0xFFF
 16260                           tosh	equ	0xFFE
 16261                           tosl	equ	0xFFD
 16262                           pclath	equ	0xFFA
 16263                           tblptru	equ	0xFF8
 16264                           tblptrh	equ	0xFF7
 16265                           tblptrl	equ	0xFF6
 16266                           tablat	equ	0xFF5
 16267                           prodh	equ	0xFF4
 16268                           prodl	equ	0xFF3
 16269                           intcon	equ	0xFF2
 16270                           intcon2	equ	0xFF1
 16271                           postinc0	equ	0xFEE
 16272                           plusw0	equ	0xFEB
 16273                           wreg	equ	0xFE8
 16274                           indf1	equ	0xFE7
 16275                           postdec1	equ	0xFE5
 16276                           fsr1h	equ	0xFE2
 16277                           fsr1l	equ	0xFE1
 16278                           indf2	equ	0xFDF
 16279                           postinc2	equ	0xFDE
 16280                           postdec2	equ	0xFDD
 16281                           plusw2	equ	0xFDB
 16282                           fsr2h	equ	0xFDA
 16283                           fsr2l	equ	0xFD9
 16284                           status	equ	0xFD8
 16285                           
 16286 ;; *************** function ___altoft *****************
 16287 ;; Defined at:
 16288 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 16289 ;; Parameters:    Size  Location     Type
 16290 ;;  c               4   39[BANK0 ] long 
 16291 ;; Auto vars:     Size  Location     Type
 16292 ;;  sign            1   47[COMRAM] unsigned char 
 16293 ;;  exp             1   46[COMRAM] unsigned char 
 16294 ;; Return value:  Size  Location     Type
 16295 ;;                  3   39[BANK0 ] float 
 16296 ;; Registers used:
 16297 ;;		wreg, status,2, status,0, cstack
 16298 ;; Tracked objects:
 16299 ;;		On entry : 0/0
 16300 ;;		On exit  : 0/0
 16301 ;;		Unchanged: 0/0
 16302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16303 ;;      Params:         0       4       0       0       0       0       0
 16304 ;;      Locals:         2       0       0       0       0       0       0
 16305 ;;      Temps:          0       4       0       0       0       0       0
 16306 ;;      Totals:         2       8       0       0       0       0       0
 16307 ;;Total ram usage:       10 bytes
 16308 ;; Hardware stack levels used:    1
 16309 ;; Hardware stack levels required when called:    5
 16310 ;; This function calls:
 16311 ;;		___ftpack
 16312 ;; This function is called by:
 16313 ;;		_floor
 16314 ;; This function uses a non-reentrant model
 16315 ;;
 16316                           
 16317                           	psect	text93
 16318  0033BC                     __ptext93:
 16319                           	opt stack 0
 16320  0033BC                     ___altoft:
 16321                           	opt stack 18
 16322                           
 16323                           ;incstack = 0
 16324  0033BC  0E00               	movlw	0
 16325  0033BE  6E30               	movwf	___altoft@sign,c
 16326  0033C0  0E8E               	movlw	142
 16327  0033C2  6E2F               	movwf	___altoft@exp,c
 16328  0033C4  0100               	movlb	0	; () banked
 16329  0033C6  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 16330  0033C8  D011               	goto	l1688
 16331                           
 16332                           ; BSR set to: 0
 16333  0033CA  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 16334  0033CC  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 16335  0033CE  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 16336  0033D0  6D87               	negf	___altoft@c& (0+255),b
 16337  0033D2  0E00               	movlw	0
 16338  0033D4  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 16339  0033D6  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 16340  0033D8  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 16341                           
 16342                           ; BSR set to: 0
 16343  0033DA  0E01               	movlw	1
 16344  0033DC  6E30               	movwf	___altoft@sign,c
 16345                           
 16346                           ; BSR set to: 0
 16347  0033DE  D006               	goto	l1688
 16348  0033E0                     
 16349                           ; BSR set to: 0
 16350                           
 16351                           ; BSR set to: 0
 16352  0033E0  90D8               	bcf	status,0,c
 16353  0033E2  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 16354  0033E4  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 16355  0033E6  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 16356  0033E8  3387               	rrcf	___altoft@c& (0+255),f,b
 16357  0033EA  2A2F               	incf	___altoft@exp,f,c
 16358  0033EC                     l1688:
 16359                           
 16360                           ; BSR set to: 0
 16361                           
 16362                           ; BSR set to: 0
 16363  0033EC  0E00               	movlw	0
 16364  0033EE  1587               	andwf	___altoft@c& (0+255),w,b
 16365  0033F0  6F8B               	movwf	??___altoft& (0+255),b
 16366  0033F2  0E00               	movlw	0
 16367  0033F4  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 16368  0033F6  6F8C               	movwf	(??___altoft+1)& (0+255),b
 16369  0033F8  0E00               	movlw	0
 16370  0033FA  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 16371  0033FC  6F8D               	movwf	(??___altoft+2)& (0+255),b
 16372  0033FE  0EFF               	movlw	255
 16373  003400  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 16374  003402  6F8E               	movwf	(??___altoft+3)& (0+255),b
 16375  003404  518B               	movf	??___altoft& (0+255),w,b
 16376  003406  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 16377  003408  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 16378  00340A  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 16379  00340C  A4D8               	btfss	status,2,c
 16380  00340E  D7E8               	goto	l1689
 16381                           
 16382                           ; BSR set to: 0
 16383                           
 16384                           ; BSR set to: 0
 16385  003410  C087  F018         	movff	___altoft@c,___ftpack@arg
 16386  003414  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 16387  003418  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 16388  00341C  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 16389  003420  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 16390  003424  ECF9  F016         	call	___ftpack	;wreg free
 16391  003428  C018  F087         	movff	?___ftpack,?___altoft
 16392  00342C  C019  F088         	movff	?___ftpack+1,?___altoft+1
 16393  003430  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 16394  003434  0012               	return	
 16395  003436                     __end_of___altoft:
 16396                           	opt stack 0
 16397                           tosu	equ	0xFFF
 16398                           tosh	equ	0xFFE
 16399                           tosl	equ	0xFFD
 16400                           pclath	equ	0xFFA
 16401                           tblptru	equ	0xFF8
 16402                           tblptrh	equ	0xFF7
 16403                           tblptrl	equ	0xFF6
 16404                           tablat	equ	0xFF5
 16405                           prodh	equ	0xFF4
 16406                           prodl	equ	0xFF3
 16407                           intcon	equ	0xFF2
 16408                           intcon2	equ	0xFF1
 16409                           postinc0	equ	0xFEE
 16410                           plusw0	equ	0xFEB
 16411                           wreg	equ	0xFE8
 16412                           indf1	equ	0xFE7
 16413                           postdec1	equ	0xFE5
 16414                           fsr1h	equ	0xFE2
 16415                           fsr1l	equ	0xFE1
 16416                           indf2	equ	0xFDF
 16417                           postinc2	equ	0xFDE
 16418                           postdec2	equ	0xFDD
 16419                           plusw2	equ	0xFDB
 16420                           fsr2h	equ	0xFDA
 16421                           fsr2l	equ	0xFD9
 16422                           status	equ	0xFD8
 16423                           
 16424 ;; *************** function _eval_poly *****************
 16425 ;; Defined at:
 16426 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 16427 ;; Parameters:    Size  Location     Type
 16428 ;;  x               3   36[BANK0 ] float 
 16429 ;;  d               2   39[BANK0 ] PTR const 
 16430 ;;		 -> log@coeff(27), exp@coeff(30), 
 16431 ;;  n               2   41[BANK0 ] int 
 16432 ;; Auto vars:     Size  Location     Type
 16433 ;;  res             3   43[BANK0 ] int 
 16434 ;; Return value:  Size  Location     Type
 16435 ;;                  3   36[BANK0 ] int 
 16436 ;; Registers used:
 16437 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16438 ;; Tracked objects:
 16439 ;;		On entry : 0/0
 16440 ;;		On exit  : 0/0
 16441 ;;		Unchanged: 0/0
 16442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16443 ;;      Params:         0       7       0       0       0       0       0
 16444 ;;      Locals:         0       3       0       0       0       0       0
 16445 ;;      Temps:          2       0       0       0       0       0       0
 16446 ;;      Totals:         2      10       0       0       0       0       0
 16447 ;;Total ram usage:       12 bytes
 16448 ;; Hardware stack levels used:    1
 16449 ;; Hardware stack levels required when called:    6
 16450 ;; This function calls:
 16451 ;;		___ftadd
 16452 ;;		___ftmul
 16453 ;;		___wmul
 16454 ;; This function is called by:
 16455 ;;		_exp
 16456 ;;		_log
 16457 ;; This function uses a non-reentrant model
 16458 ;;
 16459                           
 16460                           	psect	text94
 16461  002A1E                     __ptext94:
 16462                           	opt stack 0
 16463  002A1E                     _eval_poly:
 16464                           	opt stack 18
 16465                           
 16466                           ;incstack = 0
 16467  002A1E  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16468  002A22  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16469  002A26  0E00               	movlw	0
 16470  002A28  6E1B               	movwf	___wmul@multiplicand+1,c
 16471  002A2A  0E03               	movlw	3
 16472  002A2C  6E1A               	movwf	___wmul@multiplicand,c
 16473  002A2E  EC26  F020         	call	___wmul	;wreg free
 16474  002A32  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16475  002A36  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16476  002A3A  5018               	movf	?___wmul,w,c
 16477  002A3C  262F               	addwf	??_eval_poly,f,c
 16478  002A3E  5019               	movf	?___wmul+1,w,c
 16479  002A40  2230               	addwfc	??_eval_poly+1,f,c
 16480  002A42  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16481  002A46  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16482  002A4A                     	if	0	;tblptru may be non-zero
 16483  002A4A                     	endif
 16484  002A4A                     	if	0	;tblptru may be non-zero
 16485  002A4A                     	endif
 16486  002A4A  0009               	tblrd		*+
 16487  002A4C  CFF5 F08B          	movff	tablat,eval_poly@res
 16488  002A50  0009               	tblrd		*+
 16489  002A52  CFF5 F08C          	movff	tablat,eval_poly@res+1
 16490  002A56  000A               	tblrd		*-
 16491  002A58  CFF5 F08D          	movff	tablat,eval_poly@res+2
 16492  002A5C  D03F               	goto	l2313
 16493  002A5E  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 16494  002A62  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 16495  002A66  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 16496  002A6A  C084  F069         	movff	eval_poly@x,___ftmul@f1
 16497  002A6E  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 16498  002A72  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 16499  002A76  ECEE  F011         	call	___ftmul	;wreg free
 16500  002A7A  C069  F078         	movff	?___ftmul,___ftadd@f1
 16501  002A7E  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 16502  002A82  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 16503  002A86  0E00               	movlw	0
 16504  002A88  6E1B               	movwf	___wmul@multiplicand+1,c
 16505  002A8A  0E03               	movlw	3
 16506  002A8C  6E1A               	movwf	___wmul@multiplicand,c
 16507  002A8E  0100               	movlb	0	; () banked
 16508  002A90  0789               	decf	eval_poly@n& (0+255),f,b
 16509  002A92  A0D8               	btfss	status,0,c
 16510  002A94  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 16511  002A96  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16512  002A9A  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16513  002A9E  EC26  F020         	call	___wmul	;wreg free
 16514  002AA2  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16515  002AA6  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16516  002AAA  5018               	movf	?___wmul,w,c
 16517  002AAC  262F               	addwf	??_eval_poly,f,c
 16518  002AAE  5019               	movf	?___wmul+1,w,c
 16519  002AB0  2230               	addwfc	??_eval_poly+1,f,c
 16520  002AB2  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16521  002AB6  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16522  002ABA                     	if	0	;tblptru may be non-zero
 16523  002ABA                     	endif
 16524  002ABA                     	if	0	;tblptru may be non-zero
 16525  002ABA                     	endif
 16526  002ABA  0009               	tblrd		*+
 16527  002ABC  CFF5 F07B          	movff	tablat,___ftadd@f2
 16528  002AC0  0009               	tblrd		*+
 16529  002AC2  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 16530  002AC6  000A               	tblrd		*-
 16531  002AC8  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 16532  002ACC  ECED  F00C         	call	___ftadd	;wreg free
 16533  002AD0  C078  F08B         	movff	?___ftadd,eval_poly@res
 16534  002AD4  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 16535  002AD8  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 16536  002ADC                     l2313:
 16537  002ADC  0100               	movlb	0	; () banked
 16538  002ADE  5189               	movf	eval_poly@n& (0+255),w,b
 16539  002AE0  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 16540  002AE2  A4D8               	btfss	status,2,c
 16541  002AE4  D7BC               	goto	l2314
 16542                           
 16543                           ; BSR set to: 0
 16544  002AE6  C08B  F084         	movff	eval_poly@res,?_eval_poly
 16545  002AEA  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 16546  002AEE  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 16547                           
 16548                           ; BSR set to: 0
 16549  002AF2  0012               	return		;funcret
 16550  002AF4                     __end_of_eval_poly:
 16551                           	opt stack 0
 16552                           tosu	equ	0xFFF
 16553                           tosh	equ	0xFFE
 16554                           tosl	equ	0xFFD
 16555                           pclath	equ	0xFFA
 16556                           tblptru	equ	0xFF8
 16557                           tblptrh	equ	0xFF7
 16558                           tblptrl	equ	0xFF6
 16559                           tablat	equ	0xFF5
 16560                           prodh	equ	0xFF4
 16561                           prodl	equ	0xFF3
 16562                           intcon	equ	0xFF2
 16563                           intcon2	equ	0xFF1
 16564                           postinc0	equ	0xFEE
 16565                           plusw0	equ	0xFEB
 16566                           wreg	equ	0xFE8
 16567                           indf1	equ	0xFE7
 16568                           postdec1	equ	0xFE5
 16569                           fsr1h	equ	0xFE2
 16570                           fsr1l	equ	0xFE1
 16571                           indf2	equ	0xFDF
 16572                           postinc2	equ	0xFDE
 16573                           postdec2	equ	0xFDD
 16574                           plusw2	equ	0xFDB
 16575                           fsr2h	equ	0xFDA
 16576                           fsr2l	equ	0xFD9
 16577                           status	equ	0xFD8
 16578                           
 16579 ;; *************** function ___wmul *****************
 16580 ;; Defined at:
 16581 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16582 ;; Parameters:    Size  Location     Type
 16583 ;;  multiplier      2   23[COMRAM] unsigned int 
 16584 ;;  multiplicand    2   25[COMRAM] unsigned int 
 16585 ;; Auto vars:     Size  Location     Type
 16586 ;;  product         2   27[COMRAM] unsigned int 
 16587 ;; Return value:  Size  Location     Type
 16588 ;;                  2   23[COMRAM] unsigned int 
 16589 ;; Registers used:
 16590 ;;		wreg, status,2, status,0, prodl, prodh
 16591 ;; Tracked objects:
 16592 ;;		On entry : 0/0
 16593 ;;		On exit  : 0/0
 16594 ;;		Unchanged: 0/0
 16595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16596 ;;      Params:         4       0       0       0       0       0       0
 16597 ;;      Locals:         2       0       0       0       0       0       0
 16598 ;;      Temps:          0       0       0       0       0       0       0
 16599 ;;      Totals:         6       0       0       0       0       0       0
 16600 ;;Total ram usage:        6 bytes
 16601 ;; Hardware stack levels used:    1
 16602 ;; Hardware stack levels required when called:    4
 16603 ;; This function calls:
 16604 ;;		Nothing
 16605 ;; This function is called by:
 16606 ;;		_GetMcuFwVersion
 16607 ;;		_eval_poly
 16608 ;; This function uses a non-reentrant model
 16609 ;;
 16610                           
 16611                           	psect	text95
 16612  00404C                     __ptext95:
 16613                           	opt stack 0
 16614  00404C                     ___wmul:
 16615                           	opt stack 19
 16616                           
 16617                           ; BSR set to: 0
 16618                           ;incstack = 0
 16619  00404C  5018               	movf	___wmul@multiplier,w,c
 16620  00404E  021A               	mulwf	___wmul@multiplicand,c
 16621  004050  CFF3 F01C          	movff	prodl,___wmul@product
 16622  004054  CFF4 F01D          	movff	prodh,___wmul@product+1
 16623  004058  5018               	movf	___wmul@multiplier,w,c
 16624  00405A  021B               	mulwf	___wmul@multiplicand+1,c
 16625  00405C  50F3               	movf	prodl,w,c
 16626  00405E  261D               	addwf	___wmul@product+1,f,c
 16627  004060  5019               	movf	___wmul@multiplier+1,w,c
 16628  004062  021A               	mulwf	___wmul@multiplicand,c
 16629  004064  50F3               	movf	prodl,w,c
 16630  004066  261D               	addwf	___wmul@product+1,f,c
 16631  004068  C01C  F018         	movff	___wmul@product,?___wmul
 16632  00406C  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 16633  004070  0012               	return	
 16634  004072                     __end_of___wmul:
 16635                           	opt stack 0
 16636                           tosu	equ	0xFFF
 16637                           tosh	equ	0xFFE
 16638                           tosl	equ	0xFFD
 16639                           pclath	equ	0xFFA
 16640                           tblptru	equ	0xFF8
 16641                           tblptrh	equ	0xFF7
 16642                           tblptrl	equ	0xFF6
 16643                           tablat	equ	0xFF5
 16644                           prodh	equ	0xFF4
 16645                           prodl	equ	0xFF3
 16646                           intcon	equ	0xFF2
 16647                           intcon2	equ	0xFF1
 16648                           postinc0	equ	0xFEE
 16649                           plusw0	equ	0xFEB
 16650                           wreg	equ	0xFE8
 16651                           indf1	equ	0xFE7
 16652                           postdec1	equ	0xFE5
 16653                           fsr1h	equ	0xFE2
 16654                           fsr1l	equ	0xFE1
 16655                           indf2	equ	0xFDF
 16656                           postinc2	equ	0xFDE
 16657                           postdec2	equ	0xFDD
 16658                           plusw2	equ	0xFDB
 16659                           fsr2h	equ	0xFDA
 16660                           fsr2l	equ	0xFD9
 16661                           status	equ	0xFD8
 16662                           
 16663 ;; *************** function ___ftmul *****************
 16664 ;; Defined at:
 16665 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 16666 ;; Parameters:    Size  Location     Type
 16667 ;;  f1              3    9[BANK0 ] float 
 16668 ;;  f2              3   12[BANK0 ] float 
 16669 ;; Auto vars:     Size  Location     Type
 16670 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 16671 ;;  sign            1   23[BANK0 ] unsigned char 
 16672 ;;  cntr            1   22[BANK0 ] unsigned char 
 16673 ;;  exp             1   18[BANK0 ] unsigned char 
 16674 ;; Return value:  Size  Location     Type
 16675 ;;                  3    9[BANK0 ] float 
 16676 ;; Registers used:
 16677 ;;		wreg, status,2, status,0, cstack
 16678 ;; Tracked objects:
 16679 ;;		On entry : 0/0
 16680 ;;		On exit  : 0/0
 16681 ;;		Unchanged: 0/0
 16682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16683 ;;      Params:         0       6       0       0       0       0       0
 16684 ;;      Locals:         0       6       0       0       0       0       0
 16685 ;;      Temps:          0       3       0       0       0       0       0
 16686 ;;      Totals:         0      15       0       0       0       0       0
 16687 ;;Total ram usage:       15 bytes
 16688 ;; Hardware stack levels used:    1
 16689 ;; Hardware stack levels required when called:    5
 16690 ;; This function calls:
 16691 ;;		___ftpack
 16692 ;; This function is called by:
 16693 ;;		_AdcConvert
 16694 ;;		_CheckFlashPrecentage
 16695 ;;		_pow
 16696 ;;		_exp
 16697 ;;		_log
 16698 ;;		_eval_poly
 16699 ;; This function uses a non-reentrant model
 16700 ;;
 16701                           
 16702                           	psect	text96
 16703  0023DC                     __ptext96:
 16704                           	opt stack 0
 16705  0023DC                     ___ftmul:
 16706                           	opt stack 18
 16707                           
 16708                           ;incstack = 0
 16709  0023DC  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 16710  0023E0  0100               	movlb	0	; () banked
 16711  0023E2  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16712  0023E4  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16713  0023E6  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 16714  0023E8  376F               	rlcf	??___ftmul& (0+255),f,b
 16715  0023EA  E301               	bnc	u6781
 16716  0023EC  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16717  0023EE                     u6781:
 16718  0023EE  516F               	movf	??___ftmul& (0+255),w,b
 16719  0023F0  6F72               	movwf	___ftmul@exp& (0+255),b
 16720  0023F2  5172               	movf	___ftmul@exp& (0+255),w,b
 16721  0023F4  A4D8               	btfss	status,2,c
 16722  0023F6  D007               	goto	l1897
 16723                           
 16724                           ; BSR set to: 0
 16725  0023F8  0E00               	movlw	0
 16726  0023FA  6F69               	movwf	?___ftmul& (0+255),b
 16727  0023FC  0E00               	movlw	0
 16728  0023FE  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16729  002400  0E00               	movlw	0
 16730  002402  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16731                           
 16732                           ; BSR set to: 0
 16733  002404  0012               	return	
 16734  002406                     l1897:
 16735                           
 16736                           ; BSR set to: 0
 16737                           
 16738                           ; BSR set to: 0
 16739  002406  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 16740  00240A  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16741  00240C  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16742  00240E  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 16743  002410  376F               	rlcf	??___ftmul& (0+255),f,b
 16744  002412  E301               	bnc	u6801
 16745  002414  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16746  002416                     u6801:
 16747  002416  516F               	movf	??___ftmul& (0+255),w,b
 16748  002418  6F77               	movwf	___ftmul@sign& (0+255),b
 16749  00241A  5177               	movf	___ftmul@sign& (0+255),w,b
 16750  00241C  A4D8               	btfss	status,2,c
 16751  00241E  D007               	goto	l1899
 16752                           
 16753                           ; BSR set to: 0
 16754  002420  0E00               	movlw	0
 16755  002422  6F69               	movwf	?___ftmul& (0+255),b
 16756  002424  0E00               	movlw	0
 16757  002426  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16758  002428  0E00               	movlw	0
 16759  00242A  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16760                           
 16761                           ; BSR set to: 0
 16762  00242C  0012               	return	
 16763  00242E                     l1899:
 16764                           
 16765                           ; BSR set to: 0
 16766                           
 16767                           ; BSR set to: 0
 16768  00242E  5177               	movf	___ftmul@sign& (0+255),w,b
 16769  002430  0F7B               	addlw	123
 16770  002432  2772               	addwf	___ftmul@exp& (0+255),f,b
 16771                           
 16772                           ; BSR set to: 0
 16773  002434  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 16774  002438  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16775  00243A  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 16776  00243C  0E80               	movlw	128
 16777  00243E  1777               	andwf	___ftmul@sign& (0+255),f,b
 16778                           
 16779                           ; BSR set to: 0
 16780  002440  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 16781                           
 16782                           ; BSR set to: 0
 16783  002442  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 16784                           
 16785                           ; BSR set to: 0
 16786  002444  0EFF               	movlw	255
 16787  002446  176C               	andwf	___ftmul@f2& (0+255),f,b
 16788  002448  0EFF               	movlw	255
 16789  00244A  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 16790  00244C  0E00               	movlw	0
 16791  00244E  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 16792                           
 16793                           ; BSR set to: 0
 16794  002450  0E00               	movlw	0
 16795  002452  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 16796  002454  0E00               	movlw	0
 16797  002456  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 16798  002458  0E00               	movlw	0
 16799  00245A  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 16800                           
 16801                           ; BSR set to: 0
 16802  00245C  0E07               	movlw	7
 16803  00245E  6F76               	movwf	___ftmul@cntr& (0+255),b
 16804  002460                     
 16805                           ; BSR set to: 0
 16806                           
 16807                           ; BSR set to: 0
 16808  002460  A169               	btfss	___ftmul@f1& (0+255),0,b
 16809  002462  D006               	goto	l1901
 16810                           
 16811                           ; BSR set to: 0
 16812  002464  516C               	movf	___ftmul@f2& (0+255),w,b
 16813  002466  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 16814  002468  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 16815  00246A  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 16816  00246C  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16817  00246E  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 16818  002470                     l1901:
 16819                           
 16820                           ; BSR set to: 0
 16821                           
 16822                           ; BSR set to: 0
 16823  002470  90D8               	bcf	status,0,c
 16824  002472  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 16825  002474  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 16826  002476  3369               	rrcf	___ftmul@f1& (0+255),f,b
 16827  002478  90D8               	bcf	status,0,c
 16828  00247A  376C               	rlcf	___ftmul@f2& (0+255),f,b
 16829  00247C  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 16830  00247E  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 16831                           
 16832                           ; BSR set to: 0
 16833  002480  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 16834  002482  D7EE               	goto	l1900
 16835                           
 16836                           ; BSR set to: 0
 16837                           
 16838                           ; BSR set to: 0
 16839  002484  0E09               	movlw	9
 16840  002486  6F76               	movwf	___ftmul@cntr& (0+255),b
 16841  002488                     
 16842                           ; BSR set to: 0
 16843                           
 16844                           ; BSR set to: 0
 16845  002488  A169               	btfss	___ftmul@f1& (0+255),0,b
 16846  00248A  D006               	goto	l1904
 16847                           
 16848                           ; BSR set to: 0
 16849  00248C  516C               	movf	___ftmul@f2& (0+255),w,b
 16850  00248E  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 16851  002490  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 16852  002492  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 16853  002494  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16854  002496  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 16855  002498                     l1904:
 16856                           
 16857                           ; BSR set to: 0
 16858                           
 16859                           ; BSR set to: 0
 16860  002498  90D8               	bcf	status,0,c
 16861  00249A  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 16862  00249C  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 16863  00249E  3369               	rrcf	___ftmul@f1& (0+255),f,b
 16864  0024A0  90D8               	bcf	status,0,c
 16865  0024A2  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 16866  0024A4  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 16867  0024A6  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 16868                           
 16869                           ; BSR set to: 0
 16870  0024A8  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 16871  0024AA  D7EE               	goto	l1903
 16872                           
 16873                           ; BSR set to: 0
 16874                           
 16875                           ; BSR set to: 0
 16876  0024AC  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 16877  0024B0  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 16878  0024B4  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 16879  0024B8  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 16880  0024BC  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 16881  0024C0  ECF9  F016         	call	___ftpack	;wreg free
 16882  0024C4  C018  F069         	movff	?___ftpack,?___ftmul
 16883  0024C8  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 16884  0024CC  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 16885  0024D0  0012               	return	
 16886  0024D2                     __end_of___ftmul:
 16887                           	opt stack 0
 16888                           tosu	equ	0xFFF
 16889                           tosh	equ	0xFFE
 16890                           tosl	equ	0xFFD
 16891                           pclath	equ	0xFFA
 16892                           tblptru	equ	0xFF8
 16893                           tblptrh	equ	0xFF7
 16894                           tblptrl	equ	0xFF6
 16895                           tablat	equ	0xFF5
 16896                           prodh	equ	0xFF4
 16897                           prodl	equ	0xFF3
 16898                           intcon	equ	0xFF2
 16899                           intcon2	equ	0xFF1
 16900                           postinc0	equ	0xFEE
 16901                           plusw0	equ	0xFEB
 16902                           wreg	equ	0xFE8
 16903                           indf1	equ	0xFE7
 16904                           postdec1	equ	0xFE5
 16905                           fsr1h	equ	0xFE2
 16906                           fsr1l	equ	0xFE1
 16907                           indf2	equ	0xFDF
 16908                           postinc2	equ	0xFDE
 16909                           postdec2	equ	0xFDD
 16910                           plusw2	equ	0xFDB
 16911                           fsr2h	equ	0xFDA
 16912                           fsr2l	equ	0xFD9
 16913                           status	equ	0xFD8
 16914                           
 16915 ;; *************** function ___ftsub *****************
 16916 ;; Defined at:
 16917 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 16918 ;; Parameters:    Size  Location     Type
 16919 ;;  f1              3   36[BANK0 ] float 
 16920 ;;  f2              3   39[BANK0 ] float 
 16921 ;; Auto vars:     Size  Location     Type
 16922 ;;		None
 16923 ;; Return value:  Size  Location     Type
 16924 ;;                  3   36[BANK0 ] float 
 16925 ;; Registers used:
 16926 ;;		wreg, status,2, status,0, cstack
 16927 ;; Tracked objects:
 16928 ;;		On entry : 0/0
 16929 ;;		On exit  : 0/0
 16930 ;;		Unchanged: 0/0
 16931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16932 ;;      Params:         0       6       0       0       0       0       0
 16933 ;;      Locals:         0       0       0       0       0       0       0
 16934 ;;      Temps:          0       0       0       0       0       0       0
 16935 ;;      Totals:         0       6       0       0       0       0       0
 16936 ;;Total ram usage:        6 bytes
 16937 ;; Hardware stack levels used:    1
 16938 ;; Hardware stack levels required when called:    6
 16939 ;; This function calls:
 16940 ;;		___ftadd
 16941 ;; This function is called by:
 16942 ;;		_exp
 16943 ;; This function uses a non-reentrant model
 16944 ;;
 16945                           
 16946                           	psect	text97
 16947  003B56                     __ptext97:
 16948                           	opt stack 0
 16949  003B56                     ___ftsub:
 16950                           	opt stack 18
 16951                           
 16952                           ;incstack = 0
 16953  003B56  0100               	movlb	0	; () banked
 16954  003B58  5187               	movf	___ftsub@f2& (0+255),w,b
 16955  003B5A  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 16956  003B5C  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 16957  003B5E  B4D8               	btfsc	status,2,c
 16958  003B60  D006               	goto	l1914
 16959                           
 16960                           ; BSR set to: 0
 16961  003B62  0E00               	movlw	0
 16962  003B64  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 16963  003B66  0E00               	movlw	0
 16964  003B68  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 16965  003B6A  0E80               	movlw	128
 16966  003B6C  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 16967  003B6E                     l1914:
 16968                           
 16969                           ; BSR set to: 0
 16970                           
 16971                           ; BSR set to: 0
 16972  003B6E  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 16973  003B72  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 16974  003B76  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 16975  003B7A  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 16976  003B7E  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 16977  003B82  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 16978  003B86  ECED  F00C         	call	___ftadd	;wreg free
 16979  003B8A  C078  F084         	movff	?___ftadd,?___ftsub
 16980  003B8E  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 16981  003B92  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 16982  003B96  0012               	return	
 16983  003B98                     __end_of___ftsub:
 16984                           	opt stack 0
 16985                           tosu	equ	0xFFF
 16986                           tosh	equ	0xFFE
 16987                           tosl	equ	0xFFD
 16988                           pclath	equ	0xFFA
 16989                           tblptru	equ	0xFF8
 16990                           tblptrh	equ	0xFF7
 16991                           tblptrl	equ	0xFF6
 16992                           tablat	equ	0xFF5
 16993                           prodh	equ	0xFF4
 16994                           prodl	equ	0xFF3
 16995                           intcon	equ	0xFF2
 16996                           intcon2	equ	0xFF1
 16997                           postinc0	equ	0xFEE
 16998                           plusw0	equ	0xFEB
 16999                           wreg	equ	0xFE8
 17000                           indf1	equ	0xFE7
 17001                           postdec1	equ	0xFE5
 17002                           fsr1h	equ	0xFE2
 17003                           fsr1l	equ	0xFE1
 17004                           indf2	equ	0xFDF
 17005                           postinc2	equ	0xFDE
 17006                           postdec2	equ	0xFDD
 17007                           plusw2	equ	0xFDB
 17008                           fsr2h	equ	0xFDA
 17009                           fsr2l	equ	0xFD9
 17010                           status	equ	0xFD8
 17011                           
 17012 ;; *************** function ___ftadd *****************
 17013 ;; Defined at:
 17014 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 17015 ;; Parameters:    Size  Location     Type
 17016 ;;  f1              3   24[BANK0 ] float 
 17017 ;;  f2              3   27[BANK0 ] float 
 17018 ;; Auto vars:     Size  Location     Type
 17019 ;;  exp1            1   35[BANK0 ] unsigned char 
 17020 ;;  exp2            1   34[BANK0 ] unsigned char 
 17021 ;;  sign            1   33[BANK0 ] unsigned char 
 17022 ;; Return value:  Size  Location     Type
 17023 ;;                  3   24[BANK0 ] float 
 17024 ;; Registers used:
 17025 ;;		wreg, status,2, status,0, cstack
 17026 ;; Tracked objects:
 17027 ;;		On entry : 0/0
 17028 ;;		On exit  : 0/0
 17029 ;;		Unchanged: 0/0
 17030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17031 ;;      Params:         0       6       0       0       0       0       0
 17032 ;;      Locals:         0       3       0       0       0       0       0
 17033 ;;      Temps:          0       3       0       0       0       0       0
 17034 ;;      Totals:         0      12       0       0       0       0       0
 17035 ;;Total ram usage:       12 bytes
 17036 ;; Hardware stack levels used:    1
 17037 ;; Hardware stack levels required when called:    5
 17038 ;; This function calls:
 17039 ;;		___ftpack
 17040 ;; This function is called by:
 17041 ;;		___ftsub
 17042 ;;		_floor
 17043 ;;		_log
 17044 ;;		_eval_poly
 17045 ;; This function uses a non-reentrant model
 17046 ;;
 17047                           
 17048                           	psect	text98
 17049  0019DA                     __ptext98:
 17050                           	opt stack 0
 17051  0019DA                     ___ftadd:
 17052                           	opt stack 18
 17053                           
 17054                           ;incstack = 0
 17055  0019DA  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 17056  0019DE  0100               	movlb	0	; () banked
 17057  0019E0  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17058  0019E2  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17059  0019E4  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 17060  0019E6  377E               	rlcf	??___ftadd& (0+255),f,b
 17061  0019E8  E301               	bnc	u6571
 17062  0019EA  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17063  0019EC                     u6571:
 17064  0019EC  517E               	movf	??___ftadd& (0+255),w,b
 17065  0019EE  6F83               	movwf	___ftadd@exp1& (0+255),b
 17066  0019F0  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 17067  0019F4  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17068  0019F6  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17069  0019F8  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 17070  0019FA  377E               	rlcf	??___ftadd& (0+255),f,b
 17071  0019FC  E301               	bnc	u6581
 17072  0019FE  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17073  001A00                     u6581:
 17074  001A00  517E               	movf	??___ftadd& (0+255),w,b
 17075  001A02  6F82               	movwf	___ftadd@exp2& (0+255),b
 17076                           
 17077                           ; BSR set to: 0
 17078  001A04  5183               	movf	___ftadd@exp1& (0+255),w,b
 17079  001A06  B4D8               	btfsc	status,2,c
 17080  001A08  D00B               	goto	u6610
 17081                           
 17082                           ; BSR set to: 0
 17083  001A0A  5182               	movf	___ftadd@exp2& (0+255),w,b
 17084  001A0C  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17085  001A0E  B0D8               	btfsc	status,0,c
 17086  001A10  D00E               	goto	l1849
 17087                           
 17088                           ; BSR set to: 0
 17089  001A12  5183               	movf	___ftadd@exp1& (0+255),w,b
 17090  001A14  0800               	sublw	0
 17091  001A16  2582               	addwf	___ftadd@exp2& (0+255),w,b
 17092  001A18  6F7E               	movwf	??___ftadd& (0+255),b
 17093  001A1A  0E18               	movlw	24
 17094  001A1C  657E               	cpfsgt	??___ftadd& (0+255),b
 17095  001A1E  D007               	goto	l1849
 17096  001A20                     u6610:
 17097                           
 17098                           ; BSR set to: 0
 17099  001A20  C07B  F078         	movff	___ftadd@f2,?___ftadd
 17100  001A24  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 17101  001A28  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 17102  001A2C  0012               	return	
 17103  001A2E                     l1849:
 17104                           
 17105                           ; BSR set to: 0
 17106                           
 17107                           ; BSR set to: 0
 17108  001A2E  5182               	movf	___ftadd@exp2& (0+255),w,b
 17109  001A30  B4D8               	btfsc	status,2,c
 17110  001A32  D00B               	goto	u6640
 17111                           
 17112                           ; BSR set to: 0
 17113  001A34  5183               	movf	___ftadd@exp1& (0+255),w,b
 17114  001A36  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17115  001A38  B0D8               	btfsc	status,0,c
 17116  001A3A  D00E               	goto	l1853
 17117                           
 17118                           ; BSR set to: 0
 17119  001A3C  5182               	movf	___ftadd@exp2& (0+255),w,b
 17120  001A3E  0800               	sublw	0
 17121  001A40  2583               	addwf	___ftadd@exp1& (0+255),w,b
 17122  001A42  6F7E               	movwf	??___ftadd& (0+255),b
 17123  001A44  0E18               	movlw	24
 17124  001A46  657E               	cpfsgt	??___ftadd& (0+255),b
 17125  001A48  D007               	goto	l1853
 17126  001A4A                     u6640:
 17127                           
 17128                           ; BSR set to: 0
 17129  001A4A  C078  F078         	movff	___ftadd@f1,?___ftadd
 17130  001A4E  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 17131  001A52  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 17132  001A56  0012               	return	
 17133  001A58                     l1853:
 17134                           
 17135                           ; BSR set to: 0
 17136                           
 17137                           ; BSR set to: 0
 17138  001A58  0E06               	movlw	6
 17139  001A5A  6F81               	movwf	___ftadd@sign& (0+255),b
 17140                           
 17141                           ; BSR set to: 0
 17142  001A5C  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 17143                           
 17144                           ; BSR set to: 0
 17145  001A5E  8F81               	bsf	___ftadd@sign& (0+255),7,b
 17146                           
 17147                           ; BSR set to: 0
 17148                           
 17149                           ; BSR set to: 0
 17150  001A60  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 17151                           
 17152                           ; BSR set to: 0
 17153  001A62  8D81               	bsf	___ftadd@sign& (0+255),6,b
 17154                           
 17155                           ; BSR set to: 0
 17156  001A64  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 17157                           
 17158                           ; BSR set to: 0
 17159  001A66  0EFF               	movlw	255
 17160  001A68  1778               	andwf	___ftadd@f1& (0+255),f,b
 17161  001A6A  0EFF               	movlw	255
 17162  001A6C  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 17163  001A6E  0E00               	movlw	0
 17164  001A70  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 17165  001A72  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 17166                           
 17167                           ; BSR set to: 0
 17168  001A74  0EFF               	movlw	255
 17169  001A76  177B               	andwf	___ftadd@f2& (0+255),f,b
 17170  001A78  0EFF               	movlw	255
 17171  001A7A  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 17172  001A7C  0E00               	movlw	0
 17173  001A7E  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 17174                           
 17175                           ; BSR set to: 0
 17176  001A80  5182               	movf	___ftadd@exp2& (0+255),w,b
 17177  001A82  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17178  001A84  B0D8               	btfsc	status,0,c
 17179  001A86  D01B               	goto	l1858
 17180  001A88                     u6670:
 17181                           
 17182                           ; BSR set to: 0
 17183                           
 17184                           ; BSR set to: 0
 17185  001A88  90D8               	bcf	status,0,c
 17186  001A8A  377B               	rlcf	___ftadd@f2& (0+255),f,b
 17187  001A8C  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 17188  001A8E  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 17189  001A90  0782               	decf	___ftadd@exp2& (0+255),f,b
 17190                           
 17191                           ; BSR set to: 0
 17192  001A92  5183               	movf	___ftadd@exp1& (0+255),w,b
 17193  001A94  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17194  001A96  B4D8               	btfsc	status,2,c
 17195  001A98  D00D               	goto	l1863
 17196                           
 17197                           ; BSR set to: 0
 17198  001A9A  0781               	decf	___ftadd@sign& (0+255),f,b
 17199  001A9C  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17200  001AA0  0E07               	movlw	7
 17201  001AA2  177E               	andwf	??___ftadd& (0+255),f,b
 17202  001AA4  B4D8               	btfsc	status,2,c
 17203  001AA6  D006               	goto	l1863
 17204  001AA8  D7EF               	goto	u6670
 17205  001AAA                     
 17206                           ; BSR set to: 0
 17207                           
 17208                           ; BSR set to: 0
 17209  001AAA  90D8               	bcf	status,0,c
 17210  001AAC  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 17211  001AAE  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 17212  001AB0  3378               	rrcf	___ftadd@f1& (0+255),f,b
 17213  001AB2  2B83               	incf	___ftadd@exp1& (0+255),f,b
 17214  001AB4                     l1863:
 17215                           
 17216                           ; BSR set to: 0
 17217                           
 17218                           ; BSR set to: 0
 17219  001AB4  5182               	movf	___ftadd@exp2& (0+255),w,b
 17220  001AB6  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17221  001AB8  B4D8               	btfsc	status,2,c
 17222  001ABA  D01F               	goto	u6740
 17223  001ABC  D7F6               	goto	l1864
 17224  001ABE                     l1858:
 17225                           
 17226                           ; BSR set to: 0
 17227                           
 17228                           ; BSR set to: 0
 17229  001ABE  5183               	movf	___ftadd@exp1& (0+255),w,b
 17230  001AC0  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17231  001AC2  B0D8               	btfsc	status,0,c
 17232  001AC4  D01A               	goto	u6740
 17233  001AC6                     u6710:
 17234                           
 17235                           ; BSR set to: 0
 17236                           
 17237                           ; BSR set to: 0
 17238  001AC6  90D8               	bcf	status,0,c
 17239  001AC8  3778               	rlcf	___ftadd@f1& (0+255),f,b
 17240  001ACA  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 17241  001ACC  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 17242  001ACE  0783               	decf	___ftadd@exp1& (0+255),f,b
 17243                           
 17244                           ; BSR set to: 0
 17245  001AD0  5183               	movf	___ftadd@exp1& (0+255),w,b
 17246  001AD2  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17247  001AD4  B4D8               	btfsc	status,2,c
 17248  001AD6  D00D               	goto	l1872
 17249                           
 17250                           ; BSR set to: 0
 17251  001AD8  0781               	decf	___ftadd@sign& (0+255),f,b
 17252  001ADA  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17253  001ADE  0E07               	movlw	7
 17254  001AE0  177E               	andwf	??___ftadd& (0+255),f,b
 17255  001AE2  B4D8               	btfsc	status,2,c
 17256  001AE4  D006               	goto	l1872
 17257  001AE6  D7EF               	goto	u6710
 17258  001AE8                     
 17259                           ; BSR set to: 0
 17260                           
 17261                           ; BSR set to: 0
 17262  001AE8  90D8               	bcf	status,0,c
 17263  001AEA  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 17264  001AEC  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 17265  001AEE  337B               	rrcf	___ftadd@f2& (0+255),f,b
 17266  001AF0  2B82               	incf	___ftadd@exp2& (0+255),f,b
 17267  001AF2                     l1872:
 17268                           
 17269                           ; BSR set to: 0
 17270                           
 17271                           ; BSR set to: 0
 17272  001AF2  5182               	movf	___ftadd@exp2& (0+255),w,b
 17273  001AF4  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17274  001AF6  A4D8               	btfss	status,2,c
 17275  001AF8  D7F7               	goto	l1873
 17276  001AFA                     u6740:
 17277                           
 17278                           ; BSR set to: 0
 17279                           
 17280                           ; BSR set to: 0
 17281                           
 17282                           ; BSR set to: 0
 17283  001AFA  AF81               	btfss	___ftadd@sign& (0+255),7,b
 17284  001AFC  D00C               	goto	l1875
 17285                           
 17286                           ; BSR set to: 0
 17287  001AFE  0EFF               	movlw	255
 17288  001B00  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 17289  001B02  0EFF               	movlw	255
 17290  001B04  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 17291  001B06  0EFF               	movlw	255
 17292  001B08  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 17293  001B0A  0E01               	movlw	1
 17294  001B0C  2778               	addwf	___ftadd@f1& (0+255),f,b
 17295  001B0E  0E00               	movlw	0
 17296  001B10  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 17297  001B12  0E00               	movlw	0
 17298  001B14  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 17299  001B16                     l1875:
 17300                           
 17301                           ; BSR set to: 0
 17302  001B16  AD81               	btfss	___ftadd@sign& (0+255),6,b
 17303  001B18  D00C               	goto	l1876
 17304                           
 17305                           ; BSR set to: 0
 17306  001B1A  0EFF               	movlw	255
 17307  001B1C  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17308  001B1E  0EFF               	movlw	255
 17309  001B20  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17310  001B22  0EFF               	movlw	255
 17311  001B24  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17312  001B26  0E01               	movlw	1
 17313  001B28  277B               	addwf	___ftadd@f2& (0+255),f,b
 17314  001B2A  0E00               	movlw	0
 17315  001B2C  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17316  001B2E  0E00               	movlw	0
 17317  001B30  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17318  001B32                     l1876:
 17319                           
 17320                           ; BSR set to: 0
 17321                           
 17322                           ; BSR set to: 0
 17323  001B32  0E00               	movlw	0
 17324  001B34  6F81               	movwf	___ftadd@sign& (0+255),b
 17325                           
 17326                           ; BSR set to: 0
 17327  001B36  5178               	movf	___ftadd@f1& (0+255),w,b
 17328  001B38  277B               	addwf	___ftadd@f2& (0+255),f,b
 17329  001B3A  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 17330  001B3C  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17331  001B3E  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 17332  001B40  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17333                           
 17334                           ; BSR set to: 0
 17335  001B42  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 17336  001B44  D00E               	goto	l1877
 17337                           
 17338                           ; BSR set to: 0
 17339  001B46  0EFF               	movlw	255
 17340  001B48  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17341  001B4A  0EFF               	movlw	255
 17342  001B4C  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17343  001B4E  0EFF               	movlw	255
 17344  001B50  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17345  001B52  0E01               	movlw	1
 17346  001B54  277B               	addwf	___ftadd@f2& (0+255),f,b
 17347  001B56  0E00               	movlw	0
 17348  001B58  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17349  001B5A  0E00               	movlw	0
 17350  001B5C  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17351                           
 17352                           ; BSR set to: 0
 17353  001B5E  0E01               	movlw	1
 17354  001B60  6F81               	movwf	___ftadd@sign& (0+255),b
 17355  001B62                     l1877:
 17356                           
 17357                           ; BSR set to: 0
 17358                           
 17359                           ; BSR set to: 0
 17360  001B62  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 17361  001B66  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 17362  001B6A  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 17363  001B6E  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 17364  001B72  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 17365  001B76  ECF9  F016         	call	___ftpack	;wreg free
 17366  001B7A  C018  F078         	movff	?___ftpack,?___ftadd
 17367  001B7E  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 17368  001B82  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 17369  001B86  0012               	return	
 17370  001B88                     __end_of___ftadd:
 17371                           	opt stack 0
 17372                           tosu	equ	0xFFF
 17373                           tosh	equ	0xFFE
 17374                           tosl	equ	0xFFD
 17375                           pclath	equ	0xFFA
 17376                           tblptru	equ	0xFF8
 17377                           tblptrh	equ	0xFF7
 17378                           tblptrl	equ	0xFF6
 17379                           tablat	equ	0xFF5
 17380                           prodh	equ	0xFF4
 17381                           prodl	equ	0xFF3
 17382                           intcon	equ	0xFF2
 17383                           intcon2	equ	0xFF1
 17384                           postinc0	equ	0xFEE
 17385                           plusw0	equ	0xFEB
 17386                           wreg	equ	0xFE8
 17387                           indf1	equ	0xFE7
 17388                           postdec1	equ	0xFE5
 17389                           fsr1h	equ	0xFE2
 17390                           fsr1l	equ	0xFE1
 17391                           indf2	equ	0xFDF
 17392                           postinc2	equ	0xFDE
 17393                           postdec2	equ	0xFDD
 17394                           plusw2	equ	0xFDB
 17395                           fsr2h	equ	0xFDA
 17396                           fsr2l	equ	0xFD9
 17397                           status	equ	0xFD8
 17398                           
 17399 ;; *************** function ___ftneg *****************
 17400 ;; Defined at:
 17401 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 17402 ;; Parameters:    Size  Location     Type
 17403 ;;  f1              3   23[COMRAM] float 
 17404 ;; Auto vars:     Size  Location     Type
 17405 ;;		None
 17406 ;; Return value:  Size  Location     Type
 17407 ;;                  3   23[COMRAM] float 
 17408 ;; Registers used:
 17409 ;;		wreg, status,2, status,0
 17410 ;; Tracked objects:
 17411 ;;		On entry : 0/0
 17412 ;;		On exit  : 0/0
 17413 ;;		Unchanged: 0/0
 17414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17415 ;;      Params:         3       0       0       0       0       0       0
 17416 ;;      Locals:         0       0       0       0       0       0       0
 17417 ;;      Temps:          0       0       0       0       0       0       0
 17418 ;;      Totals:         3       0       0       0       0       0       0
 17419 ;;Total ram usage:        3 bytes
 17420 ;; Hardware stack levels used:    1
 17421 ;; Hardware stack levels required when called:    4
 17422 ;; This function calls:
 17423 ;;		Nothing
 17424 ;; This function is called by:
 17425 ;;		_pow
 17426 ;;		_exp
 17427 ;; This function uses a non-reentrant model
 17428 ;;
 17429                           
 17430                           	psect	text99
 17431  004096                     __ptext99:
 17432                           	opt stack 0
 17433  004096                     ___ftneg:
 17434                           	opt stack 20
 17435                           
 17436                           ;incstack = 0
 17437  004096  5018               	movf	___ftneg@f1,w,c
 17438  004098  1019               	iorwf	___ftneg@f1+1,w,c
 17439  00409A  101A               	iorwf	___ftneg@f1+2,w,c
 17440  00409C  B4D8               	btfsc	status,2,c
 17441  00409E  D006               	goto	l1908
 17442  0040A0  0E00               	movlw	0
 17443  0040A2  1A18               	xorwf	___ftneg@f1,f,c
 17444  0040A4  0E00               	movlw	0
 17445  0040A6  1A19               	xorwf	___ftneg@f1+1,f,c
 17446  0040A8  0E80               	movlw	128
 17447  0040AA  1A1A               	xorwf	___ftneg@f1+2,f,c
 17448  0040AC                     l1908:
 17449  0040AC  C018  F018         	movff	___ftneg@f1,?___ftneg
 17450  0040B0  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 17451  0040B4  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 17452  0040B8  0012               	return		;funcret
 17453  0040BA                     __end_of___ftneg:
 17454                           	opt stack 0
 17455                           tosu	equ	0xFFF
 17456                           tosh	equ	0xFFE
 17457                           tosl	equ	0xFFD
 17458                           pclath	equ	0xFFA
 17459                           tblptru	equ	0xFF8
 17460                           tblptrh	equ	0xFF7
 17461                           tblptrl	equ	0xFF6
 17462                           tablat	equ	0xFF5
 17463                           prodh	equ	0xFF4
 17464                           prodl	equ	0xFF3
 17465                           intcon	equ	0xFF2
 17466                           intcon2	equ	0xFF1
 17467                           postinc0	equ	0xFEE
 17468                           plusw0	equ	0xFEB
 17469                           wreg	equ	0xFE8
 17470                           indf1	equ	0xFE7
 17471                           postdec1	equ	0xFE5
 17472                           fsr1h	equ	0xFE2
 17473                           fsr1l	equ	0xFE1
 17474                           indf2	equ	0xFDF
 17475                           postinc2	equ	0xFDE
 17476                           postdec2	equ	0xFDD
 17477                           plusw2	equ	0xFDB
 17478                           fsr2h	equ	0xFDA
 17479                           fsr2l	equ	0xFD9
 17480                           status	equ	0xFD8
 17481                           
 17482 ;; *************** function ___ftdiv *****************
 17483 ;; Defined at:
 17484 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 17485 ;; Parameters:    Size  Location     Type
 17486 ;;  f1              3   40[COMRAM] float 
 17487 ;;  f2              3   43[COMRAM] float 
 17488 ;; Auto vars:     Size  Location     Type
 17489 ;;  f3              3    4[BANK0 ] float 
 17490 ;;  sign            1    8[BANK0 ] unsigned char 
 17491 ;;  exp             1    7[BANK0 ] unsigned char 
 17492 ;;  cntr            1    3[BANK0 ] unsigned char 
 17493 ;; Return value:  Size  Location     Type
 17494 ;;                  3   40[COMRAM] float 
 17495 ;; Registers used:
 17496 ;;		wreg, status,2, status,0, cstack
 17497 ;; Tracked objects:
 17498 ;;		On entry : 0/0
 17499 ;;		On exit  : 0/0
 17500 ;;		Unchanged: 0/0
 17501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17502 ;;      Params:         6       0       0       0       0       0       0
 17503 ;;      Locals:         0       6       0       0       0       0       0
 17504 ;;      Temps:          0       3       0       0       0       0       0
 17505 ;;      Totals:         6       9       0       0       0       0       0
 17506 ;;Total ram usage:       15 bytes
 17507 ;; Hardware stack levels used:    1
 17508 ;; Hardware stack levels required when called:    5
 17509 ;; This function calls:
 17510 ;;		___ftpack
 17511 ;; This function is called by:
 17512 ;;		_AdcConvert
 17513 ;;		_CheckFlashPrecentage
 17514 ;;		_exp
 17515 ;; This function uses a non-reentrant model
 17516 ;;
 17517                           
 17518                           	psect	text100
 17519  0024D2                     __ptext100:
 17520                           	opt stack 0
 17521  0024D2                     ___ftdiv:
 17522                           	opt stack 19
 17523                           
 17524                           ;incstack = 0
 17525  0024D2  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 17526  0024D6  0100               	movlb	0	; () banked
 17527  0024D8  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17528  0024DA  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17529  0024DC  342A               	rlcf	___ftdiv@f1+1,w,c
 17530  0024DE  3760               	rlcf	??___ftdiv& (0+255),f,b
 17531  0024E0  E301               	bnc	u6981
 17532  0024E2  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17533  0024E4                     u6981:
 17534  0024E4  5160               	movf	??___ftdiv& (0+255),w,b
 17535  0024E6  6F67               	movwf	___ftdiv@exp& (0+255),b
 17536  0024E8  5167               	movf	___ftdiv@exp& (0+255),w,b
 17537  0024EA  A4D8               	btfss	status,2,c
 17538  0024EC  D007               	goto	l1882
 17539                           
 17540                           ; BSR set to: 0
 17541  0024EE  0E00               	movlw	0
 17542  0024F0  6E29               	movwf	?___ftdiv,c
 17543  0024F2  0E00               	movlw	0
 17544  0024F4  6E2A               	movwf	?___ftdiv+1,c
 17545  0024F6  0E00               	movlw	0
 17546  0024F8  6E2B               	movwf	?___ftdiv+2,c
 17547                           
 17548                           ; BSR set to: 0
 17549  0024FA  0012               	return	
 17550  0024FC                     l1882:
 17551                           
 17552                           ; BSR set to: 0
 17553                           
 17554                           ; BSR set to: 0
 17555  0024FC  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 17556  002500  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17557  002502  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17558  002504  342D               	rlcf	___ftdiv@f2+1,w,c
 17559  002506  3760               	rlcf	??___ftdiv& (0+255),f,b
 17560  002508  E301               	bnc	u7001
 17561  00250A  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17562  00250C                     u7001:
 17563  00250C  5160               	movf	??___ftdiv& (0+255),w,b
 17564  00250E  6F68               	movwf	___ftdiv@sign& (0+255),b
 17565  002510  5168               	movf	___ftdiv@sign& (0+255),w,b
 17566  002512  A4D8               	btfss	status,2,c
 17567  002514  D007               	goto	l1884
 17568                           
 17569                           ; BSR set to: 0
 17570  002516  0E00               	movlw	0
 17571  002518  6E29               	movwf	?___ftdiv,c
 17572  00251A  0E00               	movlw	0
 17573  00251C  6E2A               	movwf	?___ftdiv+1,c
 17574  00251E  0E00               	movlw	0
 17575  002520  6E2B               	movwf	?___ftdiv+2,c
 17576                           
 17577                           ; BSR set to: 0
 17578  002522  0012               	return	
 17579  002524                     l1884:
 17580                           
 17581                           ; BSR set to: 0
 17582                           
 17583                           ; BSR set to: 0
 17584  002524  0E00               	movlw	0
 17585  002526  6F64               	movwf	___ftdiv@f3& (0+255),b
 17586  002528  0E00               	movlw	0
 17587  00252A  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 17588  00252C  0E00               	movlw	0
 17589  00252E  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 17590                           
 17591                           ; BSR set to: 0
 17592  002530  5168               	movf	___ftdiv@sign& (0+255),w,b
 17593  002532  0F89               	addlw	137
 17594  002534  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 17595                           
 17596                           ; BSR set to: 0
 17597  002536  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 17598                           
 17599                           ; BSR set to: 0
 17600  00253A  502E               	movf	___ftdiv@f2+2,w,c
 17601  00253C  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 17602                           
 17603                           ; BSR set to: 0
 17604  00253E  0E80               	movlw	128
 17605  002540  1768               	andwf	___ftdiv@sign& (0+255),f,b
 17606                           
 17607                           ; BSR set to: 0
 17608  002542  8E2A               	bsf	___ftdiv@f1+1,7,c
 17609                           
 17610                           ; BSR set to: 0
 17611  002544  0EFF               	movlw	255
 17612  002546  1629               	andwf	___ftdiv@f1,f,c
 17613  002548  0EFF               	movlw	255
 17614  00254A  162A               	andwf	___ftdiv@f1+1,f,c
 17615  00254C  0E00               	movlw	0
 17616  00254E  162B               	andwf	___ftdiv@f1+2,f,c
 17617                           
 17618                           ; BSR set to: 0
 17619  002550  8E2D               	bsf	___ftdiv@f2+1,7,c
 17620                           
 17621                           ; BSR set to: 0
 17622  002552  0EFF               	movlw	255
 17623  002554  162C               	andwf	___ftdiv@f2,f,c
 17624  002556  0EFF               	movlw	255
 17625  002558  162D               	andwf	___ftdiv@f2+1,f,c
 17626  00255A  0E00               	movlw	0
 17627  00255C  162E               	andwf	___ftdiv@f2+2,f,c
 17628                           
 17629                           ; BSR set to: 0
 17630  00255E  0E18               	movlw	24
 17631  002560  6F63               	movwf	___ftdiv@cntr& (0+255),b
 17632  002562                     
 17633                           ; BSR set to: 0
 17634                           
 17635                           ; BSR set to: 0
 17636  002562  90D8               	bcf	status,0,c
 17637  002564  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 17638  002566  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 17639  002568  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 17640                           
 17641                           ; BSR set to: 0
 17642  00256A  502C               	movf	___ftdiv@f2,w,c
 17643  00256C  5C29               	subwf	___ftdiv@f1,w,c
 17644  00256E  502D               	movf	___ftdiv@f2+1,w,c
 17645  002570  582A               	subwfb	___ftdiv@f1+1,w,c
 17646  002572  502E               	movf	___ftdiv@f2+2,w,c
 17647  002574  582B               	subwfb	___ftdiv@f1+2,w,c
 17648  002576  A0D8               	btfss	status,0,c
 17649  002578  D007               	goto	l1886
 17650                           
 17651                           ; BSR set to: 0
 17652  00257A  502C               	movf	___ftdiv@f2,w,c
 17653  00257C  5E29               	subwf	___ftdiv@f1,f,c
 17654  00257E  502D               	movf	___ftdiv@f2+1,w,c
 17655  002580  5A2A               	subwfb	___ftdiv@f1+1,f,c
 17656  002582  502E               	movf	___ftdiv@f2+2,w,c
 17657  002584  5A2B               	subwfb	___ftdiv@f1+2,f,c
 17658                           
 17659                           ; BSR set to: 0
 17660  002586  8164               	bsf	___ftdiv@f3& (0+255),0,b
 17661  002588                     l1886:
 17662                           
 17663                           ; BSR set to: 0
 17664  002588  90D8               	bcf	status,0,c
 17665  00258A  3629               	rlcf	___ftdiv@f1,f,c
 17666  00258C  362A               	rlcf	___ftdiv@f1+1,f,c
 17667  00258E  362B               	rlcf	___ftdiv@f1+2,f,c
 17668                           
 17669                           ; BSR set to: 0
 17670  002590  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 17671  002592  D7E7               	goto	l1885
 17672                           
 17673                           ; BSR set to: 0
 17674                           
 17675                           ; BSR set to: 0
 17676  002594  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 17677  002598  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 17678  00259C  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 17679  0025A0  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 17680  0025A4  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 17681  0025A8  ECF9  F016         	call	___ftpack	;wreg free
 17682  0025AC  C018  F029         	movff	?___ftpack,?___ftdiv
 17683  0025B0  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 17684  0025B4  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 17685  0025B8  0012               	return	
 17686  0025BA                     __end_of___ftdiv:
 17687                           	opt stack 0
 17688                           tosu	equ	0xFFF
 17689                           tosh	equ	0xFFE
 17690                           tosl	equ	0xFFD
 17691                           pclath	equ	0xFFA
 17692                           tblptru	equ	0xFF8
 17693                           tblptrh	equ	0xFF7
 17694                           tblptrl	equ	0xFF6
 17695                           tablat	equ	0xFF5
 17696                           prodh	equ	0xFF4
 17697                           prodl	equ	0xFF3
 17698                           intcon	equ	0xFF2
 17699                           intcon2	equ	0xFF1
 17700                           postinc0	equ	0xFEE
 17701                           plusw0	equ	0xFEB
 17702                           wreg	equ	0xFE8
 17703                           indf1	equ	0xFE7
 17704                           postdec1	equ	0xFE5
 17705                           fsr1h	equ	0xFE2
 17706                           fsr1l	equ	0xFE1
 17707                           indf2	equ	0xFDF
 17708                           postinc2	equ	0xFDE
 17709                           postdec2	equ	0xFDD
 17710                           plusw2	equ	0xFDB
 17711                           fsr2h	equ	0xFDA
 17712                           fsr2l	equ	0xFD9
 17713                           status	equ	0xFD8
 17714                           
 17715 ;; *************** function ___awtoft *****************
 17716 ;; Defined at:
 17717 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 17718 ;; Parameters:    Size  Location     Type
 17719 ;;  c               2   31[COMRAM] int 
 17720 ;; Auto vars:     Size  Location     Type
 17721 ;;  sign            1   34[COMRAM] unsigned char 
 17722 ;; Return value:  Size  Location     Type
 17723 ;;                  3   31[COMRAM] float 
 17724 ;; Registers used:
 17725 ;;		wreg, status,2, status,0, cstack
 17726 ;; Tracked objects:
 17727 ;;		On entry : 0/0
 17728 ;;		On exit  : 0/0
 17729 ;;		Unchanged: 0/0
 17730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17731 ;;      Params:         3       0       0       0       0       0       0
 17732 ;;      Locals:         1       0       0       0       0       0       0
 17733 ;;      Temps:          0       0       0       0       0       0       0
 17734 ;;      Totals:         4       0       0       0       0       0       0
 17735 ;;Total ram usage:        4 bytes
 17736 ;; Hardware stack levels used:    1
 17737 ;; Hardware stack levels required when called:    5
 17738 ;; This function calls:
 17739 ;;		___ftpack
 17740 ;; This function is called by:
 17741 ;;		_ReadIntFromEeprom
 17742 ;;		_exp
 17743 ;;		_log
 17744 ;; This function uses a non-reentrant model
 17745 ;;
 17746                           
 17747                           	psect	text101
 17748  003D74                     __ptext101:
 17749                           	opt stack 0
 17750  003D74                     ___awtoft:
 17751                           	opt stack 19
 17752                           
 17753                           ;incstack = 0
 17754  003D74  0E00               	movlw	0
 17755  003D76  6E23               	movwf	___awtoft@sign,c
 17756  003D78  AE21               	btfss	___awtoft@c+1,7,c
 17757  003D7A  D006               	goto	l1799
 17758  003D7C  6C20               	negf	___awtoft@c,c
 17759  003D7E  1E21               	comf	___awtoft@c+1,f,c
 17760  003D80  B0D8               	btfsc	status,0,c
 17761  003D82  2A21               	incf	___awtoft@c+1,f,c
 17762  003D84  0E01               	movlw	1
 17763  003D86  6E23               	movwf	___awtoft@sign,c
 17764  003D88                     l1799:
 17765  003D88  C020  F018         	movff	___awtoft@c,___ftpack@arg
 17766  003D8C  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 17767  003D90  6A1A               	clrf	___ftpack@arg+2,c
 17768  003D92  0E8E               	movlw	142
 17769  003D94  6E1B               	movwf	___ftpack@exp,c
 17770  003D96  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 17771  003D9A  ECF9  F016         	call	___ftpack	;wreg free
 17772  003D9E  C018  F020         	movff	?___ftpack,?___awtoft
 17773  003DA2  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 17774  003DA6  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 17775  003DAA  0012               	return	
 17776  003DAC                     __end_of___awtoft:
 17777                           	opt stack 0
 17778                           tosu	equ	0xFFF
 17779                           tosh	equ	0xFFE
 17780                           tosl	equ	0xFFD
 17781                           pclath	equ	0xFFA
 17782                           tblptru	equ	0xFF8
 17783                           tblptrh	equ	0xFF7
 17784                           tblptrl	equ	0xFF6
 17785                           tablat	equ	0xFF5
 17786                           prodh	equ	0xFF4
 17787                           prodl	equ	0xFF3
 17788                           intcon	equ	0xFF2
 17789                           intcon2	equ	0xFF1
 17790                           postinc0	equ	0xFEE
 17791                           plusw0	equ	0xFEB
 17792                           wreg	equ	0xFE8
 17793                           indf1	equ	0xFE7
 17794                           postdec1	equ	0xFE5
 17795                           fsr1h	equ	0xFE2
 17796                           fsr1l	equ	0xFE1
 17797                           indf2	equ	0xFDF
 17798                           postinc2	equ	0xFDE
 17799                           postdec2	equ	0xFDD
 17800                           plusw2	equ	0xFDB
 17801                           fsr2h	equ	0xFDA
 17802                           fsr2l	equ	0xFD9
 17803                           status	equ	0xFD8
 17804                           
 17805 ;; *************** function ___lltoft *****************
 17806 ;; Defined at:
 17807 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 17808 ;; Parameters:    Size  Location     Type
 17809 ;;  c               4   31[COMRAM] unsigned long 
 17810 ;; Auto vars:     Size  Location     Type
 17811 ;;  exp             1   39[COMRAM] unsigned char 
 17812 ;; Return value:  Size  Location     Type
 17813 ;;                  3   31[COMRAM] float 
 17814 ;; Registers used:
 17815 ;;		wreg, status,2, status,0, cstack
 17816 ;; Tracked objects:
 17817 ;;		On entry : 0/0
 17818 ;;		On exit  : 0/0
 17819 ;;		Unchanged: 0/0
 17820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17821 ;;      Params:         4       0       0       0       0       0       0
 17822 ;;      Locals:         1       0       0       0       0       0       0
 17823 ;;      Temps:          4       0       0       0       0       0       0
 17824 ;;      Totals:         9       0       0       0       0       0       0
 17825 ;;Total ram usage:        9 bytes
 17826 ;; Hardware stack levels used:    1
 17827 ;; Hardware stack levels required when called:    5
 17828 ;; This function calls:
 17829 ;;		___ftpack
 17830 ;; This function is called by:
 17831 ;;		_CheckFlashPrecentage
 17832 ;;		_pow
 17833 ;; This function uses a non-reentrant model
 17834 ;;
 17835                           
 17836                           	psect	text102
 17837  0037CE                     __ptext102:
 17838                           	opt stack 0
 17839  0037CE                     ___lltoft:
 17840                           	opt stack 20
 17841                           
 17842                           ;incstack = 0
 17843  0037CE  0E8E               	movlw	142
 17844  0037D0  6E28               	movwf	___lltoft@exp,c
 17845  0037D2  D006               	goto	l1975
 17846  0037D4  90D8               	bcf	status,0,c
 17847  0037D6  3223               	rrcf	___lltoft@c+3,f,c
 17848  0037D8  3222               	rrcf	___lltoft@c+2,f,c
 17849  0037DA  3221               	rrcf	___lltoft@c+1,f,c
 17850  0037DC  3220               	rrcf	___lltoft@c,f,c
 17851  0037DE  2A28               	incf	___lltoft@exp,f,c
 17852  0037E0                     l1975:
 17853  0037E0  0E00               	movlw	0
 17854  0037E2  1420               	andwf	___lltoft@c,w,c
 17855  0037E4  6E24               	movwf	??___lltoft& (0+255),c
 17856  0037E6  0E00               	movlw	0
 17857  0037E8  1421               	andwf	___lltoft@c+1,w,c
 17858  0037EA  6E25               	movwf	(??___lltoft+1)& (0+255),c
 17859  0037EC  0E00               	movlw	0
 17860  0037EE  1422               	andwf	___lltoft@c+2,w,c
 17861  0037F0  6E26               	movwf	(??___lltoft+2)& (0+255),c
 17862  0037F2  0EFF               	movlw	255
 17863  0037F4  1423               	andwf	___lltoft@c+3,w,c
 17864  0037F6  6E27               	movwf	(??___lltoft+3)& (0+255),c
 17865  0037F8  5024               	movf	??___lltoft,w,c
 17866  0037FA  1025               	iorwf	??___lltoft+1,w,c
 17867  0037FC  1026               	iorwf	??___lltoft+2,w,c
 17868  0037FE  1027               	iorwf	??___lltoft+3,w,c
 17869  003800  A4D8               	btfss	status,2,c
 17870  003802  D7E8               	goto	l1976
 17871  003804  C020  F018         	movff	___lltoft@c,___ftpack@arg
 17872  003808  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 17873  00380C  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 17874  003810  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 17875  003814  0E00               	movlw	0
 17876  003816  6E1C               	movwf	___ftpack@sign,c
 17877  003818  ECF9  F016         	call	___ftpack	;wreg free
 17878  00381C  C018  F020         	movff	?___ftpack,?___lltoft
 17879  003820  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 17880  003824  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 17881  003828  0012               	return	
 17882  00382A                     __end_of___lltoft:
 17883                           	opt stack 0
 17884                           tosu	equ	0xFFF
 17885                           tosh	equ	0xFFE
 17886                           tosl	equ	0xFFD
 17887                           pclath	equ	0xFFA
 17888                           tblptru	equ	0xFF8
 17889                           tblptrh	equ	0xFF7
 17890                           tblptrl	equ	0xFF6
 17891                           tablat	equ	0xFF5
 17892                           prodh	equ	0xFF4
 17893                           prodl	equ	0xFF3
 17894                           intcon	equ	0xFF2
 17895                           intcon2	equ	0xFF1
 17896                           postinc0	equ	0xFEE
 17897                           plusw0	equ	0xFEB
 17898                           wreg	equ	0xFE8
 17899                           indf1	equ	0xFE7
 17900                           postdec1	equ	0xFE5
 17901                           fsr1h	equ	0xFE2
 17902                           fsr1l	equ	0xFE1
 17903                           indf2	equ	0xFDF
 17904                           postinc2	equ	0xFDE
 17905                           postdec2	equ	0xFDD
 17906                           plusw2	equ	0xFDB
 17907                           fsr2h	equ	0xFDA
 17908                           fsr2l	equ	0xFD9
 17909                           status	equ	0xFD8
 17910                           
 17911 ;; *************** function ___lwtoft *****************
 17912 ;; Defined at:
 17913 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 17914 ;; Parameters:    Size  Location     Type
 17915 ;;  c               2   31[COMRAM] unsigned int 
 17916 ;; Auto vars:     Size  Location     Type
 17917 ;;		None
 17918 ;; Return value:  Size  Location     Type
 17919 ;;                  3   31[COMRAM] float 
 17920 ;; Registers used:
 17921 ;;		wreg, status,2, status,0, cstack
 17922 ;; Tracked objects:
 17923 ;;		On entry : 0/0
 17924 ;;		On exit  : 0/0
 17925 ;;		Unchanged: 0/0
 17926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17927 ;;      Params:         3       0       0       0       0       0       0
 17928 ;;      Locals:         0       0       0       0       0       0       0
 17929 ;;      Temps:          0       0       0       0       0       0       0
 17930 ;;      Totals:         3       0       0       0       0       0       0
 17931 ;;Total ram usage:        3 bytes
 17932 ;; Hardware stack levels used:    1
 17933 ;; Hardware stack levels required when called:    5
 17934 ;; This function calls:
 17935 ;;		___ftpack
 17936 ;; This function is called by:
 17937 ;;		_AdcConvert
 17938 ;; This function uses a non-reentrant model
 17939 ;;
 17940                           
 17941                           	psect	text103
 17942  0040BA                     __ptext103:
 17943                           	opt stack 0
 17944  0040BA                     ___lwtoft:
 17945                           	opt stack 24
 17946                           
 17947                           ;incstack = 0
 17948  0040BA  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 17949  0040BE  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 17950  0040C2  6A1A               	clrf	___ftpack@arg+2,c
 17951  0040C4  0E8E               	movlw	142
 17952  0040C6  6E1B               	movwf	___ftpack@exp,c
 17953  0040C8  0E00               	movlw	0
 17954  0040CA  6E1C               	movwf	___ftpack@sign,c
 17955  0040CC  ECF9  F016         	call	___ftpack	;wreg free
 17956  0040D0  C018  F020         	movff	?___ftpack,?___lwtoft
 17957  0040D4  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 17958  0040D8  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 17959  0040DC  0012               	return	
 17960  0040DE                     __end_of___lwtoft:
 17961                           	opt stack 0
 17962                           tosu	equ	0xFFF
 17963                           tosh	equ	0xFFE
 17964                           tosl	equ	0xFFD
 17965                           pclath	equ	0xFFA
 17966                           tblptru	equ	0xFF8
 17967                           tblptrh	equ	0xFF7
 17968                           tblptrl	equ	0xFF6
 17969                           tablat	equ	0xFF5
 17970                           prodh	equ	0xFF4
 17971                           prodl	equ	0xFF3
 17972                           intcon	equ	0xFF2
 17973                           intcon2	equ	0xFF1
 17974                           postinc0	equ	0xFEE
 17975                           plusw0	equ	0xFEB
 17976                           wreg	equ	0xFE8
 17977                           indf1	equ	0xFE7
 17978                           postdec1	equ	0xFE5
 17979                           fsr1h	equ	0xFE2
 17980                           fsr1l	equ	0xFE1
 17981                           indf2	equ	0xFDF
 17982                           postinc2	equ	0xFDE
 17983                           postdec2	equ	0xFDD
 17984                           plusw2	equ	0xFDB
 17985                           fsr2h	equ	0xFDA
 17986                           fsr2l	equ	0xFD9
 17987                           status	equ	0xFD8
 17988                           
 17989 ;; *************** function ___ftpack *****************
 17990 ;; Defined at:
 17991 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 17992 ;; Parameters:    Size  Location     Type
 17993 ;;  arg             3   23[COMRAM] unsigned um
 17994 ;;  exp             1   26[COMRAM] unsigned char 
 17995 ;;  sign            1   27[COMRAM] unsigned char 
 17996 ;; Auto vars:     Size  Location     Type
 17997 ;;		None
 17998 ;; Return value:  Size  Location     Type
 17999 ;;                  3   23[COMRAM] float 
 18000 ;; Registers used:
 18001 ;;		wreg, status,2, status,0
 18002 ;; Tracked objects:
 18003 ;;		On entry : 0/0
 18004 ;;		On exit  : 0/0
 18005 ;;		Unchanged: 0/0
 18006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18007 ;;      Params:         5       0       0       0       0       0       0
 18008 ;;      Locals:         0       0       0       0       0       0       0
 18009 ;;      Temps:          3       0       0       0       0       0       0
 18010 ;;      Totals:         8       0       0       0       0       0       0
 18011 ;;Total ram usage:        8 bytes
 18012 ;; Hardware stack levels used:    1
 18013 ;; Hardware stack levels required when called:    4
 18014 ;; This function calls:
 18015 ;;		Nothing
 18016 ;; This function is called by:
 18017 ;;		___altoft
 18018 ;;		___awtoft
 18019 ;;		___ftadd
 18020 ;;		___ftdiv
 18021 ;;		___ftmul
 18022 ;;		___lltoft
 18023 ;;		___lwtoft
 18024 ;; This function uses a non-reentrant model
 18025 ;;
 18026                           
 18027                           	psect	text104
 18028  002DF2                     __ptext104:
 18029                           	opt stack 0
 18030  002DF2                     ___ftpack:
 18031                           	opt stack 18
 18032                           
 18033                           ;incstack = 0
 18034  002DF2  501B               	movf	___ftpack@exp,w,c
 18035  002DF4  B4D8               	btfsc	status,2,c
 18036  002DF6  D005               	goto	u6480
 18037  002DF8  5018               	movf	___ftpack@arg,w,c
 18038  002DFA  1019               	iorwf	___ftpack@arg+1,w,c
 18039  002DFC  101A               	iorwf	___ftpack@arg+2,w,c
 18040  002DFE  A4D8               	btfss	status,2,c
 18041  002E00  D00C               	goto	l1818
 18042  002E02                     u6480:
 18043  002E02  0E00               	movlw	0
 18044  002E04  6E18               	movwf	?___ftpack,c
 18045  002E06  0E00               	movlw	0
 18046  002E08  6E19               	movwf	?___ftpack+1,c
 18047  002E0A  0E00               	movlw	0
 18048  002E0C  6E1A               	movwf	?___ftpack+2,c
 18049  002E0E  0012               	return	
 18050  002E10  2A1B               	incf	___ftpack@exp,f,c
 18051  002E12  90D8               	bcf	status,0,c
 18052  002E14  321A               	rrcf	___ftpack@arg+2,f,c
 18053  002E16  3219               	rrcf	___ftpack@arg+1,f,c
 18054  002E18  3218               	rrcf	___ftpack@arg,f,c
 18055  002E1A                     l1818:
 18056  002E1A  0E00               	movlw	0
 18057  002E1C  1418               	andwf	___ftpack@arg,w,c
 18058  002E1E  6E1D               	movwf	??___ftpack& (0+255),c
 18059  002E20  0E00               	movlw	0
 18060  002E22  1419               	andwf	___ftpack@arg+1,w,c
 18061  002E24  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18062  002E26  0EFE               	movlw	254
 18063  002E28  141A               	andwf	___ftpack@arg+2,w,c
 18064  002E2A  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18065  002E2C  501D               	movf	??___ftpack,w,c
 18066  002E2E  101E               	iorwf	??___ftpack+1,w,c
 18067  002E30  101F               	iorwf	??___ftpack+2,w,c
 18068  002E32  B4D8               	btfsc	status,2,c
 18069  002E34  D00C               	goto	l1821
 18070  002E36  D7EC               	goto	l1819
 18071  002E38  2A1B               	incf	___ftpack@exp,f,c
 18072  002E3A  0E01               	movlw	1
 18073  002E3C  2618               	addwf	___ftpack@arg,f,c
 18074  002E3E  0E00               	movlw	0
 18075  002E40  2219               	addwfc	___ftpack@arg+1,f,c
 18076  002E42  0E00               	movlw	0
 18077  002E44  221A               	addwfc	___ftpack@arg+2,f,c
 18078  002E46  90D8               	bcf	status,0,c
 18079  002E48  321A               	rrcf	___ftpack@arg+2,f,c
 18080  002E4A  3219               	rrcf	___ftpack@arg+1,f,c
 18081  002E4C  3218               	rrcf	___ftpack@arg,f,c
 18082  002E4E                     l1821:
 18083  002E4E  0E00               	movlw	0
 18084  002E50  1418               	andwf	___ftpack@arg,w,c
 18085  002E52  6E1D               	movwf	??___ftpack& (0+255),c
 18086  002E54  0E00               	movlw	0
 18087  002E56  1419               	andwf	___ftpack@arg+1,w,c
 18088  002E58  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18089  002E5A  0EFF               	movlw	255
 18090  002E5C  141A               	andwf	___ftpack@arg+2,w,c
 18091  002E5E  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18092  002E60  501D               	movf	??___ftpack,w,c
 18093  002E62  101E               	iorwf	??___ftpack+1,w,c
 18094  002E64  101F               	iorwf	??___ftpack+2,w,c
 18095  002E66  B4D8               	btfsc	status,2,c
 18096  002E68  D006               	goto	l1824
 18097  002E6A  D7E6               	goto	l1822
 18098  002E6C  061B               	decf	___ftpack@exp,f,c
 18099  002E6E  90D8               	bcf	status,0,c
 18100  002E70  3618               	rlcf	___ftpack@arg,f,c
 18101  002E72  3619               	rlcf	___ftpack@arg+1,f,c
 18102  002E74  361A               	rlcf	___ftpack@arg+2,f,c
 18103  002E76                     l1824:
 18104  002E76  BE19               	btfsc	___ftpack@arg+1,7,c
 18105  002E78  D003               	goto	u6520
 18106  002E7A  0E02               	movlw	2
 18107  002E7C  601B               	cpfslt	___ftpack@exp,c
 18108  002E7E  D7F6               	goto	l1825
 18109  002E80                     u6520:
 18110  002E80  A01B               	btfss	___ftpack@exp,0,c
 18111  002E82  9E19               	bcf	___ftpack@arg+1,7,c
 18112  002E84  90D8               	bcf	status,0,c
 18113  002E86  321B               	rrcf	___ftpack@exp,f,c
 18114  002E88  501B               	movf	___ftpack@exp,w,c
 18115  002E8A  121A               	iorwf	___ftpack@arg+2,f,c
 18116  002E8C  501C               	movf	___ftpack@sign,w,c
 18117  002E8E  A4D8               	btfss	status,2,c
 18118  002E90  8E1A               	bsf	___ftpack@arg+2,7,c
 18119  002E92  C018  F018         	movff	___ftpack@arg,?___ftpack
 18120  002E96  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 18121  002E9A  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 18122  002E9E  0012               	return	
 18123  002EA0                     __end_of___ftpack:
 18124                           	opt stack 0
 18125                           tosu	equ	0xFFF
 18126                           tosh	equ	0xFFE
 18127                           tosl	equ	0xFFD
 18128                           pclath	equ	0xFFA
 18129                           tblptru	equ	0xFF8
 18130                           tblptrh	equ	0xFF7
 18131                           tblptrl	equ	0xFF6
 18132                           tablat	equ	0xFF5
 18133                           prodh	equ	0xFF4
 18134                           prodl	equ	0xFF3
 18135                           intcon	equ	0xFF2
 18136                           intcon2	equ	0xFF1
 18137                           postinc0	equ	0xFEE
 18138                           plusw0	equ	0xFEB
 18139                           wreg	equ	0xFE8
 18140                           indf1	equ	0xFE7
 18141                           postdec1	equ	0xFE5
 18142                           fsr1h	equ	0xFE2
 18143                           fsr1l	equ	0xFE1
 18144                           indf2	equ	0xFDF
 18145                           postinc2	equ	0xFDE
 18146                           postdec2	equ	0xFDD
 18147                           plusw2	equ	0xFDB
 18148                           fsr2h	equ	0xFDA
 18149                           fsr2l	equ	0xFD9
 18150                           status	equ	0xFD8
 18151                           
 18152 ;; *************** function _GetUint16FromBitArray *****************
 18153 ;; Defined at:
 18154 ;;		line 34 in file "SystemCommon.c"
 18155 ;; Parameters:    Size  Location     Type
 18156 ;;  bitarray        2   23[COMRAM] PTR unsigned char 
 18157 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 18158 ;;  numOfBits       2   25[COMRAM] int 
 18159 ;; Auto vars:     Size  Location     Type
 18160 ;;  i               2   32[COMRAM] int 
 18161 ;;  res             2   30[COMRAM] unsigned int 
 18162 ;; Return value:  Size  Location     Type
 18163 ;;                  2   23[COMRAM] unsigned int 
 18164 ;; Registers used:
 18165 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18166 ;; Tracked objects:
 18167 ;;		On entry : 0/0
 18168 ;;		On exit  : 0/0
 18169 ;;		Unchanged: 0/0
 18170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18171 ;;      Params:         4       0       0       0       0       0       0
 18172 ;;      Locals:         4       0       0       0       0       0       0
 18173 ;;      Temps:          3       0       0       0       0       0       0
 18174 ;;      Totals:        11       0       0       0       0       0       0
 18175 ;;Total ram usage:       11 bytes
 18176 ;; Hardware stack levels used:    1
 18177 ;; Hardware stack levels required when called:    4
 18178 ;; This function calls:
 18179 ;;		Nothing
 18180 ;; This function is called by:
 18181 ;;		_AdcConvert
 18182 ;; This function uses a non-reentrant model
 18183 ;;
 18184                           
 18185                           	psect	text105
 18186  003584                     __ptext105:
 18187                           	opt stack 0
 18188  003584                     _GetUint16FromBitArray:
 18189                           	opt stack 25
 18190                           
 18191                           ;SystemCommon.c: 36: uint16_t res = 0;
 18192                           
 18193                           ;incstack = 0
 18194  003584  0E00               	movlw	0
 18195  003586  6E20               	movwf	GetUint16FromBitArray@res+1,c
 18196  003588  0E00               	movlw	0
 18197  00358A  6E1F               	movwf	GetUint16FromBitArray@res,c
 18198                           
 18199                           ;SystemCommon.c: 37: for (int i = 0 ; i < numOfBits ; i++)
 18200  00358C  0E00               	movlw	0
 18201  00358E  6E22               	movwf	GetUint16FromBitArray@i+1,c
 18202  003590  0E00               	movlw	0
 18203  003592  6E21               	movwf	GetUint16FromBitArray@i,c
 18204  003594  D01C               	goto	l1408
 18205  003596                     
 18206                           ;SystemCommon.c: 38: {
 18207                           ;SystemCommon.c: 39: if (bitarray[i])
 18208  003596  5021               	movf	GetUint16FromBitArray@i,w,c
 18209  003598  2418               	addwf	GetUint16FromBitArray@bitarray,w,c
 18210  00359A  6ED9               	movwf	fsr2l,c
 18211  00359C  5022               	movf	GetUint16FromBitArray@i+1,w,c
 18212  00359E  2019               	addwfc	GetUint16FromBitArray@bitarray+1,w,c
 18213  0035A0  6EDA               	movwf	fsr2h,c
 18214  0035A2  50DF               	movf	indf2,w,c
 18215  0035A4  B4D8               	btfsc	status,2,c
 18216  0035A6  D011               	goto	l1410
 18217                           
 18218                           ;SystemCommon.c: 40: {
 18219                           ;SystemCommon.c: 41: res |= (uint16_t)(1 << i);
 18220  0035A8  C021  F01C         	movff	GetUint16FromBitArray@i,??_GetUint16FromBitArray
 18221  0035AC  0E01               	movlw	1
 18222  0035AE  6E1D               	movwf	(??_GetUint16FromBitArray+1)& (0+255),c
 18223  0035B0  0E00               	movlw	0
 18224  0035B2  6E1E               	movwf	(??_GetUint16FromBitArray+2)& (0+255),c
 18225  0035B4  2A1C               	incf	??_GetUint16FromBitArray,f,c
 18226  0035B6  D003               	goto	u5684
 18227  0035B8                     u5685:
 18228  0035B8  90D8               	bcf	status,0,c
 18229  0035BA  361D               	rlcf	??_GetUint16FromBitArray+1,f,c
 18230  0035BC  361E               	rlcf	??_GetUint16FromBitArray+2,f,c
 18231  0035BE                     u5684:
 18232  0035BE  2E1C               	decfsz	??_GetUint16FromBitArray,f,c
 18233  0035C0  D7FB               	goto	u5685
 18234  0035C2  501D               	movf	??_GetUint16FromBitArray+1,w,c
 18235  0035C4  121F               	iorwf	GetUint16FromBitArray@res,f,c
 18236  0035C6  501E               	movf	??_GetUint16FromBitArray+2,w,c
 18237  0035C8  1220               	iorwf	GetUint16FromBitArray@res+1,f,c
 18238  0035CA                     l1410:
 18239  0035CA  4A21               	infsnz	GetUint16FromBitArray@i,f,c
 18240  0035CC  2A22               	incf	GetUint16FromBitArray@i+1,f,c
 18241  0035CE                     l1408:
 18242  0035CE  501A               	movf	GetUint16FromBitArray@numOfBits,w,c
 18243  0035D0  5C21               	subwf	GetUint16FromBitArray@i,w,c
 18244  0035D2  5022               	movf	GetUint16FromBitArray@i+1,w,c
 18245  0035D4  0A80               	xorlw	128
 18246  0035D6  6E1C               	movwf	??_GetUint16FromBitArray& (0+255),c
 18247  0035D8  501B               	movf	GetUint16FromBitArray@numOfBits+1,w,c
 18248  0035DA  0A80               	xorlw	128
 18249  0035DC  581C               	subwfb	??_GetUint16FromBitArray& (0+255),w,c
 18250  0035DE  A0D8               	btfss	status,0,c
 18251  0035E0  D7DA               	goto	l1409
 18252                           
 18253                           ;SystemCommon.c: 42: }
 18254                           ;SystemCommon.c: 43: }
 18255                           ;SystemCommon.c: 44: return res;
 18256  0035E2  C01F  F018         	movff	GetUint16FromBitArray@res,?_GetUint16FromBitArray
 18257  0035E6  C020  F019         	movff	GetUint16FromBitArray@res+1,?_GetUint16FromBitArray+1
 18258  0035EA  0012               	return		;funcret
 18259  0035EC                     __end_of_GetUint16FromBitArray:
 18260                           	opt stack 0
 18261                           tosu	equ	0xFFF
 18262                           tosh	equ	0xFFE
 18263                           tosl	equ	0xFFD
 18264                           pclath	equ	0xFFA
 18265                           tblptru	equ	0xFF8
 18266                           tblptrh	equ	0xFF7
 18267                           tblptrl	equ	0xFF6
 18268                           tablat	equ	0xFF5
 18269                           prodh	equ	0xFF4
 18270                           prodl	equ	0xFF3
 18271                           intcon	equ	0xFF2
 18272                           intcon2	equ	0xFF1
 18273                           postinc0	equ	0xFEE
 18274                           plusw0	equ	0xFEB
 18275                           wreg	equ	0xFE8
 18276                           indf1	equ	0xFE7
 18277                           postdec1	equ	0xFE5
 18278                           fsr1h	equ	0xFE2
 18279                           fsr1l	equ	0xFE1
 18280                           indf2	equ	0xFDF
 18281                           postinc2	equ	0xFDE
 18282                           postdec2	equ	0xFDD
 18283                           plusw2	equ	0xFDB
 18284                           fsr2h	equ	0xFDA
 18285                           fsr2l	equ	0xFD9
 18286                           status	equ	0xFD8
 18287                           
 18288 ;; *************** function _FlashSampleWrite *****************
 18289 ;; Defined at:
 18290 ;;		line 29 in file "FlashApp.c"
 18291 ;; Parameters:    Size  Location     Type
 18292 ;;  sampleData      2   44[COMRAM] unsigned int 
 18293 ;;  channelNum      1   46[COMRAM] unsigned char 
 18294 ;; Auto vars:     Size  Location     Type
 18295 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 18296 ;; Return value:  Size  Location     Type
 18297 ;;                  1    wreg      void 
 18298 ;; Registers used:
 18299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18300 ;; Tracked objects:
 18301 ;;		On entry : 0/0
 18302 ;;		On exit  : 0/0
 18303 ;;		Unchanged: 0/0
 18304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18305 ;;      Params:         3       0       0       0       0       0       0
 18306 ;;      Locals:         0       2       0       0       0       0       0
 18307 ;;      Temps:          0       2       0       0       0       0       0
 18308 ;;      Totals:         3       4       0       0       0       0       0
 18309 ;;Total ram usage:        7 bytes
 18310 ;; Hardware stack levels used:    1
 18311 ;; Hardware stack levels required when called:    6
 18312 ;; This function calls:
 18313 ;;		_FLASH_IsWriteDone
 18314 ;;		_FLASH_WriteBlock
 18315 ;; This function is called by:
 18316 ;;		_AdcConvert
 18317 ;; This function uses a non-reentrant model
 18318 ;;
 18319                           
 18320                           	psect	text106
 18321  0021E0                     __ptext106:
 18322                           	opt stack 0
 18323  0021E0                     _FlashSampleWrite:
 18324                           	opt stack 23
 18325                           
 18326                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 18327                           
 18328                           ;incstack = 0
 18329  0021E0  502F               	movf	FlashSampleWrite@channelNum,w,c
 18330  0021E2  0100               	movlb	0	; () banked
 18331  0021E4  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 18332  0021E6  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 18333  0021E8  0E0C               	movlw	12
 18334  0021EA                     u8815:
 18335  0021EA  90D8               	bcf	status,0,c
 18336  0021EC  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18337  0021EE  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18338  0021F0  2EE8               	decfsz	wreg,f,c
 18339  0021F2  D7FB               	goto	u8815
 18340  0021F4  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 18341  0021F8  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 18342                           
 18343                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 18344  0021FC  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 18345  0021FE  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 18346  002200  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 18347  002202  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 18348                           
 18349                           ; BSR set to: 0
 18350                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 18351  002204  90D8               	bcf	status,0,c
 18352  002206  0101               	movlb	1	; () banked
 18353  002208  3536               	rlcf	_sampleCount& (0+255),w,b
 18354  00220A  6ED9               	movwf	fsr2l,c
 18355  00220C  3537               	rlcf	(_sampleCount+1)& (0+255),w,b
 18356  00220E  6EDA               	movwf	fsr2h,c
 18357  002210  0E3C               	movlw	low _sampleArray
 18358  002212  26D9               	addwf	fsr2l,f,c
 18359  002214  0E01               	movlw	high _sampleArray
 18360  002216  22DA               	addwfc	fsr2h,f,c
 18361  002218  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 18362  00221C  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 18363                           
 18364                           ; BSR set to: 1
 18365                           ;FlashApp.c: 35: sampleCount ++;
 18366  002220  4B36               	infsnz	_sampleCount& (0+255),f,b
 18367  002222  2B37               	incf	(_sampleCount+1)& (0+255),f,b
 18368                           
 18369                           ; BSR set to: 1
 18370                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 18371  002224  C136  F060         	movff	_sampleCount,??_FlashSampleWrite
 18372  002228  C137  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 18373  00222C  90D8               	bcf	status,0,c
 18374  00222E  0100               	movlb	0	; () banked
 18375  002230  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18376  002232  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18377  002234  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 18378  002236  E104               	bnz	u8820
 18379  002238  0E40               	movlw	64
 18380  00223A  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 18381  00223C  A0D8               	btfss	status,0,c
 18382  00223E  0012               	return	
 18383  002240                     u8820:
 18384                           
 18385                           ; BSR set to: 0
 18386  002240  EC65  F021         	call	_FLASH_IsWriteDone	;wreg free
 18387  002244  0900               	iorlw	0
 18388  002246  B4D8               	btfsc	status,2,c
 18389  002248  0012               	return	
 18390                           
 18391                           ;FlashApp.c: 38: {
 18392                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 18393  00224A  C03E  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 18394  00224E  C03F  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 18395  002252  C040  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 18396  002256  C041  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 18397  00225A  0E3C               	movlw	low _sampleArray
 18398  00225C  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 18399  00225E  0E01               	movlw	high _sampleArray
 18400  002260  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 18401  002262  EC44  F016         	call	_FLASH_WriteBlock	;wreg free
 18402                           
 18403                           ;FlashApp.c: 40: writeAddress += (64);
 18404  002266  0E40               	movlw	64
 18405  002268  263E               	addwf	_writeAddress,f,c
 18406  00226A  0E00               	movlw	0
 18407  00226C  223F               	addwfc	_writeAddress+1,f,c
 18408  00226E  2240               	addwfc	_writeAddress+2,f,c
 18409  002270  2241               	addwfc	_writeAddress+3,f,c
 18410                           
 18411                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 18412  002272  5041               	movf	_writeAddress+3,w,c
 18413  002274  1040               	iorwf	_writeAddress+2,w,c
 18414  002276  E106               	bnz	u8840
 18415  002278  0EF0               	movlw	240
 18416  00227A  5C3E               	subwf	_writeAddress,w,c
 18417  00227C  0E7F               	movlw	127
 18418  00227E  583F               	subwfb	_writeAddress+1,w,c
 18419  002280  A0D8               	btfss	status,0,c
 18420  002282  D01A               	goto	l319
 18421  002284                     u8840:
 18422                           
 18423                           ;FlashApp.c: 42: {
 18424                           ;FlashApp.c: 43: writeAddress = 0x4580;
 18425  002284  0E80               	movlw	128
 18426  002286  6E3E               	movwf	_writeAddress,c
 18427  002288  0E45               	movlw	69
 18428  00228A  6E3F               	movwf	_writeAddress+1,c
 18429  00228C  0E00               	movlw	0
 18430  00228E  6E40               	movwf	_writeAddress+2,c
 18431  002290  0E00               	movlw	0
 18432  002292  6E41               	movwf	_writeAddress+3,c
 18433                           
 18434                           ;FlashApp.c: 44: isReWriteDone = 1;
 18435  002294  0E01               	movlw	1
 18436  002296  0101               	movlb	1	; () banked
 18437  002298  6F3A               	movwf	_isReWriteDone& (0+255),b
 18438                           
 18439                           ; BSR set to: 1
 18440                           ;FlashApp.c: 45: if (readAddress == 0x4580)
 18441  00229A  0E80               	movlw	128
 18442  00229C  19C8               	xorwf	_readAddress& (0+255),w,b
 18443  00229E  E10C               	bnz	l318
 18444  0022A0  0E45               	movlw	69
 18445  0022A2  19C9               	xorwf	(_readAddress+1)& (0+255),w,b
 18446  0022A4  11CA               	iorwf	(_readAddress+2)& (0+255),w,b
 18447  0022A6  11CB               	iorwf	(_readAddress+3)& (0+255),w,b
 18448  0022A8  A4D8               	btfss	status,2,c
 18449  0022AA  D006               	goto	l319
 18450                           
 18451                           ; BSR set to: 1
 18452                           ;FlashApp.c: 46: {
 18453                           ;FlashApp.c: 47: readAddress += (64);
 18454  0022AC  0E40               	movlw	64
 18455  0022AE  27C8               	addwf	_readAddress& (0+255),f,b
 18456  0022B0  0E00               	movlw	0
 18457  0022B2  23C9               	addwfc	(_readAddress+1)& (0+255),f,b
 18458  0022B4  23CA               	addwfc	(_readAddress+2)& (0+255),f,b
 18459  0022B6  23CB               	addwfc	(_readAddress+3)& (0+255),f,b
 18460  0022B8                     l319:
 18461  0022B8                     l318:
 18462                           
 18463                           ;FlashApp.c: 48: }
 18464                           ;FlashApp.c: 49: }
 18465                           ;FlashApp.c: 52: if (numOfValidateSamples < ((0x4580-0x7FF0)/(64)))
 18466  0022B8  0E17               	movlw	23
 18467  0022BA  0101               	movlb	1	; () banked
 18468  0022BC  5D30               	subwf	_numOfValidateSamples& (0+255),w,b
 18469  0022BE  0EFF               	movlw	255
 18470  0022C0  5931               	subwfb	(_numOfValidateSamples+1)& (0+255),w,b
 18471  0022C2  0EFF               	movlw	255
 18472  0022C4  5932               	subwfb	(_numOfValidateSamples+2)& (0+255),w,b
 18473  0022C6  0EFF               	movlw	255
 18474  0022C8  5933               	subwfb	(_numOfValidateSamples+3)& (0+255),w,b
 18475  0022CA  B0D8               	btfsc	status,0,c
 18476  0022CC  D006               	goto	l320
 18477                           
 18478                           ; BSR set to: 1
 18479                           ;FlashApp.c: 53: {
 18480                           ;FlashApp.c: 54: numOfValidateSamples++;
 18481  0022CE  0E01               	movlw	1
 18482  0022D0  2730               	addwf	_numOfValidateSamples& (0+255),f,b
 18483  0022D2  0E00               	movlw	0
 18484  0022D4  2331               	addwfc	(_numOfValidateSamples+1)& (0+255),f,b
 18485  0022D6  2332               	addwfc	(_numOfValidateSamples+2)& (0+255),f,b
 18486  0022D8  2333               	addwfc	(_numOfValidateSamples+3)& (0+255),f,b
 18487  0022DA                     l320:
 18488                           
 18489                           ; BSR set to: 1
 18490                           ;FlashApp.c: 55: }
 18491                           ;FlashApp.c: 56: sampleCount = 0;
 18492                           
 18493                           ; BSR set to: 1
 18494  0022DA  0E00               	movlw	0
 18495  0022DC  6F37               	movwf	(_sampleCount+1)& (0+255),b
 18496  0022DE  0E00               	movlw	0
 18497  0022E0  6F36               	movwf	_sampleCount& (0+255),b
 18498  0022E2  0012               	return	
 18499  0022E4                     __end_of_FlashSampleWrite:
 18500                           	opt stack 0
 18501                           tosu	equ	0xFFF
 18502                           tosh	equ	0xFFE
 18503                           tosl	equ	0xFFD
 18504                           pclath	equ	0xFFA
 18505                           tblptru	equ	0xFF8
 18506                           tblptrh	equ	0xFF7
 18507                           tblptrl	equ	0xFF6
 18508                           tablat	equ	0xFF5
 18509                           prodh	equ	0xFF4
 18510                           prodl	equ	0xFF3
 18511                           intcon	equ	0xFF2
 18512                           intcon2	equ	0xFF1
 18513                           postinc0	equ	0xFEE
 18514                           plusw0	equ	0xFEB
 18515                           wreg	equ	0xFE8
 18516                           indf1	equ	0xFE7
 18517                           postdec1	equ	0xFE5
 18518                           fsr1h	equ	0xFE2
 18519                           fsr1l	equ	0xFE1
 18520                           indf2	equ	0xFDF
 18521                           postinc2	equ	0xFDE
 18522                           postdec2	equ	0xFDD
 18523                           plusw2	equ	0xFDB
 18524                           fsr2h	equ	0xFDA
 18525                           fsr2l	equ	0xFD9
 18526                           status	equ	0xFD8
 18527                           
 18528 ;; *************** function _FLASH_WriteBlock *****************
 18529 ;; Defined at:
 18530 ;;		line 93 in file "mcc_generated_files/memory.c"
 18531 ;; Parameters:    Size  Location     Type
 18532 ;;  writeAddr       4   28[COMRAM] unsigned long 
 18533 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 18534 ;;		 -> sampleArray(64), 
 18535 ;; Auto vars:     Size  Location     Type
 18536 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 18537 ;;  i               1   43[COMRAM] unsigned char 
 18538 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 18539 ;; Return value:  Size  Location     Type
 18540 ;;                  1    wreg      char 
 18541 ;; Registers used:
 18542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18543 ;; Tracked objects:
 18544 ;;		On entry : 0/0
 18545 ;;		On exit  : 0/0
 18546 ;;		Unchanged: 0/0
 18547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18548 ;;      Params:         6       0       0       0       0       0       0
 18549 ;;      Locals:         6       0       0       0       0       0       0
 18550 ;;      Temps:          4       0       0       0       0       0       0
 18551 ;;      Totals:        16       0       0       0       0       0       0
 18552 ;;Total ram usage:       16 bytes
 18553 ;; Hardware stack levels used:    1
 18554 ;; Hardware stack levels required when called:    5
 18555 ;; This function calls:
 18556 ;;		_FLASH_EraseBlock
 18557 ;; This function is called by:
 18558 ;;		_FlashSampleWrite
 18559 ;;		_FLASH_WriteByte
 18560 ;; This function uses a non-reentrant model
 18561 ;;
 18562                           
 18563                           	psect	text107
 18564  002C88                     __ptext107:
 18565                           	opt stack 0
 18566  002C88                     _FLASH_WriteBlock:
 18567                           	opt stack 23
 18568                           
 18569                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 18570                           
 18571                           ;incstack = 0
 18572  002C88  0EC0               	movlw	192
 18573  002C8A  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 18574  002C8C  0E7F               	movlw	127
 18575  002C8E  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 18576  002C90  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 18577  002C94  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 18578  002C98  5023               	movf	??_FLASH_WriteBlock,w,c
 18579  002C9A  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 18580  002C9C  5024               	movf	??_FLASH_WriteBlock+1,w,c
 18581  002C9E  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 18582  002CA0  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 18583  002CA4  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 18584  002CA8  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 18585  002CAA  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 18586                           
 18587                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 18588  002CAC  0E00               	movlw	0
 18589  002CAE  BEF2               	btfsc	intcon,7,c	;volatile
 18590  002CB0  0E01               	movlw	1
 18591  002CB2  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 18592                           
 18593                           ;memory.c: 97: uint8_t i;
 18594                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 18595  002CB4  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 18596  002CB6  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 18597  002CB8  E144               	bnz	l1052
 18598  002CBA  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 18599  002CBC  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 18600  002CBE  E141               	bnz	l1052
 18601  002CC0  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 18602  002CC2  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 18603  002CC4  E13E               	bnz	l1052
 18604  002CC6  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 18605  002CC8  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 18606  002CCA  A4D8               	btfss	status,2,c
 18607  002CCC  0012               	return	
 18608                           
 18609                           ;memory.c: 103: }
 18610                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 18611                           
 18612                           ;memory.c: 101: {
 18613                           ;memory.c: 102: return -1;
 18614                           ;	Return value of _FLASH_WriteBlock is never used
 18615  002CCE  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 18616  002CD2  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 18617  002CD6  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 18618  002CDA  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 18619  002CDE  EC5C  F01F         	call	_FLASH_EraseBlock	;wreg free
 18620                           
 18621                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 18622  002CE2  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 18623                           
 18624                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 18625  002CE6  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 18626                           
 18627                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 18628  002CEA  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 18629                           
 18630                           ;memory.c: 114: for (i=0; i<(64); i++)
 18631  002CEE  0E00               	movlw	0
 18632  002CF0  6E2C               	movwf	FLASH_WriteBlock@i,c
 18633  002CF2                     l8276:
 18634  002CF2  0E3F               	movlw	63
 18635  002CF4  642C               	cpfsgt	FLASH_WriteBlock@i,c
 18636  002CF6  D001               	goto	l1053
 18637  002CF8  D013               	goto	u8380
 18638  002CFA                     l1053:
 18639                           
 18640                           ;memory.c: 115: {
 18641                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 18642  002CFA  502C               	movf	FLASH_WriteBlock@i,w,c
 18643  002CFC  0D01               	mullw	1
 18644  002CFE  50F3               	movf	prodl,w,c
 18645  002D00  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 18646  002D02  6ED9               	movwf	fsr2l,c
 18647  002D04  50F4               	movf	prodh,w,c
 18648  002D06  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 18649  002D08  6EDA               	movwf	fsr2h,c
 18650  002D0A  50DF               	movf	indf2,w,c
 18651  002D0C  6EF5               	movwf	tablat,c	;volatile
 18652                           
 18653                           ;memory.c: 118: if (i == ((64)-1))
 18654  002D0E  0E3F               	movlw	63
 18655  002D10  182C               	xorwf	FLASH_WriteBlock@i,w,c
 18656  002D12  A4D8               	btfss	status,2,c
 18657  002D14  D002               	goto	l1055
 18658  002D16  000C               	tblwt		*	;# 
 18659                           
 18660                           ;memory.c: 121: }
 18661  002D18  D001               	goto	l1056
 18662  002D1A                     l1055:
 18663  002D1A  000D               	tblwt		*+	;# 
 18664  002D1C                     l1056:
 18665  002D1C  2A2C               	incf	FLASH_WriteBlock@i,f,c
 18666  002D1E  D7E9               	goto	l8276
 18667  002D20                     u8380:
 18668                           
 18669                           ;memory.c: 125: }
 18670                           ;memory.c: 126: }
 18671                           ;memory.c: 128: PIR2bits.EEIF = 1;
 18672  002D20  88A1               	bsf	4001,4,c	;volatile
 18673                           
 18674                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 18675  002D22  8EA6               	bsf	4006,7,c	;volsfr
 18676                           
 18677                           ;memory.c: 130: EECON1bits.CFGS = 0;
 18678  002D24  9CA6               	bcf	4006,6,c	;volsfr
 18679                           
 18680                           ;memory.c: 131: EECON1bits.WREN = 1;
 18681  002D26  84A6               	bsf	4006,2,c	;volsfr
 18682                           
 18683                           ;memory.c: 132: INTCONbits.GIE = 0;
 18684  002D28  9EF2               	bcf	intcon,7,c	;volatile
 18685                           
 18686                           ;memory.c: 133: EECON2 = 0x55;
 18687  002D2A  0E55               	movlw	85
 18688  002D2C  6EA7               	movwf	4007,c	;volsfr
 18689                           
 18690                           ;memory.c: 134: EECON2 = 0xAA;
 18691  002D2E  0EAA               	movlw	170
 18692  002D30  6EA7               	movwf	4007,c	;volsfr
 18693                           
 18694                           ;memory.c: 135: EECON1bits.WR = 1;
 18695  002D32  82A6               	bsf	4006,1,c	;volsfr
 18696                           
 18697                           ;memory.c: 137: EECON1bits.WREN = 0;
 18698  002D34  94A6               	bcf	4006,2,c	;volsfr
 18699                           
 18700                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 18701  002D36  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 18702  002D38  D002               	bra	u8395
 18703  002D3A  9EF2               	bcf	intcon,7,c	;volatile
 18704  002D3C  D001               	bra	u8396
 18705  002D3E                     u8395:
 18706  002D3E  8EF2               	bsf	intcon,7,c	;volatile
 18707  002D40                     u8396:
 18708  002D40  0012               	return	
 18709  002D42                     l1052:
 18710  002D42  0012               	return		;funcret
 18711  002D44                     __end_of_FLASH_WriteBlock:
 18712                           	opt stack 0
 18713                           tosu	equ	0xFFF
 18714                           tosh	equ	0xFFE
 18715                           tosl	equ	0xFFD
 18716                           pclath	equ	0xFFA
 18717                           tblptru	equ	0xFF8
 18718                           tblptrh	equ	0xFF7
 18719                           tblptrl	equ	0xFF6
 18720                           tablat	equ	0xFF5
 18721                           prodh	equ	0xFF4
 18722                           prodl	equ	0xFF3
 18723                           intcon	equ	0xFF2
 18724                           intcon2	equ	0xFF1
 18725                           postinc0	equ	0xFEE
 18726                           plusw0	equ	0xFEB
 18727                           wreg	equ	0xFE8
 18728                           indf1	equ	0xFE7
 18729                           postdec1	equ	0xFE5
 18730                           fsr1h	equ	0xFE2
 18731                           fsr1l	equ	0xFE1
 18732                           indf2	equ	0xFDF
 18733                           postinc2	equ	0xFDE
 18734                           postdec2	equ	0xFDD
 18735                           plusw2	equ	0xFDB
 18736                           fsr2h	equ	0xFDA
 18737                           fsr2l	equ	0xFD9
 18738                           status	equ	0xFD8
 18739                           
 18740 ;; *************** function _FLASH_EraseBlock *****************
 18741 ;; Defined at:
 18742 ;;		line 144 in file "mcc_generated_files/memory.c"
 18743 ;; Parameters:    Size  Location     Type
 18744 ;;  baseAddr        4   23[COMRAM] unsigned long 
 18745 ;; Auto vars:     Size  Location     Type
 18746 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 18747 ;; Return value:  Size  Location     Type
 18748 ;;                  1    wreg      void 
 18749 ;; Registers used:
 18750 ;;		wreg, status,2
 18751 ;; Tracked objects:
 18752 ;;		On entry : 0/0
 18753 ;;		On exit  : 0/0
 18754 ;;		Unchanged: 0/0
 18755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18756 ;;      Params:         4       0       0       0       0       0       0
 18757 ;;      Locals:         1       0       0       0       0       0       0
 18758 ;;      Temps:          0       0       0       0       0       0       0
 18759 ;;      Totals:         5       0       0       0       0       0       0
 18760 ;;Total ram usage:        5 bytes
 18761 ;; Hardware stack levels used:    1
 18762 ;; Hardware stack levels required when called:    4
 18763 ;; This function calls:
 18764 ;;		Nothing
 18765 ;; This function is called by:
 18766 ;;		_FLASH_WriteBlock
 18767 ;; This function uses a non-reentrant model
 18768 ;;
 18769                           
 18770                           	psect	text108
 18771  003EB8                     __ptext108:
 18772                           	opt stack 0
 18773  003EB8                     _FLASH_EraseBlock:
 18774                           	opt stack 23
 18775                           
 18776                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 18777                           
 18778                           ;incstack = 0
 18779  003EB8  0E00               	movlw	0
 18780  003EBA  BEF2               	btfsc	intcon,7,c	;volatile
 18781  003EBC  0E01               	movlw	1
 18782  003EBE  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 18783                           
 18784                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 18785  003EC0  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 18786                           
 18787                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 18788  003EC4  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 18789                           
 18790                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 18791  003EC8  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 18792                           
 18793                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 18794  003ECC  8EA6               	bsf	4006,7,c	;volsfr
 18795                           
 18796                           ;memory.c: 153: EECON1bits.CFGS = 0;
 18797  003ECE  9CA6               	bcf	4006,6,c	;volsfr
 18798                           
 18799                           ;memory.c: 154: EECON1bits.WREN = 1;
 18800  003ED0  84A6               	bsf	4006,2,c	;volsfr
 18801                           
 18802                           ;memory.c: 155: EECON1bits.FREE = 1;
 18803  003ED2  88A6               	bsf	4006,4,c	;volsfr
 18804                           
 18805                           ;memory.c: 156: INTCONbits.GIE = 0;
 18806  003ED4  9EF2               	bcf	intcon,7,c	;volatile
 18807                           
 18808                           ;memory.c: 157: EECON2 = 0x55;
 18809  003ED6  0E55               	movlw	85
 18810  003ED8  6EA7               	movwf	4007,c	;volsfr
 18811                           
 18812                           ;memory.c: 158: EECON2 = 0xAA;
 18813  003EDA  0EAA               	movlw	170
 18814  003EDC  6EA7               	movwf	4007,c	;volsfr
 18815                           
 18816                           ;memory.c: 159: EECON1bits.WR = 1;
 18817  003EDE  82A6               	bsf	4006,1,c	;volsfr
 18818                           
 18819                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 18820  003EE0  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 18821  003EE2  D002               	bra	u8255
 18822  003EE4  9EF2               	bcf	intcon,7,c	;volatile
 18823  003EE6  D001               	bra	u8256
 18824  003EE8                     u8255:
 18825  003EE8  8EF2               	bsf	intcon,7,c	;volatile
 18826  003EEA                     u8256:
 18827  003EEA  0012               	return		;funcret
 18828  003EEC                     __end_of_FLASH_EraseBlock:
 18829                           	opt stack 0
 18830                           tosu	equ	0xFFF
 18831                           tosh	equ	0xFFE
 18832                           tosl	equ	0xFFD
 18833                           pclath	equ	0xFFA
 18834                           tblptru	equ	0xFF8
 18835                           tblptrh	equ	0xFF7
 18836                           tblptrl	equ	0xFF6
 18837                           tablat	equ	0xFF5
 18838                           prodh	equ	0xFF4
 18839                           prodl	equ	0xFF3
 18840                           intcon	equ	0xFF2
 18841                           intcon2	equ	0xFF1
 18842                           postinc0	equ	0xFEE
 18843                           plusw0	equ	0xFEB
 18844                           wreg	equ	0xFE8
 18845                           indf1	equ	0xFE7
 18846                           postdec1	equ	0xFE5
 18847                           fsr1h	equ	0xFE2
 18848                           fsr1l	equ	0xFE1
 18849                           indf2	equ	0xFDF
 18850                           postinc2	equ	0xFDE
 18851                           postdec2	equ	0xFDD
 18852                           plusw2	equ	0xFDB
 18853                           fsr2h	equ	0xFDA
 18854                           fsr2l	equ	0xFD9
 18855                           status	equ	0xFD8
 18856                           
 18857 ;; *************** function _FLASH_IsWriteDone *****************
 18858 ;; Defined at:
 18859 ;;		line 189 in file "mcc_generated_files/memory.c"
 18860 ;; Parameters:    Size  Location     Type
 18861 ;;		None
 18862 ;; Auto vars:     Size  Location     Type
 18863 ;;		None
 18864 ;; Return value:  Size  Location     Type
 18865 ;;                  1    wreg      unsigned char 
 18866 ;; Registers used:
 18867 ;;		wreg
 18868 ;; Tracked objects:
 18869 ;;		On entry : 0/0
 18870 ;;		On exit  : 0/0
 18871 ;;		Unchanged: 0/0
 18872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18873 ;;      Params:         0       0       0       0       0       0       0
 18874 ;;      Locals:         0       0       0       0       0       0       0
 18875 ;;      Temps:          0       0       0       0       0       0       0
 18876 ;;      Totals:         0       0       0       0       0       0       0
 18877 ;;Total ram usage:        0 bytes
 18878 ;; Hardware stack levels used:    1
 18879 ;; Hardware stack levels required when called:    4
 18880 ;; This function calls:
 18881 ;;		Nothing
 18882 ;; This function is called by:
 18883 ;;		_FlashSampleWrite
 18884 ;;		_FlashReadUart
 18885 ;; This function uses a non-reentrant model
 18886 ;;
 18887                           
 18888                           	psect	text109
 18889  0042CA                     __ptext109:
 18890                           	opt stack 0
 18891  0042CA                     _FLASH_IsWriteDone:
 18892                           	opt stack 23
 18893                           
 18894                           ;memory.c: 191: return (EECON1bits.WR == 0);
 18895                           
 18896                           ;incstack = 0
 18897  0042CA  A2A6               	btfss	4006,1,c	;volsfr
 18898  0042CC  D001               	goto	u8041
 18899  0042CE  D002               	goto	u8040
 18900  0042D0                     u8041:
 18901  0042D0  0E01               	movlw	1
 18902  0042D2  0012               	return	
 18903  0042D4                     u8040:
 18904  0042D4  0E00               	movlw	0
 18905  0042D6  0012               	return	
 18906  0042D8                     __end_of_FLASH_IsWriteDone:
 18907                           	opt stack 0
 18908                           tosu	equ	0xFFF
 18909                           tosh	equ	0xFFE
 18910                           tosl	equ	0xFFD
 18911                           pclath	equ	0xFFA
 18912                           tblptru	equ	0xFF8
 18913                           tblptrh	equ	0xFF7
 18914                           tblptrl	equ	0xFF6
 18915                           tablat	equ	0xFF5
 18916                           prodh	equ	0xFF4
 18917                           prodl	equ	0xFF3
 18918                           intcon	equ	0xFF2
 18919                           intcon2	equ	0xFF1
 18920                           postinc0	equ	0xFEE
 18921                           plusw0	equ	0xFEB
 18922                           wreg	equ	0xFE8
 18923                           indf1	equ	0xFE7
 18924                           postdec1	equ	0xFE5
 18925                           fsr1h	equ	0xFE2
 18926                           fsr1l	equ	0xFE1
 18927                           indf2	equ	0xFDF
 18928                           postinc2	equ	0xFDE
 18929                           postdec2	equ	0xFDD
 18930                           plusw2	equ	0xFDB
 18931                           fsr2h	equ	0xFDA
 18932                           fsr2l	equ	0xFD9
 18933                           status	equ	0xFD8
 18934                           
 18935 ;; *************** function _ADC_GetConversion *****************
 18936 ;; Defined at:
 18937 ;;		line 106 in file "mcc_generated_files/adc.c"
 18938 ;; Parameters:    Size  Location     Type
 18939 ;;  channel         1    wreg     enum E6975
 18940 ;; Auto vars:     Size  Location     Type
 18941 ;;  channel         1   27[COMRAM] enum E6975
 18942 ;; Return value:  Size  Location     Type
 18943 ;;                  2   23[COMRAM] unsigned int 
 18944 ;; Registers used:
 18945 ;;		wreg, status,2, status,0
 18946 ;; Tracked objects:
 18947 ;;		On entry : 0/0
 18948 ;;		On exit  : 0/0
 18949 ;;		Unchanged: 0/0
 18950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18951 ;;      Params:         2       0       0       0       0       0       0
 18952 ;;      Locals:         1       0       0       0       0       0       0
 18953 ;;      Temps:          2       0       0       0       0       0       0
 18954 ;;      Totals:         5       0       0       0       0       0       0
 18955 ;;Total ram usage:        5 bytes
 18956 ;; Hardware stack levels used:    1
 18957 ;; Hardware stack levels required when called:    4
 18958 ;; This function calls:
 18959 ;;		Nothing
 18960 ;; This function is called by:
 18961 ;;		_AdcConvert
 18962 ;; This function uses a non-reentrant model
 18963 ;;
 18964                           
 18965                           	psect	text110
 18966  003F4C                     __ptext110:
 18967                           	opt stack 0
 18968  003F4C                     _ADC_GetConversion:
 18969                           	opt stack 25
 18970                           
 18971                           ;incstack = 0
 18972                           ;ADC_GetConversion@channel stored from wreg
 18973  003F4C  6E1C               	movwf	ADC_GetConversion@channel,c
 18974                           
 18975                           ;adc.c: 109: ADCON0bits.CHS = channel;
 18976  003F4E  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 18977  003F52  461A               	rlncf	??_ADC_GetConversion,f,c
 18978  003F54  461A               	rlncf	??_ADC_GetConversion,f,c
 18979  003F56  50C2               	movf	4034,w,c	;volatile
 18980  003F58  181A               	xorwf	??_ADC_GetConversion,w,c
 18981  003F5A  0B83               	andlw	-125
 18982  003F5C  181A               	xorwf	??_ADC_GetConversion,w,c
 18983  003F5E  6EC2               	movwf	4034,c	;volatile
 18984                           
 18985                           ;adc.c: 112: ADCON0bits.ADON = 1;
 18986  003F60  80C2               	bsf	4034,0,c	;volatile
 18987                           
 18988                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 18989  003F62  82C2               	bsf	4034,1,c	;volatile
 18990  003F64                     
 18991                           ;adc.c: 119: {
 18992  003F64  B2C2               	btfsc	4034,1,c	;volatile
 18993  003F66  D7FE               	goto	l1169
 18994                           
 18995                           ;adc.c: 120: }
 18996                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 18997  003F68  50C4               	movf	4036,w,c	;volatile
 18998  003F6A  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 18999  003F6C  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 19000  003F6E  50C3               	movf	4035,w,c	;volatile
 19001  003F70  241A               	addwf	??_ADC_GetConversion,w,c
 19002  003F72  6E18               	movwf	?_ADC_GetConversion,c
 19003  003F74  0E00               	movlw	0
 19004  003F76  201B               	addwfc	??_ADC_GetConversion+1,w,c
 19005  003F78  6E19               	movwf	?_ADC_GetConversion+1,c
 19006  003F7A  0012               	return	
 19007  003F7C                     __end_of_ADC_GetConversion:
 19008                           	opt stack 0
 19009                           tosu	equ	0xFFF
 19010                           tosh	equ	0xFFE
 19011                           tosl	equ	0xFFD
 19012                           pclath	equ	0xFFA
 19013                           tblptru	equ	0xFF8
 19014                           tblptrh	equ	0xFF7
 19015                           tblptrl	equ	0xFF6
 19016                           tablat	equ	0xFF5
 19017                           prodh	equ	0xFF4
 19018                           prodl	equ	0xFF3
 19019                           intcon	equ	0xFF2
 19020                           intcon2	equ	0xFF1
 19021                           postinc0	equ	0xFEE
 19022                           plusw0	equ	0xFEB
 19023                           wreg	equ	0xFE8
 19024                           indf1	equ	0xFE7
 19025                           postdec1	equ	0xFE5
 19026                           fsr1h	equ	0xFE2
 19027                           fsr1l	equ	0xFE1
 19028                           indf2	equ	0xFDF
 19029                           postinc2	equ	0xFDE
 19030                           postdec2	equ	0xFDD
 19031                           plusw2	equ	0xFDB
 19032                           fsr2h	equ	0xFDA
 19033                           fsr2l	equ	0xFD9
 19034                           status	equ	0xFD8
 19035                           
 19036 ;; *************** function _INTERRUPT_InterruptManager *****************
 19037 ;; Defined at:
 19038 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 19039 ;; Parameters:    Size  Location     Type
 19040 ;;		None
 19041 ;; Auto vars:     Size  Location     Type
 19042 ;;		None
 19043 ;; Return value:  Size  Location     Type
 19044 ;;                  1    wreg      void 
 19045 ;; Registers used:
 19046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19047 ;; Tracked objects:
 19048 ;;		On entry : 0/0
 19049 ;;		On exit  : 0/0
 19050 ;;		Unchanged: 0/0
 19051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19052 ;;      Params:         0       0       0       0       0       0       0
 19053 ;;      Locals:         0       0       0       0       0       0       0
 19054 ;;      Temps:         18       0       0       0       0       0       0
 19055 ;;      Totals:        18       0       0       0       0       0       0
 19056 ;;Total ram usage:       18 bytes
 19057 ;; Hardware stack levels used:    1
 19058 ;; Hardware stack levels required when called:    3
 19059 ;; This function calls:
 19060 ;;		_EUSART1_Receive_ISR
 19061 ;;		_EUSART1_Transmit_ISR
 19062 ;;		_MEMORY_ISR
 19063 ;;		_PIN_MANAGER_IOC
 19064 ;;		_TMR0_ISR
 19065 ;; This function is called by:
 19066 ;;		Interrupt level 2
 19067 ;; This function uses a non-reentrant model
 19068 ;;
 19069                           
 19070                           	psect	intcode
 19071  000008                     __pintcode:
 19072                           	opt stack 0
 19073  000008                     _INTERRUPT_InterruptManager:
 19074                           	opt stack 17
 19075                           
 19076                           ;incstack = 0
 19077  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19078  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 19079  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 19080  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 19081  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 19082  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 19083  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 19084  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 19085  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 19086  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 19087  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 19088  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 19089  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 19090  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 19091  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 19092  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 19093  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 19094  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 19095  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 19096                           
 19097                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 19098  000052  B6F2               	btfsc	intcon,3,c	;volatile
 19099  000054  A0F2               	btfss	intcon,0,c	;volatile
 19100  000056  D003               	goto	i2l850
 19101                           
 19102                           ;interrupt_manager.c: 61: {
 19103                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 19104  000058  EC48  F021         	call	_PIN_MANAGER_IOC	;wreg free
 19105                           
 19106                           ;interrupt_manager.c: 63: }
 19107  00005C  D019               	goto	i2l859
 19108  00005E                     i2l850:
 19109                           
 19110                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 19111  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 19112  000060  A4F2               	btfss	intcon,2,c	;volatile
 19113  000062  D003               	goto	i2l852
 19114                           
 19115                           ;interrupt_manager.c: 65: {
 19116                           ;interrupt_manager.c: 66: TMR0_ISR();
 19117  000064  EC50  F017         	call	_TMR0_ISR	;wreg free
 19118                           
 19119                           ;interrupt_manager.c: 67: }
 19120  000068  D013               	goto	i2l859
 19121  00006A                     i2l852:
 19122                           
 19123                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 19124  00006A  ACF2               	btfss	intcon,6,c	;volatile
 19125  00006C  D011               	goto	i2l859
 19126                           
 19127                           ;interrupt_manager.c: 69: {
 19128                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 19129  00006E  B8A0               	btfsc	4000,4,c	;volatile
 19130  000070  A8A1               	btfss	4001,4,c	;volatile
 19131  000072  D003               	goto	i2l855
 19132                           
 19133                           ;interrupt_manager.c: 71: {
 19134                           ;interrupt_manager.c: 72: MEMORY_ISR();
 19135  000074  EC9C  F021         	call	_MEMORY_ISR	;wreg free
 19136                           
 19137                           ;interrupt_manager.c: 73: }
 19138  000078  D00B               	goto	i2l859
 19139  00007A                     i2l855:
 19140                           
 19141                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 19142  00007A  B89D               	btfsc	3997,4,c	;volatile
 19143  00007C  A89E               	btfss	3998,4,c	;volatile
 19144  00007E  D003               	goto	i2l857
 19145                           
 19146                           ;interrupt_manager.c: 75: {
 19147                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 19148  000080  ECD6  F01E         	call	_EUSART1_Transmit_ISR	;wreg free
 19149                           
 19150                           ;interrupt_manager.c: 77: }
 19151  000084  D005               	goto	i2l859
 19152  000086                     i2l857:
 19153                           
 19154                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 19155  000086  BA9D               	btfsc	3997,5,c	;volatile
 19156  000088  AA9E               	btfss	3998,5,c	;volatile
 19157  00008A  D002               	goto	i2l859
 19158                           
 19159                           ;interrupt_manager.c: 79: {
 19160                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 19161  00008C  ECBE  F01F         	call	_EUSART1_Receive_ISR	;wreg free
 19162  000090                     i2l859:
 19163                           
 19164                           ;interrupt_manager.c: 87: else
 19165                           ;interrupt_manager.c: 88: {
 19166                           
 19167                           ;interrupt_manager.c: 85: }
 19168                           ;interrupt_manager.c: 86: }
 19169                           
 19170                           ;interrupt_manager.c: 82: else
 19171                           ;interrupt_manager.c: 83: {
 19172  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 19173  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 19174  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 19175  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 19176  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 19177  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 19178  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 19179  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 19180  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 19181  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 19182  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 19183  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 19184  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 19185  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 19186  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 19187  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 19188  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 19189  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 19190  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19191  0000DA  0011               	retfie		f
 19192  0000DC                     __end_of_INTERRUPT_InterruptManager:
 19193                           	opt stack 0
 19194                           tosu	equ	0xFFF
 19195                           tosh	equ	0xFFE
 19196                           tosl	equ	0xFFD
 19197                           pclatu	equ	0xFFB
 19198                           pclath	equ	0xFFA
 19199                           tblptru	equ	0xFF8
 19200                           tblptrh	equ	0xFF7
 19201                           tblptrl	equ	0xFF6
 19202                           tablat	equ	0xFF5
 19203                           prodh	equ	0xFF4
 19204                           prodl	equ	0xFF3
 19205                           intcon	equ	0xFF2
 19206                           intcon2	equ	0xFF1
 19207                           postinc0	equ	0xFEE
 19208                           plusw0	equ	0xFEB
 19209                           fsr0h	equ	0xFEA
 19210                           fsr0l	equ	0xFE9
 19211                           wreg	equ	0xFE8
 19212                           indf1	equ	0xFE7
 19213                           postdec1	equ	0xFE5
 19214                           fsr1h	equ	0xFE2
 19215                           fsr1l	equ	0xFE1
 19216                           indf2	equ	0xFDF
 19217                           postinc2	equ	0xFDE
 19218                           postdec2	equ	0xFDD
 19219                           plusw2	equ	0xFDB
 19220                           fsr2h	equ	0xFDA
 19221                           fsr2l	equ	0xFD9
 19222                           status	equ	0xFD8
 19223                           
 19224 ;; *************** function _TMR0_ISR *****************
 19225 ;; Defined at:
 19226 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 19227 ;; Parameters:    Size  Location     Type
 19228 ;;		None
 19229 ;; Auto vars:     Size  Location     Type
 19230 ;;		None
 19231 ;; Return value:  Size  Location     Type
 19232 ;;                  1    wreg      void 
 19233 ;; Registers used:
 19234 ;;		wreg, status,2, status,0, cstack
 19235 ;; Tracked objects:
 19236 ;;		On entry : 0/0
 19237 ;;		On exit  : 0/0
 19238 ;;		Unchanged: 0/0
 19239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19240 ;;      Params:         0       0       0       0       0       0       0
 19241 ;;      Locals:         0       0       0       0       0       0       0
 19242 ;;      Temps:          0       0       0       0       0       0       0
 19243 ;;      Totals:         0       0       0       0       0       0       0
 19244 ;;Total ram usage:        0 bytes
 19245 ;; Hardware stack levels used:    1
 19246 ;; Hardware stack levels required when called:    1
 19247 ;; This function calls:
 19248 ;;		___lwmod
 19249 ;; This function is called by:
 19250 ;;		_INTERRUPT_InterruptManager
 19251 ;; This function uses a non-reentrant model
 19252 ;;
 19253                           
 19254                           	psect	text112
 19255  002EA0                     __ptext112:
 19256                           	opt stack 0
 19257  002EA0                     _TMR0_ISR:
 19258                           	opt stack 18
 19259                           
 19260                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 19261                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 19262                           
 19263                           ;incstack = 0
 19264  002EA0  94F2               	bcf	intcon,2,c	;volatile
 19265                           
 19266                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 19267  002EA2  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 19268  002EA4  6ED7               	movwf	4055,c	;volatile
 19269                           
 19270                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 19271  002EA6  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 19272                           
 19273                           ;tmr0.c: 144: CountCallBack++;
 19274  002EAA  4A31               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 19275  002EAC  2A32               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 19276                           
 19277                           ;tmr0.c: 145: if ((CountCallBack % 250) == 0)
 19278  002EAE  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19279  002EB2  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19280  002EB6  0E00               	movlw	0
 19281  002EB8  6E04               	movwf	___lwmod@divisor+1,c
 19282  002EBA  0EFA               	movlw	250
 19283  002EBC  6E03               	movwf	___lwmod@divisor,c
 19284  002EBE  ECCC  F01D         	call	___lwmod	;wreg free
 19285  002EC2  5001               	movf	?___lwmod,w,c
 19286  002EC4  1002               	iorwf	?___lwmod+1,w,c
 19287  002EC6  A4D8               	btfss	status,2,c
 19288  002EC8  D003               	goto	i2l1123
 19289                           
 19290                           ;tmr0.c: 146: {
 19291                           ;tmr0.c: 147: Timer0_SynthLd = 1;
 19292  002ECA  0E01               	movlw	1
 19293  002ECC  0100               	movlb	0	; () banked
 19294  002ECE  6FFA               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
 19295  002ED0                     i2l1123:
 19296                           
 19297                           ;tmr0.c: 148: }
 19298                           ;tmr0.c: 149: if ((CountCallBack % 800) == 0)
 19299                           
 19300                           ; BSR set to: 0
 19301  002ED0  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19302  002ED4  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19303  002ED8  0E03               	movlw	3
 19304  002EDA  6E04               	movwf	___lwmod@divisor+1,c
 19305  002EDC  0E20               	movlw	32
 19306  002EDE  6E03               	movwf	___lwmod@divisor,c
 19307  002EE0  ECCC  F01D         	call	___lwmod	;wreg free
 19308  002EE4  5001               	movf	?___lwmod,w,c
 19309  002EE6  1002               	iorwf	?___lwmod+1,w,c
 19310  002EE8  A4D8               	btfss	status,2,c
 19311  002EEA  D003               	goto	i2l1124
 19312                           
 19313                           ;tmr0.c: 150: {
 19314                           ;tmr0.c: 151: Timer0_Sampling = 1;
 19315  002EEC  0E01               	movlw	1
 19316  002EEE  0100               	movlb	0	; () banked
 19317  002EF0  6FF9               	movwf	_Timer0_Sampling& (0+255),b	;volatile
 19318  002EF2                     i2l1124:
 19319                           
 19320                           ;tmr0.c: 152: }
 19321                           ;tmr0.c: 153: if ((CountCallBack % 350) == 0)
 19322                           
 19323                           ; BSR set to: 0
 19324  002EF2  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19325  002EF6  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19326  002EFA  0E01               	movlw	1
 19327  002EFC  6E04               	movwf	___lwmod@divisor+1,c
 19328  002EFE  0E5E               	movlw	94
 19329  002F00  6E03               	movwf	___lwmod@divisor,c
 19330  002F02  ECCC  F01D         	call	___lwmod	;wreg free
 19331  002F06  5001               	movf	?___lwmod,w,c
 19332  002F08  1002               	iorwf	?___lwmod+1,w,c
 19333  002F0A  A4D8               	btfss	status,2,c
 19334  002F0C  D003               	goto	i2l1125
 19335                           
 19336                           ;tmr0.c: 154: {
 19337                           ;tmr0.c: 155: Timer0_KeepAlive = 1;
 19338  002F0E  0E01               	movlw	1
 19339  002F10  0100               	movlb	0	; () banked
 19340  002F12  6FF8               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
 19341  002F14                     i2l1125:
 19342                           
 19343                           ;tmr0.c: 156: }
 19344                           ;tmr0.c: 157: if ((CountCallBack % 10) == 0)
 19345                           
 19346                           ; BSR set to: 0
 19347  002F14  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19348  002F18  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19349  002F1C  0E00               	movlw	0
 19350  002F1E  6E04               	movwf	___lwmod@divisor+1,c
 19351  002F20  0E0A               	movlw	10
 19352  002F22  6E03               	movwf	___lwmod@divisor,c
 19353  002F24  ECCC  F01D         	call	___lwmod	;wreg free
 19354  002F28  5001               	movf	?___lwmod,w,c
 19355  002F2A  1002               	iorwf	?___lwmod+1,w,c
 19356  002F2C  A4D8               	btfss	status,2,c
 19357  002F2E  D003               	goto	i2l1126
 19358                           
 19359                           ;tmr0.c: 158: {
 19360                           ;tmr0.c: 159: Timer0_OneSec = 1;
 19361  002F30  0E01               	movlw	1
 19362  002F32  0100               	movlb	0	; () banked
 19363  002F34  6FF7               	movwf	_Timer0_OneSec& (0+255),b	;volatile
 19364  002F36                     i2l1126:
 19365                           
 19366                           ;tmr0.c: 160: }
 19367                           ;tmr0.c: 161: if(CountCallBack >= 35000)
 19368                           
 19369                           ; BSR set to: 0
 19370  002F36  0EB8               	movlw	184
 19371  002F38  5C31               	subwf	TMR0_ISR@CountCallBack,w,c	;volatile
 19372  002F3A  0E88               	movlw	136
 19373  002F3C  5832               	subwfb	TMR0_ISR@CountCallBack+1,w,c	;volatile
 19374  002F3E  A0D8               	btfss	status,0,c
 19375  002F40  0012               	return	
 19376                           
 19377                           ;tmr0.c: 163: {
 19378                           ;tmr0.c: 165: CountCallBack = 0;
 19379  002F42  0E00               	movlw	0
 19380  002F44  6E32               	movwf	TMR0_ISR@CountCallBack+1,c	;volatile
 19381  002F46  0E00               	movlw	0
 19382  002F48  6E31               	movwf	TMR0_ISR@CountCallBack,c	;volatile
 19383  002F4A  0012               	return	
 19384  002F4C                     __end_of_TMR0_ISR:
 19385                           	opt stack 0
 19386                           tosu	equ	0xFFF
 19387                           tosh	equ	0xFFE
 19388                           tosl	equ	0xFFD
 19389                           pclatu	equ	0xFFB
 19390                           pclath	equ	0xFFA
 19391                           tblptru	equ	0xFF8
 19392                           tblptrh	equ	0xFF7
 19393                           tblptrl	equ	0xFF6
 19394                           tablat	equ	0xFF5
 19395                           prodh	equ	0xFF4
 19396                           prodl	equ	0xFF3
 19397                           intcon	equ	0xFF2
 19398                           intcon2	equ	0xFF1
 19399                           postinc0	equ	0xFEE
 19400                           plusw0	equ	0xFEB
 19401                           fsr0h	equ	0xFEA
 19402                           fsr0l	equ	0xFE9
 19403                           wreg	equ	0xFE8
 19404                           indf1	equ	0xFE7
 19405                           postdec1	equ	0xFE5
 19406                           fsr1h	equ	0xFE2
 19407                           fsr1l	equ	0xFE1
 19408                           indf2	equ	0xFDF
 19409                           postinc2	equ	0xFDE
 19410                           postdec2	equ	0xFDD
 19411                           plusw2	equ	0xFDB
 19412                           fsr2h	equ	0xFDA
 19413                           fsr2l	equ	0xFD9
 19414                           status	equ	0xFD8
 19415                           
 19416 ;; *************** function ___lwmod *****************
 19417 ;; Defined at:
 19418 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 19419 ;; Parameters:    Size  Location     Type
 19420 ;;  dividend        2    0[COMRAM] unsigned int 
 19421 ;;  divisor         2    2[COMRAM] unsigned int 
 19422 ;; Auto vars:     Size  Location     Type
 19423 ;;  counter         1    4[COMRAM] unsigned char 
 19424 ;; Return value:  Size  Location     Type
 19425 ;;                  2    0[COMRAM] unsigned int 
 19426 ;; Registers used:
 19427 ;;		wreg, status,2, status,0
 19428 ;; Tracked objects:
 19429 ;;		On entry : 0/0
 19430 ;;		On exit  : 0/0
 19431 ;;		Unchanged: 0/0
 19432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19433 ;;      Params:         4       0       0       0       0       0       0
 19434 ;;      Locals:         1       0       0       0       0       0       0
 19435 ;;      Temps:          0       0       0       0       0       0       0
 19436 ;;      Totals:         5       0       0       0       0       0       0
 19437 ;;Total ram usage:        5 bytes
 19438 ;; Hardware stack levels used:    1
 19439 ;; This function calls:
 19440 ;;		Nothing
 19441 ;; This function is called by:
 19442 ;;		_TMR0_ISR
 19443 ;; This function uses a non-reentrant model
 19444 ;;
 19445                           
 19446                           	psect	text113
 19447  003B98                     __ptext113:
 19448                           	opt stack 0
 19449  003B98                     ___lwmod:
 19450                           	opt stack 18
 19451                           
 19452                           ;incstack = 0
 19453  003B98  5003               	movf	___lwmod@divisor,w,c
 19454  003B9A  1004               	iorwf	___lwmod@divisor+1,w,c
 19455  003B9C  B4D8               	btfsc	status,2,c
 19456  003B9E  D018               	goto	i2l2022
 19457  003BA0  0E01               	movlw	1
 19458  003BA2  6E05               	movwf	___lwmod@counter,c
 19459  003BA4  D004               	goto	i2l2017
 19460  003BA6  90D8               	bcf	status,0,c
 19461  003BA8  3603               	rlcf	___lwmod@divisor,f,c
 19462  003BAA  3604               	rlcf	___lwmod@divisor+1,f,c
 19463  003BAC  2A05               	incf	___lwmod@counter,f,c
 19464  003BAE                     i2l2017:
 19465  003BAE  AE04               	btfss	___lwmod@divisor+1,7,c
 19466  003BB0  D7FA               	goto	i2l2018
 19467  003BB2                     i2u586_40:
 19468  003BB2  5003               	movf	___lwmod@divisor,w,c
 19469  003BB4  5C01               	subwf	___lwmod@dividend,w,c
 19470  003BB6  5004               	movf	___lwmod@divisor+1,w,c
 19471  003BB8  5802               	subwfb	___lwmod@dividend+1,w,c
 19472  003BBA  A0D8               	btfss	status,0,c
 19473  003BBC  D004               	goto	i2l2021
 19474  003BBE  5003               	movf	___lwmod@divisor,w,c
 19475  003BC0  5E01               	subwf	___lwmod@dividend,f,c
 19476  003BC2  5004               	movf	___lwmod@divisor+1,w,c
 19477  003BC4  5A02               	subwfb	___lwmod@dividend+1,f,c
 19478  003BC6                     i2l2021:
 19479  003BC6  90D8               	bcf	status,0,c
 19480  003BC8  3204               	rrcf	___lwmod@divisor+1,f,c
 19481  003BCA  3203               	rrcf	___lwmod@divisor,f,c
 19482  003BCC  2E05               	decfsz	___lwmod@counter,f,c
 19483  003BCE  D7F1               	goto	i2u586_40
 19484  003BD0                     i2l2022:
 19485  003BD0  C001  F001         	movff	___lwmod@dividend,?___lwmod
 19486  003BD4  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 19487  003BD8  0012               	return		;funcret
 19488  003BDA                     __end_of___lwmod:
 19489                           	opt stack 0
 19490                           tosu	equ	0xFFF
 19491                           tosh	equ	0xFFE
 19492                           tosl	equ	0xFFD
 19493                           pclatu	equ	0xFFB
 19494                           pclath	equ	0xFFA
 19495                           tblptru	equ	0xFF8
 19496                           tblptrh	equ	0xFF7
 19497                           tblptrl	equ	0xFF6
 19498                           tablat	equ	0xFF5
 19499                           prodh	equ	0xFF4
 19500                           prodl	equ	0xFF3
 19501                           intcon	equ	0xFF2
 19502                           intcon2	equ	0xFF1
 19503                           postinc0	equ	0xFEE
 19504                           plusw0	equ	0xFEB
 19505                           fsr0h	equ	0xFEA
 19506                           fsr0l	equ	0xFE9
 19507                           wreg	equ	0xFE8
 19508                           indf1	equ	0xFE7
 19509                           postdec1	equ	0xFE5
 19510                           fsr1h	equ	0xFE2
 19511                           fsr1l	equ	0xFE1
 19512                           indf2	equ	0xFDF
 19513                           postinc2	equ	0xFDE
 19514                           postdec2	equ	0xFDD
 19515                           plusw2	equ	0xFDB
 19516                           fsr2h	equ	0xFDA
 19517                           fsr2l	equ	0xFD9
 19518                           status	equ	0xFD8
 19519                           
 19520 ;; *************** function _PIN_MANAGER_IOC *****************
 19521 ;; Defined at:
 19522 ;;		line 108 in file "mcc_generated_files/pin_manager.c"
 19523 ;; Parameters:    Size  Location     Type
 19524 ;;		None
 19525 ;; Auto vars:     Size  Location     Type
 19526 ;;		None
 19527 ;; Return value:  Size  Location     Type
 19528 ;;                  1    wreg      void 
 19529 ;; Registers used:
 19530 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19531 ;; Tracked objects:
 19532 ;;		On entry : 0/0
 19533 ;;		On exit  : 0/0
 19534 ;;		Unchanged: 0/0
 19535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19536 ;;      Params:         0       0       0       0       0       0       0
 19537 ;;      Locals:         0       0       0       0       0       0       0
 19538 ;;      Temps:          0       0       0       0       0       0       0
 19539 ;;      Totals:         0       0       0       0       0       0       0
 19540 ;;Total ram usage:        0 bytes
 19541 ;; Hardware stack levels used:    1
 19542 ;; Hardware stack levels required when called:    2
 19543 ;; This function calls:
 19544 ;;		_IOCB4_ISR
 19545 ;;		_IOCB5_ISR
 19546 ;; This function is called by:
 19547 ;;		_INTERRUPT_InterruptManager
 19548 ;; This function uses a non-reentrant model
 19549 ;;
 19550                           
 19551                           	psect	text114
 19552  004290                     __ptext114:
 19553                           	opt stack 0
 19554  004290                     _PIN_MANAGER_IOC:
 19555                           	opt stack 17
 19556                           
 19557                           ;pin_manager.c: 111: if(IOCBbits.IOCB4 == 1)
 19558                           
 19559                           ;incstack = 0
 19560  004290  B862               	btfsc	3938,4,c	;volatile
 19561                           
 19562                           ;pin_manager.c: 112: {
 19563                           ;pin_manager.c: 113: IOCB4_ISR();
 19564  004292  EC80  F020         	call	_IOCB4_ISR	;wreg free
 19565                           
 19566                           ;pin_manager.c: 114: }
 19567                           ;pin_manager.c: 116: if(IOCBbits.IOCB5 == 1)
 19568  004296  BA62               	btfsc	3938,5,c	;volatile
 19569                           
 19570                           ;pin_manager.c: 117: {
 19571                           ;pin_manager.c: 118: IOCB5_ISR();
 19572  004298  EC6F  F020         	call	_IOCB5_ISR	;wreg free
 19573                           
 19574                           ;pin_manager.c: 119: }
 19575                           ;pin_manager.c: 122: INTCONbits.RBIF = 0;
 19576  00429C  90F2               	bcf	intcon,0,c	;volatile
 19577  00429E  0012               	return		;funcret
 19578  0042A0                     __end_of_PIN_MANAGER_IOC:
 19579                           	opt stack 0
 19580                           tosu	equ	0xFFF
 19581                           tosh	equ	0xFFE
 19582                           tosl	equ	0xFFD
 19583                           pclatu	equ	0xFFB
 19584                           pclath	equ	0xFFA
 19585                           tblptru	equ	0xFF8
 19586                           tblptrh	equ	0xFF7
 19587                           tblptrl	equ	0xFF6
 19588                           tablat	equ	0xFF5
 19589                           prodh	equ	0xFF4
 19590                           prodl	equ	0xFF3
 19591                           intcon	equ	0xFF2
 19592                           intcon2	equ	0xFF1
 19593                           postinc0	equ	0xFEE
 19594                           plusw0	equ	0xFEB
 19595                           fsr0h	equ	0xFEA
 19596                           fsr0l	equ	0xFE9
 19597                           wreg	equ	0xFE8
 19598                           indf1	equ	0xFE7
 19599                           postdec1	equ	0xFE5
 19600                           fsr1h	equ	0xFE2
 19601                           fsr1l	equ	0xFE1
 19602                           indf2	equ	0xFDF
 19603                           postinc2	equ	0xFDE
 19604                           postdec2	equ	0xFDD
 19605                           plusw2	equ	0xFDB
 19606                           fsr2h	equ	0xFDA
 19607                           fsr2l	equ	0xFD9
 19608                           status	equ	0xFD8
 19609                           
 19610 ;; *************** function _IOCB5_ISR *****************
 19611 ;; Defined at:
 19612 ;;		line 158 in file "mcc_generated_files/pin_manager.c"
 19613 ;; Parameters:    Size  Location     Type
 19614 ;;		None
 19615 ;; Auto vars:     Size  Location     Type
 19616 ;;		None
 19617 ;; Return value:  Size  Location     Type
 19618 ;;                  1    wreg      void 
 19619 ;; Registers used:
 19620 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19621 ;; Tracked objects:
 19622 ;;		On entry : 0/0
 19623 ;;		On exit  : 0/0
 19624 ;;		Unchanged: 0/0
 19625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19626 ;;      Params:         0       0       0       0       0       0       0
 19627 ;;      Locals:         0       0       0       0       0       0       0
 19628 ;;      Temps:          0       0       0       0       0       0       0
 19629 ;;      Totals:         0       0       0       0       0       0       0
 19630 ;;Total ram usage:        0 bytes
 19631 ;; Hardware stack levels used:    1
 19632 ;; Hardware stack levels required when called:    1
 19633 ;; This function calls:
 19634 ;;		Absolute function
 19635 ;;		_IOCB5_DefaultInterruptHandler
 19636 ;; This function is called by:
 19637 ;;		_PIN_MANAGER_IOC
 19638 ;; This function uses a non-reentrant model
 19639 ;;
 19640                           
 19641                           	psect	text115
 19642  0040DE                     __ptext115:
 19643                           	opt stack 0
 19644  0040DE                     _IOCB5_ISR:
 19645                           	opt stack 17
 19646                           
 19647                           ;pin_manager.c: 163: if(IOCB5_InterruptHandler)
 19648                           
 19649                           ;incstack = 0
 19650  0040DE  0101               	movlb	1	; () banked
 19651  0040E0  51CE               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19652  0040E2  11CF               	iorwf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19653  0040E4  B4D8               	btfsc	status,2,c
 19654  0040E6  0012               	return	
 19655                           
 19656                           ; BSR set to: 1
 19657                           ;pin_manager.c: 164: {
 19658                           ;pin_manager.c: 165: IOCB5_InterruptHandler();
 19659  0040E8  D801               	call	i2u578_48
 19660  0040EA  0012               	return	
 19661  0040EC                     i2u578_48:
 19662  0040EC  0005               	push	
 19663  0040EE  6EFA               	movwf	pclath,c
 19664  0040F0  51CE               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19665  0040F2  6EFD               	movwf	tosl,c
 19666  0040F4  51CF               	movf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19667  0040F6  6EFE               	movwf	tosh,c
 19668  0040F8  50F8               	movf	tblptru,w,c
 19669  0040FA  6EFF               	movwf	tosu,c
 19670  0040FC  50FA               	movf	pclath,w,c
 19671  0040FE  0012               	return		;indir
 19672  004100                     __end_of_IOCB5_ISR:
 19673                           	opt stack 0
 19674                           tosu	equ	0xFFF
 19675                           tosh	equ	0xFFE
 19676                           tosl	equ	0xFFD
 19677                           pclatu	equ	0xFFB
 19678                           pclath	equ	0xFFA
 19679                           tblptru	equ	0xFF8
 19680                           tblptrh	equ	0xFF7
 19681                           tblptrl	equ	0xFF6
 19682                           tablat	equ	0xFF5
 19683                           prodh	equ	0xFF4
 19684                           prodl	equ	0xFF3
 19685                           intcon	equ	0xFF2
 19686                           intcon2	equ	0xFF1
 19687                           postinc0	equ	0xFEE
 19688                           plusw0	equ	0xFEB
 19689                           fsr0h	equ	0xFEA
 19690                           fsr0l	equ	0xFE9
 19691                           wreg	equ	0xFE8
 19692                           indf1	equ	0xFE7
 19693                           postdec1	equ	0xFE5
 19694                           fsr1h	equ	0xFE2
 19695                           fsr1l	equ	0xFE1
 19696                           indf2	equ	0xFDF
 19697                           postinc2	equ	0xFDE
 19698                           postdec2	equ	0xFDD
 19699                           plusw2	equ	0xFDB
 19700                           fsr2h	equ	0xFDA
 19701                           fsr2l	equ	0xFD9
 19702                           status	equ	0xFD8
 19703                           
 19704 ;; *************** function _IOCB5_DefaultInterruptHandler *****************
 19705 ;; Defined at:
 19706 ;;		line 179 in file "mcc_generated_files/pin_manager.c"
 19707 ;; Parameters:    Size  Location     Type
 19708 ;;		None
 19709 ;; Auto vars:     Size  Location     Type
 19710 ;;		None
 19711 ;; Return value:  Size  Location     Type
 19712 ;;                  1    wreg      void 
 19713 ;; Registers used:
 19714 ;;		None
 19715 ;; Tracked objects:
 19716 ;;		On entry : 0/0
 19717 ;;		On exit  : 0/0
 19718 ;;		Unchanged: 0/0
 19719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19720 ;;      Params:         0       0       0       0       0       0       0
 19721 ;;      Locals:         0       0       0       0       0       0       0
 19722 ;;      Temps:          0       0       0       0       0       0       0
 19723 ;;      Totals:         0       0       0       0       0       0       0
 19724 ;;Total ram usage:        0 bytes
 19725 ;; Hardware stack levels used:    1
 19726 ;; This function calls:
 19727 ;;		Nothing
 19728 ;; This function is called by:
 19729 ;;		_PIN_MANAGER_Initialize
 19730 ;;		_IOCB5_ISR
 19731 ;; This function uses a non-reentrant model
 19732 ;;
 19733                           
 19734                           	psect	text116
 19735  00433C                     __ptext116:
 19736                           	opt stack 0
 19737  00433C                     _IOCB5_DefaultInterruptHandler:
 19738                           	opt stack 17
 19739                           
 19740                           ;incstack = 0
 19741  00433C  0012               	return		;funcret
 19742  00433E                     __end_of_IOCB5_DefaultInterruptHandler:
 19743                           	opt stack 0
 19744                           tosu	equ	0xFFF
 19745                           tosh	equ	0xFFE
 19746                           tosl	equ	0xFFD
 19747                           pclatu	equ	0xFFB
 19748                           pclath	equ	0xFFA
 19749                           tblptru	equ	0xFF8
 19750                           tblptrh	equ	0xFF7
 19751                           tblptrl	equ	0xFF6
 19752                           tablat	equ	0xFF5
 19753                           prodh	equ	0xFF4
 19754                           prodl	equ	0xFF3
 19755                           intcon	equ	0xFF2
 19756                           intcon2	equ	0xFF1
 19757                           postinc0	equ	0xFEE
 19758                           plusw0	equ	0xFEB
 19759                           fsr0h	equ	0xFEA
 19760                           fsr0l	equ	0xFE9
 19761                           wreg	equ	0xFE8
 19762                           indf1	equ	0xFE7
 19763                           postdec1	equ	0xFE5
 19764                           fsr1h	equ	0xFE2
 19765                           fsr1l	equ	0xFE1
 19766                           indf2	equ	0xFDF
 19767                           postinc2	equ	0xFDE
 19768                           postdec2	equ	0xFDD
 19769                           plusw2	equ	0xFDB
 19770                           fsr2h	equ	0xFDA
 19771                           fsr2l	equ	0xFD9
 19772                           status	equ	0xFD8
 19773                           
 19774 ;; *************** function _IOCB4_ISR *****************
 19775 ;; Defined at:
 19776 ;;		line 129 in file "mcc_generated_files/pin_manager.c"
 19777 ;; Parameters:    Size  Location     Type
 19778 ;;		None
 19779 ;; Auto vars:     Size  Location     Type
 19780 ;;		None
 19781 ;; Return value:  Size  Location     Type
 19782 ;;                  1    wreg      void 
 19783 ;; Registers used:
 19784 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19785 ;; Tracked objects:
 19786 ;;		On entry : 0/0
 19787 ;;		On exit  : 0/0
 19788 ;;		Unchanged: 0/0
 19789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19790 ;;      Params:         0       0       0       0       0       0       0
 19791 ;;      Locals:         0       0       0       0       0       0       0
 19792 ;;      Temps:          0       0       0       0       0       0       0
 19793 ;;      Totals:         0       0       0       0       0       0       0
 19794 ;;Total ram usage:        0 bytes
 19795 ;; Hardware stack levels used:    1
 19796 ;; Hardware stack levels required when called:    1
 19797 ;; This function calls:
 19798 ;;		Absolute function
 19799 ;;		_IOCB4_DefaultInterruptHandler
 19800 ;; This function is called by:
 19801 ;;		_PIN_MANAGER_IOC
 19802 ;; This function uses a non-reentrant model
 19803 ;;
 19804                           
 19805                           	psect	text117
 19806  004100                     __ptext117:
 19807                           	opt stack 0
 19808  004100                     _IOCB4_ISR:
 19809                           	opt stack 17
 19810                           
 19811                           ;pin_manager.c: 134: if(IOCB4_InterruptHandler)
 19812                           
 19813                           ;incstack = 0
 19814  004100  0101               	movlb	1	; () banked
 19815  004102  51D0               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19816  004104  11D1               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19817  004106  B4D8               	btfsc	status,2,c
 19818  004108  0012               	return	
 19819                           
 19820                           ; BSR set to: 1
 19821                           ;pin_manager.c: 135: {
 19822                           ;pin_manager.c: 136: IOCB4_InterruptHandler();
 19823  00410A  D801               	call	i2u576_48
 19824  00410C  0012               	return	
 19825  00410E                     i2u576_48:
 19826  00410E  0005               	push	
 19827  004110  6EFA               	movwf	pclath,c
 19828  004112  51D0               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19829  004114  6EFD               	movwf	tosl,c
 19830  004116  51D1               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19831  004118  6EFE               	movwf	tosh,c
 19832  00411A  50F8               	movf	tblptru,w,c
 19833  00411C  6EFF               	movwf	tosu,c
 19834  00411E  50FA               	movf	pclath,w,c
 19835  004120  0012               	return		;indir
 19836  004122                     __end_of_IOCB4_ISR:
 19837                           	opt stack 0
 19838                           tosu	equ	0xFFF
 19839                           tosh	equ	0xFFE
 19840                           tosl	equ	0xFFD
 19841                           pclatu	equ	0xFFB
 19842                           pclath	equ	0xFFA
 19843                           tblptru	equ	0xFF8
 19844                           tblptrh	equ	0xFF7
 19845                           tblptrl	equ	0xFF6
 19846                           tablat	equ	0xFF5
 19847                           prodh	equ	0xFF4
 19848                           prodl	equ	0xFF3
 19849                           intcon	equ	0xFF2
 19850                           intcon2	equ	0xFF1
 19851                           postinc0	equ	0xFEE
 19852                           plusw0	equ	0xFEB
 19853                           fsr0h	equ	0xFEA
 19854                           fsr0l	equ	0xFE9
 19855                           wreg	equ	0xFE8
 19856                           indf1	equ	0xFE7
 19857                           postdec1	equ	0xFE5
 19858                           fsr1h	equ	0xFE2
 19859                           fsr1l	equ	0xFE1
 19860                           indf2	equ	0xFDF
 19861                           postinc2	equ	0xFDE
 19862                           postdec2	equ	0xFDD
 19863                           plusw2	equ	0xFDB
 19864                           fsr2h	equ	0xFDA
 19865                           fsr2l	equ	0xFD9
 19866                           status	equ	0xFD8
 19867                           
 19868 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 19869 ;; Defined at:
 19870 ;;		line 150 in file "mcc_generated_files/pin_manager.c"
 19871 ;; Parameters:    Size  Location     Type
 19872 ;;		None
 19873 ;; Auto vars:     Size  Location     Type
 19874 ;;		None
 19875 ;; Return value:  Size  Location     Type
 19876 ;;                  1    wreg      void 
 19877 ;; Registers used:
 19878 ;;		None
 19879 ;; Tracked objects:
 19880 ;;		On entry : 0/0
 19881 ;;		On exit  : 0/0
 19882 ;;		Unchanged: 0/0
 19883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19884 ;;      Params:         0       0       0       0       0       0       0
 19885 ;;      Locals:         0       0       0       0       0       0       0
 19886 ;;      Temps:          0       0       0       0       0       0       0
 19887 ;;      Totals:         0       0       0       0       0       0       0
 19888 ;;Total ram usage:        0 bytes
 19889 ;; Hardware stack levels used:    1
 19890 ;; This function calls:
 19891 ;;		Nothing
 19892 ;; This function is called by:
 19893 ;;		_PIN_MANAGER_Initialize
 19894 ;;		_IOCB4_ISR
 19895 ;; This function uses a non-reentrant model
 19896 ;;
 19897                           
 19898                           	psect	text118
 19899  00433E                     __ptext118:
 19900                           	opt stack 0
 19901  00433E                     _IOCB4_DefaultInterruptHandler:
 19902                           	opt stack 17
 19903                           
 19904                           ;incstack = 0
 19905  00433E  0012               	return		;funcret
 19906  004340                     __end_of_IOCB4_DefaultInterruptHandler:
 19907                           	opt stack 0
 19908                           tosu	equ	0xFFF
 19909                           tosh	equ	0xFFE
 19910                           tosl	equ	0xFFD
 19911                           pclatu	equ	0xFFB
 19912                           pclath	equ	0xFFA
 19913                           tblptru	equ	0xFF8
 19914                           tblptrh	equ	0xFF7
 19915                           tblptrl	equ	0xFF6
 19916                           tablat	equ	0xFF5
 19917                           prodh	equ	0xFF4
 19918                           prodl	equ	0xFF3
 19919                           intcon	equ	0xFF2
 19920                           intcon2	equ	0xFF1
 19921                           postinc0	equ	0xFEE
 19922                           plusw0	equ	0xFEB
 19923                           fsr0h	equ	0xFEA
 19924                           fsr0l	equ	0xFE9
 19925                           wreg	equ	0xFE8
 19926                           indf1	equ	0xFE7
 19927                           postdec1	equ	0xFE5
 19928                           fsr1h	equ	0xFE2
 19929                           fsr1l	equ	0xFE1
 19930                           indf2	equ	0xFDF
 19931                           postinc2	equ	0xFDE
 19932                           postdec2	equ	0xFDD
 19933                           plusw2	equ	0xFDB
 19934                           fsr2h	equ	0xFDA
 19935                           fsr2l	equ	0xFD9
 19936                           status	equ	0xFD8
 19937                           
 19938 ;; *************** function _MEMORY_ISR *****************
 19939 ;; Defined at:
 19940 ;;		line 206 in file "mcc_generated_files/memory.c"
 19941 ;; Parameters:    Size  Location     Type
 19942 ;;		None
 19943 ;; Auto vars:     Size  Location     Type
 19944 ;;		None
 19945 ;; Return value:  Size  Location     Type
 19946 ;;                  1    wreg      void 
 19947 ;; Registers used:
 19948 ;;		None
 19949 ;; Tracked objects:
 19950 ;;		On entry : 0/0
 19951 ;;		On exit  : 0/0
 19952 ;;		Unchanged: 0/0
 19953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19954 ;;      Params:         0       0       0       0       0       0       0
 19955 ;;      Locals:         0       0       0       0       0       0       0
 19956 ;;      Temps:          0       0       0       0       0       0       0
 19957 ;;      Totals:         0       0       0       0       0       0       0
 19958 ;;Total ram usage:        0 bytes
 19959 ;; Hardware stack levels used:    1
 19960 ;; This function calls:
 19961 ;;		Nothing
 19962 ;; This function is called by:
 19963 ;;		_INTERRUPT_InterruptManager
 19964 ;; This function uses a non-reentrant model
 19965 ;;
 19966                           
 19967                           	psect	text119
 19968  004338                     __ptext119:
 19969                           	opt stack 0
 19970  004338                     _MEMORY_ISR:
 19971                           	opt stack 19
 19972                           
 19973                           ;memory.c: 209: PIR2bits.EEIF = 0;
 19974                           
 19975                           ;incstack = 0
 19976  004338  98A1               	bcf	4001,4,c	;volatile
 19977  00433A  0012               	return		;funcret
 19978  00433C                     __end_of_MEMORY_ISR:
 19979                           	opt stack 0
 19980                           tosu	equ	0xFFF
 19981                           tosh	equ	0xFFE
 19982                           tosl	equ	0xFFD
 19983                           pclatu	equ	0xFFB
 19984                           pclath	equ	0xFFA
 19985                           tblptru	equ	0xFF8
 19986                           tblptrh	equ	0xFF7
 19987                           tblptrl	equ	0xFF6
 19988                           tablat	equ	0xFF5
 19989                           prodh	equ	0xFF4
 19990                           prodl	equ	0xFF3
 19991                           intcon	equ	0xFF2
 19992                           intcon2	equ	0xFF1
 19993                           postinc0	equ	0xFEE
 19994                           plusw0	equ	0xFEB
 19995                           fsr0h	equ	0xFEA
 19996                           fsr0l	equ	0xFE9
 19997                           wreg	equ	0xFE8
 19998                           indf1	equ	0xFE7
 19999                           postdec1	equ	0xFE5
 20000                           fsr1h	equ	0xFE2
 20001                           fsr1l	equ	0xFE1
 20002                           indf2	equ	0xFDF
 20003                           postinc2	equ	0xFDE
 20004                           postdec2	equ	0xFDD
 20005                           plusw2	equ	0xFDB
 20006                           fsr2h	equ	0xFDA
 20007                           fsr2l	equ	0xFD9
 20008                           status	equ	0xFD8
 20009                           
 20010 ;; *************** function _EUSART1_Transmit_ISR *****************
 20011 ;; Defined at:
 20012 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 20013 ;; Parameters:    Size  Location     Type
 20014 ;;		None
 20015 ;; Auto vars:     Size  Location     Type
 20016 ;;		None
 20017 ;; Return value:  Size  Location     Type
 20018 ;;                  1    wreg      void 
 20019 ;; Registers used:
 20020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20021 ;; Tracked objects:
 20022 ;;		On entry : 0/0
 20023 ;;		On exit  : 0/0
 20024 ;;		Unchanged: 0/0
 20025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20026 ;;      Params:         0       0       0       0       0       0       0
 20027 ;;      Locals:         0       0       0       0       0       0       0
 20028 ;;      Temps:          0       0       0       0       0       0       0
 20029 ;;      Totals:         0       0       0       0       0       0       0
 20030 ;;Total ram usage:        0 bytes
 20031 ;; Hardware stack levels used:    1
 20032 ;; This function calls:
 20033 ;;		Nothing
 20034 ;; This function is called by:
 20035 ;;		_INTERRUPT_InterruptManager
 20036 ;; This function uses a non-reentrant model
 20037 ;;
 20038                           
 20039                           	psect	text120
 20040  003DAC                     __ptext120:
 20041                           	opt stack 0
 20042  003DAC                     _EUSART1_Transmit_ISR:
 20043                           	opt stack 19
 20044                           
 20045                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 20046                           
 20047                           ;incstack = 0
 20048  003DAC  0E46               	movlw	70
 20049  003DAE  0101               	movlb	1	; () banked
 20050  003DB0  61D2               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 20051  003DB2  D012               	goto	i2l921
 20052                           
 20053                           ; BSR set to: 1
 20054                           ;eusart1.c: 186: {
 20055                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 20056  003DB4  5035               	movf	_eusart1TxTail,w,c	;volatile
 20057  003DB6  0D01               	mullw	1
 20058  003DB8  0E00               	movlw	low _eusart1TxBuffer
 20059  003DBA  24F3               	addwf	prodl,w,c
 20060  003DBC  6ED9               	movwf	fsr2l,c
 20061  003DBE  0E02               	movlw	high _eusart1TxBuffer
 20062  003DC0  20F4               	addwfc	prodh,w,c
 20063  003DC2  6EDA               	movwf	fsr2h,c
 20064  003DC4  50DF               	movf	indf2,w,c
 20065  003DC6  6EAD               	movwf	4013,c	;volatile
 20066                           
 20067                           ; BSR set to: 1
 20068  003DC8  2A35               	incf	_eusart1TxTail,f,c	;volatile
 20069                           
 20070                           ; BSR set to: 1
 20071                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 20072  003DCA  0E45               	movlw	69
 20073  003DCC  6435               	cpfsgt	_eusart1TxTail,c	;volatile
 20074  003DCE  D002               	goto	i2l922
 20075                           
 20076                           ; BSR set to: 1
 20077                           ;eusart1.c: 189: {
 20078                           ;eusart1.c: 190: eusart1TxTail = 0;
 20079  003DD0  0E00               	movlw	0
 20080  003DD2  6E35               	movwf	_eusart1TxTail,c	;volatile
 20081  003DD4                     i2l922:
 20082                           
 20083                           ; BSR set to: 1
 20084                           ;eusart1.c: 191: }
 20085                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 20086                           
 20087                           ; BSR set to: 1
 20088  003DD4  2BD2               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 20089                           
 20090                           ;eusart1.c: 193: }
 20091  003DD6  0012               	return	
 20092  003DD8                     i2l921:
 20093                           
 20094                           ; BSR set to: 1
 20095                           ;eusart1.c: 194: else
 20096                           ;eusart1.c: 195: {
 20097                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 20098  003DD8  989D               	bcf	3997,4,c	;volatile
 20099                           
 20100                           ; BSR set to: 1
 20101                           ;eusart1.c: 197: eusart1TxTail = 0;
 20102  003DDA  0E00               	movlw	0
 20103  003DDC  6E35               	movwf	_eusart1TxTail,c	;volatile
 20104                           
 20105                           ;eusart1.c: 198: eusart1TxHead = 0;
 20106  003DDE  0E00               	movlw	0
 20107  003DE0  6E36               	movwf	_eusart1TxHead,c	;volatile
 20108  003DE2  0012               	return	
 20109  003DE4                     __end_of_EUSART1_Transmit_ISR:
 20110                           	opt stack 0
 20111                           tosu	equ	0xFFF
 20112                           tosh	equ	0xFFE
 20113                           tosl	equ	0xFFD
 20114                           pclatu	equ	0xFFB
 20115                           pclath	equ	0xFFA
 20116                           tblptru	equ	0xFF8
 20117                           tblptrh	equ	0xFF7
 20118                           tblptrl	equ	0xFF6
 20119                           tablat	equ	0xFF5
 20120                           prodh	equ	0xFF4
 20121                           prodl	equ	0xFF3
 20122                           intcon	equ	0xFF2
 20123                           intcon2	equ	0xFF1
 20124                           postinc0	equ	0xFEE
 20125                           plusw0	equ	0xFEB
 20126                           fsr0h	equ	0xFEA
 20127                           fsr0l	equ	0xFE9
 20128                           wreg	equ	0xFE8
 20129                           indf1	equ	0xFE7
 20130                           postdec1	equ	0xFE5
 20131                           fsr1h	equ	0xFE2
 20132                           fsr1l	equ	0xFE1
 20133                           indf2	equ	0xFDF
 20134                           postinc2	equ	0xFDE
 20135                           postdec2	equ	0xFDD
 20136                           plusw2	equ	0xFDB
 20137                           fsr2h	equ	0xFDA
 20138                           fsr2l	equ	0xFD9
 20139                           status	equ	0xFD8
 20140                           
 20141 ;; *************** function _EUSART1_Receive_ISR *****************
 20142 ;; Defined at:
 20143 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 20144 ;; Parameters:    Size  Location     Type
 20145 ;;		None
 20146 ;; Auto vars:     Size  Location     Type
 20147 ;;		None
 20148 ;; Return value:  Size  Location     Type
 20149 ;;                  1    wreg      void 
 20150 ;; Registers used:
 20151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20152 ;; Tracked objects:
 20153 ;;		On entry : 0/0
 20154 ;;		On exit  : 0/0
 20155 ;;		Unchanged: 0/0
 20156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20157 ;;      Params:         0       0       0       0       0       0       0
 20158 ;;      Locals:         0       0       0       0       0       0       0
 20159 ;;      Temps:          0       0       0       0       0       0       0
 20160 ;;      Totals:         0       0       0       0       0       0       0
 20161 ;;Total ram usage:        0 bytes
 20162 ;; Hardware stack levels used:    1
 20163 ;; This function calls:
 20164 ;;		Nothing
 20165 ;; This function is called by:
 20166 ;;		_INTERRUPT_InterruptManager
 20167 ;; This function uses a non-reentrant model
 20168 ;;
 20169                           
 20170                           	psect	text121
 20171  003F7C                     __ptext121:
 20172                           	opt stack 0
 20173  003F7C                     _EUSART1_Receive_ISR:
 20174                           	opt stack 19
 20175                           
 20176                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 20177                           
 20178                           ; BSR set to: 1
 20179                           ;incstack = 0
 20180  003F7C  A2AB               	btfss	4011,1,c	;volatile
 20181  003F7E  D002               	goto	i2l927
 20182                           
 20183                           ;eusart1.c: 206: {
 20184                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 20185  003F80  98AB               	bcf	4011,4,c	;volatile
 20186                           
 20187                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 20188  003F82  88AB               	bsf	4011,4,c	;volatile
 20189  003F84                     i2l927:
 20190                           
 20191                           ;eusart1.c: 210: }
 20192                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 20193  003F84  5034               	movf	_eusart1RxHead,w,c	;volatile
 20194  003F86  0D01               	mullw	1
 20195  003F88  0E00               	movlw	low _eusart1RxBuffer
 20196  003F8A  24F3               	addwf	prodl,w,c
 20197  003F8C  6ED9               	movwf	fsr2l,c
 20198  003F8E  0E01               	movlw	high _eusart1RxBuffer
 20199  003F90  20F4               	addwfc	prodh,w,c
 20200  003F92  6EDA               	movwf	fsr2h,c
 20201  003F94  CFAE FFDF          	movff	4014,indf2	;volatile
 20202  003F98  2A34               	incf	_eusart1RxHead,f,c	;volatile
 20203                           
 20204                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 20205  003F9A  0E27               	movlw	39
 20206  003F9C  6434               	cpfsgt	_eusart1RxHead,c	;volatile
 20207  003F9E  D002               	goto	i2l928
 20208                           
 20209                           ;eusart1.c: 217: {
 20210                           ;eusart1.c: 218: eusart1RxHead = 0;
 20211  003FA0  0E00               	movlw	0
 20212  003FA2  6E34               	movwf	_eusart1RxHead,c	;volatile
 20213  003FA4                     i2l928:
 20214                           
 20215                           ;eusart1.c: 219: }
 20216                           ;eusart1.c: 220: eusart1RxCount++;
 20217  003FA4  0100               	movlb	0	; () banked
 20218  003FA6  2BF5               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 20219                           
 20220                           ; BSR set to: 0
 20221  003FA8  0012               	return		;funcret
 20222  003FAA                     __end_of_EUSART1_Receive_ISR:
 20223                           	opt stack 0
 20224                           tosu	equ	0xFFF
 20225                           tosh	equ	0xFFE
 20226                           tosl	equ	0xFFD
 20227                           pclatu	equ	0xFFB
 20228                           pclath	equ	0xFFA
 20229                           tblptru	equ	0xFF8
 20230                           tblptrh	equ	0xFF7
 20231                           tblptrl	equ	0xFF6
 20232                           tablat	equ	0xFF5
 20233                           prodh	equ	0xFF4
 20234                           prodl	equ	0xFF3
 20235                           intcon	equ	0xFF2
 20236                           intcon2	equ	0xFF1
 20237                           postinc0	equ	0xFEE
 20238                           plusw0	equ	0xFEB
 20239                           fsr0h	equ	0xFEA
 20240                           fsr0l	equ	0xFE9
 20241                           wreg	equ	0xFE8
 20242                           indf1	equ	0xFE7
 20243                           postdec1	equ	0xFE5
 20244                           fsr1h	equ	0xFE2
 20245                           fsr1l	equ	0xFE1
 20246                           indf2	equ	0xFDF
 20247                           postinc2	equ	0xFDE
 20248                           postdec2	equ	0xFDD
 20249                           plusw2	equ	0xFDB
 20250                           fsr2h	equ	0xFDA
 20251                           fsr2l	equ	0xFD9
 20252                           status	equ	0xFD8
 20253                           tosu	equ	0xFFF
 20254                           tosh	equ	0xFFE
 20255                           tosl	equ	0xFFD
 20256                           pclatu	equ	0xFFB
 20257                           pclath	equ	0xFFA
 20258                           tblptru	equ	0xFF8
 20259                           tblptrh	equ	0xFF7
 20260                           tblptrl	equ	0xFF6
 20261                           tablat	equ	0xFF5
 20262                           prodh	equ	0xFF4
 20263                           prodl	equ	0xFF3
 20264                           intcon	equ	0xFF2
 20265                           intcon2	equ	0xFF1
 20266                           postinc0	equ	0xFEE
 20267                           plusw0	equ	0xFEB
 20268                           fsr0h	equ	0xFEA
 20269                           fsr0l	equ	0xFE9
 20270                           wreg	equ	0xFE8
 20271                           indf1	equ	0xFE7
 20272                           postdec1	equ	0xFE5
 20273                           fsr1h	equ	0xFE2
 20274                           fsr1l	equ	0xFE1
 20275                           indf2	equ	0xFDF
 20276                           postinc2	equ	0xFDE
 20277                           postdec2	equ	0xFDD
 20278                           plusw2	equ	0xFDB
 20279                           fsr2h	equ	0xFDA
 20280                           fsr2l	equ	0xFD9
 20281                           status	equ	0xFD8
 20282                           
 20283                           	psect	text122
 20284  000000                     __ptext122:
 20285                           	opt stack 0
 20286                           tosu	equ	0xFFF
 20287                           tosh	equ	0xFFE
 20288                           tosl	equ	0xFFD
 20289                           pclatu	equ	0xFFB
 20290                           pclath	equ	0xFFA
 20291                           tblptru	equ	0xFF8
 20292                           tblptrh	equ	0xFF7
 20293                           tblptrl	equ	0xFF6
 20294                           tablat	equ	0xFF5
 20295                           prodh	equ	0xFF4
 20296                           prodl	equ	0xFF3
 20297                           intcon	equ	0xFF2
 20298                           intcon2	equ	0xFF1
 20299                           postinc0	equ	0xFEE
 20300                           plusw0	equ	0xFEB
 20301                           fsr0h	equ	0xFEA
 20302                           fsr0l	equ	0xFE9
 20303                           wreg	equ	0xFE8
 20304                           indf1	equ	0xFE7
 20305                           postdec1	equ	0xFE5
 20306                           fsr1h	equ	0xFE2
 20307                           fsr1l	equ	0xFE1
 20308                           indf2	equ	0xFDF
 20309                           postinc2	equ	0xFDE
 20310                           postdec2	equ	0xFDD
 20311                           plusw2	equ	0xFDB
 20312                           fsr2h	equ	0xFDA
 20313                           fsr2l	equ	0xFD9
 20314                           status	equ	0xFD8
 20315                           
 20316                           	psect	rparam
 20317  0000                     tosu	equ	0xFFF
 20318                           tosh	equ	0xFFE
 20319                           tosl	equ	0xFFD
 20320                           pclatu	equ	0xFFB
 20321                           pclath	equ	0xFFA
 20322                           tblptru	equ	0xFF8
 20323                           tblptrh	equ	0xFF7
 20324                           tblptrl	equ	0xFF6
 20325                           tablat	equ	0xFF5
 20326                           prodh	equ	0xFF4
 20327                           prodl	equ	0xFF3
 20328                           intcon	equ	0xFF2
 20329                           intcon2	equ	0xFF1
 20330                           postinc0	equ	0xFEE
 20331                           plusw0	equ	0xFEB
 20332                           fsr0h	equ	0xFEA
 20333                           fsr0l	equ	0xFE9
 20334                           wreg	equ	0xFE8
 20335                           indf1	equ	0xFE7
 20336                           postdec1	equ	0xFE5
 20337                           fsr1h	equ	0xFE2
 20338                           fsr1l	equ	0xFE1
 20339                           indf2	equ	0xFDF
 20340                           postinc2	equ	0xFDE
 20341                           postdec2	equ	0xFDD
 20342                           plusw2	equ	0xFDB
 20343                           fsr2h	equ	0xFDA
 20344                           fsr2l	equ	0xFD9
 20345                           status	equ	0xFD8
 20346                           
 20347                           	psect	temp
 20348  000048                     btemp:
 20349                           	opt stack 0
 20350  000048                     	ds	1
 20351  0000                     int$flags	set	btemp
 20352  0000                     wtemp6	set	btemp+1
 20353                           tosu	equ	0xFFF
 20354                           tosh	equ	0xFFE
 20355                           tosl	equ	0xFFD
 20356                           pclatu	equ	0xFFB
 20357                           pclath	equ	0xFFA
 20358                           tblptru	equ	0xFF8
 20359                           tblptrh	equ	0xFF7
 20360                           tblptrl	equ	0xFF6
 20361                           tablat	equ	0xFF5
 20362                           prodh	equ	0xFF4
 20363                           prodl	equ	0xFF3
 20364                           intcon	equ	0xFF2
 20365                           intcon2	equ	0xFF1
 20366                           postinc0	equ	0xFEE
 20367                           plusw0	equ	0xFEB
 20368                           fsr0h	equ	0xFEA
 20369                           fsr0l	equ	0xFE9
 20370                           wreg	equ	0xFE8
 20371                           indf1	equ	0xFE7
 20372                           postdec1	equ	0xFE5
 20373                           fsr1h	equ	0xFE2
 20374                           fsr1l	equ	0xFE1
 20375                           indf2	equ	0xFDF
 20376                           postinc2	equ	0xFDE
 20377                           postdec2	equ	0xFDD
 20378                           plusw2	equ	0xFDB
 20379                           fsr2h	equ	0xFDA
 20380                           fsr2l	equ	0xFD9
 20381                           status	equ	0xFD8


Data Sizes:
    Strings     12
    Constant    143
    Data        24
    BSS         282
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    144     155
    BANK1           256      0     211
    BANK2           256     55     125
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartMessage$3594	PTR FTN()void  size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetIntFromUartData@dataRegArr(BANK0[10]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[29]), 
		 -> SynthReadData@eepromDataArray(BANK2[20]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[29]), 
		 -> SynthReadData@eepromDataArray(BANK2[20]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    GetUint16FromBitArray@bitarray	PTR unsigned char  size(2) Largest target is 12
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    FillArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[29]), 
		 -> SynthReadData@eepromDataArray(BANK2[20]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SynthReadData@TxMsg(BANK2[29]), SynthReadData@eepromDataArray(BANK2[20]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK2[29]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK1[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 64
		 -> sampleArray(BANK1[64]), 

    IOCB5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB5_DefaultInterruptHandler(), 

    IOCB5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB5_DefaultInterruptHandler(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB4_DefaultInterruptHandler(), 

    UpdateSynthFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacReadValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    FlashReadUart@data	PTR unsigned char  size(2) Largest target is 0

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK2[29]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB5_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_FillArray
    _FillArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_readUartMessage
    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateSynthFreq->_SWSPI_send_word
    _SynthReadData->_ReadIntFromEeprom
    _SetSynthOper->_InitSynth
    _GroupFlashMemory->_FlashReadUart
    _FlashReadUart->_GetIntFromUartData
    _DacSetValue->_SWSPI_send_word
    _GetIntFromUartData->_strtol
    _DacReadValue->_ReadIntFromEeprom
    _SynthLdDetect->_InitSynth
    _PLLInitialize->_InitSynth
    _InitSynth->_ReadIntFromEeprom
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _GroupSynthesizers->_SynthReadData

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  936176
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                      _SynthLdDetect
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  468229
                                            137 BANK0      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2899
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2  252377
                                            134 BANK0      3     1      2
                       _SetSynthOper
                      _SynthReadData
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateSynthFreq                                     11     9      2   29903
                                             42 BANK0     11     9      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       57    55      2  103500
                                            104 BANK0      2     0      2
                                              0 BANK2     55    55      0
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _SetSynthOper                                         1     1      0  118819
                                            111 BANK0      1     1      0
                          _InitSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                4     1      3   13086
                                            134 BANK0      3     1      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4498
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     33    33      0    8557
                                             35 COMRAM     7     7      0
                                              0 BANK0     26    26      0
                   _WriteUartMessage
                          _ZeroArray
                             ___wmul
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     3     1      2   39925
                                            134 BANK0      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       95    93      2   21465
                                             39 BANK0     95    93      2
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                 _GetIntFromUartData
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     370
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    7960
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0   10438
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2  132256
                                            134 BANK0      3     1      2
                       _DacReadValue
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                         15    13      2   29330
                                             42 BANK0     15    13      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  33    25      8    6841
                                              6 BANK0     33    25      8
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2723
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _DacReadValue                                        18    16      2  102768
                                            104 BANK0     18    16      2
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   15177
                                            134 BANK0      3     1      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    7607
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2    7753
                                            134 BANK0      3     1      2
                     _SetChannelMode
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    7691
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SynthLdDetect                                        0     0      0  111663
                     _BlinkErrorLeds
                          _InitSynth
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     904
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0     294
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     294
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0     196
          _IOCB4_SetInterruptHandler
          _IOCB5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCB5_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _IOCB4_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    7539
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1610
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2899
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1452
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  221799
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0  112249
                          _FillArray
                          _InitSynth
 ---------------------------------------------------------------------------------
 (4) _InitSynth                                            7     7      0  110669
                                            104 BANK0      7     7      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  109550
                                            104 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    4319
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     338
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     186
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5   10380
                                             40 COMRAM     5     0      5
                                             38 BANK0      4     4      0
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1595
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    4135
                                             36 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                          _FillArray
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (6) _FillArray                                            5     0      5    1580
                                             31 COMRAM     5     0      5
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _ReadIntFromEeprom                                   23    19      4   94594
                                             81 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (5) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          16    16      0  104220
                                             81 BANK0     16    16      0
                  _ADC_GetConversion
                   _FlashSampleWrite
              _GetUint16FromBitArray
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (5) _pow                                                 17    11      6   87853
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (6) _log                                                  5     2      3   28382
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _exp                                                  9     6      3   47434
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (7) _ldexp                                                7     2      5     539
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (7) _floor                                                8     5      3   11854
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     911
                                             24 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           12     5      7   13195
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    1782
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3    3476
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _GetUint16FromBitArray                               11     7      4     440
                                             23 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6     992
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                         18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (13) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCB4_ISR
                          _IOCB5_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCB5_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _IOCB4_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _GetUint16FromBitArray
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _FillArray
         _memset
       _InitSynth
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
         _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCB4_SetInterruptHandler
         _IOCB5_SetInterruptHandler
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _SynthLdDetect
     _BlinkErrorLeds
     _InitSynth
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
       _SwSpi_Set_CE_Pin
     ___awmod
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacReadValue
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         ___wmul
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
     _GroupSynthesizers *
       _SetSynthOper
         _InitSynth
           _ReadIntFromEeprom
             _EepromRead
               _DATAEE_ReadByte
             ___awtoft
               ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _pow
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _FillArray
                 _memset
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _StoreIntInEeprom
             _EepromWrite
               _DATAEE_WriteByte
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _UpdateSynthFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
     _IOCB4_ISR
       Absolute function(Fake) *
       _IOCB4_DefaultInterruptHandler *
     _IOCB5_ISR
       Absolute function(Fake) *
       _IOCB5_DefaultInterruptHandler *
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     37      7D       8       48.8%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      D3       6       82.4%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     90      9B       4       96.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     232       9        0.0%
DATA                 0      0     232      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 14 11:39:06 2018

              __size_of_SendSystemStartAck 000C                          ??_GetMcuFwVersion 0024  
               __end_of_keepAliveSignalLed 4206                               ___altoft@exp 002F  
                 _eusart1TxBufferRemaining 01D2                         readUartMessage@idx 00ED  
                 GetIntFromUartData@idxCon 0084                            _GroupControlMcu 3EEC  
              __end_of_keepAliveSignalUart 42E4                              ___altoft@sign 0030  
               __size_of_FLASH_IsWriteDone 000E                                         l60 3532  
                 GetIntFromUartData@recVal 007B                   GetIntFromUartData@retVal 007C  
                      __end_of_BlinkOkLeds 3772                            _SWSPI_send_word 2F4C  
                      ___wmul@multiplicand 001A         __size_of_IOCB4_SetInterruptHandler 000A  
                          _timer0ReloadVal 0046                 ?_IOCB4_SetInterruptHandler 0018  
                             __CFG_CP0$OFF 000000                               __CFG_CP1$OFF 000000  
                             __CFG_CP2$OFF 000000                               __CFG_CP3$OFF 000000  
                             ___ftadd@exp1 0083                               ___ftadd@exp2 0082  
                             ___ftadd@sign 0081                                ?_MEMORY_ISR 0001  
                                      l122 3F40                                        l202 1616  
                                      l211 14AC                                        l203 1470  
                                      l221 1564                                        l213 14C4  
                                      l126 0FC8                                        l222 1528  
                                      l206 147C                                        l127 0E8E  
                                      l215 14DC                                        l207 14A6  
                                      l320 22DA                                        l224 1584  
                                      l217 14FA                                        l234 3E04  
                                      l330 1126                                        l226 15BC  
                                      l411 284A                                        l235 3DEE  
                                      l331 125C                                        l219 1500  
                                      l412 2860                                        l332 1148  
                                      l228 15C4                                        l333 1164  
                                      l318 22B8                                        l334 1174  
                                      l326 10CA                                        l319 22B8  
                                      l335 11B2                                        l512 0D36  
                                      l328 1116                                        l513 0D18  
                                      l530 1940                                        l507 0C1A  
                                      l419 271E                                        l523 18C8  
                                      l540 3380                                        l524 188A  
                                      l509 0E24                                        l517 0E06  
                                      l541 3368                                        l542 3374  
                                      l550 07B0                                        l534 196A  
                                      l711 395C                                        l703 3948  
                                      l519 0E58                                        l535 19CA  
                                      l712 3966                                        l704 3952  
                                      l552 0898                                        l528 1950  
                                      l545 33A4                                        l553 08A6  
                                      l529 18E2                                        l650 388A  
                                      l730 3C80                                        l570 29CE  
                                      l546 33B0                                        l651 38A4  
                                      l643 2FF2                                        l731 3C58  
                                      l555 08B2                                        l652 38AE  
                                      l660 2C54                                        l740 3C6C  
                                      l732 3C62                                        l564 2988  
                                      l741 3C76                                        l565 2960  
                                      l566 2966                                        l902 3AE2  
                                      l558 0916                                        l751 3CBC  
                                      l639 2F90                                        l664 391A  
                                      l752 3C94                                        l568 29F4  
                                      l904 3B08                                        l665 38DE  
                                      l649 38BE                                        l657 2C1A  
                                      l761 3CA8                                        l753 3C9E  
                                      l569 29C8                                        l682 3906  
                                      l674 38F2                                        l666 38E8  
                                      l762 3CB2                                        l683 3910  
                                      l675 38FC                                        l659 2C48  
                                      l915 3C2C                                        l772 41A8  
                                      l916 3C50                                        l693 3970  
                                      l773 41A0                                        l917 3C4E  
                                      l694 3934                                        l695 393E  
                                      l777 41A4                               __CFG_CPB$OFF 000000  
                             __CFG_CPD$OFF 000000                       readUartMessage@chRec 00EF  
                        ??_Make32bitsArray 001E                                 _SYNTH_REGS 0601  
                                      _exp 1272                                        _log 1E84  
                                      _pow 1B88                               ___awmod@sign 001D  
                                      prod 000FF3                                        tosl 000FFD  
                                      wreg 000FE8             ?_InitSystemApplicationManagers 0001  
                             __CFG_LVP$OFF 000000                 __end_of_FlashReadCondition 21E0  
                           InitSynth@cType 00CC                               ___ftdiv@cntr 0063  
                       __size_of_IOCB4_ISR 0022                         __size_of_IOCB5_ISR 0022  
                             ___ftdiv@sign 0068                                       l1052 2D42  
                                     l1053 2CFA                                       l1302 4084  
                                     l1310 4136                                       l1055 2D1A  
                                     l2031 3FC4                                       l1063 3E3E  
                                     l1303 4078                                       l1311 4128  
                                     l1056 2D1C                                       l2032 3FB4  
                                     l2201 17D2                                       l1321 31BA  
                                     l1305 407E                                       l1410 35CA  
                                     l2202 180E                                       l1322 31CA  
                                     l2043 1BD2                                       l1323 31DA  
                                     l1331 3CEC                                       l2044 1BC2  
                                     l1324 31E2                                       l1332 3CD2  
                                     l1340 3E72                                       l1317 320A  
                                     l1325 31EA                                       l1341 3E56  
                                     l2046 1BEA                                       l1430 377C  
                                     l2206 4242                                       l1510 0B60  
                                     l1326 31FA                                       l1334 3CD8  
                                     l2047 1C74                                       l1431 3780  
                                     l1415 1D58                                       l1335 3CDE  
                                     l1343 3E64                                       l1408 35CE  
                                     l2048 1C52                                       l1432 37AE  
                                     l1512 0B8E                                       l1169 3F64  
                                     l1409 3596                                       l2313 2ADC  
                                     l2241 128C                                       l2305 1EA4  
                                     l2049 1CFA                                       l1441 3D6C  
                                     l1417 1D78                                       l2314 2A5E  
                                     l1426 37B2                                       l1442 3D42  
                                     l1506 0AE6                                       l1522 25F4  
                                     l2243 12C6                                       l2307 1EC8  
                                     l1427 3774                                       l1419 1DEE  
                                     l2252 28A4                                       l2244 1300  
                                     l1436 3842                                       l1508 0B14  
                                     l1292 3EFE                                       l2261 30BC  
                                     l2253 2896                                       l2245 1330  
                                     l1429 3778                                       l1293 3EF2  
                                     l2270 2B7E                                       l2246 145A  
                                     l1438 3880                                       l2182 168A  
                                     l2255 28BE                                       l2247 1430  
                                     l1615 3996                                       l1447 20A8  
                                     l1295 3EF8                                       l2256 293A  
                                     l1616 39AA                                       l1448 1FCE  
                                     l2192 1706                                       l2184 16A2  
                                     l2265 2B0E                                       l2193 1716  
                                     l2186 16F6                                       l2267 2B58  
                                     l2283 4158                                       l2195 1730  
                                     l1900 2460                                       l1396 3AAE  
                                     l1821 2E4E                                       l1901 2470  
                                     l2269 2B8A                                       l1397 3A92  
                                     l2293 4176                                       l1822 2E38  
                                     l2278 401E                                       l2198 1742  
                                     l1903 2488                                       l2199 17AE  
                                     l1824 2E76                                       l1904 2498  
                                     l1920 238A                                       l2288 4044  
                                     l1592 3448                                       l1825 2E6C  
                                     l1921 237A                                       l1593 3460  
                                     l1818 2E1A                                       l1914 3B6E  
                                     l1819 2E10                                       l1595 3486  
                                     l1908 40AC                                       l1596 347A  
                                     l1853 1A58                                       l1926 23AE  
                                     l1918 2312                                       l1598 3498  
                                     l1863 1AB4                                       l1927 23A2  
                                     l1791 34F8                                       l1872 1AF2  
                                     l1864 1AAA                                       l1688 33EC  
                                     l1792 3502                                       l1784 34BE  
                                     l1873 1AE8                                       l1849 1A2E  
                                     l1689 33E0                                       l1929 23CA  
                                     l1793 3510                                       l1785 34CA  
                                     l1882 24FC                                       l1858 1ABE  
                                     l1890 3154                                       l1954 326E  
                                     l1875 1B16                                       l1891 3184  
                                     l1787 34E0                                       l1955 3262  
                                     l1884 2524                                       l1876 1B32  
                                     l1964 360A                                       l1788 34D8  
                                     l1885 2562                                       l1877 1B62  
                                     l1965 35FE                                       l1886 2588  
                                     l1958 32A2                                       l1975 37E0  
                                     l1799 3D88                                       l1959 32B0  
                                     l1976 37D4                                       l1968 3632  
                                     l1897 2406                                       l1969 3640  
                                     l1899 242E                                       l6406 36C0  
                                     l8104 1E42                                       l7066 31B0  
                                     l7332 3FB4                                       ?_exp 0097  
                                     ?_log 008E                                       l8118 0C12  
                                     l8232 3522                                       l8064 1D50  
                                     l8146 0D18                                       l8412 270E  
                                     l7550 3832                                       l8158 0E06  
                                     l8246 3578                                       l8422 2754  
                                     l8086 1DDE                                       l7634 1430  
                                     l8338 11A2                                       l8276 2CF2  
                                     l6668 371E                                       l8348 1212  
                                     l8550 08AA                                       l8544 089E  
                                     l7762 2C12                                       l7690 3C1A  
                                     l8634 25E4                                       l7932 2FBC  
                                     l8646 2670                                       l7928 2FAE  
                                     l8682 2788                                       ?_pow 00A0  
                                     l8782 0E86                                       l8694 284A  
                                     STR_1 0690                                       STR_2 0690  
                                     STR_3 0690                                       STR_4 0690  
                                     STR_5 0690                                       STR_6 0690  
                                     STR_7 0690                                       STR_8 0690  
                                     STR_9 0690                         EepromWrite@address 001C  
                                     _LATA 000F89                                       _LATB 000F8A  
                                     _LATC 000F8B                                       _LATD 000F8C  
                                     _LATE 000F8D                                       u7001 250C  
                                     u7120 2B2E                                       u8110 1E42  
                                     u8040 42D4                                       u6520 2E80  
                                     u7080 28B0                                       u7128 2B32  
                                     u8041 42D0                                       u8121 1E7A  
                                     u6610 1A20                                       u8300 360E  
                                     u5820 34E4                                       u5900 41F8  
                                     u6710 1AC6                                       u7175 3E4C  
                                     u6480 2E02                                       u6640 1A4A  
                                     u7176 3E4E                                       u8080 1D92  
                                     u6801 2416                                       u8401 1098  
                                     u7610 2C66                                       u8330 3578  
                                     u6571 19EC                                       u5684 35BE  
                                     u6740 1AFA                                       u7380 130A  
                                     u9060 2DEE                                       u7540 37A6  
                                     u7700 4010                                       u5685 35B8  
                                     u6581 1A00                                       u6670 1A88  
                                     u7390 130C                                       u8190 0C4E  
                                     u5918 41FA                                       u8510 2754  
                                     u8270 3272                                       u8255 3EE8  
                                     u9207 353A                                       u8256 3EEA  
                                     u7800 2F60                                       u7545 379C  
                                     u9217 354A                                       u8521 1838  
                                     u6930 23B4                                       u7490 1C38  
                                     u9058 15F0                                       u9227 355A  
                                     u9059 160E                                       u8380 2D20  
                                     u8460 1212                                       u6781 23EE  
                                     u9237 356A                                       u7830 2FEC  
                                     u7910 1692                                       u8630 3356  
                                     u6871 22F6                                       u9247 36E6  
                                     u6960 30E4                                       u7680 4040  
                                     u8800 2670                                       u8640 3358  
                                     u9257 3700                                       u8481 300A  
                                     u6890 2330                                       u8490 304C  
                                     u8395 2D3E                                       u9267 2C68  
                                     u8396 2D40                                       u8820 2240  
                                     u7940 16CC                                       u8740 0906  
                                     u6981 24E4                                       u9277 3744  
                                     u9197 124A                                       u8670 3392  
                                     u8750 090A                                       u8815 21EA  
                                     u6895 2328                                       u9287 375E  
                                     u8495 3040                                       u8840 2284  
                                     u6968 30E6                                       u8920 0F68  
                                     u7960 16DC                                       u8680 3394  
                                     u9297 0F54                   ??_SwSpi_Set_Synth_Le_Pin 0019  
                                     _WPUB 000F61                              _EUSART1_Write 3C18  
                                     _crc8 3A80                    ??_InitAdcApplicationMgr 0018  
                                     _data 013B                                       _main 3436  
                             ___ftpack@arg 0018                              ?_EUSART1_Read 0001  
                             ___ftpack@exp 001B                            _TMR0_StartTimer 4334  
                          __end_of_DacInit 2866                                       fsr0h 000FEA  
                                     fsr1h 000FE2                                       fsr2h 000FDA  
                                     fsr0l 000FE9                                       indf1 000FE7  
                                     indf2 000FDF                                       fsr1l 000FE1  
                                     fsr2l 000FD9                                       btemp 0048  
                            __CFG_BORV$190 000000                                       exp@x 0097  
                                     log@x 008E                          ?_FLASH_WriteBlock 001D  
                         ?_ClearMcuRunTime 0001                                       pow@x 00A0  
                                     pow@y 00A3                                       prodh 000FF4  
                                     prodl 000FF3                  GroupStatusAndVersion@data 00E6  
            __size_of_CheckFlashPrecentage 00AE                                       start 00DC  
                            __CFG_IESO$OFF 000000                          DacReadValue@TxMsg 00D1  
                      __end_of_EepromWrite 42CA                         ??_FLASH_WriteBlock 0023  
                            _adcSampleMode 003D                               ___ftmul@cntr 0076  
                             ___param_bank 000000                               ___ftmul@sign 0077  
                           _BlinkErrorLeds 36B6                               ___fttol@exp1 0086  
                __size_of_DATAEE_WriteByte 0036                                      ??_exp 0031  
                                    ??_log 0031                               ___fttol@lval 0082  
                                    ??_pow 0031                    __end_of_TMR0_Initialize 3EB8  
                   _ReadIntFromEeprom$3588 00BC                     _ReadIntFromEeprom$3589 00BF  
           __size_of_OSCILLATOR_Initialize 000E              __end_of_OSCILLATOR_Initialize 42BC  
                                    ?_crc8 0018                 SWSPI_DAC_send_bits@phrType 001C  
                                    ?_main 0001                                      _EEADR 000FA9  
                          __end_of___ftadd 1B88                     GetUint16FromBitArray@i 0021  
                                    STR_10 0690                                      STR_11 0690  
                                    STR_12 0690                                      STR_13 0690  
                                    STR_14 0690                                      STR_15 0690  
                                    STR_16 0690                                      STR_17 0690  
          __size_of_SwSpi_Set_Dac_Sync_Pin 001C                            __end_of___awmod 351A  
                          __end_of___ftdiv 25BA          __end_of_IOCB4_SetInterruptHandler 4318  
                          __end_of___ftneg 40BA                            __end_of___lldiv 32C2  
                               _EepromRead 4318                            __end_of___ftmul 24D2  
                                    _T0CON 000FD5                            __end_of___llmod 3652  
                          __end_of___ftsub 3B98                            __end_of___fttol 23DC  
                             _SYNTH_ADDRES 0635                             __CFG_DEBUG$OFF 000000  
                          InitSynth@regNum 00CE                            __end_of___lwmod 3BDA  
                      StoreIntInEeprom@idx 0029                                      i2l921 3DD8  
                                    i2l922 3DD4                                      i2l850 005E  
                                    i2l852 006A                                      i2l927 3F84  
                                    i2l855 007A                                      i2l928 3FA4  
                                    i2l857 0086                                      i2l859 0090  
                      StoreIntInEeprom@val 0028                                      _TMR0H 000FD7  
                                    _TMR0L 000FD6                                      _TRISA 000F92  
                                    _TRISB 000F93                                      _TRISC 000F94  
                                    _TRISD 000F95                                      _TRISE 000F96  
                      _SWSPI_DAC_send_bits 3882          __size_of_TMR0_SetInterruptHandler 000A  
                            __CFG_WRT0$OFF 000000                              __CFG_WRT1$OFF 000000  
               __end_of_GetIntFromUartData 1E84                              __CFG_WRT2$OFF 000000  
                      ___lmul@multiplicand 001E                  ?_TMR0_SetInterruptHandler 0018  
                            __CFG_WRT3$OFF 000000                               ___lltoft@exp 0028  
                     _EUSART1_Transmit_ISR 3DAC                             __CFG_EBTR0$OFF 000000  
                           __CFG_FCMEN$OFF 000000                             __CFG_EBTR1$OFF 000000  
                           __CFG_EBTR2$OFF 000000                             __CFG_EBTR3$OFF 000000  
                        ?_WriteUartMessage 0019                           __end_of_TMR0_ISR 2F4C  
                            __CFG_WRTB$OFF 000000                              __CFG_WRTC$OFF 000000  
                            __CFG_WRTD$OFF 000000                            DacSetValue@data 008A  
                          _DATAEE_ReadByte 4246                             __CFG_EBTRB$OFF 000000  
                            ___awtoft@sign 0023                    __end_of_PIN_MANAGER_IOC 42A0  
                                    crc8@i 001F                                      _make8 3772  
           __size_of_SWSPI_Synth_send_bits 00C6                      __end_of_GetMcuRunTime 269E  
                                    _count 0138                                      _floor 2866  
                                    _ldexp 2AF4                                      _frexp 3094  
                                    _errno 0134              __end_of_SWSPI_Synth_send_bits 2C88  
                          __end_of_isalpha 4026                            __end_of_isdigit 4160  
                                    _group 00F3             __size_of_GetUint16FromBitArray 0068  
                       ??_WriteUartMessage 001D                         __CFG_MCLRE$EXTMCLR 000000  
                            ___ftpack@sign 001C                    ??_GroupStatusAndVersion 0031  
            __end_of_GetUint16FromBitArray 35EC                            __end_of_isspace 404C  
                           ?_EUSART1_Write 0001                                ?_AdcConvert 0001  
                           __CFG_BOREN$OFF 000000                            __end_of_isupper 417E  
                                    pclath 000FFA                                      tablat 000FF5  
                        ??_UpdateSynthFreq 0030                                      pow@yi 00AD  
                           ??_EUSART1_Read 0018                             FillArray@array 0020  
                                    plusw0 000FEB                                      plusw2 000FDB  
                                    status 000FD8                             FillArray@value 0024  
                                    wtemp6 0049                       ReadIntFromEeprom@idx 00C7  
                           __CFG_HFOFST$ON 000000                            __end_of_toupper 4246  
           SwSpi_Set_Synth_Le_Pin@cPinMode 0018                     __size_of_SynthLdDetect 00D6  
                  __end_of_GroupControlMcu 3F1C                        __size_of_MEMORY_ISR 0004  
                           __CFG_PBADEN$ON 000000                                exp@exponent 009D  
           CheckFlashPrecentage@precentage 007C                       ?_SWSPI_DAC_send_bits 001A  
                   __end_of_BlinkErrorLeds 3714            ??_IOCB4_DefaultInterruptHandler 0001  
                              ldexp@newexp 0091                    __end_of_SWSPI_send_word 2FF6  
                              _BlinkOkLeds 3714                    WriteUartMessage@dataBuf 0019  
                          __initialization 32C2                                log@exponent 0091  
                             __end_of_crc8 3ACE                 __end_of_EUSART1_Initialize 3D3C  
                             __end_of_main 34AA                         DacReadValue@regNum 00CC  
                        __end_of_IOCB4_ISR 4122                          __end_of_IOCB5_ISR 4100  
                  FLASH_ReadByte@flashAddr 0018                ?_INTERRUPT_InterruptManager 0001  
                         __end_of_GroupDAC 3E84                     __size_of_SynthReadData 02B0  
                          _readUartMessage 1468                           __end_of_GroupAdc 4142  
                                   ??_crc8 001C                                     ??_main 0031  
                            ___fttol@sign1 0081                          ?_SwSpi_Set_CE_Pin 0018  
                            __activetblptr 000002                    __size_of_FLASH_ReadByte 0012  
                         __end_of_ResetMcu 42AE                         __size_of_FillArray 001C  
                             _writeAddress 003E                         ??_SwSpi_Set_CE_Pin 0019  
                    ?_EUSART1_Transmit_ISR 0001                    __end_of_TMR0_StartTimer 4338  
                                   ?_make8 0018                                     _ADCON0 000FC2  
                                   _ADCON1 000FC1                                     _ADCON2 000FC0  
                                   ?_floor 008F                  FLASH_WriteBlock@writeAddr 001D  
                                   ?_ldexp 008E                                     ?_frexp 0018  
                         __end_of___altoft 3436                           ___llmod@dividend 0018  
                                   _ADRESH 000FC4                                     _ADRESL 000FC3  
                                   _EEDATA 000FA8                                  ??_DacInit 00C8  
                                   _EECON2 000FA7                           __end_of___awtoft 3DAC  
                                   _ANSELA 000F38                                     _ANSELB 000F39  
                                   _ANSELC 000F3A                                     _ANSELD 000F3B  
                                   _ANSELE 000F3C                           __end_of___ftpack 2EA0  
           ?_IOCB5_DefaultInterruptHandler 0001                           __end_of___lltoft 382A  
                        _FlashReadUart$609 00DC                          ?_FlashSampleWrite 002D  
                                   i2l1123 2ED0                                     i2l1124 2EF2  
                                   i2l2021 3BC6                                     i2l1125 2F14  
                                   i2l2022 3BD0                                     i2l1126 2F36  
                                   i2l2017 3BAE                                     i2l2018 3BA6  
                           __CFG_WDTEN$OFF 000000                       StoreIntInEeprom@data 0021  
                                   _TABLAT 000FF5                                _EepromWrite 42BC  
                                   _RCREG1 000FAE                           __end_of___lwtoft 40DE  
                  __size_of_FlashEreaseMem 0052                  __size_of_FLASH_EraseBlock 0034  
                                   _RCSTA1 000FAB                          SynthReadData@data 00C8  
          __size_of_SwSpi_Set_Synth_Le_Pin 003C                                     _OSCCON 000FD3  
                                   _SPBRG1 000FAF                     _SwSpi_Set_Dac_Sync_Pin 419C  
                  __size_of_SwSpi_Data_Pin 0056                   GroupSynthesizers@request 00E8  
                       ??_FlashSampleWrite 0060                                     _TXREG1 000FAD  
                                   _TXSTA1 000FAC                         __size_of_InitSynth 0276  
                    ??_SWSPI_DAC_send_bits 001B                             _Timer0_SynthLd 00FA  
                 __end_of_GroupFlashMemory 3D04                            ?_BlinkErrorLeds 0001  
                           __CFG_PWRTEN$ON 000000                             __CFG_XINST$OFF 000000  
                             _synthLdRxCnt 0043                               _synthLdTxCnt 0042  
                                   _cState 00F4                                     ___ftge 3124  
                                   ___lmul 3986                  SWSPI_Synth_send_bits@data 0025  
                                   ___wmul 404C                                  ??___ftadd 007E  
                SWSPI_Synth_send_bits@mask 0080                                  ??___awmod 001C  
                                ??___ftdiv 0060                                  ??___ftneg 001B  
                                ??___lldiv 0020                                  ??___ftmul 006F  
                    __end_of_PLLInitialize 3C18                                  ??___llmod 0020  
                                ??___ftsub 002F                                  ??___fttol 007C  
                                ??___lwmod 0005             SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                         ?_TMR0_Initialize 0001                                     _memset 3FAA  
                       __end_of_DAC_ADDRES 0657                                     clear_0 3308  
                                   clear_1 3314                                     clear_2 3320  
                                   clear_3 332C                            ___awmod@divisor 001A  
                      __size_of_AdcConvert 021C                            ___awmod@counter 001C  
                  __end_of_DATAEE_ReadByte 425A                                ?_EepromRead 0001  
                                   _strtol 164A                                     floor@i 0092  
                    __end_of_SwSpi_Clk_Pin 3986                                     floor@x 008F  
                    ___ftmul@f3_as_product 0073                              _SynthLdDetect 2948  
                 SWSPI_DAC_send_bits@count 001B                 FlashSampleWrite@channelNum 002F  
                             __pdataCOMRAM 003E                                  ??_isalpha 001B  
                                ??_isdigit 0018                      __end_of_FlashReadUart 1272  
                         __end_of_testLeds 3584                              ?_SetMcuSystem 0001  
                             __mediumconst 0000                                  ??_isspace 0018  
                                   tblptrh 000FF7                                  ??_isupper 0018  
                                   tblptrl 000FF6                                     tblptru 000FF8  
                 ADC_GetConversion@channel 001C                            ??_EUSART1_Write 0018  
 TMR0_SetInterruptHandler@InterruptHandler 0018  IOCB5_SetInterruptHandler@InterruptHandler 0018  
IOCB4_SetInterruptHandler@InterruptHandler 0018               __size_of_InitRxMessageParams 0028  
                         ?_PIN_MANAGER_IOC 0001                      ReadIntFromEeprom@base 00B8  
                          _eusart1RxBuffer 0100                                  ??_toupper 0018  
                       __size_of_ZeroArray 001E              __size_of_INTERRUPT_Initialize 0004  
                            _SynthReadData 069E                            _eusart1TxBuffer 0200  
                          _GetMcuFwVersion 094E                           __end_ofexp@coeff 0675  
                        _SYSTEM_Initialize 41D4                           __end_oflog@coeff 0690  
                               __accesstop 0060                    __end_of__initialization 3332  
                               ___altoft@c 0087                              ZeroArray@size 0022  
                               ___ftadd@f1 0078                                 ___ftadd@f2 007B  
                               ___ftge@ff1 0018                                 ___ftge@ff2 001B  
                       ?_SYSTEM_Initialize 0001                               eval_poly@res 008B  
                            ___rparam_used 000001                                 ___ftdiv@f1 0029  
                               ___ftdiv@f2 002C                                 ___ftdiv@f3 0064  
                         ?_GroupControlMcu 00E6               GroupStatusAndVersion@request 00E9  
                             InitSynth@idx 00CD                          __end_of_FillArray 41D4  
                               ___ftneg@f1 0018                                 ___awtoft@c 0020  
                  __end_of_readUartMessage 164A                   WriteUartMessage@dataSize 001B  
                               ___ftmul@f1 0069                                 ___ftmul@f2 006C  
                         ?_SWSPI_send_word 0029                               ?_DacSetValue 008A  
                               ___ftsub@f1 0084                                 ___ftsub@f2 0087  
                               ___fttol@f1 0078                            _Make32bitsArray 382A  
                           __pcstackCOMRAM 0001                               __pidataBANK1 4280  
                      ??_SYSTEM_Initialize 001C                                  ?_TMR0_ISR 0001  
                      DacReadValue@byteIdx 00D8                                 ___lltoft@c 0020  
                      DacReadValue@byteNum 00CD                              __end_of_make8 37CE  
                      DacReadValue@readVal 00CE                           _DATAEE_WriteByte 3E1A  
                            __end_of_floor 2948                              __end_of_ldexp 2BC2  
                            __end_of_frexp 3124      __end_of_IOCB4_DefaultInterruptHandler 4340  
   __size_of_IOCB4_DefaultInterruptHandler 0002              _IOCB4_DefaultInterruptHandler 433E  
                   _SwSpi_Set_Synth_Le_Pin 3C90                       GroupFlashMemory@data 00E6  
                               ___lwtoft@c 0020                ??_IOCB4_SetInterruptHandler 001A  
                           ?_SynthLdDetect 0001            __end_of_DAC_DEFAULT_INIT_VALUES 0653  
                     __end_of_EUSART1_Read 3B12                               ??_MEMORY_ISR 0001  
                __size_of_StoreIntInEeprom 0038                     __size_of_SetMcuRunTime 0044  
                   ??_EUSART1_Transmit_ISR 0001                          __end_of_InitSynth 0E5E  
                           ??_SetMcuSystem 001C                      TMR0_ISR@CountCallBack 0031  
            SwSpi_Set_Synth_Le_Pin@phrType 0019                    GroupFlashMemory@request 00E8  
                       _keepAliveSignalLed 41EE                          make8@dataLocation 001C  
              __end_of_EUSART1_Receive_ISR 3FAA                FLASH_WriteBlock@GIEBitValue 002B  
                             GroupDAC@data 00E6                              ?_SetSynthOper 0001  
                                  ??_make8 001D                                    ??_floor 0031  
                         ?_TMR0_StartTimer 0001                                    ??_ldexp 0093  
                                  ??_frexp 001D                  __end_of_SYSTEM_Initialize 41EE  
                          _AdcConvert$3587 00BD                             ?_SynthReadData 00C8  
                            _eusart1RxHead 0034                       GetMcuFwVersion@TxMsg 0064  
                            _eusart1TxHead 0036                              _eusart1RxTail 0033  
                               __pbssBANK0 00F0                                 __pbssBANK1 0100  
                               __pbssBANK2 0200                              _eusart1TxTail 0035  
                      ?_keepAliveSignalLed 0001                         __size_of_eval_poly 00D6  
                          __CFG_PLLCFG$OFF 000000                                 _channelArr 0642  
                                ?_GroupDAC 00E6                                 __pnvCOMRAM 0046  
                                ?_GroupAdc 00E6             __size_of_InitAdcApplicationMgr 0006  
               __end_of_SendSystemStartAck 42F0              __end_of_InitAdcApplicationMgr 4330  
                      __size_of_EepromRead 000A                         __end_of_MEMORY_ISR 433C  
                                ?_ResetMcu 0001                         _FlashReadCondition 20D4  
          ??_InitSystemApplicationManagers 0031                         __CFG_CCP2MX$PORTC1 000000  
                                  ?___ftge 0018                             FlashReadUart@j 00E0  
         __end_of_TMR0_SetInterruptHandler 4304                                    ?___lmul 001A  
                                  ?___wmul 0018                                 ??_TMR0_ISR 0006  
                       __CFG_CCP3MX$PORTB5 000000                         SetChannelMode@data 002C  
                     ??_keepAliveSignalLed 0018                          __end_of_ZeroArray 419C  
                                ?___altoft 0087                                    ?_memset 0018  
                        _ReadIntFromEeprom 1FAE                             ___lmul@product 0022  
                      ?_FlashReadCondition 0001         __size_of_IOCB5_SetInterruptHandler 000A  
                                ?___awtoft 0020                                  ?___ftpack 0018  
                             GroupAdc@data 00E6                           FlashReadUart@idx 00E4  
                 GetUint16FromBitArray@res 001F                           FlashReadUart@val 00D4  
               ?_IOCB5_SetInterruptHandler 0018                                  ?___lltoft 0020  
                        _synthLdRxArrayCnt 0038                  __size_of_FLASH_WriteBlock 00BC  
                  __size_of_ADC_Initialize 0016                 FlashSampleWrite@sampleData 002D  
                           _FLASH_ReadByte 426E                                  ?___lwtoft 0020  
             __end_of_CheckFlashPrecentage 2DF2                         ?_ReadIntFromEeprom 00B1  
                                  ?_strtol 0026                           ?_DATAEE_ReadByte 0001  
               GetMcuFwVersion@compileData 0060                            _UpdateSynthFreq 1820  
                          _Timer0_Sampling 00F9               __size_of_keepAliveSignalUart 000C  
                       SynthReadData@TxMsg 0246                    __end_of_GetMcuFwVersion 0BE8  
                       SynthReadData@cType 027A                                    _OSCCON2 000FD2  
                           ??_SetSynthOper 0031                                    _TBLPTRH 000FF7  
                                  _TBLPTRL 000FF6                                    _TBLPTRU 000FF8  
                                  _OSCTUNE 000F9B                                    _SPBRGH1 000FB0  
                        _synthLdTxArrayCnt 0037                        ??_ReadIntFromEeprom 00B5  
                                  _DacInit 2782                      GetIntFromUartData@num 007A  
                         GetMcuRunTime@idx 006D                               ??_AdcConvert 00B1  
                     ??_FlashReadCondition 0024                             _FlashEreaseMem 39DC  
                         _FLASH_EraseBlock 3EB8             __size_of_GroupStatusAndVersion 0024  
                           _SwSpi_Data_Pin 38DA                  _IOCB4_SetInterruptHandler 430E  
                     DATAEE_WriteByte@bAdd 0019              __end_of_GroupStatusAndVersion 4096  
                  __end_of_Make32bitsArray 3882                                 ??_GroupDAC 0031  
                               ??_GroupAdc 0031                              _SetMcuRunTime 3B12  
                       _GetIntFromUartData 1D08                         FlashReadUart@TxMsg 008F  
                    GroupSynthesizers@data 00E6                                    __Hparam 0000  
                               ??_ResetMcu 002C                  __size_of_WriteUartMessage 0036  
                             ?_BlinkOkLeds 0001                                    __Lparam 0000  
                    SendAckMessage@inGroup 0025                           ?_readUartMessage 0001  
                   GroupControlMcu@request 00E9                                  ?_testLeds 0001  
                __end_of_ReadIntFromEeprom 20D4                        ?_GetIntFromUartData 0066  
                          __size_of___ftge 0090                            __size_of___lmul 0056  
                                  ___ftadd 19DA                                    ___awmod 34AA  
                                  ___ftdiv 24D2                                    ___ftneg 4096  
                                  ___lldiv 3240                            __size_of___wmul 0026  
                                  ___ftmul 23DC                                    ___llmod 35EC  
                                  ___ftsub 3B56                                    ___fttol 22E4  
               FlashSampleWrite@rotateLeft 0062                               crc8@dataSize 001A  
                 __size_of_ClearMcuRunTime 0014                                    ___lwmod 3B98  
                     AdcConvert@_adcResult 00B3                               __psmallconst 0600  
                          ??_SynthLdDetect 0031                                 ??___altoft 008B  
                   __end_of_FLASH_ReadByte 4280                            __CFG_STVREN$OFF 000000  
               SWSPI_Synth_send_bits@count 0084                      _mcuRunTimeIn5SecTicks 0128  
                                  _crcCalc 003C                                    _channel 00F6  
                                  __pcinit 32C2                                 ??___awtoft 0023  
                               ??___ftpack 001D                          __end_of_eval_poly 2AF4  
                          __size_of_memset 002C                                    __ramtop 0600  
                  __size_of_SendAckMessage 0052                                 ??___lltoft 0024  
                  __size_of_SetChannelMode 0030                                    __ptext0 3436  
                                  __ptext1 1468                                    __ptext2 3FD6  
                                  __ptext3 3E50                                    __ptext4 3CCC  
                                  __ptext5 4122                                    __ptext6 4072  
                                  __ptext7 3EEC                                    __ptext8 31B4  
                                  __ptext9 1820                                    crc8@crc 001D  
                       __end_of_AdcConvert 107A                          DacSetValue@retVal 0091  
                               ??___lwtoft 0023                                  _T0CONbits 000FD5  
        __end_of_IOCB5_SetInterruptHandler 430E                                  _IOCB4_ISR 4100  
                                _IOCB5_ISR 40DE                          BlinkErrorLeds@idx 001C  
                          __size_of_strtol 01D6                      _OSCILLATOR_Initialize 42AE  
                                  _isalpha 3FFE                               __size_of_exp 01F6  
                             __size_of_log 012A                                    _isdigit 4142  
                             __size_of_pow 0180                           ___awmod@dividend 0018  
                       _EUSART1_Initialize 3D04                   ??_PIN_MANAGER_Initialize 001A  
                                  _isspace 4026                  StoreIntInEeprom@numOfByes 0026  
                                  _isupper 4160                                    _request 00F2  
                          GroupDAC@request 00E8                            ??_SynthReadData 0031  
                     ??_GetIntFromUartData 006E                     __end_of_FlashEreaseMem 3A2E  
               __size_of_SYSTEM_Initialize 001A                    ?_SwSpi_Set_Dac_Sync_Pin 0001  
                   __end_of_SwSpi_Data_Pin 3930                    StoreIntInEeprom@address 0025  
                                  _toupper 4232                       end_of_initialization 3332  
                                  exp@sign 009F                        ?_EUSART1_Initialize 0001  
                         ??_BlinkErrorLeds 0018                               ?_EepromWrite 001B  
                    _SWSPI_Synth_send_bits 2BC2                  __size_of_SwSpi_Set_CE_Pin 003C  
                    _GetUint16FromBitArray 3584                             ?_SetMcuRunTime 0001  
                                  memset@c 001A                                    memset@n 001C  
                                  memset@p 001E                              __Lmediumconst 0000  
                          ___lldiv@divisor 001C                       __end_of_SetMcuSystem 42FA  
                                  pow@sign 00AC                            ___lldiv@counter 0024  
                        ?_GroupFlashMemory 00E6                           AdcConvert@adcRes 00BB  
                       __end_of_SYNTH_REGS 0635                       UpdateSynthFreq@cType 008C  
                               ??_testLeds 002C                       SWSPI_send_word@datac 0086  
                               _rxMsgQueue 0190                                    postdec1 000FE5  
                                  postdec2 000FDD            ??_IOCB5_DefaultInterruptHandler 0001  
                       ??_GroupFlashMemory 0031                                    postinc0 000FEE  
                                  postinc2 000FDE                      __size_of_EUSART1_Read 0044  
                     SynthReadData@byteNum 027C                        _InitRxMessageParams 3FD6  
                              testLeds@idx 002D                    __end_of_UpdateSynthFreq 19DA  
                     __size_of_DacSetValue 009E                  __size_of_FlashSampleWrite 0104  
                   __size_of_GetMcuRunTime 00E4                       ??_EUSART1_Initialize 0018  
    __end_of_InitSystemApplicationManagers 4232     __size_of_InitSystemApplicationManagers 0016  
            _InitSystemApplicationManagers 421C                            ?_FLASH_ReadByte 0018  
                                  strtol@a 0061                                    strtol@c 0065  
                                  strtol@s 0026                   _TMR0_SetInterruptHandler 42FA  
                                _PORTDbits 000F83                               ??_EepromRead 0019  
                         _StoreIntInEeprom 3D3C                                 ?_IOCB4_ISR 0001  
                               ?_IOCB5_ISR 0001                           ?_GetMcuFwVersion 0001  
                           ZeroArray@array 0020             __end_of_SwSpi_Set_Dac_Sync_Pin 41B8  
                             strtol@endptr 0028              FLASH_WriteBlock@flashWrBufPtr 0021  
                       GetMcuRunTime@TxMsg 0060                       ?_InitRxMessageParams 0001  
                          ?_FlashEreaseMem 0001                        EUSART1_Write@txData 0018  
                          ?_SwSpi_Data_Pin 0018                   __end_of_DATAEE_WriteByte 3E50  
              __end_of_SWSPI_DAC_send_bits 38DA                              ?_DacReadValue 00C8  
                     DacReadValue@dacIndex 00D0                   FLASH_EraseBlock@baseAddr 0018  
                         ?_Make32bitsArray 0018                                ___ftdiv@exp 0067  
                             _EUSART1_Read 3ACE                       _CheckFlashPrecentage 2D44  
                        FLASH_WriteBlock@i 002C                         __end_of_EepromRead 4322  
                         DacReadValue@data 00C8                                ___ftmul@exp 0072  
                  ?_SwSpi_Set_Synth_Le_Pin 0018                       __end_of_SetSynthOper 33BC  
               __size_of_ReadIntFromEeprom 0126                                  _FillArray 41B8  
             __end_of_INTERRUPT_Initialize 4334                             __end_of___ftge 31B4  
                           __end_of___lmul 39DC                             __end_of___wmul 4072  
                      GroupControlMcu@data 00E6                              __pidataCOMRAM 4322  
                        __size_of_TMR0_ISR 00AC                             _ADC_Initialize 4206  
                         _FLASH_WriteBlock 2C88                     ?_OSCILLATOR_Initialize 0001  
                           __end_of_memset 3FD6                         InitSynth@EepromVal 00C8  
                               floor@expon 0095                              FillArray@size 0022  
                        ??_ClearMcuRunTime 0018                             __end_of_strtol 1820  
                      start_initialization 32C2                                 eval_poly@d 0087  
                               eval_poly@n 0089                                 eval_poly@x 0084  
                              _SynthRxOper 0044                           BlinkOkLeds@state 001B  
                 __size_of_TMR0_Initialize 0034                                 ldexp@value 008E  
                              _SynthTxOper 0045            __size_of_PIN_MANAGER_Initialize 0064  
                    ??_InitRxMessageParams 0024                                __end_of_exp 1468  
                              __end_of_log 1FAE                                __end_of_pow 1D08  
            GetUint16FromBitArray@bitarray 0018                   AdcConvert@_adcResult_350 00B5  
                                _InitSynth 0BE8                             ??_DacReadValue 00CA  
                            _GetMcuRunTime 25BA                     ?_SWSPI_Synth_send_bits 0025  
                          ??_SetMcuRunTime 0021                      __end_of_EUSART1_Write 3C54  
                   ?_GetUint16FromBitArray 0018                     __size_of_PLLInitialize 003E  
                               frexp@value 0018                            ___llmod@divisor 001C  
                            _Timer0_OneSec 00F7                      ?_CheckFlashPrecentage 0001  
                          ___llmod@counter 0020                        DATAEE_ReadByte@bAdd 0018  
                 __size_of_PIN_MANAGER_IOC 0010                     __size_of_SwSpi_Clk_Pin 0056  
                      SendAckMessage@TxMsg 0026             __end_of_SwSpi_Set_Synth_Le_Pin 3CCC  
                           _cntRegUpdateRx 0039                        _keepAliveSignalUart 42D8  
                           _cntRegUpdateTx 003A                          __size_of_GroupDAC 0034  
                         _WriteUartMessage 3DE4                          __size_of_GroupAdc 0020  
                   __size_of_FlashReadUart 01F8                                   ??___ftge 001E  
                                 ??___lmul 0022                    SendAckMessage@inRequest 0024  
                                 ??___wmul 001C                  GetIntFromUartData@idxData 0086  
                        __size_of_ResetMcu 000E                       __size_of_BlinkOkLeds 005E  
                               ?_FillArray 0020                     __end_of_ADC_Initialize 421C  
                         ?_UpdateSynthFreq 008A                                __pdataBANK1 01BC  
                  SWSPI_DAC_send_bits@data 001A                                   ??_memset 001E  
                 __size_of_GroupControlMcu 0030                FLASH_EraseBlock@GIEBitValue 001C  
                           _SendAckMessage 3A2E                             _SetChannelMode 3F1C  
                 __end_of_FLASH_EraseBlock 3EEC                         _SendSystemStartAck 42E4  
                 __size_of_SWSPI_send_word 00AA      __end_of_IOCB5_DefaultInterruptHandler 433E  
   __size_of_IOCB5_DefaultInterruptHandler 0002              _IOCB5_DefaultInterruptHandler 433C  
              ??_IOCB5_SetInterruptHandler 001A                                   ??_strtol 002C  
                           _eusart1RxCount 00F5                                ??_IOCB4_ISR 0001  
                              ??_IOCB5_ISR 0001                          __size_of___altoft 007A  
                                _ZeroArray 417E                            DacInit@dacInput 00CA  
                        __size_of___awtoft 0038                          __size_of___ftpack 00AE  
                     ?_keepAliveSignalUart 0001                          __size_of___lltoft 005C  
                              __pbssCOMRAM 0031                          __size_of___lwtoft 0024  
            __size_of_EUSART1_Transmit_ISR 0038                              __pcstackBANK0 0060  
                            __pcstackBANK2 0246                               _isalpha$3314 001C  
                      ?_SendSystemStartAck 0001                                 ?_InitSynth 0001  
                             _isdigit$3317 0019                             ?_GetMcuRunTime 0001  
                      DacSetValue@dacIndex 0090                             BlinkOkLeds@idx 001C  
                                 ?_DacInit 0001                      __size_of_SetMcuSystem 000A  
                         _SwSpi_Set_CE_Pin 3C54               __size_of_EUSART1_Receive_ISR 002E  
            SWSPI_Synth_send_bits@bitArray 0060                    _DAC_DEFAULT_INIT_VALUES 064B  
                     __size_of_EepromWrite 000E                      _TMR0_InterruptHandler 01CC  
                                __pnvBANK1 01CC                          SetSynthOper@cType 00CF  
                 __size_of_TMR0_StartTimer 0004                     _PIN_MANAGER_Initialize 3652  
                     ??_SendSystemStartAck 002C                      _InitAdcApplicationMgr 432A  
                                __pintcode 0008                     __end_of_SendAckMessage 3A80  
                                __ptext100 24D2                                  __ptext101 3D74  
                                __ptext110 3F4C                                  __ptext102 37CE  
                                __ptext103 40BA                                  __ptext120 3DAC  
                                __ptext112 2EA0                                  __ptext104 2DF2  
                                __ptext121 3F7C                                  __ptext113 3B98  
                                __ptext105 3584                                  __ptext122 0000  
                                __ptext114 4290                                  __ptext106 21E0  
                                __ptext115 40DE                                  __ptext107 2C88  
                                __ptext116 433C                                  __ptext108 3EB8  
                                __ptext117 4100                                  __ptext109 42CA  
                                 ?___ftadd 0078                                  __ptext118 433E  
                                __ptext119 4338                                   ?___awmod 0018  
                                 ?___ftdiv 0029                     __end_of_SetChannelMode 3F4C  
                                 ?___ftneg 0018                                   ?___lldiv 0018  
                                 ?___ftmul 0069                                   ?___llmod 0018  
                                 ?___ftsub 0084                                   ?___fttol 0078  
                         _FlashSampleWrite 21E0                                   ?___lwmod 0001  
                          ?_ADC_Initialize 0001                           _Timer0_KeepAlive 00F8  
                        __size_of_testLeds 006A                              _PLLInitialize 3BDA  
              __size_of_keepAliveSignalLed 0018               ??_INTERRUPT_InterruptManager 0006  
                         __CFG_PRICLKEN$ON 000000                                 ?_ZeroArray 0020  
                              __smallconst 0600                      ??_keepAliveSignalUart 002C  
                                 _BAUDCON1 000FB8                              _SwSpi_Clk_Pin 3930  
                                 ?_isalpha 0001                                   ?_isdigit 0001  
                                _eval_poly 2A1E                        BlinkErrorLeds@state 001B  
                                 ?_isspace 0001                               _SetMcuSystem 42F0  
                        FlashReadUart@data 0087                                   ?_isupper 0001  
                            _FlashReadUart 107A                             __size_of_make8 005C  
                           __size_of_floor 00E2                             __size_of_ldexp 00CE  
                           __size_of_frexp 0090                   __size_of_DATAEE_ReadByte 0014  
                                 ?_toupper 0001                       _INTERRUPT_Initialize 4330  
           FLASH_WriteBlock@blockStartAddr 0027                __size_of_FlashReadCondition 010C  
                _IOCB5_SetInterruptHandler 4304                          ??_TMR0_Initialize 001A  
                   ??_CheckFlashPrecentage 0078                             ___wmul@product 001C  
                                 _IOCBbits 000F62                                   _LATAbits 000F89  
                                 _LATBbits 000F8A                                   _LATCbits 000F8B  
                                 _LATDbits 000F8C                      __size_of_SetSynthOper 007C  
                 __end_of_StoreIntInEeprom 3D74             FlashReadUart@numOfSampleToRead 00E2  
                                 _PIE1bits 000F9D                                   _PIE2bits 000FA0  
                    _GroupStatusAndVersion 4072                          _GroupSynthesizers 31B4  
      __size_of_INTERRUPT_InterruptManager 00D4                 ??_TMR0_SetInterruptHandler 001A  
                     Make32bitsArray@array 0018                                   _PIR1bits 000F9E  
                         ??_FLASH_ReadByte 001C                                   _PIR2bits 000FA1  
                                _rxMsgData 017C                        UpdateSynthFreq@data 008A  
                                 i2u576_48 410E                                   i2u586_40 3BB2  
                                 i2u578_48 40EC                        SWSPI_send_word@data 0029  
                       ?_GroupSynthesizers 00E6                                   _RCONbits 000FD0  
                         __CFG_WDTPS$16384 000000                        SynthReadData@regNum 027B  
                                make8@data 0018                                ??_FillArray 0025  
                                 _TMR0_ISR 2EA0                            ?_SendAckMessage 0024  
                          ?_SetChannelMode 002C                             ?_PLLInitialize 0001  
                        ??_PIN_MANAGER_IOC 0001                       __end_of_DacReadValue 2782  
                      ??_GroupSynthesizers 0031                     GetIntFromUartData@data 0066  
                  SWSPI_send_word@dataSize 002D                                 _ADCON0bits 000FC2  
                    __end_of_SynthLdDetect 2A1E                   __size_of_readUartMessage 01E2  
                        ___wmul@multiplier 0018                             ?_SwSpi_Clk_Pin 0018  
                         ??_FlashEreaseMem 002C                         __end_of_channelArr 064B  
                         ??_SwSpi_Data_Pin 0019                  __size_of_GroupFlashMemory 0038  
                               ?_eval_poly 0084                             ?_FlashReadUart 0087  
                        ??_GroupControlMcu 0031                            ??_GetMcuRunTime 0025  
                    DATAEE_WriteByte@bData 0018                               _isspace$3320 0019  
                              ??_InitSynth 0031                          ??_SWSPI_send_word 002E  
                               DacInit@idx 00CC                               _SetSynthOper 3340  
                               _DAC_ADDRES 0653                __size_of_GetIntFromUartData 017C  
                        ___lmul@multiplier 001A                    FlashReadCondition@TxMsg 0028  
                              _INTCON2bits 000FF1                      __end_of_SynthReadData 094E  
                                copy_data0 32D6                                  copy_data1 32F6  
                    ?_INTERRUPT_Initialize 0001                           __size_of_DacInit 00E4  
                        ?_DATAEE_WriteByte 0018             GetUint16FromBitArray@numOfBits 001A  
                __end_of_GroupSynthesizers 3240                      EUSART1_Read@readValue 0019  
                 __end_of_FLASH_WriteBlock 2D44                                   _GroupDAC 3E50  
                       ??_DATAEE_WriteByte 0019                                   _GroupAdc 4122  
                                frexp@eptr 001B                                 _EECON1bits 000FA6  
                           _synthLdRxArray 01B0                                   __Hrparam 0000  
                   ?_InitAdcApplicationMgr 0001                             _synthLdTxArray 01A4  
                                 _ResetMcu 42A0                              ??_DacSetValue 008C  
                              _readAddress 01C8                                   __Lrparam 0000  
             SynthReadData@eepromDataArray 0266                          _ADC_GetConversion 3F4C  
                          _ClearMcuRunTime 425A                          __CFG_P2BMX$PORTD2 000000  
                  ??_OSCILLATOR_Initialize 0018                         ?_ADC_GetConversion 0018  
                        ??_TMR0_StartTimer 0018                           __size_of___ftadd 01AE  
                         __size_of___awmod 0070                           __size_of___ftdiv 00E8  
                     _numOfValidateSamples 0130                           __size_of___ftneg 0024  
                         __size_of___lldiv 0082                                   ___altoft 33BC  
                         __size_of___ftmul 00F6                           __size_of___llmod 0066  
                         __size_of___ftsub 0042                           __size_of___fttol 00F8  
              __size_of_EUSART1_Initialize 0038                           __size_of___lwmod 0042  
                          GroupAdc@request 00E8                                   ___awtoft 3D74  
                            crc8@dataArray 0018                                   ___ftpack 2DF2  
                         _numOfReadSamples 012C                                   ___lltoft 37CE  
                        _FLASH_IsWriteDone 42CA                     _IOCB4_InterruptHandler 01D0  
                      WriteUartMessage@idx 001E                                   ___lwtoft 40BA  
                              ??_ZeroArray 0024                   GetMcuRunTime@tempRunTime 0069  
                      ??_ADC_GetConversion 001A                                   _exp$3592 009A  
                             _isupper$3323 0019                         ?_FLASH_IsWriteDone 0001  
                                 _dataSize 00F1                      SwSpi_Clk_Pin@cPinMode 0018  
                 __end_of_WriteUartMessage 3E1A                           __size_of_isalpha 0028  
                                 _crcGiven 003B                           __size_of_isdigit 001E  
                  ??_SWSPI_Synth_send_bits 0029                     SwSpi_Data_Pin@cPinMode 0018  
                  ??_GetUint16FromBitArray 001C             ?_IOCB4_DefaultInterruptHandler 0001  
                         __size_of_isspace 0026                                   __ptext10 069E  
                                 __ptext11 3340                                   __ptext20 1D08  
                                 __ptext12 25BA                                   __ptext21 164A  
                                 __ptext13 3240                                   __ptext30 3F1C  
                                 __ptext22 4232                                   __ptext14 094E  
                                 __ptext31 3ACE                                   __ptext23 4026  
                                 __ptext15 107A                                   __ptext40 42FA  
                                 __ptext32 42D8                                   __ptext24 4142  
                                 __ptext16 426E                                   __ptext41 3652  
                                 __ptext33 41EE                                   __ptext25 3FFE  
                                 __ptext17 20D4                                   __ptext50 42E4  
                                 __ptext42 4304                                   __ptext34 2948  
                                 __ptext26 4160                                   __ptext18 39DC  
                                 __ptext51 3A2E                                   __ptext43 430E  
                                 __ptext35 34AA                                   __ptext27 269E  
                                 __ptext19 2FF6                                   __ptext60 3C54  
                                 __ptext52 3A80                                   __ptext44 42AE  
                                 __ptext36 36B6                                   __ptext28 351A  
                                 __ptext61 432A                                   __ptext53 417E  
                                 __ptext45 4330                                   __ptext37 42F0  
                                 __ptext29 42A0                                   __ptext70 2BC2  
                                 __ptext62 2782                                   __ptext54 3DE4  
                                 __ptext46 3D04                                   __ptext38 41D4  
                                 __ptext71 382A                                   __ptext63 3D3C  
                                 __ptext55 3C18                                   __ptext47 4206  
                                 __ptext39 3E84                                   __ptext80 4246  
                                 __ptext72 41B8                                   __ptext64 42BC  
                                 __ptext56 421C                                   __ptext48 3B12  
                                 __ptext81 425A                                   __ptext73 3FAA  
                                 __ptext65 3E1A                                   __ptext57 4334  
                                 __ptext49 35EC                                   __ptext90 3094  
                                 __ptext82 2D44                                   __ptext74 3882  
                                 __ptext66 2F4C                                   __ptext58 3BDA  
                                 __ptext91 22E4                                   __ptext83 3714  
                                 __ptext75 38DA                                   __ptext67 3772  
                                 __ptext59 0BE8                                   __ptext92 3124  
                                 __ptext84 0E5E                                   __ptext76 3930  
                                 __ptext68 3C90                                   __ptext93 33BC  
                                 __ptext85 1B88                                   __ptext77 1FAE  
                                 __ptext69 419C                                   __ptext94 2A1E  
                                 __ptext86 1E84                                   __ptext78 3986  
                                 __ptext95 404C                                   __ptext87 1272  
                                 __ptext79 4318                                   __ptext96 23DC  
                                 __ptext88 2AF4                                   __ptext97 3B56  
                                 __ptext89 2866                                   __ptext98 19DA  
                                 __ptext99 4096                           __size_of_isupper 001E  
             SWSPI_Synth_send_bits@phrType 0085                   SwSpi_Set_CE_Pin@cPinMode 0018  
                                 _pow$3590 00A6                                   _pow$3591 00A9  
                      ??_FLASH_IsWriteDone 0018                DATAEE_WriteByte@GIEBitValue 001A  
                         __size_of_toupper 0014                   __size_of_GetMcuFwVersion 029A  
                     _GetMcuFwVersion$2702 0078                       _GetMcuFwVersion$2698 0076  
                            __size_of_crc8 004E                              __size_of_main 0074  
                   ?_GroupStatusAndVersion 00E6                       __end_of_SYNTH_ADDRES 0642  
                                 _msgCount 00F0               _TMR0_DefaultInterruptHandler 000000  
                        ??_DATAEE_ReadByte 0018                  __end_of_ADC_GetConversion 3F7C  
             __size_of_SWSPI_DAC_send_bits 0058                        Make32bitsArray@data 001A  
                       SWSPI_send_word@idx 0087                                _groupsArray 01BC  
                          ??_PLLInitialize 0031                                   _testLeds 351A  
                  __size_of_BlinkErrorLeds 005E                                   int$flags 0048  
                 __size_of_Make32bitsArray 0058                                 strtol@base 002A  
                               strtol@sign 0060                  __end_of_FLASH_IsWriteDone 42D8  
       __end_of_INTERRUPT_InterruptManager 00DC                 _INTERRUPT_InterruptManager 0008  
                       AdcConvert@ldRxSate 00B7                         AdcConvert@ldTxSate 00B9  
                          EepromWrite@data 001B                            ??_SwSpi_Clk_Pin 0019  
                      __end_of_DacSetValue 3094                        _EUSART1_Receive_ISR 3F7C  
                 __end_of_SwSpi_Set_CE_Pin 3C90                          ?_FLASH_EraseBlock 0018  
              __end_of_InitRxMessageParams 3FFE                                   exp@coeff 0657  
                               _MEMORY_ISR 4338                            ??_FlashReadUart 0089  
                                 log@coeff 0675                     SWSPI_send_word@phrType 0089  
                       ??_FLASH_EraseBlock 001C                                 _INTCONbits 000FF2  
                              ??_eval_poly 002F                                _sampleArray 013C  
                              _sampleCount 0136                                   isalpha@c 001D  
                                 isdigit@c 001A                     ??_INTERRUPT_Initialize 0018  
                                 memset@p1 0018                          ??_readUartMessage 00E9  
                 __end_of_FlashSampleWrite 22E4                                   intlevel2 0000  
                     ?_EUSART1_Receive_ISR 0001                      __end_of_SetMcuRunTime 3B56  
                         ___lwmod@dividend 0001                 __size_of_GroupSynthesizers 008C  
                                 isspace@c 001A                           ___lldiv@dividend 0018  
                    SynthReadData@data_987 0263                    ?_PIN_MANAGER_Initialize 0001  
                        _SynthReadData$988 0264                    __end_of_ClearMcuRunTime 426E  
                               _RCSTA1bits 000FAB                                   isupper@c 001A  
                 ReadIntFromEeprom@address 00C2               __end_of_EUSART1_Transmit_ISR 3DE4  
                            ??_BlinkOkLeds 0018                           ??_ADC_Initialize 0018  
                    __size_of_DacReadValue 00E4                         Make32bitsArray@idx 0020  
                            AdcConvert@idx 00C0                              _isReWriteDone 013A  
                    UpdateSynthFreq@retVal 008D                       SwSpi_Clk_Pin@phrType 0019  
                    SwSpi_Data_Pin@phrType 0019                    SwSpi_Set_CE_Pin@phrType 0019  
                   __size_of_EUSART1_Write 003C                   ??_SwSpi_Set_Dac_Sync_Pin 0018  
                        EepromRead@address 0019                           ___lldiv@quotient 0020  
                         _GroupFlashMemory 3CCC                            ___lwmod@divisor 0003  
                          _TMR0_Initialize 3E84                            ___lwmod@counter 0005  
                 __size_of_UpdateSynthFreq 01BA                                   toupper@c 0018  
               ReadIntFromEeprom@numOfByes 00B1                          __CFG_T3CMX$PORTC0 000000  
                  ReadIntFromEeprom@retVal 00C3                              ??_EepromWrite 001C  
                               _AdcConvert 0E5E                      ??_EUSART1_Receive_ISR 0001  
           __end_of_PIN_MANAGER_Initialize 36B6                               _DacReadValue 269E  
             GetIntFromUartData@dataRegArr 0070                          __CFG_FOSC$INTIO67 000000  
                   _IOCB5_InterruptHandler 01CE                            _PIN_MANAGER_IOC 4290  
                        ?_StoreIntInEeprom 0021                           ??_SendAckMessage 0025  
               __size_of_ADC_GetConversion 0030                           ??_SetChannelMode 002E  
                       ??_StoreIntInEeprom 0028                                _DacSetValue 2FF6  
