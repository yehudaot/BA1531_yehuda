

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 29 11:09:02 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text105,global,reloc=2,class=CODE,delta=1
   126                           	psect	text106,global,reloc=2,class=CODE,delta=1
   127                           	psect	text107,global,reloc=2,class=CODE,delta=1
   128                           	psect	text108,global,reloc=2,class=CODE,delta=1
   129                           	psect	text109,global,reloc=2,class=CODE,delta=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   132                           	psect	text112,global,reloc=2,class=CODE,delta=1
   133                           	psect	text113,global,reloc=2,class=CODE,delta=1,group=1
   134                           	psect	text114,global,reloc=2,class=CODE,delta=1
   135                           	psect	text115,global,reloc=2,class=CODE,delta=1
   136                           	psect	text116,global,reloc=2,class=CODE,delta=1
   137                           	psect	text117,global,reloc=2,class=CODE,delta=1
   138                           	psect	text118,global,reloc=2,class=CODE,delta=1
   139                           	psect	text119,global,reloc=2,class=CODE,delta=1
   140                           	psect	text120,global,reloc=2,class=CODE,delta=1
   141                           	psect	text121,global,reloc=2,class=CODE,delta=1
   142                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   145                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   146  0000                     
   147                           ; Version 1.45
   148                           ; Generated 16/11/2017 GMT
   149                           ; 
   150                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   151                           ; All rights reserved.
   152                           ; 
   153                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   154                           ; 
   155                           ; Redistribution and use in source and binary forms, with or without modification, are
   156                           ; permitted provided that the following conditions are met:
   157                           ; 
   158                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   159                           ;        conditions and the following disclaimer.
   160                           ; 
   161                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   162                           ;        of conditions and the following disclaimer in the documentation and/or other
   163                           ;        materials provided with the distribution.
   164                           ; 
   165                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   166                           ;        software without specific prior written permission.
   167                           ; 
   168                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   169                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   170                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   171                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   172                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   173                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   174                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   175                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   176                           ; 
   177                           ; 
   178                           ; Code-generator required, PIC18F45K22 Definitions
   179                           ; 
   180                           ; SFR Addresses
   181  0000                     
   182 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   183  0000                     
   184                           	psect	idataCOMRAM
   185  004454                     __pidataCOMRAM:
   186                           	opt stack 0
   187                           
   188                           ;initializer for _writeAddress
   189  004454  4580               	dw	17792
   190  004456  0000               	dw	0
   191                           
   192                           ;initializer for _synthLdTxCnt
   193  004458  02                 	db	2
   194                           
   195                           ;initializer for _synthLdRxCnt
   196  004459  02                 	db	2
   197                           
   198                           ;initializer for _SynthRxOper
   199  00445A  01                 	db	1
   200                           
   201                           ;initializer for _SynthTxOper
   202  00445B  01                 	db	1
   203                           
   204                           	psect	idataBANK1
   205  0043B2                     __pidataBANK1:
   206                           	opt stack 0
   207                           
   208                           ;initializer for _groupsArray
   209  0043B2  1E                 	db	low _GroupControlMcu
   210  0043B3  40                 	db	high _GroupControlMcu
   211  0043B4  A4                 	db	low _GroupStatusAndVersion
   212  0043B5  41                 	db	high _GroupStatusAndVersion
   213  0043B6  54                 	db	low _GroupAdc
   214  0043B7  42                 	db	high _GroupAdc
   215  0043B8  E6                 	db	low _GroupSynthesizers
   216  0043B9  32                 	db	high _GroupSynthesizers
   217  0043BA  FE                 	db	low _GroupFlashMemory
   218  0043BB  3D                 	db	high _GroupFlashMemory
   219  0043BC  82                 	db	low _GroupDAC
   220  0043BD  3F                 	db	high _GroupDAC
   221                           
   222                           ;initializer for _readAddress
   223  0043BE  4580               	dw	17792
   224  0043C0  0000               	dw	0
   225                           
   226                           	psect	smallconst
   227  000600                     __psmallconst:
   228                           	opt stack 0
   229  000600  00                 	db	0
   230  000601                     _SYNTH_REGS:
   231                           	opt stack 0
   232  000601  041C               	dw	1052
   233  000603  0001               	dw	1
   234  000605  300B               	dw	12299
   235  000607  0061               	dw	97
   236  000609  193A               	dw	6458
   237  00060B  00C0               	dw	192
   238  00060D  FCC9               	dw	64713
   239  00060F  1110               	dw	4368
   240  000611  0428               	dw	1064
   241  000613  102D               	dw	4141
   242  000615  00E7               	dw	231
   243  000617  1200               	dw	4608
   244  000619  6076               	dw	24694
   245  00061B  3500               	dw	13568
   246  00061D  0025               	dw	37
   247  00061F  0080               	dw	128
   248  000621  BF84               	dw	49028
   249  000623  0800               	dw	2048
   250  000625  0003               	dw	3
   251  000627  0000               	dw	0
   252  000629  0012               	dw	18
   253  00062B  0000               	dw	0
   254  00062D  0001               	dw	1
   255  00062F  0C00               	dw	3072
   256  000631  0680               	dw	1664
   257  000633  0020               	dw	32
   258  000635                     __end_of_SYNTH_REGS:
   259                           	opt stack 0
   260  000635                     _SYNTH_ADDRES:
   261                           	opt stack 0
   262  000635  04                 	db	4
   263  000636  08                 	db	8
   264  000637  0C                 	db	12
   265  000638  00                 	db	0
   266  000639  10                 	db	16
   267  00063A  00                 	db	0
   268  00063B  14                 	db	20
   269  00063C  00                 	db	0
   270  00063D  00                 	db	0
   271  00063E  00                 	db	0
   272  00063F  18                 	db	24
   273  000640  1C                 	db	28
   274  000641  00                 	db	0
   275  000642                     __end_of_SYNTH_ADDRES:
   276                           	opt stack 0
   277  000642                     _channelArr:
   278                           	opt stack 0
   279  000642  04                 	db	4
   280  000643  05                 	db	5
   281  000644  06                 	db	6
   282  000645  07                 	db	7
   283  000646  08                 	db	8
   284  000647  09                 	db	9
   285  000648  0A                 	db	10
   286  000649  0D                 	db	13
   287  00064A  19                 	db	25
   288  00064B                     __end_of_channelArr:
   289                           	opt stack 0
   290  00064B                     _DAC_DEFAULT_INIT_VALUES:
   291                           	opt stack 0
   292  00064B  2344               	dw	9028
   293  00064D  6344               	dw	25412
   294  00064F  A344               	dw	41796
   295  000651  E344               	dw	58180
   296  000653                     __end_of_DAC_DEFAULT_INIT_VALUES:
   297                           	opt stack 0
   298  000653                     _DAC_ADDRES:
   299                           	opt stack 0
   300  000653  02                 	db	2
   301  000654  04                 	db	4
   302  000655  06                 	db	6
   303  000656  08                 	db	8
   304  000657                     __end_of_DAC_ADDRES:
   305                           	opt stack 0
   306  000657                     exp@coeff:
   307                           	opt stack 0
   308  000657  00                 	db	0
   309  000658  80                 	db	128
   310  000659  3F                 	db	63
   311  00065A  72                 	db	114
   312  00065B  31                 	db	49
   313  00065C  3F                 	db	63
   314  00065D  FE                 	db	254
   315  00065E  75                 	db	117
   316  00065F  3E                 	db	62
   317  000660  58                 	db	88
   318  000661  63                 	db	99
   319  000662  3D                 	db	61
   320  000663  95                 	db	149
   321  000664  1D                 	db	29
   322  000665  3C                 	db	60
   323  000666  C5                 	db	197
   324  000667  AE                 	db	174
   325  000668  3A                 	db	58
   326  000669  79                 	db	121
   327  00066A  21                 	db	33
   328  00066B  39                 	db	57
   329  00066C  94                 	db	148
   330  00066D  80                 	db	128
   331  00066E  37                 	db	55
   332  00066F  93                 	db	147
   333  000670  A7                 	db	167
   334  000671  35                 	db	53
   335  000672  56                 	db	86
   336  000673  15                 	db	21
   337  000674  34                 	db	52
   338  000675                     __end_ofexp@coeff:
   339                           	opt stack 0
   340  000675                     log@coeff:
   341                           	opt stack 0
   342  000675  00                 	db	0
   343  000676  00                 	db	0
   344  000677  00                 	db	0
   345  000678  00                 	db	0
   346  000679  80                 	db	128
   347  00067A  3F                 	db	63
   348  00067B  F0                 	db	240
   349  00067C  FF                 	db	255
   350  00067D  BE                 	db	190
   351  00067E  E2                 	db	226
   352  00067F  A9                 	db	169
   353  000680  3E                 	db	62
   354  000681  83                 	db	131
   355  000682  76                 	db	118
   356  000683  BE                 	db	190
   357  000684  AE                 	db	174
   358  000685  2B                 	db	43
   359  000686  3E                 	db	62
   360  000687  3C                 	db	60
   361  000688  C3                 	db	195
   362  000689  BD                 	db	189
   363  00068A  D2                 	db	210
   364  00068B  13                 	db	19
   365  00068C  3D                 	db	61
   366  00068D  78                 	db	120
   367  00068E  D3                 	db	211
   368  00068F  BB                 	db	187
   369  000690                     __end_oflog@coeff:
   370                           	opt stack 0
   371  000690                     STR_1:
   372                           
   373                           ; BSR set to: 0
   374  000690  4D                 	db	77	;'M'
   375  000691  61                 	db	97	;'a'
   376  000692  72                 	db	114	;'r'
   377  000693  20                 	db	32
   378  000694  32                 	db	50	;'2'
   379  000695  38                 	db	56	;'8'
   380  000696  20                 	db	32
   381  000697  32                 	db	50	;'2'
   382  000698  30                 	db	48	;'0'
   383  000699  31                 	db	49	;'1'
   384  00069A  38                 	db	56	;'8'
   385  00069B  00                 	db	0
   386  00069C                     STR_18:
   387                           
   388                           ; BSR set to: 0
   389  00069C  31                 	db	49	;'1'
   390  00069D  35                 	db	53	;'5'
   391  00069E  3A                 	db	58	;':'
   392  00069F  34                 	db	52	;'4'
   393  0006A0  32                 	db	50	;'2'
   394  0006A1  3A                 	db	58	;':'
   395  0006A2  30                 	db	48	;'0'
   396  0006A3  37                 	db	55	;'7'
   397  0006A4  00                 	db	0
   398  0000                     
   399                           ; #config settings
   400  0006A5  00                 	db	0	; dummy byte at the end
   401  0000                     
   402                           	psect	nvCOMRAM
   403  000046                     __pnvCOMRAM:
   404                           	opt stack 0
   405  000046                     _timer0ReloadVal:
   406                           	opt stack 0
   407  000046                     	ds	2
   408                           
   409                           	psect	nvBANK1
   410  0001CC                     __pnvBANK1:
   411                           	opt stack 0
   412  0001CC                     _TMR0_InterruptHandler:
   413                           	opt stack 0
   414  0001CC                     	ds	2
   415  0001CE                     _IOCB5_InterruptHandler:
   416                           	opt stack 0
   417  0001CE                     	ds	2
   418  0001D0                     _IOCB4_InterruptHandler:
   419                           	opt stack 0
   420  0001D0                     	ds	2
   421  0001D2                     _eusart1TxBufferRemaining:
   422                           	opt stack 0
   423  0001D2                     	ds	1
   424  0000                     _ANSELA	set	3896
   425  0000                     _ANSELE	set	3900
   426  0000                     _ANSELD	set	3899
   427  0000                     _ANSELB	set	3897
   428  0000                     _ANSELC	set	3898
   429  0000                     _ADCON0bits	set	4034
   430  0000                     _ADRESH	set	4036
   431  0000                     _ADRESL	set	4035
   432  0000                     _ADCON2	set	4032
   433  0000                     _ADCON1	set	4033
   434  0000                     _ADCON0	set	4034
   435  0000                     _T0CONbits	set	4053
   436  0000                     _T0CON	set	4053
   437  0000                     _TMR0L	set	4054
   438  0000                     _TMR0H	set	4055
   439  0000                     _EEDATA	set	4008
   440  0000                     _EEADR	set	4009
   441  0000                     _EECON2	set	4007
   442  0000                     _EECON1bits	set	4006
   443  0000                     _TABLAT	set	4085
   444  0000                     _TBLPTRL	set	4086
   445  0000                     _TBLPTRH	set	4087
   446  0000                     _TBLPTRU	set	4088
   447  0000                     _IOCBbits	set	3938
   448  0000                     _INTCON2bits	set	4081
   449  0000                     _WPUB	set	3937
   450  0000                     _TRISD	set	3989
   451  0000                     _TRISC	set	3988
   452  0000                     _TRISB	set	3987
   453  0000                     _TRISA	set	3986
   454  0000                     _TRISE	set	3990
   455  0000                     _LATC	set	3979
   456  0000                     _LATB	set	3978
   457  0000                     _LATA	set	3977
   458  0000                     _LATD	set	3980
   459  0000                     _LATE	set	3981
   460  0000                     _RCREG1	set	4014
   461  0000                     _RCSTA1bits	set	4011
   462  0000                     _TXREG1	set	4013
   463  0000                     _SPBRGH1	set	4016
   464  0000                     _SPBRG1	set	4015
   465  0000                     _TXSTA1	set	4012
   466  0000                     _RCSTA1	set	4011
   467  0000                     _BAUDCON1	set	4024
   468  0000                     _PIR1bits	set	3998
   469  0000                     _PIE1bits	set	3997
   470  0000                     _PIR2bits	set	4001
   471  0000                     _PIE2bits	set	4000
   472  0000                     _RCONbits	set	4048
   473  0000                     _OSCTUNE	set	3995
   474  0000                     _OSCCON2	set	4050
   475  0000                     _OSCCON	set	4051
   476  0000                     _LATAbits	set	3977
   477  0000                     _LATDbits	set	3980
   478  0000                     _INTCONbits	set	4082
   479  0000                     _PORTDbits	set	3971
   480  0000                     _LATCbits	set	3979
   481  0000                     _LATBbits	set	3978
   482                           
   483                           	psect	cinit
   484  0033F4                     __pcinit:
   485                           	opt stack 0
   486  0033F4                     start_initialization:
   487                           	opt stack 0
   488  0033F4                     __initialization:
   489                           	opt stack 0
   490                           
   491                           ; Initialize objects allocated to BANK1 (16 bytes)
   492                           ; load TBLPTR registers with __pidataBANK1
   493  0033F4  0EB2               	movlw	low __pidataBANK1
   494  0033F6  6EF6               	movwf	tblptrl,c
   495  0033F8  0E43               	movlw	high __pidataBANK1
   496  0033FA  6EF7               	movwf	tblptrh,c
   497  0033FC  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   498  0033FE  6EF8               	movwf	tblptru,c
   499  003400  EE01  F0BC         	lfsr	0,__pdataBANK1
   500  003404  EE10 F010          	lfsr	1,16
   501  003408                     copy_data0:
   502  003408  0009               	tblrd		*+
   503  00340A  CFF5 FFEE          	movff	tablat,postinc0
   504  00340E  50E5               	movf	postdec1,w,c
   505  003410  50E1               	movf	fsr1l,w,c
   506  003412  E1FA               	bnz	copy_data0
   507                           
   508                           ; Initialize objects allocated to COMRAM (8 bytes)
   509                           ; load TBLPTR registers with __pidataCOMRAM
   510  003414  0E54               	movlw	low __pidataCOMRAM
   511  003416  6EF6               	movwf	tblptrl,c
   512  003418  0E44               	movlw	high __pidataCOMRAM
   513  00341A  6EF7               	movwf	tblptrh,c
   514  00341C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   515  00341E  6EF8               	movwf	tblptru,c
   516  003420  EE00  F03E         	lfsr	0,__pdataCOMRAM
   517  003424  EE10 F008          	lfsr	1,8
   518  003428                     copy_data1:
   519  003428  0009               	tblrd		*+
   520  00342A  CFF5 FFEE          	movff	tablat,postinc0
   521  00342E  50E5               	movf	postdec1,w,c
   522  003430  50E1               	movf	fsr1l,w,c
   523  003432  E1FA               	bnz	copy_data1
   524                           
   525                           ; Clear objects allocated to BANK2 (70 bytes)
   526  003434  EE02  F000         	lfsr	0,__pbssBANK2
   527  003438  0E46               	movlw	70
   528  00343A                     clear_0:
   529  00343A  6AEE               	clrf	postinc0,c
   530  00343C  06E8               	decf	wreg,f,c
   531  00343E  E1FD               	bnz	clear_0
   532                           
   533                           ; Clear objects allocated to BANK1 (188 bytes)
   534  003440  EE01  F000         	lfsr	0,__pbssBANK1
   535  003444  0EBC               	movlw	188
   536  003446                     clear_1:
   537  003446  6AEE               	clrf	postinc0,c
   538  003448  06E8               	decf	wreg,f,c
   539  00344A  E1FD               	bnz	clear_1
   540                           
   541                           ; Clear objects allocated to BANK0 (11 bytes)
   542  00344C  EE00  F0F0         	lfsr	0,__pbssBANK0
   543  003450  0E0B               	movlw	11
   544  003452                     clear_2:
   545  003452  6AEE               	clrf	postinc0,c
   546  003454  06E8               	decf	wreg,f,c
   547  003456  E1FD               	bnz	clear_2
   548                           
   549                           ; Clear objects allocated to COMRAM (13 bytes)
   550  003458  EE00  F031         	lfsr	0,__pbssCOMRAM
   551  00345C  0E0D               	movlw	13
   552  00345E                     clear_3:
   553  00345E  6AEE               	clrf	postinc0,c
   554  003460  06E8               	decf	wreg,f,c
   555  003462  E1FD               	bnz	clear_3
   556  003464                     end_of_initialization:
   557                           	opt stack 0
   558  003464                     __end_of__initialization:
   559                           	opt stack 0
   560  003464  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   561  003466  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   562  003468  0E00               	movlw	low (__Lmediumconst shr (0+16))
   563  00346A  6EF8               	movwf	tblptru,c
   564  00346C  0100               	movlb	0
   565  00346E  EFB4  F01A         	goto	_main	;jump to C main() function
   566                           tblptru	equ	0xFF8
   567                           tblptrh	equ	0xFF7
   568                           tblptrl	equ	0xFF6
   569                           tablat	equ	0xFF5
   570                           postinc0	equ	0xFEE
   571                           wreg	equ	0xFE8
   572                           postdec1	equ	0xFE5
   573                           fsr1l	equ	0xFE1
   574                           
   575                           	psect	bssCOMRAM
   576  000031                     __pbssCOMRAM:
   577                           	opt stack 0
   578  000031                     TMR0_ISR@CountCallBack:
   579                           	opt stack 0
   580  000031                     	ds	2
   581  000033                     _eusart1RxTail:
   582                           	opt stack 0
   583  000033                     	ds	1
   584  000034                     _eusart1RxHead:
   585                           	opt stack 0
   586  000034                     	ds	1
   587  000035                     _eusart1TxTail:
   588                           	opt stack 0
   589  000035                     	ds	1
   590  000036                     _eusart1TxHead:
   591                           	opt stack 0
   592  000036                     	ds	1
   593  000037                     _synthLdTxArrayCnt:
   594                           	opt stack 0
   595  000037                     	ds	1
   596  000038                     _synthLdRxArrayCnt:
   597                           	opt stack 0
   598  000038                     	ds	1
   599  000039                     _cntRegUpdateRx:
   600                           	opt stack 0
   601  000039                     	ds	1
   602  00003A                     _cntRegUpdateTx:
   603                           	opt stack 0
   604  00003A                     	ds	1
   605  00003B                     _crcGiven:
   606                           	opt stack 0
   607  00003B                     	ds	1
   608  00003C                     _crcCalc:
   609                           	opt stack 0
   610  00003C                     	ds	1
   611  00003D                     _adcSampleMode:
   612                           	opt stack 0
   613  00003D                     	ds	1
   614                           tblptru	equ	0xFF8
   615                           tblptrh	equ	0xFF7
   616                           tblptrl	equ	0xFF6
   617                           tablat	equ	0xFF5
   618                           postinc0	equ	0xFEE
   619                           wreg	equ	0xFE8
   620                           postdec1	equ	0xFE5
   621                           fsr1l	equ	0xFE1
   622                           
   623                           	psect	dataCOMRAM
   624  00003E                     __pdataCOMRAM:
   625                           	opt stack 0
   626  00003E                     _writeAddress:
   627                           	opt stack 0
   628  00003E                     	ds	4
   629  000042                     _synthLdTxCnt:
   630                           	opt stack 0
   631  000042                     	ds	1
   632  000043                     _synthLdRxCnt:
   633                           	opt stack 0
   634  000043                     	ds	1
   635  000044                     _SynthRxOper:
   636                           	opt stack 0
   637  000044                     	ds	1
   638  000045                     _SynthTxOper:
   639                           	opt stack 0
   640  000045                     	ds	1
   641                           tblptru	equ	0xFF8
   642                           tblptrh	equ	0xFF7
   643                           tblptrl	equ	0xFF6
   644                           tablat	equ	0xFF5
   645                           postinc0	equ	0xFEE
   646                           wreg	equ	0xFE8
   647                           postdec1	equ	0xFE5
   648                           fsr1l	equ	0xFE1
   649                           
   650                           	psect	bssBANK0
   651  0000F0                     __pbssBANK0:
   652                           	opt stack 0
   653  0000F0                     _msgCount:
   654                           	opt stack 0
   655  0000F0                     	ds	1
   656  0000F1                     _dataSize:
   657                           	opt stack 0
   658  0000F1                     	ds	1
   659  0000F2                     _request:
   660                           	opt stack 0
   661  0000F2                     	ds	1
   662  0000F3                     _group:
   663                           	opt stack 0
   664  0000F3                     	ds	1
   665  0000F4                     _cState:
   666                           	opt stack 0
   667  0000F4                     	ds	1
   668  0000F5                     _eusart1RxCount:
   669                           	opt stack 0
   670  0000F5                     	ds	1
   671  0000F6                     _channel:
   672                           	opt stack 0
   673  0000F6                     	ds	1
   674  0000F7                     _Timer0_OneSec:
   675                           	opt stack 0
   676  0000F7                     	ds	1
   677  0000F8                     _Timer0_KeepAlive:
   678                           	opt stack 0
   679  0000F8                     	ds	1
   680  0000F9                     _Timer0_Sampling:
   681                           	opt stack 0
   682  0000F9                     	ds	1
   683  0000FA                     _Timer0_SynthLd:
   684                           	opt stack 0
   685  0000FA                     	ds	1
   686                           tblptru	equ	0xFF8
   687                           tblptrh	equ	0xFF7
   688                           tblptrl	equ	0xFF6
   689                           tablat	equ	0xFF5
   690                           postinc0	equ	0xFEE
   691                           wreg	equ	0xFE8
   692                           postdec1	equ	0xFE5
   693                           fsr1l	equ	0xFE1
   694                           
   695                           	psect	bssBANK1
   696  000100                     __pbssBANK1:
   697                           	opt stack 0
   698  000100                     _eusart1RxBuffer:
   699                           	opt stack 0
   700  000100                     	ds	40
   701  000128                     _mcuRunTimeIn5SecTicks:
   702                           	opt stack 0
   703  000128                     	ds	4
   704  00012C                     _numOfReadSamples:
   705                           	opt stack 0
   706  00012C                     	ds	4
   707  000130                     _numOfValidateSamples:
   708                           	opt stack 0
   709  000130                     	ds	4
   710  000134                     _errno:
   711                           	opt stack 0
   712  000134                     	ds	2
   713  000136                     _sampleCount:
   714                           	opt stack 0
   715  000136                     	ds	2
   716  000138                     _count:
   717                           	opt stack 0
   718  000138                     	ds	2
   719  00013A                     _isReWriteDone:
   720                           	opt stack 0
   721  00013A                     	ds	1
   722  00013B                     _data:
   723                           	opt stack 0
   724  00013B                     	ds	1
   725  00013C                     _sampleArray:
   726                           	opt stack 0
   727  00013C                     	ds	64
   728  00017C                     _rxMsgData:
   729                           	opt stack 0
   730  00017C                     	ds	20
   731  000190                     _rxMsgQueue:
   732                           	opt stack 0
   733  000190                     	ds	20
   734  0001A4                     _synthLdTxArray:
   735                           	opt stack 0
   736  0001A4                     	ds	12
   737  0001B0                     _synthLdRxArray:
   738                           	opt stack 0
   739  0001B0                     	ds	12
   740                           tblptru	equ	0xFF8
   741                           tblptrh	equ	0xFF7
   742                           tblptrl	equ	0xFF6
   743                           tablat	equ	0xFF5
   744                           postinc0	equ	0xFEE
   745                           wreg	equ	0xFE8
   746                           postdec1	equ	0xFE5
   747                           fsr1l	equ	0xFE1
   748                           
   749                           	psect	dataBANK1
   750  0001BC                     __pdataBANK1:
   751                           	opt stack 0
   752  0001BC                     _groupsArray:
   753                           	opt stack 0
   754  0001BC                     	ds	12
   755  0001C8                     _readAddress:
   756                           	opt stack 0
   757  0001C8                     	ds	4
   758                           tblptru	equ	0xFF8
   759                           tblptrh	equ	0xFF7
   760                           tblptrl	equ	0xFF6
   761                           tablat	equ	0xFF5
   762                           postinc0	equ	0xFEE
   763                           wreg	equ	0xFE8
   764                           postdec1	equ	0xFE5
   765                           fsr1l	equ	0xFE1
   766                           
   767                           	psect	bssBANK2
   768  000200                     __pbssBANK2:
   769                           	opt stack 0
   770  000200                     _eusart1TxBuffer:
   771                           	opt stack 0
   772  000200                     	ds	70
   773                           tblptru	equ	0xFF8
   774                           tblptrh	equ	0xFF7
   775                           tblptrl	equ	0xFF6
   776                           tablat	equ	0xFF5
   777                           postinc0	equ	0xFEE
   778                           wreg	equ	0xFE8
   779                           postdec1	equ	0xFE5
   780                           fsr1l	equ	0xFE1
   781                           
   782                           	psect	cstackBANK2
   783  000246                     __pcstackBANK2:
   784                           	opt stack 0
   785  000246                     SynthReadData@TxMsg:
   786                           	opt stack 0
   787                           
   788                           ; 29 bytes @ 0x0
   789  000246                     	ds	29
   790  000263                     SynthReadData@data_987:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x1D
   794  000263                     	ds	1
   795  000264                     _SynthReadData$988:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x1E
   799  000264                     	ds	2
   800  000266                     SynthReadData@eepromDataArray:
   801                           	opt stack 0
   802                           
   803                           ; 20 bytes @ 0x20
   804  000266                     	ds	20
   805  00027A                     SynthReadData@cType:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x34
   809  00027A                     	ds	1
   810  00027B                     SynthReadData@regNum:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x35
   814  00027B                     	ds	1
   815  00027C                     SynthReadData@byteNum:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x36
   819  00027C                     	ds	1
   820                           tblptru	equ	0xFF8
   821                           tblptrh	equ	0xFF7
   822                           tblptrl	equ	0xFF6
   823                           tablat	equ	0xFF5
   824                           postinc0	equ	0xFEE
   825                           wreg	equ	0xFE8
   826                           postdec1	equ	0xFE5
   827                           fsr1l	equ	0xFE1
   828                           
   829                           	psect	cstackBANK0
   830  000060                     __pcstackBANK0:
   831                           	opt stack 0
   832  000060                     ??_FlashSampleWrite:
   833  000060                     ??___ftdiv:
   834  000060                     strtol@sign:
   835                           	opt stack 0
   836  000060                     GetMcuFwVersion@compileData:
   837                           	opt stack 0
   838  000060                     GetMcuRunTime@TxMsg:
   839                           	opt stack 0
   840  000060                     SWSPI_Synth_send_bits@bitArray:
   841                           	opt stack 0
   842                           
   843                           ; 32 bytes @ 0x0
   844  000060                     	ds	1
   845  000061                     strtol@a:
   846                           	opt stack 0
   847                           
   848                           ; 4 bytes @ 0x1
   849  000061                     	ds	1
   850  000062                     FlashSampleWrite@rotateLeft:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x2
   854  000062                     	ds	1
   855  000063                     ___ftdiv@cntr:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x3
   859  000063                     	ds	1
   860  000064                     ___ftdiv@f3:
   861                           	opt stack 0
   862  000064                     GetMcuFwVersion@TxMsg:
   863                           	opt stack 0
   864                           
   865                           ; 18 bytes @ 0x4
   866  000064                     	ds	1
   867  000065                     strtol@c:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x5
   871  000065                     	ds	1
   872  000066                     ?_GetIntFromUartData:
   873                           	opt stack 0
   874  000066                     GetIntFromUartData@data:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x6
   878  000066                     	ds	1
   879  000067                     ___ftdiv@exp:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x7
   883  000067                     	ds	1
   884  000068                     ___ftdiv@sign:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x8
   888  000068                     	ds	1
   889  000069                     ?___ftmul:
   890                           	opt stack 0
   891  000069                     ___ftmul@f1:
   892                           	opt stack 0
   893  000069                     GetMcuRunTime@tempRunTime:
   894                           	opt stack 0
   895                           
   896                           ; 4 bytes @ 0x9
   897  000069                     	ds	3
   898  00006C                     ___ftmul@f2:
   899                           	opt stack 0
   900                           
   901                           ; 3 bytes @ 0xC
   902  00006C                     	ds	1
   903  00006D                     GetMcuRunTime@idx:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0xD
   907  00006D                     	ds	1
   908  00006E                     ??_GetIntFromUartData:
   909                           
   910                           ; 1 bytes @ 0xE
   911  00006E                     	ds	1
   912  00006F                     ??___ftmul:
   913                           
   914                           ; 1 bytes @ 0xF
   915  00006F                     	ds	1
   916  000070                     GetIntFromUartData@dataRegArr:
   917                           	opt stack 0
   918                           
   919                           ; 10 bytes @ 0x10
   920  000070                     	ds	2
   921  000072                     ___ftmul@exp:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x12
   925  000072                     	ds	1
   926  000073                     ___ftmul@f3_as_product:
   927                           	opt stack 0
   928                           
   929                           ; 3 bytes @ 0x13
   930  000073                     	ds	3
   931  000076                     ___ftmul@cntr:
   932                           	opt stack 0
   933  000076                     _GetMcuFwVersion$2698:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x16
   937  000076                     	ds	1
   938  000077                     ___ftmul@sign:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x17
   942  000077                     	ds	1
   943  000078                     ??_CheckFlashPrecentage:
   944  000078                     ?___ftadd:
   945                           	opt stack 0
   946  000078                     ?___fttol:
   947                           	opt stack 0
   948  000078                     _GetMcuFwVersion$2702:
   949                           	opt stack 0
   950  000078                     ___ftadd@f1:
   951                           	opt stack 0
   952  000078                     ___fttol@f1:
   953                           	opt stack 0
   954                           
   955                           ; 3 bytes @ 0x18
   956  000078                     	ds	2
   957  00007A                     GetIntFromUartData@num:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x1A
   961  00007A                     	ds	1
   962  00007B                     GetIntFromUartData@recVal:
   963                           	opt stack 0
   964  00007B                     ___ftadd@f2:
   965                           	opt stack 0
   966                           
   967                           ; 3 bytes @ 0x1B
   968  00007B                     	ds	1
   969  00007C                     ??___fttol:
   970  00007C                     CheckFlashPrecentage@precentage:
   971                           	opt stack 0
   972  00007C                     GetIntFromUartData@retVal:
   973                           	opt stack 0
   974                           
   975                           ; 8 bytes @ 0x1C
   976  00007C                     	ds	2
   977  00007E                     ??___ftadd:
   978                           
   979                           ; 1 bytes @ 0x1E
   980  00007E                     	ds	2
   981  000080                     SWSPI_Synth_send_bits@mask:
   982                           	opt stack 0
   983                           
   984                           ; 4 bytes @ 0x20
   985  000080                     	ds	1
   986  000081                     ___ftadd@sign:
   987                           	opt stack 0
   988  000081                     ___fttol@sign1:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x21
   992  000081                     	ds	1
   993  000082                     ___ftadd@exp2:
   994                           	opt stack 0
   995  000082                     ___fttol@lval:
   996                           	opt stack 0
   997                           
   998                           ; 4 bytes @ 0x22
   999  000082                     	ds	1
  1000  000083                     ___ftadd@exp1:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x23
  1004  000083                     	ds	1
  1005  000084                     ?___ftsub:
  1006                           	opt stack 0
  1007  000084                     ?_eval_poly:
  1008                           	opt stack 0
  1009  000084                     SWSPI_Synth_send_bits@count:
  1010                           	opt stack 0
  1011  000084                     GetIntFromUartData@idxCon:
  1012                           	opt stack 0
  1013  000084                     ___ftsub@f1:
  1014                           	opt stack 0
  1015  000084                     eval_poly@x:
  1016                           	opt stack 0
  1017                           
  1018                           ; 3 bytes @ 0x24
  1019  000084                     	ds	1
  1020  000085                     SWSPI_Synth_send_bits@phrType:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x25
  1024  000085                     	ds	1
  1025  000086                     SWSPI_send_word@datac:
  1026                           	opt stack 0
  1027  000086                     GetIntFromUartData@idxData:
  1028                           	opt stack 0
  1029  000086                     ___fttol@exp1:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x26
  1033  000086                     	ds	1
  1034  000087                     ?___altoft:
  1035                           	opt stack 0
  1036  000087                     FlashReadUart@data:
  1037                           	opt stack 0
  1038  000087                     SWSPI_send_word@idx:
  1039                           	opt stack 0
  1040  000087                     eval_poly@d:
  1041                           	opt stack 0
  1042  000087                     ___ftsub@f2:
  1043                           	opt stack 0
  1044  000087                     ___altoft@c:
  1045                           	opt stack 0
  1046                           
  1047                           ; 4 bytes @ 0x27
  1048  000087                     	ds	2
  1049  000089                     ??_FlashReadUart:
  1050  000089                     SWSPI_send_word@phrType:
  1051                           	opt stack 0
  1052  000089                     eval_poly@n:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x29
  1056  000089                     	ds	1
  1057  00008A                     DacSetValue@data:
  1058                           	opt stack 0
  1059  00008A                     UpdateSynthFreq@data:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x2A
  1063  00008A                     	ds	1
  1064  00008B                     ??___altoft:
  1065  00008B                     eval_poly@res:
  1066                           	opt stack 0
  1067                           
  1068                           ; 3 bytes @ 0x2B
  1069  00008B                     	ds	1
  1070  00008C                     ??_DacSetValue:
  1071  00008C                     UpdateSynthFreq@cType:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x2C
  1075  00008C                     	ds	1
  1076  00008D                     UpdateSynthFreq@retVal:
  1077                           	opt stack 0
  1078                           
  1079                           ; 8 bytes @ 0x2D
  1080  00008D                     	ds	1
  1081  00008E                     ?_log:
  1082                           	opt stack 0
  1083  00008E                     ?_ldexp:
  1084                           	opt stack 0
  1085  00008E                     ldexp@value:
  1086                           	opt stack 0
  1087  00008E                     log@x:
  1088                           	opt stack 0
  1089                           
  1090                           ; 3 bytes @ 0x2E
  1091  00008E                     	ds	1
  1092  00008F                     ?_floor:
  1093                           	opt stack 0
  1094  00008F                     floor@x:
  1095                           	opt stack 0
  1096  00008F                     FlashReadUart@TxMsg:
  1097                           	opt stack 0
  1098                           
  1099                           ; 69 bytes @ 0x2F
  1100  00008F                     	ds	1
  1101  000090                     DacSetValue@dacIndex:
  1102                           	opt stack 0
  1103                           
  1104                           ; 1 bytes @ 0x30
  1105  000090                     	ds	1
  1106  000091                     ldexp@newexp:
  1107                           	opt stack 0
  1108  000091                     log@exponent:
  1109                           	opt stack 0
  1110  000091                     DacSetValue@retVal:
  1111                           	opt stack 0
  1112                           
  1113                           ; 8 bytes @ 0x31
  1114  000091                     	ds	1
  1115  000092                     floor@i:
  1116                           	opt stack 0
  1117                           
  1118                           ; 3 bytes @ 0x32
  1119  000092                     	ds	1
  1120  000093                     ??_ldexp:
  1121                           
  1122                           ; 1 bytes @ 0x33
  1123  000093                     	ds	2
  1124  000095                     floor@expon:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x35
  1128  000095                     	ds	2
  1129  000097                     ?_exp:
  1130                           	opt stack 0
  1131  000097                     exp@x:
  1132                           	opt stack 0
  1133                           
  1134                           ; 3 bytes @ 0x37
  1135  000097                     	ds	3
  1136  00009A                     _exp$3604:
  1137                           	opt stack 0
  1138                           
  1139                           ; 3 bytes @ 0x3A
  1140  00009A                     	ds	3
  1141  00009D                     exp@exponent:
  1142                           	opt stack 0
  1143                           
  1144                           ; 2 bytes @ 0x3D
  1145  00009D                     	ds	2
  1146  00009F                     exp@sign:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x3F
  1150  00009F                     	ds	1
  1151  0000A0                     ?_pow:
  1152                           	opt stack 0
  1153  0000A0                     pow@x:
  1154                           	opt stack 0
  1155                           
  1156                           ; 3 bytes @ 0x40
  1157  0000A0                     	ds	3
  1158  0000A3                     pow@y:
  1159                           	opt stack 0
  1160                           
  1161                           ; 3 bytes @ 0x43
  1162  0000A3                     	ds	3
  1163  0000A6                     _pow$3602:
  1164                           	opt stack 0
  1165                           
  1166                           ; 3 bytes @ 0x46
  1167  0000A6                     	ds	3
  1168  0000A9                     _pow$3603:
  1169                           	opt stack 0
  1170                           
  1171                           ; 3 bytes @ 0x49
  1172  0000A9                     	ds	3
  1173  0000AC                     pow@sign:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x4C
  1177  0000AC                     	ds	1
  1178  0000AD                     pow@yi:
  1179                           	opt stack 0
  1180                           
  1181                           ; 4 bytes @ 0x4D
  1182  0000AD                     	ds	4
  1183  0000B1                     ??_AdcConvert:
  1184  0000B1                     ?_ReadIntFromEeprom:
  1185                           	opt stack 0
  1186  0000B1                     ReadIntFromEeprom@numOfByes:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x51
  1190  0000B1                     	ds	2
  1191  0000B3                     AdcConvert@_adcResult:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x53
  1195  0000B3                     	ds	2
  1196  0000B5                     ??_ReadIntFromEeprom:
  1197  0000B5                     AdcConvert@_adcResult_350:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x55
  1201  0000B5                     	ds	2
  1202  0000B7                     AdcConvert@ldRxSate:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x57
  1206  0000B7                     	ds	1
  1207  0000B8                     ReadIntFromEeprom@base:
  1208                           	opt stack 0
  1209                           
  1210                           ; 4 bytes @ 0x58
  1211  0000B8                     	ds	1
  1212  0000B9                     AdcConvert@ldTxSate:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x59
  1216  0000B9                     	ds	2
  1217  0000BB                     AdcConvert@adcRes:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x5B
  1221  0000BB                     	ds	1
  1222  0000BC                     _ReadIntFromEeprom$3600:
  1223                           	opt stack 0
  1224                           
  1225                           ; 3 bytes @ 0x5C
  1226  0000BC                     	ds	1
  1227  0000BD                     _AdcConvert$3599:
  1228                           	opt stack 0
  1229                           
  1230                           ; 3 bytes @ 0x5D
  1231  0000BD                     	ds	2
  1232  0000BF                     _ReadIntFromEeprom$3601:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x5F
  1236  0000BF                     	ds	1
  1237  0000C0                     AdcConvert@idx:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x60
  1241  0000C0                     	ds	2
  1242  0000C2                     ReadIntFromEeprom@address:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x62
  1246  0000C2                     	ds	1
  1247  0000C3                     ReadIntFromEeprom@retVal:
  1248                           	opt stack 0
  1249                           
  1250                           ; 4 bytes @ 0x63
  1251  0000C3                     	ds	4
  1252  0000C7                     ReadIntFromEeprom@idx:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x67
  1256  0000C7                     	ds	1
  1257  0000C8                     ??_DacInit:
  1258  0000C8                     DacReadValue@data:
  1259                           	opt stack 0
  1260  0000C8                     SynthReadData@data:
  1261                           	opt stack 0
  1262  0000C8                     InitSynth@EepromVal:
  1263                           	opt stack 0
  1264                           
  1265                           ; 4 bytes @ 0x68
  1266  0000C8                     	ds	2
  1267  0000CA                     ??_DacReadValue:
  1268  0000CA                     DacInit@dacInput:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x6A
  1272  0000CA                     	ds	2
  1273  0000CC                     DacInit@idx:
  1274                           	opt stack 0
  1275  0000CC                     DacReadValue@regNum:
  1276                           	opt stack 0
  1277  0000CC                     InitSynth@cType:
  1278                           	opt stack 0
  1279                           
  1280                           ; 1 bytes @ 0x6C
  1281  0000CC                     	ds	1
  1282  0000CD                     DacReadValue@byteNum:
  1283                           	opt stack 0
  1284  0000CD                     InitSynth@idx:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x6D
  1288  0000CD                     	ds	1
  1289  0000CE                     InitSynth@regNum:
  1290                           	opt stack 0
  1291  0000CE                     DacReadValue@readVal:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x6E
  1295  0000CE                     	ds	1
  1296  0000CF                     SetSynthOper@cType:
  1297                           	opt stack 0
  1298                           
  1299                           ; 1 bytes @ 0x6F
  1300  0000CF                     	ds	1
  1301  0000D0                     DacReadValue@dacIndex:
  1302                           	opt stack 0
  1303                           
  1304                           ; 1 bytes @ 0x70
  1305  0000D0                     	ds	1
  1306  0000D1                     DacReadValue@TxMsg:
  1307                           	opt stack 0
  1308                           
  1309                           ; 7 bytes @ 0x71
  1310  0000D1                     	ds	3
  1311  0000D4                     FlashReadUart@val:
  1312                           	opt stack 0
  1313                           
  1314                           ; 8 bytes @ 0x74
  1315  0000D4                     	ds	4
  1316  0000D8                     DacReadValue@byteIdx:
  1317                           	opt stack 0
  1318                           
  1319                           ; 2 bytes @ 0x78
  1320  0000D8                     	ds	4
  1321  0000DC                     _FlashReadUart$609:
  1322                           	opt stack 0
  1323                           
  1324                           ; 4 bytes @ 0x7C
  1325  0000DC                     	ds	4
  1326  0000E0                     FlashReadUart@j:
  1327                           	opt stack 0
  1328                           
  1329                           ; 2 bytes @ 0x80
  1330  0000E0                     	ds	2
  1331  0000E2                     FlashReadUart@numOfSampleToRead:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x82
  1335  0000E2                     	ds	2
  1336  0000E4                     FlashReadUart@idx:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x84
  1340  0000E4                     	ds	2
  1341  0000E6                     GroupAdc@data:
  1342                           	opt stack 0
  1343  0000E6                     GroupSynthesizers@data:
  1344                           	opt stack 0
  1345  0000E6                     GroupFlashMemory@data:
  1346                           	opt stack 0
  1347  0000E6                     GroupDAC@data:
  1348                           	opt stack 0
  1349  0000E6                     
  1350                           ; 3 bytes @ 0x86
  1351  0000E6                     	ds	2
  1352  0000E8                     GroupAdc@request:
  1353                           	opt stack 0
  1354  0000E8                     GroupSynthesizers@request:
  1355                           	opt stack 0
  1356  0000E8                     GroupFlashMemory@request:
  1357                           	opt stack 0
  1358  0000E8                     GroupDAC@request:
  1359                           	opt stack 0
  1360                           
  1361                           ; 1 bytes @ 0x88
  1362  0000E8                     	ds	1
  1363  0000E9                     ??_readUartMessage:
  1364  0000E9                     GroupControlMcu@request:
  1365                           	opt stack 0
  1366  0000E9                     GroupStatusAndVersion@request:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x89
  1370  0000E9                     	ds	4
  1371  0000ED                     readUartMessage@idx:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x8D
  1375  0000ED                     	ds	2
  1376  0000EF                     readUartMessage@chRec:
  1377                           	opt stack 0
  1378                           
  1379                           ; 1 bytes @ 0x8F
  1380  0000EF                     	ds	1
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           postinc0	equ	0xFEE
  1386                           wreg	equ	0xFE8
  1387                           postdec1	equ	0xFE5
  1388                           fsr1l	equ	0xFE1
  1389                           
  1390                           	psect	cstackCOMRAM
  1391  000001                     __pcstackCOMRAM:
  1392                           	opt stack 0
  1393  000001                     ?___lwmod:
  1394                           	opt stack 0
  1395  000001                     ___lwmod@dividend:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x0
  1399  000001                     	ds	2
  1400  000003                     ___lwmod@divisor:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x2
  1404  000003                     	ds	2
  1405  000005                     ___lwmod@counter:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x4
  1409  000005                     	ds	1
  1410  000006                     ??_INTERRUPT_InterruptManager:
  1411                           
  1412                           ; 1 bytes @ 0x5
  1413  000006                     	ds	18
  1414  000018                     ??_EUSART1_Read:
  1415  000018                     ??_isspace:
  1416  000018                     ??_isdigit:
  1417  000018                     ??_isupper:
  1418  000018                     ??_BlinkErrorLeds:
  1419  000018                     ??_BlinkOkLeds:
  1420  000018                     ??_keepAliveSignalLed:
  1421  000018                     ?_ADC_GetConversion:
  1422                           	opt stack 0
  1423  000018                     ?_GetUint16FromBitArray:
  1424                           	opt stack 0
  1425  000018                     ?___wmul:
  1426                           	opt stack 0
  1427  000018                     ?___awmod:
  1428                           	opt stack 0
  1429  000018                     ?___ftpack:
  1430                           	opt stack 0
  1431  000018                     ?_frexp:
  1432                           	opt stack 0
  1433  000018                     ?___ftneg:
  1434                           	opt stack 0
  1435  000018                     ?___lldiv:
  1436                           	opt stack 0
  1437  000018                     ?___llmod:
  1438                           	opt stack 0
  1439  000018                     SwSpi_Data_Pin@cPinMode:
  1440                           	opt stack 0
  1441  000018                     SwSpi_Clk_Pin@cPinMode:
  1442                           	opt stack 0
  1443  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1444                           	opt stack 0
  1445  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1446                           	opt stack 0
  1447  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1448                           	opt stack 0
  1449  000018                     EUSART1_Write@txData:
  1450                           	opt stack 0
  1451  000018                     DATAEE_WriteByte@bData:
  1452                           	opt stack 0
  1453  000018                     DATAEE_ReadByte@bAdd:
  1454                           	opt stack 0
  1455  000018                     toupper@c:
  1456                           	opt stack 0
  1457  000018                     IOCB4_SetInterruptHandler@InterruptHandler:
  1458                           	opt stack 0
  1459  000018                     IOCB5_SetInterruptHandler@InterruptHandler:
  1460                           	opt stack 0
  1461  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1462                           	opt stack 0
  1463  000018                     crc8@dataArray:
  1464                           	opt stack 0
  1465  000018                     GetUint16FromBitArray@bitarray:
  1466                           	opt stack 0
  1467  000018                     Make32bitsArray@array:
  1468                           	opt stack 0
  1469  000018                     ___wmul@multiplier:
  1470                           	opt stack 0
  1471  000018                     ___awmod@dividend:
  1472                           	opt stack 0
  1473  000018                     memset@p1:
  1474                           	opt stack 0
  1475  000018                     ___ftpack@arg:
  1476                           	opt stack 0
  1477  000018                     ___ftge@ff1:
  1478                           	opt stack 0
  1479  000018                     ___ftneg@f1:
  1480                           	opt stack 0
  1481  000018                     frexp@value:
  1482                           	opt stack 0
  1483  000018                     FLASH_ReadByte@flashAddr:
  1484                           	opt stack 0
  1485  000018                     FLASH_EraseBlock@baseAddr:
  1486                           	opt stack 0
  1487  000018                     make8@data:
  1488                           	opt stack 0
  1489  000018                     ___lldiv@dividend:
  1490                           	opt stack 0
  1491  000018                     ___llmod@dividend:
  1492                           	opt stack 0
  1493                           
  1494                           ; 4 bytes @ 0x17
  1495  000018                     	ds	1
  1496  000019                     EepromRead@address:
  1497                           	opt stack 0
  1498  000019                     SwSpi_Data_Pin@phrType:
  1499                           	opt stack 0
  1500  000019                     SwSpi_Clk_Pin@phrType:
  1501                           	opt stack 0
  1502  000019                     SwSpi_Set_CE_Pin@phrType:
  1503                           	opt stack 0
  1504  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1505                           	opt stack 0
  1506  000019                     DATAEE_WriteByte@bAdd:
  1507                           	opt stack 0
  1508  000019                     _isdigit$3329:
  1509                           	opt stack 0
  1510  000019                     _isspace$3332:
  1511                           	opt stack 0
  1512  000019                     _isupper$3335:
  1513                           	opt stack 0
  1514  000019                     WriteUartMessage@dataBuf:
  1515                           	opt stack 0
  1516  000019                     EUSART1_Read@readValue:
  1517                           	opt stack 0
  1518                           
  1519                           ; 2 bytes @ 0x18
  1520  000019                     	ds	1
  1521  00001A                     ??_ADC_GetConversion:
  1522  00001A                     ??_TMR0_Initialize:
  1523  00001A                     ?___lmul:
  1524                           	opt stack 0
  1525  00001A                     SWSPI_DAC_send_bits@data:
  1526                           	opt stack 0
  1527  00001A                     DATAEE_WriteByte@GIEBitValue:
  1528                           	opt stack 0
  1529  00001A                     isdigit@c:
  1530                           	opt stack 0
  1531  00001A                     isspace@c:
  1532                           	opt stack 0
  1533  00001A                     isupper@c:
  1534                           	opt stack 0
  1535  00001A                     crc8@dataSize:
  1536                           	opt stack 0
  1537  00001A                     GetUint16FromBitArray@numOfBits:
  1538                           	opt stack 0
  1539  00001A                     ___wmul@multiplicand:
  1540                           	opt stack 0
  1541  00001A                     ___awmod@divisor:
  1542                           	opt stack 0
  1543  00001A                     memset@c:
  1544                           	opt stack 0
  1545  00001A                     Make32bitsArray@data:
  1546                           	opt stack 0
  1547  00001A                     ___lmul@multiplier:
  1548                           	opt stack 0
  1549                           
  1550                           ; 4 bytes @ 0x19
  1551  00001A                     	ds	1
  1552  00001B                     ??_isalpha:
  1553  00001B                     BlinkErrorLeds@state:
  1554                           	opt stack 0
  1555  00001B                     BlinkOkLeds@state:
  1556                           	opt stack 0
  1557  00001B                     EepromWrite@data:
  1558                           	opt stack 0
  1559  00001B                     SWSPI_DAC_send_bits@count:
  1560                           	opt stack 0
  1561  00001B                     ___ftpack@exp:
  1562                           	opt stack 0
  1563  00001B                     WriteUartMessage@dataSize:
  1564                           	opt stack 0
  1565  00001B                     frexp@eptr:
  1566                           	opt stack 0
  1567  00001B                     ___ftge@ff2:
  1568                           	opt stack 0
  1569                           
  1570                           ; 3 bytes @ 0x1A
  1571  00001B                     	ds	1
  1572  00001C                     ??_GetUint16FromBitArray:
  1573  00001C                     ??_crc8:
  1574  00001C                     EepromWrite@address:
  1575                           	opt stack 0
  1576  00001C                     SWSPI_DAC_send_bits@phrType:
  1577                           	opt stack 0
  1578  00001C                     FLASH_EraseBlock@GIEBitValue:
  1579                           	opt stack 0
  1580  00001C                     ADC_GetConversion@channel:
  1581                           	opt stack 0
  1582  00001C                     make8@dataLocation:
  1583                           	opt stack 0
  1584  00001C                     ___awmod@counter:
  1585                           	opt stack 0
  1586  00001C                     ___ftpack@sign:
  1587                           	opt stack 0
  1588  00001C                     _isalpha$3326:
  1589                           	opt stack 0
  1590  00001C                     BlinkErrorLeds@idx:
  1591                           	opt stack 0
  1592  00001C                     BlinkOkLeds@idx:
  1593                           	opt stack 0
  1594  00001C                     ___wmul@product:
  1595                           	opt stack 0
  1596  00001C                     memset@n:
  1597                           	opt stack 0
  1598  00001C                     ___lldiv@divisor:
  1599                           	opt stack 0
  1600  00001C                     ___llmod@divisor:
  1601                           	opt stack 0
  1602                           
  1603                           ; 4 bytes @ 0x1B
  1604  00001C                     	ds	1
  1605  00001D                     ??_make8:
  1606  00001D                     ??___ftpack:
  1607  00001D                     ??_frexp:
  1608  00001D                     ??_WriteUartMessage:
  1609  00001D                     ___awmod@sign:
  1610                           	opt stack 0
  1611  00001D                     isalpha@c:
  1612                           	opt stack 0
  1613  00001D                     crc8@crc:
  1614                           	opt stack 0
  1615  00001D                     FLASH_WriteBlock@writeAddr:
  1616                           	opt stack 0
  1617                           
  1618                           ; 4 bytes @ 0x1C
  1619  00001D                     	ds	1
  1620  00001E                     ??_Make32bitsArray:
  1621  00001E                     ??___ftge:
  1622  00001E                     WriteUartMessage@idx:
  1623                           	opt stack 0
  1624  00001E                     memset@p:
  1625                           	opt stack 0
  1626  00001E                     ___lmul@multiplicand:
  1627                           	opt stack 0
  1628                           
  1629                           ; 4 bytes @ 0x1D
  1630  00001E                     	ds	1
  1631  00001F                     crc8@i:
  1632                           	opt stack 0
  1633  00001F                     GetUint16FromBitArray@res:
  1634                           	opt stack 0
  1635                           
  1636                           ; 2 bytes @ 0x1E
  1637  00001F                     	ds	1
  1638  000020                     ?___awtoft:
  1639                           	opt stack 0
  1640  000020                     ?___lltoft:
  1641                           	opt stack 0
  1642  000020                     ?___lwtoft:
  1643                           	opt stack 0
  1644  000020                     ___llmod@counter:
  1645                           	opt stack 0
  1646  000020                     ZeroArray@array:
  1647                           	opt stack 0
  1648  000020                     FillArray@array:
  1649                           	opt stack 0
  1650  000020                     Make32bitsArray@idx:
  1651                           	opt stack 0
  1652  000020                     ___awtoft@c:
  1653                           	opt stack 0
  1654  000020                     ___lwtoft@c:
  1655                           	opt stack 0
  1656  000020                     ___lldiv@quotient:
  1657                           	opt stack 0
  1658  000020                     ___lltoft@c:
  1659                           	opt stack 0
  1660                           
  1661                           ; 4 bytes @ 0x1F
  1662  000020                     	ds	1
  1663  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1664                           	opt stack 0
  1665  000021                     GetUint16FromBitArray@i:
  1666                           	opt stack 0
  1667  000021                     StoreIntInEeprom@data:
  1668                           	opt stack 0
  1669                           
  1670                           ; 4 bytes @ 0x20
  1671  000021                     	ds	1
  1672  000022                     ZeroArray@size:
  1673                           	opt stack 0
  1674  000022                     FillArray@size:
  1675                           	opt stack 0
  1676  000022                     ___lmul@product:
  1677                           	opt stack 0
  1678                           
  1679                           ; 4 bytes @ 0x21
  1680  000022                     	ds	1
  1681  000023                     ??_FLASH_WriteBlock:
  1682  000023                     ___awtoft@sign:
  1683                           	opt stack 0
  1684                           
  1685                           ; 1 bytes @ 0x22
  1686  000023                     	ds	1
  1687  000024                     ??_GetMcuFwVersion:
  1688  000024                     ??_FlashReadCondition:
  1689  000024                     ??___lltoft:
  1690  000024                     SendAckMessage@inRequest:
  1691                           	opt stack 0
  1692  000024                     FillArray@value:
  1693                           	opt stack 0
  1694  000024                     ___lldiv@counter:
  1695                           	opt stack 0
  1696                           
  1697                           ; 1 bytes @ 0x23
  1698  000024                     	ds	1
  1699  000025                     ??_GetMcuRunTime:
  1700  000025                     SendAckMessage@inGroup:
  1701                           	opt stack 0
  1702  000025                     StoreIntInEeprom@address:
  1703                           	opt stack 0
  1704  000025                     SWSPI_Synth_send_bits@data:
  1705                           	opt stack 0
  1706                           
  1707                           ; 4 bytes @ 0x24
  1708  000025                     	ds	1
  1709  000026                     ?_strtol:
  1710                           	opt stack 0
  1711  000026                     StoreIntInEeprom@numOfByes:
  1712                           	opt stack 0
  1713  000026                     strtol@s:
  1714                           	opt stack 0
  1715  000026                     SendAckMessage@TxMsg:
  1716                           	opt stack 0
  1717                           
  1718                           ; 6 bytes @ 0x25
  1719  000026                     	ds	1
  1720  000027                     FLASH_WriteBlock@blockStartAddr:
  1721                           	opt stack 0
  1722                           
  1723                           ; 4 bytes @ 0x26
  1724  000027                     	ds	1
  1725  000028                     StoreIntInEeprom@val:
  1726                           	opt stack 0
  1727  000028                     ___lltoft@exp:
  1728                           	opt stack 0
  1729  000028                     strtol@endptr:
  1730                           	opt stack 0
  1731  000028                     FlashReadCondition@TxMsg:
  1732                           	opt stack 0
  1733                           
  1734                           ; 9 bytes @ 0x27
  1735  000028                     	ds	1
  1736  000029                     ?___ftdiv:
  1737                           	opt stack 0
  1738  000029                     StoreIntInEeprom@idx:
  1739                           	opt stack 0
  1740  000029                     ___ftdiv@f1:
  1741                           	opt stack 0
  1742  000029                     SWSPI_send_word@data:
  1743                           	opt stack 0
  1744                           
  1745                           ; 4 bytes @ 0x28
  1746  000029                     	ds	1
  1747  00002A                     strtol@base:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0x29
  1751  00002A                     	ds	1
  1752  00002B                     FLASH_WriteBlock@GIEBitValue:
  1753                           	opt stack 0
  1754                           
  1755                           ; 1 bytes @ 0x2A
  1756  00002B                     	ds	1
  1757  00002C                     ??_strtol:
  1758  00002C                     ??_testLeds:
  1759  00002C                     FLASH_WriteBlock@i:
  1760                           	opt stack 0
  1761  00002C                     SetChannelMode@data:
  1762                           	opt stack 0
  1763  00002C                     ___ftdiv@f2:
  1764                           	opt stack 0
  1765                           
  1766                           ; 3 bytes @ 0x2B
  1767  00002C                     	ds	1
  1768  00002D                     SWSPI_send_word@dataSize:
  1769                           	opt stack 0
  1770  00002D                     testLeds@idx:
  1771                           	opt stack 0
  1772  00002D                     FlashSampleWrite@sampleData:
  1773                           	opt stack 0
  1774                           
  1775                           ; 2 bytes @ 0x2C
  1776  00002D                     	ds	1
  1777  00002E                     
  1778                           ; 1 bytes @ 0x2D
  1779  00002E                     	ds	1
  1780  00002F                     ??_eval_poly:
  1781  00002F                     FlashSampleWrite@channelNum:
  1782                           	opt stack 0
  1783  00002F                     ___altoft@exp:
  1784                           	opt stack 0
  1785                           
  1786                           ; 1 bytes @ 0x2E
  1787  00002F                     	ds	1
  1788  000030                     ___altoft@sign:
  1789                           	opt stack 0
  1790                           
  1791                           ; 1 bytes @ 0x2F
  1792  000030                     	ds	1
  1793  000031                     tblptru	equ	0xFF8
  1794                           tblptrh	equ	0xFF7
  1795                           tblptrl	equ	0xFF6
  1796                           tablat	equ	0xFF5
  1797                           postinc0	equ	0xFEE
  1798                           wreg	equ	0xFE8
  1799                           postdec1	equ	0xFE5
  1800                           fsr1l	equ	0xFE1
  1801                           
  1802                           ; 1 bytes @ 0x30
  1803 ;;
  1804 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1805 ;;
  1806 ;; *************** function _main *****************
  1807 ;; Defined at:
  1808 ;;		line 13 in file "main.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;		None
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;		None
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1822 ;;      Params:         0       0       0       0       0       0       0
  1823 ;;      Locals:         0       0       0       0       0       0       0
  1824 ;;      Temps:          0       0       0       0       0       0       0
  1825 ;;      Totals:         0       0       0       0       0       0       0
  1826 ;;Total ram usage:        0 bytes
  1827 ;; Hardware stack levels required when called:   14
  1828 ;; This function calls:
  1829 ;;		_AdcConvert
  1830 ;;		_BlinkErrorLeds
  1831 ;;		_BlinkOkLeds
  1832 ;;		_CheckFlashPrecentage
  1833 ;;		_InitSystemApplicationManagers
  1834 ;;		_SendSystemStartAck
  1835 ;;		_SetMcuRunTime
  1836 ;;		_SetMcuSystem
  1837 ;;		_SynthLdDetect
  1838 ;;		_keepAliveSignalLed
  1839 ;;		_keepAliveSignalUart
  1840 ;;		_readUartMessage
  1841 ;; This function is called by:
  1842 ;;		Startup code after reset
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           	psect	text0
  1847  003568                     __ptext0:
  1848                           	opt stack 0
  1849  003568                     _main:
  1850                           	opt stack 17
  1851                           
  1852                           ;main.c: 16: SetMcuSystem();
  1853                           
  1854                           ;incstack = 0
  1855  003568  EC11  F022         	call	_SetMcuSystem	;wreg free
  1856                           
  1857                           ;main.c: 19: InitSystemApplicationManagers();
  1858  00356C  ECA7  F021         	call	_InitSystemApplicationManagers	;wreg free
  1859                           
  1860                           ;main.c: 22: SendSystemStartAck();
  1861  003570  EC0B  F022         	call	_SendSystemStartAck	;wreg free
  1862                           
  1863                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1864  003574  0E03               	movlw	3
  1865  003576  EC23  F01C         	call	_BlinkOkLeds
  1866  00357A                     
  1867                           ;main.c: 28: {
  1868                           ;main.c: 29: readUartMessage();
  1869  00357A  ECE3  F00A         	call	_readUartMessage	;wreg free
  1870                           
  1871                           ;main.c: 31: if (Timer0_OneSec == 1)
  1872  00357E  0100               	movlb	0	; () banked
  1873  003580  05F7               	decf	_Timer0_OneSec& (0+255),w,b	;volatile
  1874  003582  A4D8               	btfss	status,2,c
  1875  003584  D006               	goto	l1591
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;main.c: 32: {
  1879                           ;main.c: 33: SetMcuRunTime();
  1880  003586  EC22  F01E         	call	_SetMcuRunTime	;wreg free
  1881                           
  1882                           ;main.c: 34: Timer0_OneSec = 0;
  1883  00358A  0E00               	movlw	0
  1884  00358C  0100               	movlb	0	; () banked
  1885  00358E  6FF7               	movwf	_Timer0_OneSec& (0+255),b	;volatile
  1886                           
  1887                           ;main.c: 35: }
  1888  003590  D7F4               	goto	l1590
  1889  003592                     l1591:
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;main.c: 36: else if (Timer0_Sampling == 1)
  1893                           
  1894                           ; BSR set to: 0
  1895  003592  05F9               	decf	_Timer0_Sampling& (0+255),w,b	;volatile
  1896  003594  A4D8               	btfss	status,2,c
  1897  003596  D010               	goto	l1593
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;main.c: 37: {
  1901                           ;main.c: 38: keepAliveSignalLed();
  1902  003598  EC90  F021         	call	_keepAliveSignalLed	;wreg free
  1903                           
  1904                           ;main.c: 40: if(1 == CheckFlashPrecentage())
  1905  00359C  EC3B  F017         	call	_CheckFlashPrecentage	;wreg free
  1906  0035A0  06E8               	decf	wreg,f,c
  1907  0035A2  A4D8               	btfss	status,2,c
  1908  0035A4  D003               	goto	l1594
  1909                           
  1910                           ;main.c: 41: {
  1911                           ;main.c: 42: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1912  0035A6  0E02               	movlw	2
  1913  0035A8  ECF4  F01B         	call	_BlinkErrorLeds
  1914  0035AC                     l1594:
  1915                           
  1916                           ;main.c: 43: }
  1917                           ;main.c: 46: AdcConvert();
  1918  0035AC  ECDE  F007         	call	_AdcConvert	;wreg free
  1919                           
  1920                           ;main.c: 47: Timer0_Sampling = 0;
  1921  0035B0  0E00               	movlw	0
  1922  0035B2  0100               	movlb	0	; () banked
  1923  0035B4  6FF9               	movwf	_Timer0_Sampling& (0+255),b	;volatile
  1924                           
  1925                           ;main.c: 48: }
  1926  0035B6  D7E1               	goto	l1590
  1927  0035B8                     l1593:
  1928                           
  1929                           ; BSR set to: 0
  1930                           ;main.c: 49: else if (Timer0_KeepAlive == 1)
  1931                           
  1932                           ; BSR set to: 0
  1933  0035B8  05F8               	decf	_Timer0_KeepAlive& (0+255),w,b	;volatile
  1934  0035BA  A4D8               	btfss	status,2,c
  1935  0035BC  D006               	goto	l1596
  1936                           
  1937                           ; BSR set to: 0
  1938                           ;main.c: 50: {
  1939                           ;main.c: 51: keepAliveSignalUart();
  1940  0035BE  EC05  F022         	call	_keepAliveSignalUart	;wreg free
  1941                           
  1942                           ;main.c: 52: Timer0_KeepAlive = 0;
  1943  0035C2  0E00               	movlw	0
  1944  0035C4  0100               	movlb	0	; () banked
  1945  0035C6  6FF8               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
  1946                           
  1947                           ;main.c: 53: }
  1948  0035C8  D7D8               	goto	l1590
  1949  0035CA                     l1596:
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;main.c: 54: else if (Timer0_SynthLd == 1)
  1953                           
  1954                           ; BSR set to: 0
  1955  0035CA  05FA               	decf	_Timer0_SynthLd& (0+255),w,b	;volatile
  1956  0035CC  A4D8               	btfss	status,2,c
  1957  0035CE  D7D5               	goto	l1590
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;main.c: 55: {
  1961                           ;main.c: 56: SynthLdDetect();
  1962  0035D0  EC3D  F015         	call	_SynthLdDetect	;wreg free
  1963                           
  1964                           ;main.c: 57: Timer0_SynthLd = 0;
  1965  0035D4  0E00               	movlw	0
  1966  0035D6  0100               	movlb	0	; () banked
  1967  0035D8  6FFA               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
  1968                           
  1969                           ; BSR set to: 0
  1970                           
  1971                           ; BSR set to: 0
  1972                           
  1973                           ; BSR set to: 0
  1974                           
  1975                           ; BSR set to: 0
  1976                           
  1977                           ; BSR set to: 0
  1978  0035DA  D7CF               	goto	l1590
  1979  0035DC                     __end_of_main:
  1980                           	opt stack 0
  1981                           tblptru	equ	0xFF8
  1982                           tblptrh	equ	0xFF7
  1983                           tblptrl	equ	0xFF6
  1984                           tablat	equ	0xFF5
  1985                           postinc0	equ	0xFEE
  1986                           wreg	equ	0xFE8
  1987                           postdec1	equ	0xFE5
  1988                           fsr1l	equ	0xFE1
  1989                           status	equ	0xFD8
  1990                           
  1991 ;; *************** function _readUartMessage *****************
  1992 ;; Defined at:
  1993 ;;		line 28 in file "EusartApp.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;		None
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;  idx             2  141[BANK0 ] int 
  1998 ;;  chRec           1  143[BANK0 ] unsigned char 
  1999 ;; Return value:  Size  Location     Type
  2000 ;;                  1    wreg      void 
  2001 ;; Registers used:
  2002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2008 ;;      Params:         0       0       0       0       0       0       0
  2009 ;;      Locals:         0       3       0       0       0       0       0
  2010 ;;      Temps:          0       4       0       0       0       0       0
  2011 ;;      Totals:         0       7       0       0       0       0       0
  2012 ;;Total ram usage:        7 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; Hardware stack levels required when called:   13
  2015 ;; This function calls:
  2016 ;;		_EUSART1_Read
  2017 ;;		_GroupAdc
  2018 ;;		_GroupControlMcu
  2019 ;;		_GroupDAC
  2020 ;;		_GroupFlashMemory
  2021 ;;		_GroupStatusAndVersion
  2022 ;;		_GroupSynthesizers
  2023 ;;		_InitRxMessageParams
  2024 ;;		_ZeroArray
  2025 ;;		_crc8
  2026 ;; This function is called by:
  2027 ;;		_main
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031                           	psect	text1
  2032  0015C6                     __ptext1:
  2033                           	opt stack 0
  2034  0015C6                     _readUartMessage:
  2035                           	opt stack 17
  2036                           
  2037                           ;EusartApp.c: 31: uint8_t chRec = (0);
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;incstack = 0
  2041  0015C6  0E00               	movlw	0
  2042  0015C8  0100               	movlb	0	; () banked
  2043  0015CA  6FEF               	movwf	readUartMessage@chRec& (0+255),b
  2044                           
  2045                           ;EusartApp.c: 32: switch(cState)
  2046  0015CC  D0D3               	goto	l202
  2047  0015CE                     
  2048                           ; BSR set to: 0
  2049                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  2050                           
  2051                           ; BSR set to: 0
  2052  0015CE  0E04               	movlw	4
  2053  0015D0  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2054  0015D2  0012               	return	
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;EusartApp.c: 38: {
  2058                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  2059  0015D4  0E01               	movlw	1
  2060  0015D6  6FF4               	movwf	_cState& (0+255),b
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;EusartApp.c: 40: }
  2064                           ;EusartApp.c: 41: return;
  2065                           
  2066                           ; BSR set to: 0
  2067  0015D8  0012               	return	
  2068  0015DA                     
  2069                           ; BSR set to: 0
  2070                           ;EusartApp.c: 45: InitRxMessageParams();
  2071                           
  2072                           ; BSR set to: 0
  2073  0015DA  EC84  F020         	call	_InitRxMessageParams	;wreg free
  2074                           
  2075                           ;EusartApp.c: 46: msgCount = 0;
  2076  0015DE  0E00               	movlw	0
  2077  0015E0  0100               	movlb	0	; () banked
  2078  0015E2  6FF0               	movwf	_msgCount& (0+255),b
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  2082  0015E4  0E01               	movlw	1
  2083  0015E6  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2084  0015E8  D00D               	goto	l207
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;EusartApp.c: 48: {
  2088                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  2089  0015EA  EC00  F01E         	call	_EUSART1_Read	;wreg free
  2090  0015EE  0100               	movlb	0	; () banked
  2091  0015F0  6FEF               	movwf	readUartMessage@chRec& (0+255),b
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  2095  0015F2  C0EF  F190         	movff	readUartMessage@chRec,_rxMsgQueue
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;EusartApp.c: 51: if(chRec == (0x24))
  2099  0015F6  0E24               	movlw	36
  2100  0015F8  19EF               	xorwf	readUartMessage@chRec& (0+255),w,b
  2101  0015FA  A4D8               	btfss	status,2,c
  2102  0015FC  0012               	return	
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;EusartApp.c: 52: {
  2106                           ;EusartApp.c: 53: cState = READ_GROUP;
  2107  0015FE  0E02               	movlw	2
  2108  001600  6FF4               	movwf	_cState& (0+255),b
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;EusartApp.c: 54: }
  2112                           ;EusartApp.c: 55: }
  2113  001602  0012               	return	
  2114  001604                     l207:
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;EusartApp.c: 56: else
  2118                           ;EusartApp.c: 57: {
  2119                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  2120                           
  2121                           ; BSR set to: 0
  2122  001604  0E00               	movlw	0
  2123  001606  6FF4               	movwf	_cState& (0+255),b
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;EusartApp.c: 59: }
  2127                           ;EusartApp.c: 61: break;
  2128  001608  0012               	return	
  2129  00160A                     
  2130                           ; BSR set to: 0
  2131                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  2132                           
  2133                           ; BSR set to: 0
  2134  00160A  0E01               	movlw	1
  2135  00160C  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2136  00160E  0012               	return	
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;EusartApp.c: 66: {
  2140                           ;EusartApp.c: 67: group = EUSART1_Read();
  2141  001610  EC00  F01E         	call	_EUSART1_Read	;wreg free
  2142  001614  0100               	movlb	0	; () banked
  2143  001616  6FF3               	movwf	_group& (0+255),b
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  2147  001618  C0F3  F191         	movff	_group,_rxMsgQueue+1
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;EusartApp.c: 69: cState = READ_REQUEST;
  2151  00161C  0E03               	movlw	3
  2152  00161E  6FF4               	movwf	_cState& (0+255),b
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;EusartApp.c: 70: }
  2156                           ;EusartApp.c: 71: break;
  2157  001620  0012               	return	
  2158  001622                     
  2159                           ; BSR set to: 0
  2160                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  2161                           
  2162                           ; BSR set to: 0
  2163  001622  0E01               	movlw	1
  2164  001624  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2165  001626  0012               	return	
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;EusartApp.c: 76: {
  2169                           ;EusartApp.c: 77: request = EUSART1_Read();
  2170  001628  EC00  F01E         	call	_EUSART1_Read	;wreg free
  2171  00162C  0100               	movlb	0	; () banked
  2172  00162E  6FF2               	movwf	_request& (0+255),b
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  2176  001630  C0F2  F192         	movff	_request,_rxMsgQueue+2
  2177                           
  2178                           ; BSR set to: 0
  2179                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  2180  001634  0E04               	movlw	4
  2181  001636  6FF4               	movwf	_cState& (0+255),b
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;EusartApp.c: 80: }
  2185                           ;EusartApp.c: 81: break;
  2186  001638  0012               	return	
  2187  00163A                     
  2188                           ; BSR set to: 0
  2189                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  2190                           
  2191                           ; BSR set to: 0
  2192  00163A  0E01               	movlw	1
  2193  00163C  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2194  00163E  0012               	return	
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;EusartApp.c: 85: {
  2198                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  2199  001640  EC00  F01E         	call	_EUSART1_Read	;wreg free
  2200  001644  0100               	movlb	0	; () banked
  2201  001646  6FF1               	movwf	_dataSize& (0+255),b
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  2205  001648  C0F1  F193         	movff	_dataSize,_rxMsgQueue+3
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;EusartApp.c: 88: if(dataSize == 0)
  2209  00164C  51F1               	movf	_dataSize& (0+255),w,b
  2210  00164E  A4D8               	btfss	status,2,c
  2211  001650  D003               	goto	l217
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;EusartApp.c: 89: {
  2215                           ;EusartApp.c: 90: cState = CHECK_CRC;
  2216  001652  0E06               	movlw	6
  2217  001654  6FF4               	movwf	_cState& (0+255),b
  2218                           
  2219                           ;EusartApp.c: 91: }
  2220  001656  0012               	return	
  2221  001658                     l217:
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;EusartApp.c: 92: else
  2225                           ;EusartApp.c: 93: {
  2226                           ;EusartApp.c: 94: cState = READ_DATA;
  2227                           
  2228                           ; BSR set to: 0
  2229  001658  0E05               	movlw	5
  2230  00165A  6FF4               	movwf	_cState& (0+255),b
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;EusartApp.c: 95: }
  2234                           ;EusartApp.c: 97: }
  2235                           ;EusartApp.c: 99: break;
  2236                           
  2237                           ; BSR set to: 0
  2238  00165C  0012               	return	
  2239  00165E                     
  2240                           ; BSR set to: 0
  2241                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  2242                           
  2243                           ; BSR set to: 0
  2244  00165E  51F1               	movf	_dataSize& (0+255),w,b
  2245  001660  5DF5               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  2246  001662  A0D8               	btfss	status,0,c
  2247  001664  0012               	return	
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;EusartApp.c: 104: {
  2251                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  2252  001666  0E7C               	movlw	low _rxMsgData
  2253  001668  6E20               	movwf	ZeroArray@array,c
  2254  00166A  0E01               	movlw	high _rxMsgData
  2255  00166C  6E21               	movwf	ZeroArray@array+1,c
  2256  00166E  0E00               	movlw	0
  2257  001670  6E23               	movwf	ZeroArray@size+1,c
  2258  001672  0E14               	movlw	20
  2259  001674  6E22               	movwf	ZeroArray@size,c
  2260  001676  EC58  F021         	call	_ZeroArray	;wreg free
  2261                           
  2262                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2263  00167A  0E00               	movlw	0
  2264  00167C  0100               	movlb	0	; () banked
  2265  00167E  6FEE               	movwf	(readUartMessage@idx+1)& (0+255),b
  2266  001680  0E00               	movlw	0
  2267  001682  6FED               	movwf	readUartMessage@idx& (0+255),b
  2268  001684  D01E               	goto	l221
  2269  001686                     
  2270                           ; BSR set to: 0
  2271                           ;EusartApp.c: 108: {
  2272                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2273                           
  2274                           ; BSR set to: 0
  2275  001686  EC00  F01E         	call	_EUSART1_Read	;wreg free
  2276  00168A  0100               	movlb	0	; () banked
  2277  00168C  6FEF               	movwf	readUartMessage@chRec& (0+255),b
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2281  00168E  51F0               	movf	_msgCount& (0+255),w,b
  2282  001690  6FE9               	movwf	??_readUartMessage& (0+255),b
  2283  001692  6BEA               	clrf	(??_readUartMessage+1)& (0+255),b
  2284  001694  0E04               	movlw	4
  2285  001696  27E9               	addwf	??_readUartMessage& (0+255),f,b
  2286  001698  0E00               	movlw	0
  2287  00169A  23EA               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2288  00169C  0E90               	movlw	low _rxMsgQueue
  2289  00169E  25E9               	addwf	??_readUartMessage& (0+255),w,b
  2290  0016A0  6ED9               	movwf	fsr2l,c
  2291  0016A2  0E01               	movlw	high _rxMsgQueue
  2292  0016A4  21EA               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2293  0016A6  6EDA               	movwf	fsr2h,c
  2294  0016A8  C0EF  FFDF         	movff	readUartMessage@chRec,indf2
  2295                           
  2296                           ; BSR set to: 0
  2297  0016AC  2BF0               	incf	_msgCount& (0+255),f,b
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2301  0016AE  0E7C               	movlw	low _rxMsgData
  2302  0016B0  25ED               	addwf	readUartMessage@idx& (0+255),w,b
  2303  0016B2  6ED9               	movwf	fsr2l,c
  2304  0016B4  0E01               	movlw	high _rxMsgData
  2305  0016B6  21EE               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2306  0016B8  6EDA               	movwf	fsr2h,c
  2307  0016BA  C0EF  FFDF         	movff	readUartMessage@chRec,indf2
  2308                           
  2309                           ; BSR set to: 0
  2310  0016BE  4BED               	infsnz	readUartMessage@idx& (0+255),f,b
  2311  0016C0  2BEE               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2312  0016C2                     l221:
  2313                           
  2314                           ; BSR set to: 0
  2315                           
  2316                           ; BSR set to: 0
  2317  0016C2  51F1               	movf	_dataSize& (0+255),w,b
  2318  0016C4  6FE9               	movwf	??_readUartMessage& (0+255),b
  2319  0016C6  6BEA               	clrf	(??_readUartMessage+1)& (0+255),b
  2320  0016C8  51E9               	movf	??_readUartMessage& (0+255),w,b
  2321  0016CA  5DED               	subwf	readUartMessage@idx& (0+255),w,b
  2322  0016CC  51EE               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2323  0016CE  0A80               	xorlw	128
  2324  0016D0  6FEB               	movwf	(??_readUartMessage+2)& (0+255),b
  2325  0016D2  51EA               	movf	(??_readUartMessage+1)& (0+255),w,b
  2326  0016D4  0A80               	xorlw	128
  2327  0016D6  59EB               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2328  0016D8  A0D8               	btfss	status,0,c
  2329  0016DA  D7D5               	goto	l222
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;EusartApp.c: 112: }
  2333                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2334                           
  2335                           ; BSR set to: 0
  2336  0016DC  0E06               	movlw	6
  2337  0016DE  6FF4               	movwf	_cState& (0+255),b
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;EusartApp.c: 115: }
  2341                           ;EusartApp.c: 116: break;
  2342  0016E0  0012               	return	
  2343  0016E2                     
  2344                           ; BSR set to: 0
  2345                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2346                           
  2347                           ; BSR set to: 0
  2348  0016E2  51F5               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2349  0016E4  B4D8               	btfsc	status,2,c
  2350  0016E6  0012               	return	
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;EusartApp.c: 120: {
  2354                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2355  0016E8  EC00  F01E         	call	_EUSART1_Read	;wreg free
  2356  0016EC  6E3B               	movwf	_crcGiven,c
  2357                           
  2358                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2359  0016EE  0E90               	movlw	low _rxMsgQueue
  2360  0016F0  6E18               	movwf	crc8@dataArray,c
  2361  0016F2  0E01               	movlw	high _rxMsgQueue
  2362  0016F4  6E19               	movwf	crc8@dataArray+1,c
  2363  0016F6  0E04               	movlw	4
  2364  0016F8  0100               	movlb	0	; () banked
  2365  0016FA  25F0               	addwf	_msgCount& (0+255),w,b
  2366  0016FC  6E1A               	movwf	crc8@dataSize,c
  2367  0016FE  6A1B               	clrf	crc8@dataSize+1,c
  2368  001700  0E00               	movlw	0
  2369  001702  221B               	addwfc	crc8@dataSize+1,f,c
  2370  001704  ECD9  F01D         	call	_crc8	;wreg free
  2371  001708  6E3C               	movwf	_crcCalc,c
  2372                           
  2373                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2374  00170A  503C               	movf	_crcCalc,w,c
  2375  00170C  183B               	xorwf	_crcGiven,w,c
  2376  00170E  A4D8               	btfss	status,2,c
  2377  001710  D004               	goto	l226
  2378                           
  2379                           ;EusartApp.c: 125: {
  2380                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2381  001712  0E07               	movlw	7
  2382  001714  0100               	movlb	0	; () banked
  2383  001716  6FF4               	movwf	_cState& (0+255),b
  2384                           
  2385                           ;EusartApp.c: 127: }
  2386  001718  0012               	return	
  2387  00171A                     l226:
  2388                           
  2389                           ;EusartApp.c: 128: else
  2390                           ;EusartApp.c: 129: {
  2391                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2392                           
  2393                           ; BSR set to: 0
  2394  00171A  0E00               	movlw	0
  2395  00171C  0100               	movlb	0	; () banked
  2396  00171E  6FF4               	movwf	_cState& (0+255),b
  2397                           
  2398                           ; BSR set to: 0
  2399                           ;EusartApp.c: 131: }
  2400                           ;EusartApp.c: 132: }
  2401                           ;EusartApp.c: 133: break;
  2402                           
  2403                           ; BSR set to: 0
  2404  001720  0012               	return	
  2405  001722                     
  2406                           ; BSR set to: 0
  2407                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2408                           
  2409                           ; BSR set to: 0
  2410  001722  0EFE               	movlw	254
  2411  001724  6FE9               	movwf	??_readUartMessage& (0+255),b
  2412  001726  0EFF               	movlw	255
  2413  001728  6FEA               	movwf	(??_readUartMessage+1)& (0+255),b
  2414  00172A  51F3               	movf	_group& (0+255),w,b
  2415  00172C  6FEB               	movwf	(??_readUartMessage+2)& (0+255),b
  2416  00172E  6BEC               	clrf	(??_readUartMessage+3)& (0+255),b
  2417  001730  90D8               	bcf	status,0,c
  2418  001732  37EB               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2419  001734  37EC               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2420  001736  51E9               	movf	??_readUartMessage& (0+255),w,b
  2421  001738  27EB               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2422  00173A  51EA               	movf	(??_readUartMessage+1)& (0+255),w,b
  2423  00173C  23EC               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2424  00173E  0EBC               	movlw	low _groupsArray
  2425  001740  25EB               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2426  001742  6ED9               	movwf	fsr2l,c
  2427  001744  0E01               	movlw	high _groupsArray
  2428  001746  21EC               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2429  001748  6EDA               	movwf	fsr2h,c
  2430  00174A  D801               	call	u8998
  2431  00174C  D00F               	goto	u8999
  2432  00174E                     u8998:
  2433  00174E  0005               	push	
  2434  001750  6EFA               	movwf	pclath,c
  2435  001752  50DE               	movf	postinc2,w,c
  2436  001754  6EFD               	movwf	tosl,c
  2437  001756  50DE               	movf	postinc2,w,c
  2438  001758  6EFE               	movwf	tosh,c
  2439  00175A  50F8               	movf	tblptru,w,c
  2440  00175C  6EFF               	movwf	tosu,c
  2441  00175E  50FA               	movf	pclath,w,c
  2442  001760  0E7C               	movlw	low _rxMsgData
  2443  001762  6FE6               	movwf	GroupDAC@data& (0+255),b
  2444  001764  0E01               	movlw	high _rxMsgData
  2445  001766  6FE7               	movwf	(GroupDAC@data+1)& (0+255),b
  2446  001768  51F2               	movf	_request& (0+255),w,b
  2447  00176A  0012               	return		;indir
  2448  00176C                     u8999:
  2449                           
  2450                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2451  00176C  0E00               	movlw	0
  2452  00176E  0100               	movlb	0	; () banked
  2453  001770  6FF4               	movwf	_cState& (0+255),b
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;EusartApp.c: 139: }
  2457                           
  2458                           ;EusartApp.c: 138: break;
  2459  001772  0012               	return	
  2460  001774                     l202:
  2461                           
  2462                           ; BSR set to: 0
  2463                           
  2464                           ; BSR set to: 0
  2465  001774  51F4               	movf	_cState& (0+255),w,b
  2466                           
  2467                           ; Switch size 1, requested type "space"
  2468                           ; Number of cases is 8, Range of values is 0 to 7
  2469                           ; switch strategies available:
  2470                           ; Name         Instructions Cycles
  2471                           ; simple_byte           25    13 (average)
  2472                           ;	Chosen strategy is simple_byte
  2473  001776  0A00               	xorlw	0	; case 0
  2474  001778  B4D8               	btfsc	status,2,c
  2475  00177A  D729               	goto	l203
  2476  00177C  0A01               	xorlw	1	; case 1
  2477  00177E  B4D8               	btfsc	status,2,c
  2478  001780  D72C               	goto	l206
  2479  001782  0A03               	xorlw	3	; case 2
  2480  001784  B4D8               	btfsc	status,2,c
  2481  001786  D741               	goto	l211
  2482  001788  0A01               	xorlw	1	; case 3
  2483  00178A  B4D8               	btfsc	status,2,c
  2484  00178C  D74A               	goto	l213
  2485  00178E  0A07               	xorlw	7	; case 4
  2486  001790  B4D8               	btfsc	status,2,c
  2487  001792  D753               	goto	l215
  2488  001794  0A01               	xorlw	1	; case 5
  2489  001796  B4D8               	btfsc	status,2,c
  2490  001798  D762               	goto	l219
  2491  00179A  0A03               	xorlw	3	; case 6
  2492  00179C  B4D8               	btfsc	status,2,c
  2493  00179E  D7A1               	goto	l224
  2494  0017A0  0A01               	xorlw	1	; case 7
  2495  0017A2  A4D8               	btfss	status,2,c
  2496  0017A4  0012               	return	
  2497  0017A6  D7BD               	goto	l228
  2498  0017A8                     __end_of_readUartMessage:
  2499                           	opt stack 0
  2500                           tosu	equ	0xFFF
  2501                           tosh	equ	0xFFE
  2502                           tosl	equ	0xFFD
  2503                           pclath	equ	0xFFA
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           postinc0	equ	0xFEE
  2509                           wreg	equ	0xFE8
  2510                           postdec1	equ	0xFE5
  2511                           fsr1l	equ	0xFE1
  2512                           indf2	equ	0xFDF
  2513                           postinc2	equ	0xFDE
  2514                           fsr2h	equ	0xFDA
  2515                           fsr2l	equ	0xFD9
  2516                           status	equ	0xFD8
  2517                           
  2518 ;; *************** function _InitRxMessageParams *****************
  2519 ;; Defined at:
  2520 ;;		line 142 in file "EusartApp.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;		None
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;		None
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  1    wreg      void 
  2527 ;; Registers used:
  2528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2534 ;;      Params:         0       0       0       0       0       0       0
  2535 ;;      Locals:         0       0       0       0       0       0       0
  2536 ;;      Temps:          0       0       0       0       0       0       0
  2537 ;;      Totals:         0       0       0       0       0       0       0
  2538 ;;Total ram usage:        0 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    6
  2541 ;; This function calls:
  2542 ;;		_ZeroArray
  2543 ;; This function is called by:
  2544 ;;		_readUartMessage
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           	psect	text2
  2549  004108                     __ptext2:
  2550                           	opt stack 0
  2551  004108                     _InitRxMessageParams:
  2552                           	opt stack 23
  2553                           
  2554                           ;EusartApp.c: 146: dataSize = 0;
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;incstack = 0
  2558  004108  0E00               	movlw	0
  2559  00410A  0100               	movlb	0	; () banked
  2560  00410C  6FF1               	movwf	_dataSize& (0+255),b
  2561                           
  2562                           ;EusartApp.c: 147: crcCalc = 0;
  2563  00410E  0E00               	movlw	0
  2564  004110  6E3C               	movwf	_crcCalc,c
  2565                           
  2566                           ;EusartApp.c: 148: crcGiven = 0;
  2567  004112  0E00               	movlw	0
  2568  004114  6E3B               	movwf	_crcGiven,c
  2569                           
  2570                           ;EusartApp.c: 149: msgCount = 0;
  2571  004116  0E00               	movlw	0
  2572  004118  6FF0               	movwf	_msgCount& (0+255),b
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2576  00411A  0E90               	movlw	low _rxMsgQueue
  2577  00411C  6E20               	movwf	ZeroArray@array,c
  2578  00411E  0E01               	movlw	high _rxMsgQueue
  2579  004120  6E21               	movwf	ZeroArray@array+1,c
  2580  004122  0E00               	movlw	0
  2581  004124  6E23               	movwf	ZeroArray@size+1,c
  2582  004126  0E14               	movlw	20
  2583  004128  6E22               	movwf	ZeroArray@size,c
  2584  00412A  EC58  F021         	call	_ZeroArray
  2585  00412E  0012               	return		;funcret
  2586  004130                     __end_of_InitRxMessageParams:
  2587                           	opt stack 0
  2588                           tosu	equ	0xFFF
  2589                           tosh	equ	0xFFE
  2590                           tosl	equ	0xFFD
  2591                           pclath	equ	0xFFA
  2592                           tblptru	equ	0xFF8
  2593                           tblptrh	equ	0xFF7
  2594                           tblptrl	equ	0xFF6
  2595                           tablat	equ	0xFF5
  2596                           postinc0	equ	0xFEE
  2597                           wreg	equ	0xFE8
  2598                           postdec1	equ	0xFE5
  2599                           fsr1l	equ	0xFE1
  2600                           indf2	equ	0xFDF
  2601                           postinc2	equ	0xFDE
  2602                           fsr2h	equ	0xFDA
  2603                           fsr2l	equ	0xFD9
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _GroupDAC *****************
  2607 ;; Defined at:
  2608 ;;		line 125 in file "MessageFunctions.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  request         1    wreg     enum E12
  2611 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2612 ;;		 -> rxMsgData(20), 
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;  request         1  136[BANK0 ] enum E12
  2615 ;; Return value:  Size  Location     Type
  2616 ;;                  1    wreg      void 
  2617 ;; Registers used:
  2618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2619 ;; Tracked objects:
  2620 ;;		On entry : 0/0
  2621 ;;		On exit  : 0/0
  2622 ;;		Unchanged: 0/0
  2623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2624 ;;      Params:         0       2       0       0       0       0       0
  2625 ;;      Locals:         0       1       0       0       0       0       0
  2626 ;;      Temps:          0       0       0       0       0       0       0
  2627 ;;      Totals:         0       3       0       0       0       0       0
  2628 ;;Total ram usage:        3 bytes
  2629 ;; Hardware stack levels used:    1
  2630 ;; Hardware stack levels required when called:   11
  2631 ;; This function calls:
  2632 ;;		_DacReadValue
  2633 ;;		_DacSetValue
  2634 ;; This function is called by:
  2635 ;;		_readUartMessage
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           	psect	text3
  2640  003F82                     __ptext3:
  2641                           	opt stack 0
  2642  003F82                     _GroupDAC:
  2643                           	opt stack 18
  2644                           
  2645                           ;incstack = 0
  2646                           ;GroupDAC@request stored from wreg
  2647  003F82  0100               	movlb	0	; () banked
  2648  003F84  6FE8               	movwf	GroupDAC@request& (0+255),b
  2649                           
  2650                           ;MessageFunctions.c: 127: switch (request)
  2651  003F86  D00E               	goto	l1338
  2652  003F88                     
  2653                           ;MessageFunctions.c: 130: DacSetValue(data);
  2654  003F88  C0E6  F08A         	movff	GroupDAC@data,DacSetValue@data
  2655  003F8C  C0E7  F08B         	movff	GroupDAC@data+1,DacSetValue@data+1
  2656  003F90  EC94  F018         	call	_DacSetValue	;wreg free
  2657                           
  2658                           ;MessageFunctions.c: 131: break;
  2659  003F94  0012               	return	
  2660  003F96                     
  2661                           ;MessageFunctions.c: 134: DacReadValue(data);
  2662  003F96  C0E6  F0C8         	movff	GroupDAC@data,DacReadValue@data
  2663  003F9A  C0E7  F0C9         	movff	GroupDAC@data+1,DacReadValue@data+1
  2664  003F9E  ECE8  F013         	call	_DacReadValue	;wreg free
  2665                           
  2666                           ;MessageFunctions.c: 139: }
  2667                           
  2668                           ;MessageFunctions.c: 138: break;
  2669                           
  2670                           ;MessageFunctions.c: 137: default:
  2671                           
  2672                           ;MessageFunctions.c: 135: break;
  2673  003FA2  0012               	return	
  2674  003FA4                     l1338:
  2675  003FA4  0100               	movlb	0	; () banked
  2676  003FA6  51E8               	movf	GroupDAC@request& (0+255),w,b
  2677                           
  2678                           ; Switch size 1, requested type "space"
  2679                           ; Number of cases is 2, Range of values is 97 to 98
  2680                           ; switch strategies available:
  2681                           ; Name         Instructions Cycles
  2682                           ; simple_byte            7     4 (average)
  2683                           ;	Chosen strategy is simple_byte
  2684  003FA8  0A61               	xorlw	97	; case 97
  2685  003FAA  B4D8               	btfsc	status,2,c
  2686  003FAC  D7ED               	goto	l1339
  2687  003FAE  0A03               	xorlw	3	; case 98
  2688  003FB0  A4D8               	btfss	status,2,c
  2689  003FB2  0012               	return	
  2690  003FB4  D7F0               	goto	l1341
  2691  003FB6                     __end_of_GroupDAC:
  2692                           	opt stack 0
  2693                           tosu	equ	0xFFF
  2694                           tosh	equ	0xFFE
  2695                           tosl	equ	0xFFD
  2696                           pclath	equ	0xFFA
  2697                           tblptru	equ	0xFF8
  2698                           tblptrh	equ	0xFF7
  2699                           tblptrl	equ	0xFF6
  2700                           tablat	equ	0xFF5
  2701                           postinc0	equ	0xFEE
  2702                           wreg	equ	0xFE8
  2703                           postdec1	equ	0xFE5
  2704                           fsr1l	equ	0xFE1
  2705                           indf2	equ	0xFDF
  2706                           postinc2	equ	0xFDE
  2707                           fsr2h	equ	0xFDA
  2708                           fsr2l	equ	0xFD9
  2709                           status	equ	0xFD8
  2710                           
  2711 ;; *************** function _GroupFlashMemory *****************
  2712 ;; Defined at:
  2713 ;;		line 104 in file "MessageFunctions.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;  request         1    wreg     enum E12
  2716 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  request         1  136[BANK0 ] enum E12
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2728 ;;      Params:         0       2       0       0       0       0       0
  2729 ;;      Locals:         0       1       0       0       0       0       0
  2730 ;;      Temps:          0       0       0       0       0       0       0
  2731 ;;      Totals:         0       3       0       0       0       0       0
  2732 ;;Total ram usage:        3 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    9
  2735 ;; This function calls:
  2736 ;;		_FlashEreaseMem
  2737 ;;		_FlashReadCondition
  2738 ;;		_FlashReadUart
  2739 ;; This function is called by:
  2740 ;;		_readUartMessage
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           	psect	text4
  2745  003DFE                     __ptext4:
  2746                           	opt stack 0
  2747  003DFE                     _GroupFlashMemory:
  2748                           	opt stack 20
  2749                           
  2750                           ;incstack = 0
  2751                           ;GroupFlashMemory@request stored from wreg
  2752  003DFE  0100               	movlb	0	; () banked
  2753  003E00  6FE8               	movwf	GroupFlashMemory@request& (0+255),b
  2754                           
  2755                           ;MessageFunctions.c: 106: switch (request)
  2756  003E02  D00D               	goto	l1329
  2757  003E04                     
  2758                           ;MessageFunctions.c: 109: FlashEreaseMem();
  2759  003E04  EC87  F01D         	call	_FlashEreaseMem	;wreg free
  2760                           
  2761                           ;MessageFunctions.c: 110: break;
  2762  003E08  0012               	return	
  2763  003E0A                     
  2764                           ;MessageFunctions.c: 113: FlashReadCondition();
  2765  003E0A  EC03  F011         	call	_FlashReadCondition	;wreg free
  2766                           
  2767                           ;MessageFunctions.c: 114: break;
  2768  003E0E  0012               	return	
  2769  003E10                     
  2770                           ;MessageFunctions.c: 117: FlashReadUart(data);
  2771  003E10  C0E6  F087         	movff	GroupFlashMemory@data,FlashReadUart@data
  2772  003E14  C0E7  F088         	movff	GroupFlashMemory@data+1,FlashReadUart@data+1
  2773  003E18  ECEC  F008         	call	_FlashReadUart	;wreg free
  2774                           
  2775                           ;MessageFunctions.c: 122: }
  2776                           
  2777                           ;MessageFunctions.c: 121: break;
  2778                           
  2779                           ;MessageFunctions.c: 120: default:
  2780                           
  2781                           ;MessageFunctions.c: 118: break;
  2782  003E1C  0012               	return	
  2783  003E1E                     l1329:
  2784  003E1E  0100               	movlb	0	; () banked
  2785  003E20  51E8               	movf	GroupFlashMemory@request& (0+255),w,b
  2786                           
  2787                           ; Switch size 1, requested type "space"
  2788                           ; Number of cases is 3, Range of values is 81 to 83
  2789                           ; switch strategies available:
  2790                           ; Name         Instructions Cycles
  2791                           ; simple_byte           10     6 (average)
  2792                           ;	Chosen strategy is simple_byte
  2793  003E22  0A51               	xorlw	81	; case 81
  2794  003E24  B4D8               	btfsc	status,2,c
  2795  003E26  D7EE               	goto	l1330
  2796  003E28  0A03               	xorlw	3	; case 82
  2797  003E2A  B4D8               	btfsc	status,2,c
  2798  003E2C  D7EE               	goto	l1332
  2799  003E2E  0A01               	xorlw	1	; case 83
  2800  003E30  A4D8               	btfss	status,2,c
  2801  003E32  0012               	return	
  2802  003E34  D7ED               	goto	l1333
  2803  003E36                     __end_of_GroupFlashMemory:
  2804                           	opt stack 0
  2805                           tosu	equ	0xFFF
  2806                           tosh	equ	0xFFE
  2807                           tosl	equ	0xFFD
  2808                           pclath	equ	0xFFA
  2809                           tblptru	equ	0xFF8
  2810                           tblptrh	equ	0xFF7
  2811                           tblptrl	equ	0xFF6
  2812                           tablat	equ	0xFF5
  2813                           postinc0	equ	0xFEE
  2814                           wreg	equ	0xFE8
  2815                           postdec1	equ	0xFE5
  2816                           fsr1l	equ	0xFE1
  2817                           indf2	equ	0xFDF
  2818                           postinc2	equ	0xFDE
  2819                           fsr2h	equ	0xFDA
  2820                           fsr2l	equ	0xFD9
  2821                           status	equ	0xFD8
  2822                           
  2823 ;; *************** function _GroupAdc *****************
  2824 ;; Defined at:
  2825 ;;		line 51 in file "MessageFunctions.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;  request         1    wreg     enum E12
  2828 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;  request         1  136[BANK0 ] enum E12
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2840 ;;      Params:         0       2       0       0       0       0       0
  2841 ;;      Locals:         0       1       0       0       0       0       0
  2842 ;;      Temps:          0       0       0       0       0       0       0
  2843 ;;      Totals:         0       3       0       0       0       0       0
  2844 ;;Total ram usage:        3 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; Hardware stack levels required when called:    8
  2847 ;; This function calls:
  2848 ;;		_SetChannelMode
  2849 ;; This function is called by:
  2850 ;;		_readUartMessage
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           	psect	text5
  2855  004254                     __ptext5:
  2856                           	opt stack 0
  2857  004254                     _GroupAdc:
  2858                           	opt stack 21
  2859                           
  2860                           ;incstack = 0
  2861                           ;GroupAdc@request stored from wreg
  2862  004254  0100               	movlb	0	; () banked
  2863  004256  6FE8               	movwf	GroupAdc@request& (0+255),b
  2864                           
  2865                           ;MessageFunctions.c: 53: switch (request)
  2866  004258  D007               	goto	l1308
  2867  00425A                     
  2868                           ;MessageFunctions.c: 56: SetChannelMode(data);
  2869  00425A  C0E6  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2870  00425E  C0E7  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2871  004262  EC27  F020         	call	_SetChannelMode	;wreg free
  2872                           
  2873                           ;MessageFunctions.c: 61: }
  2874                           
  2875                           ;MessageFunctions.c: 60: break;
  2876                           
  2877                           ;MessageFunctions.c: 59: default:
  2878                           
  2879                           ;MessageFunctions.c: 57: break;
  2880  004266  0012               	return	
  2881  004268                     l1308:
  2882  004268  0100               	movlb	0	; () banked
  2883  00426A  51E8               	movf	GroupAdc@request& (0+255),w,b
  2884                           
  2885                           ; Switch size 1, requested type "space"
  2886                           ; Number of cases is 1, Range of values is 50 to 50
  2887                           ; switch strategies available:
  2888                           ; Name         Instructions Cycles
  2889                           ; simple_byte            4     3 (average)
  2890                           ;	Chosen strategy is simple_byte
  2891  00426C  0A32               	xorlw	50	; case 50
  2892  00426E  A4D8               	btfss	status,2,c
  2893  004270  0012               	return	
  2894  004272  D7F3               	goto	l1309
  2895  004274                     __end_of_GroupAdc:
  2896                           	opt stack 0
  2897                           tosu	equ	0xFFF
  2898                           tosh	equ	0xFFE
  2899                           tosl	equ	0xFFD
  2900                           pclath	equ	0xFFA
  2901                           tblptru	equ	0xFF8
  2902                           tblptrh	equ	0xFF7
  2903                           tblptrl	equ	0xFF6
  2904                           tablat	equ	0xFF5
  2905                           postinc0	equ	0xFEE
  2906                           wreg	equ	0xFE8
  2907                           postdec1	equ	0xFE5
  2908                           fsr1l	equ	0xFE1
  2909                           indf2	equ	0xFDF
  2910                           postinc2	equ	0xFDE
  2911                           fsr2h	equ	0xFDA
  2912                           fsr2l	equ	0xFD9
  2913                           status	equ	0xFD8
  2914                           
  2915 ;; *************** function _GroupStatusAndVersion *****************
  2916 ;; Defined at:
  2917 ;;		line 34 in file "MessageFunctions.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;  request         1    wreg     enum E12
  2920 ;;  data            3  134[BANK0 ] PTR unsigned char 
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;  request         1  137[BANK0 ] enum E12
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  1    wreg      void 
  2925 ;; Registers used:
  2926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2932 ;;      Params:         0       2       0       0       0       0       0
  2933 ;;      Locals:         0       1       0       0       0       0       0
  2934 ;;      Temps:          0       0       0       0       0       0       0
  2935 ;;      Totals:         0       3       0       0       0       0       0
  2936 ;;Total ram usage:        3 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; Hardware stack levels required when called:    7
  2939 ;; This function calls:
  2940 ;;		_GetMcuFwVersion
  2941 ;;		_GetMcuRunTime
  2942 ;; This function is called by:
  2943 ;;		_readUartMessage
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text6
  2948  0041A4                     __ptext6:
  2949                           	opt stack 0
  2950  0041A4                     _GroupStatusAndVersion:
  2951                           	opt stack 22
  2952                           
  2953                           ;incstack = 0
  2954                           ;GroupStatusAndVersion@request stored from wreg
  2955  0041A4  0100               	movlb	0	; () banked
  2956  0041A6  6FE9               	movwf	GroupStatusAndVersion@request& (0+255),b
  2957                           
  2958                           ;MessageFunctions.c: 36: switch (request)
  2959  0041A8  D006               	goto	l1300
  2960  0041AA                     
  2961                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  2962  0041AA  EC53  F003         	call	_GetMcuFwVersion	;wreg free
  2963                           
  2964                           ;MessageFunctions.c: 40: break;
  2965  0041AE  0012               	return	
  2966  0041B0                     
  2967                           ;MessageFunctions.c: 43: GetMcuRunTime();
  2968  0041B0  EC76  F013         	call	_GetMcuRunTime	;wreg free
  2969                           
  2970                           ;MessageFunctions.c: 48: }
  2971                           
  2972                           ;MessageFunctions.c: 47: break;
  2973                           
  2974                           ;MessageFunctions.c: 46: default:
  2975                           
  2976                           ;MessageFunctions.c: 44: break;
  2977  0041B4  0012               	return	
  2978  0041B6                     l1300:
  2979  0041B6  0100               	movlb	0	; () banked
  2980  0041B8  51E9               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2981                           
  2982                           ; Switch size 1, requested type "space"
  2983                           ; Number of cases is 2, Range of values is 33 to 34
  2984                           ; switch strategies available:
  2985                           ; Name         Instructions Cycles
  2986                           ; simple_byte            7     4 (average)
  2987                           ;	Chosen strategy is simple_byte
  2988  0041BA  0A21               	xorlw	33	; case 33
  2989  0041BC  B4D8               	btfsc	status,2,c
  2990  0041BE  D7F8               	goto	l1303
  2991  0041C0  0A03               	xorlw	3	; case 34
  2992  0041C2  A4D8               	btfss	status,2,c
  2993  0041C4  0012               	return	
  2994  0041C6  D7F1               	goto	l1301
  2995  0041C8                     __end_of_GroupStatusAndVersion:
  2996                           	opt stack 0
  2997                           tosu	equ	0xFFF
  2998                           tosh	equ	0xFFE
  2999                           tosl	equ	0xFFD
  3000                           pclath	equ	0xFFA
  3001                           tblptru	equ	0xFF8
  3002                           tblptrh	equ	0xFF7
  3003                           tblptrl	equ	0xFF6
  3004                           tablat	equ	0xFF5
  3005                           postinc0	equ	0xFEE
  3006                           wreg	equ	0xFE8
  3007                           postdec1	equ	0xFE5
  3008                           fsr1l	equ	0xFE1
  3009                           indf2	equ	0xFDF
  3010                           postinc2	equ	0xFDE
  3011                           fsr2h	equ	0xFDA
  3012                           fsr2l	equ	0xFD9
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function _GroupControlMcu *****************
  3016 ;; Defined at:
  3017 ;;		line 11 in file "MessageFunctions.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  request         1    wreg     enum E12
  3020 ;;  data            3  134[BANK0 ] PTR unsigned char 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  request         1  137[BANK0 ] enum E12
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3032 ;;      Params:         0       2       0       0       0       0       0
  3033 ;;      Locals:         0       1       0       0       0       0       0
  3034 ;;      Temps:          0       0       0       0       0       0       0
  3035 ;;      Totals:         0       3       0       0       0       0       0
  3036 ;;Total ram usage:        3 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    8
  3039 ;; This function calls:
  3040 ;;		_ResetMcu
  3041 ;;		_testLeds
  3042 ;; This function is called by:
  3043 ;;		_readUartMessage
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	text7
  3048  00401E                     __ptext7:
  3049                           	opt stack 0
  3050  00401E                     _GroupControlMcu:
  3051                           	opt stack 21
  3052                           
  3053                           ;incstack = 0
  3054                           ;GroupControlMcu@request stored from wreg
  3055  00401E  0100               	movlb	0	; () banked
  3056  004020  6FE9               	movwf	GroupControlMcu@request& (0+255),b
  3057                           
  3058                           ;MessageFunctions.c: 13: switch (request)
  3059  004022  D006               	goto	l1290
  3060  004024                     
  3061                           ;MessageFunctions.c: 16: testLeds();
  3062  004024  EC26  F01B         	call	_testLeds	;wreg free
  3063                           
  3064                           ;MessageFunctions.c: 17: break;
  3065  004028  0012               	return	
  3066  00402A                     
  3067                           ;MessageFunctions.c: 20: ResetMcu();
  3068  00402A  ECE9  F021         	call	_ResetMcu	;wreg free
  3069                           
  3070                           ;MessageFunctions.c: 31: }
  3071                           
  3072                           ;MessageFunctions.c: 30: break;
  3073                           
  3074                           ;MessageFunctions.c: 29: default:
  3075                           
  3076                           ;MessageFunctions.c: 27: break;
  3077                           
  3078                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  3079                           
  3080                           ;MessageFunctions.c: 24: break;
  3081                           
  3082                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  3083                           
  3084                           ;MessageFunctions.c: 21: break;
  3085  00402E  0012               	return	
  3086  004030                     l1290:
  3087  004030  0100               	movlb	0	; () banked
  3088  004032  51E9               	movf	GroupControlMcu@request& (0+255),w,b
  3089                           
  3090                           ; Switch size 1, requested type "space"
  3091                           ; Number of cases is 4, Range of values is 17 to 20
  3092                           ; switch strategies available:
  3093                           ; Name         Instructions Cycles
  3094                           ; simple_byte           13     7 (average)
  3095                           ;	Chosen strategy is simple_byte
  3096  004034  0A11               	xorlw	17	; case 17
  3097  004036  B4D8               	btfsc	status,2,c
  3098  004038  D7F8               	goto	l1293
  3099  00403A  0A03               	xorlw	3	; case 18
  3100  00403C  B4D8               	btfsc	status,2,c
  3101  00403E  0012               	return	
  3102  004040  0A01               	xorlw	1	; case 19
  3103  004042  B4D8               	btfsc	status,2,c
  3104  004044  0012               	return	
  3105  004046  0A07               	xorlw	7	; case 20
  3106  004048  A4D8               	btfss	status,2,c
  3107  00404A  0012               	return	
  3108  00404C  D7EB               	goto	l1291
  3109  00404E                     __end_of_GroupControlMcu:
  3110                           	opt stack 0
  3111                           tosu	equ	0xFFF
  3112                           tosh	equ	0xFFE
  3113                           tosl	equ	0xFFD
  3114                           pclath	equ	0xFFA
  3115                           tblptru	equ	0xFF8
  3116                           tblptrh	equ	0xFF7
  3117                           tblptrl	equ	0xFF6
  3118                           tablat	equ	0xFF5
  3119                           postinc0	equ	0xFEE
  3120                           wreg	equ	0xFE8
  3121                           postdec1	equ	0xFE5
  3122                           fsr1l	equ	0xFE1
  3123                           indf2	equ	0xFDF
  3124                           postinc2	equ	0xFDE
  3125                           fsr2h	equ	0xFDA
  3126                           fsr2l	equ	0xFD9
  3127                           status	equ	0xFD8
  3128                           
  3129 ;; *************** function _GroupSynthesizers *****************
  3130 ;; Defined at:
  3131 ;;		line 63 in file "MessageFunctions.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;  request         1    wreg     enum E12
  3134 ;;  data            2  134[BANK0 ] PTR unsigned char 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  request         1  136[BANK0 ] enum E12
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      void 
  3139 ;; Registers used:
  3140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3146 ;;      Params:         0       2       0       0       0       0       0
  3147 ;;      Locals:         0       1       0       0       0       0       0
  3148 ;;      Temps:          0       0       0       0       0       0       0
  3149 ;;      Totals:         0       3       0       0       0       0       0
  3150 ;;Total ram usage:        3 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; Hardware stack levels required when called:   12
  3153 ;; This function calls:
  3154 ;;		_SetSynthOper
  3155 ;;		_SynthReadData
  3156 ;;		_UpdateSynthFreq
  3157 ;; This function is called by:
  3158 ;;		_readUartMessage
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text8
  3163  0032E6                     __ptext8:
  3164                           	opt stack 0
  3165  0032E6                     _GroupSynthesizers:
  3166                           	opt stack 17
  3167                           
  3168                           ;incstack = 0
  3169                           ;GroupSynthesizers@request stored from wreg
  3170  0032E6  0100               	movlb	0	; () banked
  3171  0032E8  6FE8               	movwf	GroupSynthesizers@request& (0+255),b
  3172                           
  3173                           ;MessageFunctions.c: 65: switch (request)
  3174  0032EA  D028               	goto	l1315
  3175  0032EC                     
  3176                           ;MessageFunctions.c: 76: UpdateSynthFreq(SYNTH_TX, data);
  3177  0032EC  C0E6  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3178  0032F0  C0E7  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3179  0032F4  0E00               	movlw	0
  3180  0032F6  EC96  F00D         	call	_UpdateSynthFreq
  3181                           
  3182                           ;MessageFunctions.c: 77: break;
  3183  0032FA  0012               	return	
  3184  0032FC                     
  3185                           ;MessageFunctions.c: 80: UpdateSynthFreq(SYNTH_RX, data);
  3186  0032FC  C0E6  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3187  003300  C0E7  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3188  003304  0E01               	movlw	1
  3189  003306  EC96  F00D         	call	_UpdateSynthFreq
  3190                           
  3191                           ;MessageFunctions.c: 81: break;
  3192  00330A  0012               	return	
  3193  00330C                     
  3194                           ;MessageFunctions.c: 84: SetSynthOper(SYNTH_RX);
  3195  00330C  0E01               	movlw	1
  3196  00330E  EC39  F01A         	call	_SetSynthOper
  3197                           
  3198                           ;MessageFunctions.c: 85: break;
  3199  003312  0012               	return	
  3200  003314                     
  3201                           ;MessageFunctions.c: 88: SetSynthOper(SYNTH_TX);
  3202  003314  0E00               	movlw	0
  3203  003316  EC39  F01A         	call	_SetSynthOper
  3204                           
  3205                           ;MessageFunctions.c: 89: break;
  3206  00331A  0012               	return	
  3207  00331C                     
  3208                           ;MessageFunctions.c: 92: SynthReadData(SYNTH_RX, data);
  3209  00331C  C0E6  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3210  003320  C0E7  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3211  003324  0E01               	movlw	1
  3212  003326  EC4B  F005         	call	_SynthReadData
  3213                           
  3214                           ;MessageFunctions.c: 93: break;
  3215  00332A  0012               	return	
  3216  00332C                     
  3217                           ;MessageFunctions.c: 96: SynthReadData(SYNTH_TX, data);
  3218  00332C  C0E6  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3219  003330  C0E7  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3220  003334  0E00               	movlw	0
  3221  003336  EC4B  F005         	call	_SynthReadData
  3222                           
  3223                           ;MessageFunctions.c: 101: }
  3224                           
  3225                           ;MessageFunctions.c: 100: break;
  3226                           
  3227                           ;MessageFunctions.c: 99: default:
  3228                           
  3229                           ;MessageFunctions.c: 97: break;
  3230  00333A  0012               	return	
  3231  00333C                     l1315:
  3232  00333C  0100               	movlb	0	; () banked
  3233  00333E  51E8               	movf	GroupSynthesizers@request& (0+255),w,b
  3234                           
  3235                           ; Switch size 1, requested type "space"
  3236                           ; Number of cases is 8, Range of values is 64 to 71
  3237                           ; switch strategies available:
  3238                           ; Name         Instructions Cycles
  3239                           ; simple_byte           25    13 (average)
  3240                           ;	Chosen strategy is simple_byte
  3241  003340  0A40               	xorlw	64	; case 64
  3242  003342  B4D8               	btfsc	status,2,c
  3243  003344  0012               	return	
  3244  003346  0A01               	xorlw	1	; case 65
  3245  003348  B4D8               	btfsc	status,2,c
  3246  00334A  0012               	return	
  3247  00334C  0A03               	xorlw	3	; case 66
  3248  00334E  B4D8               	btfsc	status,2,c
  3249  003350  D7CD               	goto	l1319
  3250  003352  0A01               	xorlw	1	; case 67
  3251  003354  B4D8               	btfsc	status,2,c
  3252  003356  D7D2               	goto	l1320
  3253  003358  0A07               	xorlw	7	; case 68
  3254  00335A  B4D8               	btfsc	status,2,c
  3255  00335C  D7D7               	goto	l1321
  3256  00335E  0A01               	xorlw	1	; case 69
  3257  003360  B4D8               	btfsc	status,2,c
  3258  003362  D7D8               	goto	l1322
  3259  003364  0A03               	xorlw	3	; case 70
  3260  003366  B4D8               	btfsc	status,2,c
  3261  003368  D7D9               	goto	l1323
  3262  00336A  0A01               	xorlw	1	; case 71
  3263  00336C  A4D8               	btfss	status,2,c
  3264  00336E  0012               	return	
  3265  003370  D7DD               	goto	l1324
  3266  003372                     __end_of_GroupSynthesizers:
  3267                           	opt stack 0
  3268                           tosu	equ	0xFFF
  3269                           tosh	equ	0xFFE
  3270                           tosl	equ	0xFFD
  3271                           pclath	equ	0xFFA
  3272                           tblptru	equ	0xFF8
  3273                           tblptrh	equ	0xFF7
  3274                           tblptrl	equ	0xFF6
  3275                           tablat	equ	0xFF5
  3276                           postinc0	equ	0xFEE
  3277                           wreg	equ	0xFE8
  3278                           postdec1	equ	0xFE5
  3279                           fsr1l	equ	0xFE1
  3280                           indf2	equ	0xFDF
  3281                           postinc2	equ	0xFDE
  3282                           fsr2h	equ	0xFDA
  3283                           fsr2l	equ	0xFD9
  3284                           status	equ	0xFD8
  3285                           
  3286 ;; *************** function _UpdateSynthFreq *****************
  3287 ;; Defined at:
  3288 ;;		line 89 in file "SyntApp.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  cType           1    wreg     enum E1
  3291 ;;  data            2   42[BANK0 ] PTR unsigned char 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  cType           1   44[BANK0 ] enum E1
  3294 ;;  retVal          8   45[BANK0 ] struct .
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  1    wreg      void 
  3297 ;; Registers used:
  3298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3304 ;;      Params:         0       2       0       0       0       0       0
  3305 ;;      Locals:         0       9       0       0       0       0       0
  3306 ;;      Temps:          0       0       0       0       0       0       0
  3307 ;;      Totals:         0      11       0       0       0       0       0
  3308 ;;Total ram usage:       11 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    8
  3311 ;; This function calls:
  3312 ;;		_GetIntFromUartData
  3313 ;;		_SWSPI_send_word
  3314 ;;		_SendAckMessage
  3315 ;;		_StoreIntInEeprom
  3316 ;; This function is called by:
  3317 ;;		_GroupSynthesizers
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           	psect	text9
  3322  001B2C                     __ptext9:
  3323                           	opt stack 0
  3324  001B2C                     _UpdateSynthFreq:
  3325                           	opt stack 20
  3326                           
  3327                           ;incstack = 0
  3328                           ;UpdateSynthFreq@cType stored from wreg
  3329  001B2C  0100               	movlb	0	; () banked
  3330  001B2E  6F8C               	movwf	UpdateSynthFreq@cType& (0+255),b
  3331                           
  3332                           ;SyntApp.c: 91: INT_VAL retVal;
  3333                           ;SyntApp.c: 93: retVal = GetIntFromUartData(10, data);
  3334  001B30  C08A  F066         	movff	UpdateSynthFreq@data,GetIntFromUartData@data
  3335  001B34  C08B  F067         	movff	UpdateSynthFreq@data+1,GetIntFromUartData@data+1
  3336  001B38  0E0A               	movlw	10
  3337  001B3A  EC1D  F00F         	call	_GetIntFromUartData
  3338  001B3E  EE20  F08D         	lfsr	2,UpdateSynthFreq@retVal
  3339  001B42  0E07               	movlw	7
  3340  001B44                     u8481:
  3341  001B44  CFEB FFDB          	movff	plusw0,plusw2
  3342  001B48  06E8               	decf	wreg,f,c
  3343  001B4A  E2FC               	bc	u8481
  3344                           
  3345                           ;SyntApp.c: 95: if(retVal.con == 0xb)
  3346  001B4C  0E0B               	movlw	11
  3347  001B4E  0100               	movlb	0	; () banked
  3348  001B50  1991               	xorwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3349  001B52  1192               	iorwf	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3350  001B54  1193               	iorwf	(UpdateSynthFreq@retVal+6)& (0+255),w,b
  3351  001B56  1194               	iorwf	(UpdateSynthFreq@retVal+7)& (0+255),w,b
  3352  001B58  A4D8               	btfss	status,2,c
  3353  001B5A  D038               	goto	l523
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;SyntApp.c: 96: {
  3357                           ;SyntApp.c: 97: if(cType == SYNTH_TX) StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[re
      +                          tVal.con], 4);
  3358  001B5C  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3359  001B5E  A4D8               	btfss	status,2,c
  3360  001B60  D018               	goto	l524
  3361                           
  3362                           ; BSR set to: 0
  3363  001B62  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3364  001B66  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3365  001B6A  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3366  001B6E  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3367  001B72  0E35               	movlw	low _SYNTH_ADDRES
  3368  001B74  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3369  001B76  6EF6               	movwf	tblptrl,c
  3370  001B78  0E06               	movlw	high _SYNTH_ADDRES
  3371  001B7A  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3372  001B7C  6EF7               	movwf	tblptrh,c
  3373  001B7E                     	if	0	;There are less than 3 active tblptr bytes
  3374  001B7E                     	endif
  3375  001B7E  0008               	tblrd		*
  3376  001B80  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3377  001B84  0E00               	movlw	0
  3378  001B86  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3379  001B88  0E04               	movlw	4
  3380  001B8A  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3381  001B8C  EC37  F01F         	call	_StoreIntInEeprom	;wreg free
  3382  001B90  0012               	return	
  3383  001B92                     l524:
  3384                           
  3385                           ;SyntApp.c: 98: else if(cType == SYNTH_RX) StoreIntInEeprom(retVal.num, (0x20) | SYNTH_A
      +                          DDRES[retVal.con], 4);
  3386  001B92  0100               	movlb	0	; () banked
  3387  001B94  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3388  001B96  A4D8               	btfss	status,2,c
  3389  001B98  0012               	return	
  3390                           
  3391                           ; BSR set to: 0
  3392  001B9A  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3393  001B9E  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3394  001BA2  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3395  001BA6  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3396  001BAA  0E35               	movlw	low _SYNTH_ADDRES
  3397  001BAC  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3398  001BAE  6EF6               	movwf	tblptrl,c
  3399  001BB0  0E06               	movlw	high _SYNTH_ADDRES
  3400  001BB2  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3401  001BB4  6EF7               	movwf	tblptrh,c
  3402  001BB6                     	if	0	;There are less than 3 active tblptr bytes
  3403  001BB6                     	endif
  3404  001BB6  0008               	tblrd		*
  3405  001BB8  50F5               	movf	tablat,w,c
  3406  001BBA  0920               	iorlw	32
  3407  001BBC  6E25               	movwf	StoreIntInEeprom@address,c
  3408  001BBE  0E00               	movlw	0
  3409  001BC0  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3410  001BC2  0E04               	movlw	4
  3411  001BC4  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3412  001BC6  EC37  F01F         	call	_StoreIntInEeprom	;wreg free
  3413                           
  3414                           ;SyntApp.c: 99: }
  3415  001BCA  0012               	return	
  3416  001BCC                     l523:
  3417                           
  3418                           ;SyntApp.c: 100: else
  3419                           ;SyntApp.c: 101: {
  3420                           ;SyntApp.c: 102: if(cType == SYNTH_TX)
  3421  001BCC  0100               	movlb	0	; () banked
  3422  001BCE  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3423  001BD0  A4D8               	btfss	status,2,c
  3424  001BD2  D037               	goto	l528
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;SyntApp.c: 103: {
  3428                           ;SyntApp.c: 104: if(cntRegUpdateTx < 0x7)
  3429  001BD4  0E07               	movlw	7
  3430  001BD6  603A               	cpfslt	_cntRegUpdateTx,c
  3431  001BD8  D02C               	goto	l529
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;SyntApp.c: 105: {
  3435                           ;SyntApp.c: 106: SWSPI_send_word(cType, retVal.num, 3);
  3436  001BDA  C08D  F029         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3437  001BDE  C08E  F02A         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3438  001BE2  C08F  F02B         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3439  001BE6  C090  F02C         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3440  001BEA  0E03               	movlw	3
  3441  001BEC  6E2D               	movwf	SWSPI_send_word@dataSize,c
  3442  001BEE  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3443  001BF0  EC3F  F018         	call	_SWSPI_send_word
  3444                           
  3445                           ;SyntApp.c: 107: StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[retVal.con], 4);
  3446  001BF4  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3447  001BF8  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3448  001BFC  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3449  001C00  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3450  001C04  0E35               	movlw	low _SYNTH_ADDRES
  3451  001C06  0100               	movlb	0	; () banked
  3452  001C08  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3453  001C0A  6EF6               	movwf	tblptrl,c
  3454  001C0C  0E06               	movlw	high _SYNTH_ADDRES
  3455  001C0E  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3456  001C10  6EF7               	movwf	tblptrh,c
  3457  001C12                     	if	0	;There are less than 3 active tblptr bytes
  3458  001C12                     	endif
  3459  001C12  0008               	tblrd		*
  3460  001C14  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3461  001C18  0E00               	movlw	0
  3462  001C1A  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3463  001C1C  0E04               	movlw	4
  3464  001C1E  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3465  001C20  EC37  F01F         	call	_StoreIntInEeprom	;wreg free
  3466                           
  3467                           ;SyntApp.c: 108: cntRegUpdateTx ++;
  3468  001C24  2A3A               	incf	_cntRegUpdateTx,f,c
  3469                           
  3470                           ;SyntApp.c: 109: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_TX_
      +                          REG);
  3471  001C26  0E48               	movlw	72
  3472  001C28  6E24               	movwf	SendAckMessage@inRequest,c
  3473  001C2A  0E04               	movlw	4
  3474  001C2C  ECB0  F01D         	call	_SendAckMessage
  3475                           
  3476                           ;SyntApp.c: 110: }
  3477  001C30  0012               	return	
  3478  001C32                     l529:
  3479                           
  3480                           ;SyntApp.c: 111: else
  3481                           ;SyntApp.c: 112: {
  3482                           ;SyntApp.c: 113: cntRegUpdateTx = 0;
  3483  001C32  0E00               	movlw	0
  3484  001C34  6E3A               	movwf	_cntRegUpdateTx,c
  3485                           
  3486                           ;SyntApp.c: 114: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3487  001C36  0E42               	movlw	66
  3488  001C38  6E24               	movwf	SendAckMessage@inRequest,c
  3489  001C3A  0E04               	movlw	4
  3490  001C3C  ECB0  F01D         	call	_SendAckMessage
  3491                           
  3492                           ;SyntApp.c: 115: }
  3493                           ;SyntApp.c: 116: }
  3494  001C40  0012               	return	
  3495  001C42                     l528:
  3496                           
  3497                           ;SyntApp.c: 117: else if(cType == SYNTH_RX)
  3498  001C42  0100               	movlb	0	; () banked
  3499  001C44  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3500  001C46  A4D8               	btfss	status,2,c
  3501  001C48  0012               	return	
  3502                           
  3503                           ; BSR set to: 0
  3504                           ;SyntApp.c: 118: {
  3505                           ;SyntApp.c: 119: if(cntRegUpdateRx < 0x7)
  3506  001C4A  0E07               	movlw	7
  3507  001C4C  6039               	cpfslt	_cntRegUpdateRx,c
  3508  001C4E  D02D               	goto	l533
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;SyntApp.c: 120: {
  3512                           ;SyntApp.c: 121: SWSPI_send_word(cType, retVal.num, 3);
  3513  001C50  C08D  F029         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3514  001C54  C08E  F02A         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3515  001C58  C08F  F02B         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3516  001C5C  C090  F02C         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3517  001C60  0E03               	movlw	3
  3518  001C62  6E2D               	movwf	SWSPI_send_word@dataSize,c
  3519  001C64  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3520  001C66  EC3F  F018         	call	_SWSPI_send_word
  3521                           
  3522                           ;SyntApp.c: 122: StoreIntInEeprom(retVal.num, (0x20) | SYNTH_ADDRES[retVal.con], 4);
  3523  001C6A  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3524  001C6E  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3525  001C72  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3526  001C76  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3527  001C7A  0E35               	movlw	low _SYNTH_ADDRES
  3528  001C7C  0100               	movlb	0	; () banked
  3529  001C7E  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3530  001C80  6EF6               	movwf	tblptrl,c
  3531  001C82  0E06               	movlw	high _SYNTH_ADDRES
  3532  001C84  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3533  001C86  6EF7               	movwf	tblptrh,c
  3534  001C88                     	if	0	;There are less than 3 active tblptr bytes
  3535  001C88                     	endif
  3536  001C88  0008               	tblrd		*
  3537  001C8A  50F5               	movf	tablat,w,c
  3538  001C8C  0920               	iorlw	32
  3539  001C8E  6E25               	movwf	StoreIntInEeprom@address,c
  3540  001C90  0E00               	movlw	0
  3541  001C92  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3542  001C94  0E04               	movlw	4
  3543  001C96  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3544  001C98  EC37  F01F         	call	_StoreIntInEeprom	;wreg free
  3545                           
  3546                           ;SyntApp.c: 123: cntRegUpdateRx ++;
  3547  001C9C  2A39               	incf	_cntRegUpdateRx,f,c
  3548                           
  3549                           ;SyntApp.c: 124: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_RX_
      +                          REG);
  3550  001C9E  0E49               	movlw	73
  3551  001CA0  6E24               	movwf	SendAckMessage@inRequest,c
  3552  001CA2  0E04               	movlw	4
  3553  001CA4  ECB0  F01D         	call	_SendAckMessage
  3554                           
  3555                           ;SyntApp.c: 125: }
  3556  001CA8  0012               	return	
  3557  001CAA                     l533:
  3558                           
  3559                           ;SyntApp.c: 126: else
  3560                           ;SyntApp.c: 127: {
  3561                           ;SyntApp.c: 128: cntRegUpdateRx = 0;
  3562  001CAA  0E00               	movlw	0
  3563  001CAC  6E39               	movwf	_cntRegUpdateRx,c
  3564                           
  3565                           ;SyntApp.c: 129: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3566  001CAE  0E43               	movlw	67
  3567  001CB0  6E24               	movwf	SendAckMessage@inRequest,c
  3568  001CB2  0E04               	movlw	4
  3569  001CB4  ECB0  F01D         	call	_SendAckMessage
  3570  001CB8  0012               	return	
  3571  001CBA                     __end_of_UpdateSynthFreq:
  3572                           	opt stack 0
  3573                           tosu	equ	0xFFF
  3574                           tosh	equ	0xFFE
  3575                           tosl	equ	0xFFD
  3576                           pclath	equ	0xFFA
  3577                           tblptru	equ	0xFF8
  3578                           tblptrh	equ	0xFF7
  3579                           tblptrl	equ	0xFF6
  3580                           tablat	equ	0xFF5
  3581                           postinc0	equ	0xFEE
  3582                           plusw0	equ	0xFEB
  3583                           wreg	equ	0xFE8
  3584                           postdec1	equ	0xFE5
  3585                           fsr1l	equ	0xFE1
  3586                           indf2	equ	0xFDF
  3587                           postinc2	equ	0xFDE
  3588                           plusw2	equ	0xFDB
  3589                           fsr2h	equ	0xFDA
  3590                           fsr2l	equ	0xFD9
  3591                           status	equ	0xFD8
  3592                           
  3593 ;; *************** function _SynthReadData *****************
  3594 ;; Defined at:
  3595 ;;		line 170 in file "SyntApp.c"
  3596 ;; Parameters:    Size  Location     Type
  3597 ;;  cType           1    wreg     enum E1
  3598 ;;  data            2  104[BANK0 ] PTR unsigned char 
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;  cType           1   52[BANK2 ] enum E1
  3601 ;;  data            1   29[BANK2 ] unsigned char 
  3602 ;;  TxMsg          29    0[BANK2 ] unsigned char [29]
  3603 ;;  eepromDataAr   20   32[BANK2 ] unsigned long [5]
  3604 ;;  byteNum         1   54[BANK2 ] unsigned char 
  3605 ;;  regNum          1   53[BANK2 ] unsigned char 
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  1    wreg      void 
  3608 ;; Registers used:
  3609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3615 ;;      Params:         0       2       0       0       0       0       0
  3616 ;;      Locals:         0       0       0      55       0       0       0
  3617 ;;      Temps:          0       0       0       0       0       0       0
  3618 ;;      Totals:         0       2       0      55       0       0       0
  3619 ;;Total ram usage:       57 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; Hardware stack levels required when called:   10
  3622 ;; This function calls:
  3623 ;;		_ReadIntFromEeprom
  3624 ;;		_WriteUartMessage
  3625 ;;		_ZeroArray
  3626 ;;		_crc8
  3627 ;;		_make8
  3628 ;; This function is called by:
  3629 ;;		_GroupSynthesizers
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           	psect	text10
  3634  000A96                     __ptext10:
  3635                           	opt stack 0
  3636  000A96                     _SynthReadData:
  3637                           	opt stack 18
  3638                           
  3639                           ;incstack = 0
  3640                           ;SynthReadData@cType stored from wreg
  3641  000A96  0102               	movlb	2	; () banked
  3642  000A98  6F7A               	movwf	SynthReadData@cType& (0+255),b
  3643                           
  3644                           ;SyntApp.c: 172: uint32_t eepromDataArray[5];
  3645                           ;SyntApp.c: 173: ZeroArray(eepromDataArray, sizeof(eepromDataArray));
  3646  000A9A  0E66               	movlw	low SynthReadData@eepromDataArray
  3647  000A9C  6E20               	movwf	ZeroArray@array,c
  3648  000A9E  0E02               	movlw	high SynthReadData@eepromDataArray
  3649  000AA0  6E21               	movwf	ZeroArray@array+1,c
  3650  000AA2  0E00               	movlw	0
  3651  000AA4  6E23               	movwf	ZeroArray@size+1,c
  3652  000AA6  0E14               	movlw	20
  3653  000AA8  6E22               	movwf	ZeroArray@size,c
  3654  000AAA  EC58  F021         	call	_ZeroArray	;wreg free
  3655                           
  3656                           ;SyntApp.c: 174: uint8_t regNum = 0, byteNum = 0;
  3657  000AAE  0E00               	movlw	0
  3658  000AB0  0102               	movlb	2	; () banked
  3659  000AB2  6F7B               	movwf	SynthReadData@regNum& (0+255),b
  3660                           
  3661                           ; BSR set to: 2
  3662  000AB4  0E00               	movlw	0
  3663  000AB6  6F7C               	movwf	SynthReadData@byteNum& (0+255),b
  3664                           
  3665                           ;SyntApp.c: 175: char TxMsg[5 * 5 + 2 + 1 + 1];
  3666                           ;SyntApp.c: 176: ZeroArray(TxMsg, 5 * 5 + 2 + 1 + 1);
  3667  000AB8  0E46               	movlw	low SynthReadData@TxMsg
  3668  000ABA  6E20               	movwf	ZeroArray@array,c
  3669  000ABC  0E02               	movlw	high SynthReadData@TxMsg
  3670  000ABE  6E21               	movwf	ZeroArray@array+1,c
  3671  000AC0  0E00               	movlw	0
  3672  000AC2  6E23               	movwf	ZeroArray@size+1,c
  3673  000AC4  0E1D               	movlw	29
  3674  000AC6  6E22               	movwf	ZeroArray@size,c
  3675  000AC8  EC58  F021         	call	_ZeroArray	;wreg free
  3676                           
  3677                           ;SyntApp.c: 179: TxMsg[(0)] = (0x24);
  3678  000ACC  0E24               	movlw	36
  3679  000ACE  0102               	movlb	2	; () banked
  3680  000AD0  6F46               	movwf	SynthReadData@TxMsg& (0+255),b
  3681                           
  3682                           ; BSR set to: 2
  3683                           ;SyntApp.c: 180: TxMsg[(1)] = SYNTH_MSG;
  3684  000AD2  0E04               	movlw	4
  3685  000AD4  6F47               	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  3686                           
  3687                           ; BSR set to: 2
  3688                           ;SyntApp.c: 181: TxMsg[(3)] = 5 * 5 + 2 - (0x4);
  3689  000AD6  0E17               	movlw	23
  3690  000AD8  6F49               	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  3691                           
  3692                           ; BSR set to: 2
  3693                           ;SyntApp.c: 183: if(cType == SYNTH_TX)
  3694  000ADA  517A               	movf	SynthReadData@cType& (0+255),w,b
  3695  000ADC  A4D8               	btfss	status,2,c
  3696  000ADE  D064               	goto	l548
  3697                           
  3698                           ; BSR set to: 2
  3699                           ;SyntApp.c: 184: {
  3700                           ;SyntApp.c: 185: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  3701  000AE0  0E47               	movlw	71
  3702  000AE2  6F48               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3703                           
  3704                           ; BSR set to: 2
  3705                           ;SyntApp.c: 186: eepromDataArray[0] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0], 4);
  3706  000AE4  0E00               	movlw	0
  3707  000AE6  0100               	movlb	0	; () banked
  3708  000AE8  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3709  000AEA  0E04               	movlw	4
  3710  000AEC  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3711  000AEE  0E35               	movlw	low _SYNTH_ADDRES
  3712  000AF0  6EF6               	movwf	tblptrl,c
  3713  000AF2                     	if	1	;There is more than 1 active tblptr byte
  3714  000AF2  0E06               	movlw	high _SYNTH_ADDRES
  3715  000AF4  6EF7               	movwf	tblptrh,c
  3716  000AF6                     	endif
  3717  000AF6                     	if	0	;There are less than 3 active tblptr bytes
  3718  000AF6                     	endif
  3719  000AF6  0008               	tblrd		*
  3720  000AF8  50F5               	movf	tablat,w,c
  3721  000AFA  EC70  F010         	call	_ReadIntFromEeprom
  3722  000AFE  C0B1  F266         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3723  000B02  C0B2  F267         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3724  000B06  C0B3  F268         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3725  000B0A  C0B4  F269         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3726                           
  3727                           ;SyntApp.c: 187: eepromDataArray[1] = ReadIntFromEeprom((0) | SYNTH_ADDRES[1], 4);
  3728  000B0E  0E00               	movlw	0
  3729  000B10  0100               	movlb	0	; () banked
  3730  000B12  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3731  000B14  0E04               	movlw	4
  3732  000B16  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3733  000B18  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3734  000B1A  6EF6               	movwf	tblptrl,c
  3735  000B1C  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3736  000B1E  6EF7               	movwf	tblptrh,c
  3737  000B20                     	if	0	;tblptru may be non-zero
  3738  000B20                     	endif
  3739  000B20                     	if	0	;tblptru may be non-zero
  3740  000B20                     	endif
  3741  000B20  0008               	tblrd		*
  3742  000B22  50F5               	movf	tablat,w,c
  3743  000B24  EC70  F010         	call	_ReadIntFromEeprom
  3744  000B28  C0B1  F26A         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3745  000B2C  C0B2  F26B         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3746  000B30  C0B3  F26C         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3747  000B34  C0B4  F26D         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3748                           
  3749                           ;SyntApp.c: 188: eepromDataArray[2] = ReadIntFromEeprom((0) | SYNTH_ADDRES[2], 4);
  3750  000B38  0E00               	movlw	0
  3751  000B3A  0100               	movlb	0	; () banked
  3752  000B3C  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3753  000B3E  0E04               	movlw	4
  3754  000B40  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3755  000B42  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3756  000B44  6EF6               	movwf	tblptrl,c
  3757  000B46  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3758  000B48  6EF7               	movwf	tblptrh,c
  3759  000B4A                     	if	0	;tblptru may be non-zero
  3760  000B4A                     	endif
  3761  000B4A                     	if	0	;tblptru may be non-zero
  3762  000B4A                     	endif
  3763  000B4A  0008               	tblrd		*
  3764  000B4C  50F5               	movf	tablat,w,c
  3765  000B4E  EC70  F010         	call	_ReadIntFromEeprom
  3766  000B52  C0B1  F26E         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3767  000B56  C0B2  F26F         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3768  000B5A  C0B3  F270         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3769  000B5E  C0B4  F271         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3770                           
  3771                           ;SyntApp.c: 189: eepromDataArray[3] = ReadIntFromEeprom((0) | SYNTH_ADDRES[4], 4);
  3772  000B62  0E00               	movlw	0
  3773  000B64  0100               	movlb	0	; () banked
  3774  000B66  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3775  000B68  0E04               	movlw	4
  3776  000B6A  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3777  000B6C  0E39               	movlw	low (_SYNTH_ADDRES+4)
  3778  000B6E  6EF6               	movwf	tblptrl,c
  3779  000B70  0E06               	movlw	high (_SYNTH_ADDRES+4)
  3780  000B72  6EF7               	movwf	tblptrh,c
  3781  000B74                     	if	0	;tblptru may be non-zero
  3782  000B74                     	endif
  3783  000B74                     	if	0	;tblptru may be non-zero
  3784  000B74                     	endif
  3785  000B74  0008               	tblrd		*
  3786  000B76  50F5               	movf	tablat,w,c
  3787  000B78  EC70  F010         	call	_ReadIntFromEeprom
  3788  000B7C  C0B1  F272         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+12
  3789  000B80  C0B2  F273         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+13
  3790  000B84  C0B3  F274         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+14
  3791  000B88  C0B4  F275         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+15
  3792                           
  3793                           ;SyntApp.c: 190: eepromDataArray[4] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0xb], 4);
  3794  000B8C  0E00               	movlw	0
  3795  000B8E  0100               	movlb	0	; () banked
  3796  000B90  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3797  000B92  0E04               	movlw	4
  3798  000B94  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3799  000B96  0E40               	movlw	low (_SYNTH_ADDRES+11)
  3800  000B98  6EF6               	movwf	tblptrl,c
  3801  000B9A  0E06               	movlw	high (_SYNTH_ADDRES+11)
  3802  000B9C  6EF7               	movwf	tblptrh,c
  3803  000B9E                     	if	0	;tblptru may be non-zero
  3804  000B9E                     	endif
  3805  000B9E                     	if	0	;tblptru may be non-zero
  3806  000B9E                     	endif
  3807  000B9E  0008               	tblrd		*
  3808  000BA0  50F5               	movf	tablat,w,c
  3809  000BA2  EC70  F010         	call	_ReadIntFromEeprom
  3810  000BA6  D06C               	goto	L2
  3811  000BA8                     l548:
  3812                           
  3813                           ;SyntApp.c: 192: else if (cType == SYNTH_RX)
  3814  000BA8  0102               	movlb	2	; () banked
  3815  000BAA  057A               	decf	SynthReadData@cType& (0+255),w,b
  3816  000BAC  A4D8               	btfss	status,2,c
  3817  000BAE  D070               	goto	l550
  3818                           
  3819                           ; BSR set to: 2
  3820                           ;SyntApp.c: 193: {
  3821                           ;SyntApp.c: 194: TxMsg[(2)] = SYNTH_UP_READ_DATA;
  3822  000BB0  0E46               	movlw	70
  3823  000BB2  6F48               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3824                           
  3825                           ; BSR set to: 2
  3826                           ;SyntApp.c: 195: eepromDataArray[0] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0], 4);
  3827  000BB4  0E00               	movlw	0
  3828  000BB6  0100               	movlb	0	; () banked
  3829  000BB8  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3830  000BBA  0E04               	movlw	4
  3831  000BBC  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3832  000BBE  0E35               	movlw	low _SYNTH_ADDRES
  3833  000BC0  6EF6               	movwf	tblptrl,c
  3834  000BC2                     	if	1	;There is more than 1 active tblptr byte
  3835  000BC2  0E06               	movlw	high _SYNTH_ADDRES
  3836  000BC4  6EF7               	movwf	tblptrh,c
  3837  000BC6                     	endif
  3838  000BC6                     	if	0	;There are less than 3 active tblptr bytes
  3839  000BC6                     	endif
  3840  000BC6  0008               	tblrd		*
  3841  000BC8  50F5               	movf	tablat,w,c
  3842  000BCA  0920               	iorlw	32
  3843  000BCC  EC70  F010         	call	_ReadIntFromEeprom
  3844  000BD0  C0B1  F266         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3845  000BD4  C0B2  F267         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3846  000BD8  C0B3  F268         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3847  000BDC  C0B4  F269         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3848                           
  3849                           ;SyntApp.c: 196: eepromDataArray[1] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[1], 4);
  3850  000BE0  0E00               	movlw	0
  3851  000BE2  0100               	movlb	0	; () banked
  3852  000BE4  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3853  000BE6  0E04               	movlw	4
  3854  000BE8  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3855  000BEA  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3856  000BEC  6EF6               	movwf	tblptrl,c
  3857  000BEE  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3858  000BF0  6EF7               	movwf	tblptrh,c
  3859  000BF2                     	if	0	;tblptru may be non-zero
  3860  000BF2                     	endif
  3861  000BF2                     	if	0	;tblptru may be non-zero
  3862  000BF2                     	endif
  3863  000BF2  0008               	tblrd		*
  3864  000BF4  50F5               	movf	tablat,w,c
  3865  000BF6  0920               	iorlw	32
  3866  000BF8  EC70  F010         	call	_ReadIntFromEeprom
  3867  000BFC  C0B1  F26A         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3868  000C00  C0B2  F26B         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3869  000C04  C0B3  F26C         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3870  000C08  C0B4  F26D         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3871                           
  3872                           ;SyntApp.c: 197: eepromDataArray[2] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[2], 4);
  3873  000C0C  0E00               	movlw	0
  3874  000C0E  0100               	movlb	0	; () banked
  3875  000C10  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3876  000C12  0E04               	movlw	4
  3877  000C14  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3878  000C16  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3879  000C18  6EF6               	movwf	tblptrl,c
  3880  000C1A  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3881  000C1C  6EF7               	movwf	tblptrh,c
  3882  000C1E                     	if	0	;tblptru may be non-zero
  3883  000C1E                     	endif
  3884  000C1E                     	if	0	;tblptru may be non-zero
  3885  000C1E                     	endif
  3886  000C1E  0008               	tblrd		*
  3887  000C20  50F5               	movf	tablat,w,c
  3888  000C22  0920               	iorlw	32
  3889  000C24  EC70  F010         	call	_ReadIntFromEeprom
  3890  000C28  C0B1  F26E         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3891  000C2C  C0B2  F26F         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3892  000C30  C0B3  F270         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3893  000C34  C0B4  F271         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3894                           
  3895                           ;SyntApp.c: 198: eepromDataArray[3] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[4], 4);
  3896  000C38  0E00               	movlw	0
  3897  000C3A  0100               	movlb	0	; () banked
  3898  000C3C  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3899  000C3E  0E04               	movlw	4
  3900  000C40  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3901  000C42  0E39               	movlw	low (_SYNTH_ADDRES+4)
  3902  000C44  6EF6               	movwf	tblptrl,c
  3903  000C46  0E06               	movlw	high (_SYNTH_ADDRES+4)
  3904  000C48  6EF7               	movwf	tblptrh,c
  3905  000C4A                     	if	0	;tblptru may be non-zero
  3906  000C4A                     	endif
  3907  000C4A                     	if	0	;tblptru may be non-zero
  3908  000C4A                     	endif
  3909  000C4A  0008               	tblrd		*
  3910  000C4C  50F5               	movf	tablat,w,c
  3911  000C4E  0920               	iorlw	32
  3912  000C50  EC70  F010         	call	_ReadIntFromEeprom
  3913  000C54  C0B1  F272         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+12
  3914  000C58  C0B2  F273         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+13
  3915  000C5C  C0B3  F274         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+14
  3916  000C60  C0B4  F275         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+15
  3917                           
  3918                           ;SyntApp.c: 199: eepromDataArray[4] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0xb], 4);
  3919  000C64  0E00               	movlw	0
  3920  000C66  0100               	movlb	0	; () banked
  3921  000C68  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3922  000C6A  0E04               	movlw	4
  3923  000C6C  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3924  000C6E  0E40               	movlw	low (_SYNTH_ADDRES+11)
  3925  000C70  6EF6               	movwf	tblptrl,c
  3926  000C72  0E06               	movlw	high (_SYNTH_ADDRES+11)
  3927  000C74  6EF7               	movwf	tblptrh,c
  3928  000C76                     	if	0	;tblptru may be non-zero
  3929  000C76                     	endif
  3930  000C76                     	if	0	;tblptru may be non-zero
  3931  000C76                     	endif
  3932  000C76  0008               	tblrd		*
  3933  000C78  50F5               	movf	tablat,w,c
  3934  000C7A  0920               	iorlw	32
  3935  000C7C  EC70  F010         	call	_ReadIntFromEeprom
  3936  000C80                     L2:
  3937  000C80  C0B1  F276         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+16
  3938  000C84  C0B2  F277         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+17
  3939  000C88  C0B3  F278         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+18
  3940  000C8C  C0B4  F279         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+19
  3941  000C90                     l550:
  3942                           
  3943                           ;SyntApp.c: 200: }
  3944                           ;SyntApp.c: 202: for(regNum = 0; regNum < 5; regNum++)
  3945  000C90  0E00               	movlw	0
  3946  000C92  0102               	movlb	2	; () banked
  3947  000C94  6F7B               	movwf	SynthReadData@regNum& (0+255),b
  3948  000C96                     l8502:
  3949                           
  3950                           ; BSR set to: 2
  3951  000C96  0E04               	movlw	4
  3952  000C98  657B               	cpfsgt	SynthReadData@regNum& (0+255),b
  3953  000C9A  D001               	goto	l551
  3954  000C9C  D032               	goto	u8690
  3955  000C9E                     l551:
  3956                           
  3957                           ; BSR set to: 2
  3958                           ;SyntApp.c: 203: {
  3959                           ;SyntApp.c: 204: for(byteNum = 0; byteNum < (5); byteNum++)
  3960                           
  3961                           ; BSR set to: 2
  3962  000C9E  0E00               	movlw	0
  3963  000CA0  6F7C               	movwf	SynthReadData@byteNum& (0+255),b
  3964  000CA2                     l8508:
  3965                           
  3966                           ; BSR set to: 2
  3967  000CA2  0E04               	movlw	4
  3968  000CA4  657C               	cpfsgt	SynthReadData@byteNum& (0+255),b
  3969  000CA6  D001               	goto	l553
  3970  000CA8  D02A               	goto	u8680
  3971  000CAA                     l553:
  3972                           
  3973                           ; BSR set to: 2
  3974                           ;SyntApp.c: 205: {
  3975                           ;SyntApp.c: 206: uint8_t data = make8(eepromDataArray[regNum], byteNum);
  3976                           
  3977                           ; BSR set to: 2
  3978  000CAA  517B               	movf	SynthReadData@regNum& (0+255),w,b
  3979  000CAC  0D04               	mullw	4
  3980  000CAE  0E66               	movlw	low SynthReadData@eepromDataArray
  3981  000CB0  24F3               	addwf	prodl,w,c
  3982  000CB2  6ED9               	movwf	fsr2l,c
  3983  000CB4  0E02               	movlw	high SynthReadData@eepromDataArray
  3984  000CB6  20F4               	addwfc	prodh,w,c
  3985  000CB8  6EDA               	movwf	fsr2h,c
  3986  000CBA  CFDE F018          	movff	postinc2,make8@data
  3987  000CBE  CFDE F019          	movff	postinc2,make8@data+1
  3988  000CC2  CFDE F01A          	movff	postinc2,make8@data+2
  3989  000CC6  CFDE F01B          	movff	postinc2,make8@data+3
  3990  000CCA  C27C  F01C         	movff	SynthReadData@byteNum,make8@dataLocation
  3991  000CCE  EC52  F01C         	call	_make8	;wreg free
  3992  000CD2  0102               	movlb	2	; () banked
  3993  000CD4  6F63               	movwf	SynthReadData@data_987& (0+255),b
  3994                           
  3995                           ; BSR set to: 2
  3996                           ;SyntApp.c: 207: TxMsg[(0x4) + (5)*regNum + byteNum] = data;
  3997  000CD6  517B               	movf	SynthReadData@regNum& (0+255),w,b
  3998  000CD8  0D05               	mullw	5
  3999  000CDA  517C               	movf	SynthReadData@byteNum& (0+255),w,b
  4000  000CDC  26F3               	addwf	prodl,f,c
  4001  000CDE  0E00               	movlw	0
  4002  000CE0  22F4               	addwfc	prodh,f,c
  4003  000CE2  0E04               	movlw	4
  4004  000CE4  26F3               	addwf	prodl,f,c
  4005  000CE6  0E00               	movlw	0
  4006  000CE8  22F4               	addwfc	prodh,f,c
  4007  000CEA  0E46               	movlw	low SynthReadData@TxMsg
  4008  000CEC  24F3               	addwf	prodl,w,c
  4009  000CEE  6ED9               	movwf	fsr2l,c
  4010  000CF0  0E02               	movlw	high SynthReadData@TxMsg
  4011  000CF2  20F4               	addwfc	prodh,w,c
  4012  000CF4  6EDA               	movwf	fsr2h,c
  4013  000CF6  C263  FFDF         	movff	SynthReadData@data_987,indf2
  4014                           
  4015                           ; BSR set to: 2
  4016  000CFA  2B7C               	incf	SynthReadData@byteNum& (0+255),f,b
  4017  000CFC  D7D2               	goto	l8508
  4018  000CFE                     u8680:
  4019                           
  4020                           ; BSR set to: 2
  4021                           
  4022                           ; BSR set to: 2
  4023  000CFE  2B7B               	incf	SynthReadData@regNum& (0+255),f,b
  4024  000D00  D7CA               	goto	l8502
  4025  000D02                     u8690:
  4026                           
  4027                           ; BSR set to: 2
  4028                           ;SyntApp.c: 208: }
  4029                           ;SyntApp.c: 209: }
  4030                           ;SyntApp.c: 211: TxMsg[5 * 5 + 2] = cType == SYNTH_TX ? SynthTxOper : SynthRxOper;
  4031                           
  4032                           ; BSR set to: 2
  4033  000D02  517A               	movf	SynthReadData@cType& (0+255),w,b
  4034  000D04  B4D8               	btfsc	status,2,c
  4035  000D06  D003               	goto	l556
  4036                           
  4037                           ; BSR set to: 2
  4038  000D08  C044  F264         	movff	_SynthRxOper,_SynthReadData$988
  4039  000D0C  D002               	goto	L1
  4040  000D0E                     l556:
  4041                           
  4042                           ; BSR set to: 2
  4043  000D0E  C045  F264         	movff	_SynthTxOper,_SynthReadData$988
  4044  000D12                     L1:
  4045  000D12  6B65               	clrf	(_SynthReadData$988+1)& (0+255),b
  4046                           
  4047                           ; BSR set to: 2
  4048  000D14  C264  F261         	movff	_SynthReadData$988,SynthReadData@TxMsg+27
  4049                           
  4050                           ; BSR set to: 2
  4051                           ;SyntApp.c: 212: TxMsg[5 * 5 + 2 + 1] = crc8(TxMsg, 5 * 5 + 2 + 1);
  4052  000D18  0E46               	movlw	low SynthReadData@TxMsg
  4053  000D1A  6E18               	movwf	crc8@dataArray,c
  4054  000D1C  0E02               	movlw	high SynthReadData@TxMsg
  4055  000D1E  6E19               	movwf	crc8@dataArray+1,c
  4056  000D20  0E00               	movlw	0
  4057  000D22  6E1B               	movwf	crc8@dataSize+1,c
  4058  000D24  0E1C               	movlw	28
  4059  000D26  6E1A               	movwf	crc8@dataSize,c
  4060  000D28  ECD9  F01D         	call	_crc8	;wreg free
  4061  000D2C  0102               	movlb	2	; () banked
  4062  000D2E  6F62               	movwf	(SynthReadData@TxMsg+28)& (0+255),b
  4063                           
  4064                           ; BSR set to: 2
  4065                           ;SyntApp.c: 213: WriteUartMessage(TxMsg, 5 * 5 + 2 + 1 + 1);
  4066  000D30  0E46               	movlw	low SynthReadData@TxMsg
  4067  000D32  6E19               	movwf	WriteUartMessage@dataBuf,c
  4068  000D34  0E02               	movlw	high SynthReadData@TxMsg
  4069  000D36  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4070  000D38  0E00               	movlw	0
  4071  000D3A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4072  000D3C  0E1D               	movlw	29
  4073  000D3E  6E1B               	movwf	WriteUartMessage@dataSize,c
  4074  000D40  EC8B  F01F         	call	_WriteUartMessage	;wreg free
  4075  000D44  0012               	return		;funcret
  4076  000D46                     __end_of_SynthReadData:
  4077                           	opt stack 0
  4078                           tosu	equ	0xFFF
  4079                           tosh	equ	0xFFE
  4080                           tosl	equ	0xFFD
  4081                           pclath	equ	0xFFA
  4082                           tblptru	equ	0xFF8
  4083                           tblptrh	equ	0xFF7
  4084                           tblptrl	equ	0xFF6
  4085                           tablat	equ	0xFF5
  4086                           prodh	equ	0xFF4
  4087                           prodl	equ	0xFF3
  4088                           postinc0	equ	0xFEE
  4089                           plusw0	equ	0xFEB
  4090                           wreg	equ	0xFE8
  4091                           postdec1	equ	0xFE5
  4092                           fsr1l	equ	0xFE1
  4093                           indf2	equ	0xFDF
  4094                           postinc2	equ	0xFDE
  4095                           plusw2	equ	0xFDB
  4096                           fsr2h	equ	0xFDA
  4097                           fsr2l	equ	0xFD9
  4098                           status	equ	0xFD8
  4099                           
  4100 ;; *************** function _SetSynthOper *****************
  4101 ;; Defined at:
  4102 ;;		line 139 in file "SyntApp.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;  cType           1    wreg     enum E1
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  cType           1  111[BANK0 ] enum E1
  4107 ;; Return value:  Size  Location     Type
  4108 ;;                  1    wreg      void 
  4109 ;; Registers used:
  4110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4111 ;; Tracked objects:
  4112 ;;		On entry : 0/0
  4113 ;;		On exit  : 0/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4116 ;;      Params:         0       0       0       0       0       0       0
  4117 ;;      Locals:         0       1       0       0       0       0       0
  4118 ;;      Temps:          0       0       0       0       0       0       0
  4119 ;;      Totals:         0       1       0       0       0       0       0
  4120 ;;Total ram usage:        1 bytes
  4121 ;; Hardware stack levels used:    1
  4122 ;; Hardware stack levels required when called:   11
  4123 ;; This function calls:
  4124 ;;		_InitSynth
  4125 ;;		_SendAckMessage
  4126 ;;		_SwSpi_Set_CE_Pin
  4127 ;; This function is called by:
  4128 ;;		_GroupSynthesizers
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text11
  4133  003472                     __ptext11:
  4134                           	opt stack 0
  4135  003472                     _SetSynthOper:
  4136                           	opt stack 17
  4137                           
  4138                           ;incstack = 0
  4139                           ;SetSynthOper@cType stored from wreg
  4140  003472  0100               	movlb	0	; () banked
  4141  003474  6FCF               	movwf	SetSynthOper@cType& (0+255),b
  4142                           
  4143                           ;SyntApp.c: 141: if(cType == SYNTH_TX)
  4144  003476  0100               	movlb	0	; () banked
  4145  003478  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4146  00347A  A4D8               	btfss	status,2,c
  4147  00347C  D01A               	goto	l538
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;SyntApp.c: 142: {
  4151                           ;SyntApp.c: 143: SynthTxOper = !SynthTxOper;
  4152  00347E  5045               	movf	_SynthTxOper,w,c
  4153  003480  A4D8               	btfss	status,2,c
  4154  003482  D002               	goto	u8570
  4155  003484  0E01               	movlw	1
  4156  003486  D001               	goto	u8580
  4157  003488                     u8570:
  4158  003488  0E00               	movlw	0
  4159  00348A                     u8580:
  4160  00348A  6E45               	movwf	_SynthTxOper,c
  4161                           
  4162                           ;SyntApp.c: 144: if(SynthTxOper)
  4163  00348C  5045               	movf	_SynthTxOper,w,c
  4164  00348E  B4D8               	btfsc	status,2,c
  4165  003490  D004               	goto	l539
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;SyntApp.c: 145: {
  4169                           ;SyntApp.c: 146: InitSynth(cType);
  4170  003492  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4171  003494  ECA3  F006         	call	_InitSynth
  4172                           
  4173                           ;SyntApp.c: 147: }
  4174  003498  D006               	goto	l540
  4175  00349A                     l539:
  4176                           
  4177                           ;SyntApp.c: 148: else
  4178                           ;SyntApp.c: 149: {
  4179                           ;SyntApp.c: 150: SwSpi_Set_CE_Pin(cType, 0);
  4180  00349A  0E00               	movlw	0
  4181  00349C  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4182  00349E  0100               	movlb	0	; () banked
  4183  0034A0  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4184  0034A2  ECC3  F01E         	call	_SwSpi_Set_CE_Pin
  4185  0034A6                     l540:
  4186                           
  4187                           ;SyntApp.c: 151: }
  4188                           ;SyntApp.c: 152: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  4189  0034A6  0E45               	movlw	69
  4190  0034A8  6E24               	movwf	SendAckMessage@inRequest,c
  4191  0034AA  0E04               	movlw	4
  4192  0034AC  ECB0  F01D         	call	_SendAckMessage
  4193                           
  4194                           ;SyntApp.c: 153: }
  4195  0034B0  0012               	return	
  4196  0034B2                     l538:
  4197                           
  4198                           ;SyntApp.c: 154: else if (cType == SYNTH_RX)
  4199  0034B2  0100               	movlb	0	; () banked
  4200  0034B4  05CF               	decf	SetSynthOper@cType& (0+255),w,b
  4201  0034B6  A4D8               	btfss	status,2,c
  4202  0034B8  0012               	return	
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;SyntApp.c: 155: {
  4206                           ;SyntApp.c: 156: SynthRxOper = !SynthRxOper;
  4207  0034BA  5044               	movf	_SynthRxOper,w,c
  4208  0034BC  A4D8               	btfss	status,2,c
  4209  0034BE  D002               	goto	u8610
  4210  0034C0  0E01               	movlw	1
  4211  0034C2  D001               	goto	u8620
  4212  0034C4                     u8610:
  4213  0034C4  0E00               	movlw	0
  4214  0034C6                     u8620:
  4215  0034C6  6E44               	movwf	_SynthRxOper,c
  4216                           
  4217                           ;SyntApp.c: 157: if(SynthRxOper)
  4218  0034C8  5044               	movf	_SynthRxOper,w,c
  4219  0034CA  B4D8               	btfsc	status,2,c
  4220  0034CC  D004               	goto	l543
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;SyntApp.c: 158: {
  4224                           ;SyntApp.c: 159: InitSynth(cType);
  4225  0034CE  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4226  0034D0  ECA3  F006         	call	_InitSynth
  4227                           
  4228                           ;SyntApp.c: 160: }
  4229  0034D4  D006               	goto	l544
  4230  0034D6                     l543:
  4231                           
  4232                           ;SyntApp.c: 161: else
  4233                           ;SyntApp.c: 162: {
  4234                           ;SyntApp.c: 163: SwSpi_Set_CE_Pin(cType, 0);
  4235  0034D6  0E00               	movlw	0
  4236  0034D8  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4237  0034DA  0100               	movlb	0	; () banked
  4238  0034DC  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4239  0034DE  ECC3  F01E         	call	_SwSpi_Set_CE_Pin
  4240  0034E2                     l544:
  4241                           
  4242                           ;SyntApp.c: 164: }
  4243                           ;SyntApp.c: 165: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  4244  0034E2  0E44               	movlw	68
  4245  0034E4  6E24               	movwf	SendAckMessage@inRequest,c
  4246  0034E6  0E04               	movlw	4
  4247  0034E8  ECB0  F01D         	call	_SendAckMessage
  4248  0034EC  0012               	return	
  4249  0034EE                     __end_of_SetSynthOper:
  4250                           	opt stack 0
  4251                           tosu	equ	0xFFF
  4252                           tosh	equ	0xFFE
  4253                           tosl	equ	0xFFD
  4254                           pclath	equ	0xFFA
  4255                           tblptru	equ	0xFF8
  4256                           tblptrh	equ	0xFF7
  4257                           tblptrl	equ	0xFF6
  4258                           tablat	equ	0xFF5
  4259                           prodh	equ	0xFF4
  4260                           prodl	equ	0xFF3
  4261                           postinc0	equ	0xFEE
  4262                           plusw0	equ	0xFEB
  4263                           wreg	equ	0xFE8
  4264                           postdec1	equ	0xFE5
  4265                           fsr1l	equ	0xFE1
  4266                           indf2	equ	0xFDF
  4267                           postinc2	equ	0xFDE
  4268                           plusw2	equ	0xFDB
  4269                           fsr2h	equ	0xFDA
  4270                           fsr2l	equ	0xFD9
  4271                           status	equ	0xFD8
  4272                           
  4273 ;; *************** function _GetMcuRunTime *****************
  4274 ;; Defined at:
  4275 ;;		line 68 in file "SystemStatus.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;		None
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;  idx             2   13[BANK0 ] int 
  4280 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  4281 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  1    wreg      void 
  4284 ;; Registers used:
  4285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4291 ;;      Params:         0       0       0       0       0       0       0
  4292 ;;      Locals:         0      15       0       0       0       0       0
  4293 ;;      Temps:          2       0       0       0       0       0       0
  4294 ;;      Totals:         2      15       0       0       0       0       0
  4295 ;;Total ram usage:       17 bytes
  4296 ;; Hardware stack levels used:    1
  4297 ;; Hardware stack levels required when called:    6
  4298 ;; This function calls:
  4299 ;;		_WriteUartMessage
  4300 ;;		___lldiv
  4301 ;;		___llmod
  4302 ;;		_crc8
  4303 ;; This function is called by:
  4304 ;;		_GroupStatusAndVersion
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text12
  4309  0026EC                     __ptext12:
  4310                           	opt stack 0
  4311  0026EC                     _GetMcuRunTime:
  4312                           	opt stack 22
  4313                           
  4314                           ;SystemStatus.c: 71: char TxMsg[(0x4) + (0x4) + 1];
  4315                           ;SystemStatus.c: 74: TxMsg[(0)] = (0x24);
  4316                           
  4317                           ;incstack = 0
  4318  0026EC  0E24               	movlw	36
  4319  0026EE  0100               	movlb	0	; () banked
  4320  0026F0  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  4321                           
  4322                           ;SystemStatus.c: 75: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4323  0026F2  0E02               	movlw	2
  4324  0026F4  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  4325                           
  4326                           ;SystemStatus.c: 76: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  4327  0026F6  0E21               	movlw	33
  4328  0026F8  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  4329                           
  4330                           ;SystemStatus.c: 77: TxMsg[(3)] = (0x4);
  4331  0026FA  0E04               	movlw	4
  4332  0026FC  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;SystemStatus.c: 79: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  4336  0026FE  C128  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  4337  002702  C129  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  4338  002706  C12A  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  4339  00270A  C12B  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  4340                           
  4341                           ;SystemStatus.c: 82: for(int idx = 0; idx < (0x4); idx++)
  4342  00270E  0E00               	movlw	0
  4343  002710  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  4344  002712  0E00               	movlw	0
  4345  002714  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  4346  002716                     l8590:
  4347                           
  4348                           ; BSR set to: 0
  4349  002716  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  4350  002718  D006               	goto	l1520
  4351  00271A  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  4352  00271C  E142               	bnz	l8602
  4353  00271E  0E04               	movlw	4
  4354  002720  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  4355  002722  B0D8               	btfsc	status,0,c
  4356  002724  D03E               	goto	u8740
  4357  002726                     l1520:
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;SystemStatus.c: 83: {
  4361                           ;SystemStatus.c: 84: TxMsg[(0x4) + idx] = tempRunTime % 10;
  4362                           
  4363                           ; BSR set to: 0
  4364  002726  0E04               	movlw	4
  4365  002728  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  4366  00272A  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  4367  00272C  0E00               	movlw	0
  4368  00272E  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  4369  002730  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  4370  002732  0E60               	movlw	low GetMcuRunTime@TxMsg
  4371  002734  2425               	addwf	??_GetMcuRunTime,w,c
  4372  002736  6ED9               	movwf	fsr2l,c
  4373  002738  0E00               	movlw	high GetMcuRunTime@TxMsg
  4374  00273A  2026               	addwfc	??_GetMcuRunTime+1,w,c
  4375  00273C  6EDA               	movwf	fsr2h,c
  4376  00273E  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  4377  002742  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  4378  002746  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  4379  00274A  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  4380  00274E  0E0A               	movlw	10
  4381  002750  6E1C               	movwf	___llmod@divisor,c
  4382  002752  0E00               	movlw	0
  4383  002754  6E1D               	movwf	___llmod@divisor+1,c
  4384  002756  0E00               	movlw	0
  4385  002758  6E1E               	movwf	___llmod@divisor+2,c
  4386  00275A  0E00               	movlw	0
  4387  00275C  6E1F               	movwf	___llmod@divisor+3,c
  4388  00275E  EC8F  F01B         	call	___llmod	;wreg free
  4389  002762  5018               	movf	?___llmod,w,c
  4390  002764  6EDF               	movwf	indf2,c
  4391                           
  4392                           ;SystemStatus.c: 85: tempRunTime /= 10;
  4393  002766  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  4394  00276A  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  4395  00276E  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  4396  002772  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  4397  002776  0E0A               	movlw	10
  4398  002778  6E1C               	movwf	___lldiv@divisor,c
  4399  00277A  0E00               	movlw	0
  4400  00277C  6E1D               	movwf	___lldiv@divisor+1,c
  4401  00277E  0E00               	movlw	0
  4402  002780  6E1E               	movwf	___lldiv@divisor+2,c
  4403  002782  0E00               	movlw	0
  4404  002784  6E1F               	movwf	___lldiv@divisor+3,c
  4405  002786  ECB9  F019         	call	___lldiv	;wreg free
  4406  00278A  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  4407  00278E  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  4408  002792  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  4409  002796  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  4410  00279A  0100               	movlb	0	; () banked
  4411  00279C  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  4412  00279E  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  4413  0027A0  D7BA               	goto	l8590
  4414  0027A2                     u8740:
  4415  0027A2                     l8602:
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;SystemStatus.c: 86: }
  4419                           ;SystemStatus.c: 88: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4420  0027A2  0E60               	movlw	low GetMcuRunTime@TxMsg
  4421  0027A4  6E18               	movwf	crc8@dataArray,c
  4422  0027A6  0E00               	movlw	high GetMcuRunTime@TxMsg
  4423  0027A8  6E19               	movwf	crc8@dataArray+1,c
  4424  0027AA  0E00               	movlw	0
  4425  0027AC  6E1B               	movwf	crc8@dataSize+1,c
  4426  0027AE  0E08               	movlw	8
  4427  0027B0  6E1A               	movwf	crc8@dataSize,c
  4428  0027B2  ECD9  F01D         	call	_crc8	;wreg free
  4429  0027B6  0100               	movlb	0	; () banked
  4430  0027B8  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;SystemStatus.c: 90: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4434  0027BA  0E60               	movlw	low GetMcuRunTime@TxMsg
  4435  0027BC  6E19               	movwf	WriteUartMessage@dataBuf,c
  4436  0027BE  0E00               	movlw	high GetMcuRunTime@TxMsg
  4437  0027C0  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4438  0027C2  0E00               	movlw	0
  4439  0027C4  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4440  0027C6  0E09               	movlw	9
  4441  0027C8  6E1B               	movwf	WriteUartMessage@dataSize,c
  4442  0027CA  EC8B  F01F         	call	_WriteUartMessage	;wreg free
  4443  0027CE  0012               	return		;funcret
  4444  0027D0                     __end_of_GetMcuRunTime:
  4445                           	opt stack 0
  4446                           tosu	equ	0xFFF
  4447                           tosh	equ	0xFFE
  4448                           tosl	equ	0xFFD
  4449                           pclath	equ	0xFFA
  4450                           tblptru	equ	0xFF8
  4451                           tblptrh	equ	0xFF7
  4452                           tblptrl	equ	0xFF6
  4453                           tablat	equ	0xFF5
  4454                           prodh	equ	0xFF4
  4455                           prodl	equ	0xFF3
  4456                           postinc0	equ	0xFEE
  4457                           plusw0	equ	0xFEB
  4458                           wreg	equ	0xFE8
  4459                           postdec1	equ	0xFE5
  4460                           fsr1l	equ	0xFE1
  4461                           indf2	equ	0xFDF
  4462                           postinc2	equ	0xFDE
  4463                           plusw2	equ	0xFDB
  4464                           fsr2h	equ	0xFDA
  4465                           fsr2l	equ	0xFD9
  4466                           status	equ	0xFD8
  4467                           
  4468 ;; *************** function ___lldiv *****************
  4469 ;; Defined at:
  4470 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  dividend        4   23[COMRAM] unsigned long 
  4473 ;;  divisor         4   27[COMRAM] unsigned long 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  quotient        4   31[COMRAM] unsigned long 
  4476 ;;  counter         1   35[COMRAM] unsigned char 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  4   23[COMRAM] unsigned long 
  4479 ;; Registers used:
  4480 ;;		wreg, status,2, status,0
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4486 ;;      Params:         8       0       0       0       0       0       0
  4487 ;;      Locals:         5       0       0       0       0       0       0
  4488 ;;      Temps:          0       0       0       0       0       0       0
  4489 ;;      Totals:        13       0       0       0       0       0       0
  4490 ;;Total ram usage:       13 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    4
  4493 ;; This function calls:
  4494 ;;		Nothing
  4495 ;; This function is called by:
  4496 ;;		_GetMcuRunTime
  4497 ;; This function uses a non-reentrant model
  4498 ;;
  4499                           
  4500                           	psect	text13
  4501  003372                     __ptext13:
  4502                           	opt stack 0
  4503  003372                     ___lldiv:
  4504                           	opt stack 23
  4505                           
  4506                           ;incstack = 0
  4507  003372  0E00               	movlw	0
  4508  003374  6E20               	movwf	___lldiv@quotient,c
  4509  003376  0E00               	movlw	0
  4510  003378  6E21               	movwf	___lldiv@quotient+1,c
  4511  00337A  0E00               	movlw	0
  4512  00337C  6E22               	movwf	___lldiv@quotient+2,c
  4513  00337E  0E00               	movlw	0
  4514  003380  6E23               	movwf	___lldiv@quotient+3,c
  4515  003382  501C               	movf	___lldiv@divisor,w,c
  4516  003384  101D               	iorwf	___lldiv@divisor+1,w,c
  4517  003386  101E               	iorwf	___lldiv@divisor+2,w,c
  4518  003388  101F               	iorwf	___lldiv@divisor+3,w,c
  4519  00338A  B4D8               	btfsc	status,2,c
  4520  00338C  D02A               	goto	l1957
  4521  00338E  0E01               	movlw	1
  4522  003390  6E24               	movwf	___lldiv@counter,c
  4523  003392  D006               	goto	l1952
  4524  003394  90D8               	bcf	status,0,c
  4525  003396  361C               	rlcf	___lldiv@divisor,f,c
  4526  003398  361D               	rlcf	___lldiv@divisor+1,f,c
  4527  00339A  361E               	rlcf	___lldiv@divisor+2,f,c
  4528  00339C  361F               	rlcf	___lldiv@divisor+3,f,c
  4529  00339E  2A24               	incf	___lldiv@counter,f,c
  4530  0033A0                     l1952:
  4531  0033A0  AE1F               	btfss	___lldiv@divisor+3,7,c
  4532  0033A2  D7F8               	goto	l1953
  4533  0033A4                     u8230:
  4534  0033A4  90D8               	bcf	status,0,c
  4535  0033A6  3620               	rlcf	___lldiv@quotient,f,c
  4536  0033A8  3621               	rlcf	___lldiv@quotient+1,f,c
  4537  0033AA  3622               	rlcf	___lldiv@quotient+2,f,c
  4538  0033AC  3623               	rlcf	___lldiv@quotient+3,f,c
  4539  0033AE  501C               	movf	___lldiv@divisor,w,c
  4540  0033B0  5C18               	subwf	___lldiv@dividend,w,c
  4541  0033B2  501D               	movf	___lldiv@divisor+1,w,c
  4542  0033B4  5819               	subwfb	___lldiv@dividend+1,w,c
  4543  0033B6  501E               	movf	___lldiv@divisor+2,w,c
  4544  0033B8  581A               	subwfb	___lldiv@dividend+2,w,c
  4545  0033BA  501F               	movf	___lldiv@divisor+3,w,c
  4546  0033BC  581B               	subwfb	___lldiv@dividend+3,w,c
  4547  0033BE  A0D8               	btfss	status,0,c
  4548  0033C0  D009               	goto	l1956
  4549  0033C2  501C               	movf	___lldiv@divisor,w,c
  4550  0033C4  5E18               	subwf	___lldiv@dividend,f,c
  4551  0033C6  501D               	movf	___lldiv@divisor+1,w,c
  4552  0033C8  5A19               	subwfb	___lldiv@dividend+1,f,c
  4553  0033CA  501E               	movf	___lldiv@divisor+2,w,c
  4554  0033CC  5A1A               	subwfb	___lldiv@dividend+2,f,c
  4555  0033CE  501F               	movf	___lldiv@divisor+3,w,c
  4556  0033D0  5A1B               	subwfb	___lldiv@dividend+3,f,c
  4557  0033D2  8020               	bsf	___lldiv@quotient,0,c
  4558  0033D4                     l1956:
  4559  0033D4  90D8               	bcf	status,0,c
  4560  0033D6  321F               	rrcf	___lldiv@divisor+3,f,c
  4561  0033D8  321E               	rrcf	___lldiv@divisor+2,f,c
  4562  0033DA  321D               	rrcf	___lldiv@divisor+1,f,c
  4563  0033DC  321C               	rrcf	___lldiv@divisor,f,c
  4564  0033DE  2E24               	decfsz	___lldiv@counter,f,c
  4565  0033E0  D7E1               	goto	u8230
  4566  0033E2                     l1957:
  4567  0033E2  C020  F018         	movff	___lldiv@quotient,?___lldiv
  4568  0033E6  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  4569  0033EA  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  4570  0033EE  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  4571  0033F2  0012               	return		;funcret
  4572  0033F4                     __end_of___lldiv:
  4573                           	opt stack 0
  4574                           tosu	equ	0xFFF
  4575                           tosh	equ	0xFFE
  4576                           tosl	equ	0xFFD
  4577                           pclath	equ	0xFFA
  4578                           tblptru	equ	0xFF8
  4579                           tblptrh	equ	0xFF7
  4580                           tblptrl	equ	0xFF6
  4581                           tablat	equ	0xFF5
  4582                           prodh	equ	0xFF4
  4583                           prodl	equ	0xFF3
  4584                           postinc0	equ	0xFEE
  4585                           plusw0	equ	0xFEB
  4586                           wreg	equ	0xFE8
  4587                           postdec1	equ	0xFE5
  4588                           fsr1l	equ	0xFE1
  4589                           indf2	equ	0xFDF
  4590                           postinc2	equ	0xFDE
  4591                           plusw2	equ	0xFDB
  4592                           fsr2h	equ	0xFDA
  4593                           fsr2l	equ	0xFD9
  4594                           status	equ	0xFD8
  4595                           
  4596 ;; *************** function _GetMcuFwVersion *****************
  4597 ;; Defined at:
  4598 ;;		line 14 in file "SystemStatus.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;		None
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  TxMsg          18    4[BANK0 ] unsigned char [18]
  4603 ;;  compileData     4    0[BANK0 ] unsigned long 
  4604 ;; Return value:  Size  Location     Type
  4605 ;;                  1    wreg      void 
  4606 ;; Registers used:
  4607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4608 ;; Tracked objects:
  4609 ;;		On entry : 0/0
  4610 ;;		On exit  : 0/0
  4611 ;;		Unchanged: 0/0
  4612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4613 ;;      Params:         0       0       0       0       0       0       0
  4614 ;;      Locals:         0      26       0       0       0       0       0
  4615 ;;      Temps:          7       0       0       0       0       0       0
  4616 ;;      Totals:         7      26       0       0       0       0       0
  4617 ;;Total ram usage:       33 bytes
  4618 ;; Hardware stack levels used:    1
  4619 ;; Hardware stack levels required when called:    6
  4620 ;; This function calls:
  4621 ;;		_WriteUartMessage
  4622 ;;		_ZeroArray
  4623 ;;		___wmul
  4624 ;;		_crc8
  4625 ;; This function is called by:
  4626 ;;		_GroupStatusAndVersion
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           	psect	text14
  4631  0006A6                     __ptext14:
  4632                           	opt stack 0
  4633  0006A6                     _GetMcuFwVersion:
  4634                           	opt stack 22
  4635                           
  4636                           ;SystemStatus.c: 16: uint32_t compileData = 0x0;
  4637                           
  4638                           ;incstack = 0
  4639  0006A6  0E00               	movlw	0
  4640  0006A8  0100               	movlb	0	; () banked
  4641  0006AA  6F60               	movwf	GetMcuFwVersion@compileData& (0+255),b
  4642  0006AC  0E00               	movlw	0
  4643  0006AE  6F61               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  4644  0006B0  0E00               	movlw	0
  4645  0006B2  6F62               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  4646  0006B4  0E00               	movlw	0
  4647  0006B6  6F63               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;SystemStatus.c: 19: char TxMsg[(13) + (0x4) + 1];
  4651                           ;SystemStatus.c: 20: ZeroArray(TxMsg, (13) + (0x4) + 1);
  4652  0006B8  0E64               	movlw	low GetMcuFwVersion@TxMsg
  4653  0006BA  6E20               	movwf	ZeroArray@array,c
  4654  0006BC  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4655  0006BE  6E21               	movwf	ZeroArray@array+1,c
  4656  0006C0  0E00               	movlw	0
  4657  0006C2  6E23               	movwf	ZeroArray@size+1,c
  4658  0006C4  0E12               	movlw	18
  4659  0006C6  6E22               	movwf	ZeroArray@size,c
  4660  0006C8  EC58  F021         	call	_ZeroArray	;wreg free
  4661                           
  4662                           ;SystemStatus.c: 23: TxMsg[(0)] = (0x24);
  4663  0006CC  0E24               	movlw	36
  4664  0006CE  0100               	movlb	0	; () banked
  4665  0006D0  6F64               	movwf	GetMcuFwVersion@TxMsg& (0+255),b
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;SystemStatus.c: 24: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4669  0006D2  0E02               	movlw	2
  4670  0006D4  6F65               	movwf	(GetMcuFwVersion@TxMsg+1)& (0+255),b
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;SystemStatus.c: 25: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4674  0006D6  0E22               	movlw	34
  4675  0006D8  6F66               	movwf	(GetMcuFwVersion@TxMsg+2)& (0+255),b
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;SystemStatus.c: 26: TxMsg[(3)] = (13);
  4679  0006DA  0E0D               	movlw	13
  4680  0006DC  6F67               	movwf	(GetMcuFwVersion@TxMsg+3)& (0+255),b
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;SystemStatus.c: 29: TxMsg[(0x4) + 0] = (( ("Mar 28 2018"[ 7] - '0') * 1000 + ("Mar 28 2
      +                          018"[ 8] - '0') * 100 + ("Mar 28 2018"[ 9] - '0') * 10 + ("Mar 28 2018"[10] - '0') ) & 0
      +                          xFF00) >> 8;
  4684  0006DE  0ED0               	movlw	208
  4685  0006E0  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4686  0006E2  0EFF               	movlw	255
  4687  0006E4  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4688  0006E6  0E97               	movlw	low (STR_1+7)
  4689  0006E8  6EF6               	movwf	tblptrl,c
  4690  0006EA  0E06               	movlw	high (STR_1+7)
  4691  0006EC  6EF7               	movwf	tblptrh,c
  4692  0006EE                     	if	0	;tblptru may be non-zero
  4693  0006EE                     	endif
  4694  0006EE                     	if	0	;tblptru may be non-zero
  4695  0006EE                     	endif
  4696  0006EE  0008               	tblrd		*
  4697  0006F0  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4698  0006F4  0ED0               	movlw	208
  4699  0006F6  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4700  0006F8  6E18               	movwf	___wmul@multiplier,c
  4701  0006FA  6A19               	clrf	___wmul@multiplier+1,c
  4702  0006FC  0EFF               	movlw	255
  4703  0006FE  2219               	addwfc	___wmul@multiplier+1,f,c
  4704  000700  0E03               	movlw	3
  4705  000702  6E1B               	movwf	___wmul@multiplicand+1,c
  4706  000704  0EE8               	movlw	232
  4707  000706  6E1A               	movwf	___wmul@multiplicand,c
  4708  000708  ECBF  F020         	call	___wmul	;wreg free
  4709  00070C  0E9A               	movlw	low (STR_1+10)
  4710  00070E  6EF6               	movwf	tblptrl,c
  4711  000710  0E06               	movlw	high (STR_1+10)
  4712  000712  6EF7               	movwf	tblptrh,c
  4713  000714                     	if	0	;tblptru may be non-zero
  4714  000714                     	endif
  4715  000714                     	if	0	;tblptru may be non-zero
  4716  000714                     	endif
  4717  000714  0008               	tblrd		*
  4718  000716  50F5               	movf	tablat,w,c
  4719  000718  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4720  00071A  6A28               	clrf	(??_GetMcuFwVersion+4)& (0+255),c
  4721  00071C  5018               	movf	?___wmul,w,c
  4722  00071E  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4723  000720  5019               	movf	?___wmul+1,w,c
  4724  000722  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4725  000724  0E98               	movlw	low (STR_1+8)
  4726  000726  6EF6               	movwf	tblptrl,c
  4727  000728  0E06               	movlw	high (STR_1+8)
  4728  00072A  6EF7               	movwf	tblptrh,c
  4729  00072C                     	if	0	;tblptru may be non-zero
  4730  00072C                     	endif
  4731  00072C                     	if	0	;tblptru may be non-zero
  4732  00072C                     	endif
  4733  00072C  0008               	tblrd		*
  4734  00072E  CFF5 F029          	movff	tablat,??_GetMcuFwVersion+5
  4735  000732  0ED0               	movlw	208
  4736  000734  2429               	addwf	??_GetMcuFwVersion+5,w,c
  4737  000736  6E18               	movwf	___wmul@multiplier,c
  4738  000738  6A19               	clrf	___wmul@multiplier+1,c
  4739  00073A  0EFF               	movlw	255
  4740  00073C  2219               	addwfc	___wmul@multiplier+1,f,c
  4741  00073E  0E00               	movlw	0
  4742  000740  6E1B               	movwf	___wmul@multiplicand+1,c
  4743  000742  0E64               	movlw	100
  4744  000744  6E1A               	movwf	___wmul@multiplicand,c
  4745  000746  ECBF  F020         	call	___wmul	;wreg free
  4746  00074A  5018               	movf	?___wmul,w,c
  4747  00074C  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4748  00074E  5019               	movf	?___wmul+1,w,c
  4749  000750  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4750  000752  0E99               	movlw	low (STR_1+9)
  4751  000754  6EF6               	movwf	tblptrl,c
  4752  000756  0E06               	movlw	high (STR_1+9)
  4753  000758  6EF7               	movwf	tblptrh,c
  4754  00075A                     	if	0	;tblptru may be non-zero
  4755  00075A                     	endif
  4756  00075A                     	if	0	;tblptru may be non-zero
  4757  00075A                     	endif
  4758  00075A  0008               	tblrd		*
  4759  00075C  CFF5 F02A          	movff	tablat,??_GetMcuFwVersion+6
  4760  000760  0ED0               	movlw	208
  4761  000762  242A               	addwf	??_GetMcuFwVersion+6,w,c
  4762  000764  6E18               	movwf	___wmul@multiplier,c
  4763  000766  6A19               	clrf	___wmul@multiplier+1,c
  4764  000768  0EFF               	movlw	255
  4765  00076A  2219               	addwfc	___wmul@multiplier+1,f,c
  4766  00076C  0E00               	movlw	0
  4767  00076E  6E1B               	movwf	___wmul@multiplicand+1,c
  4768  000770  0E0A               	movlw	10
  4769  000772  6E1A               	movwf	___wmul@multiplicand,c
  4770  000774  ECBF  F020         	call	___wmul	;wreg free
  4771  000778  5018               	movf	?___wmul,w,c
  4772  00077A  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4773  00077C  5019               	movf	?___wmul+1,w,c
  4774  00077E  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4775  000780  5024               	movf	??_GetMcuFwVersion,w,c
  4776  000782  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4777  000784  5025               	movf	??_GetMcuFwVersion+1,w,c
  4778  000786  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4779  000788  C028  F027         	movff	??_GetMcuFwVersion+4,??_GetMcuFwVersion+3
  4780  00078C  6A28               	clrf	??_GetMcuFwVersion+4,c
  4781  00078E  5027               	movf	??_GetMcuFwVersion+3,w,c
  4782  000790  0100               	movlb	0	; () banked
  4783  000792  6F68               	movwf	(GetMcuFwVersion@TxMsg+4)& (0+255),b
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;SystemStatus.c: 30: TxMsg[(0x4) + 1] = ( ("Mar 28 2018"[ 7] - '0') * 1000 + ("Mar 28 20
      +                          18"[ 8] - '0') * 100 + ("Mar 28 2018"[ 9] - '0') * 10 + ("Mar 28 2018"[10] - '0') ) & 0x
      +                          FF;
  4787  000794  0E9A               	movlw	low (STR_1+10)
  4788  000796  6EF6               	movwf	tblptrl,c
  4789  000798  0E06               	movlw	high (STR_1+10)
  4790  00079A  6EF7               	movwf	tblptrh,c
  4791  00079C                     	if	0	;tblptru may be non-zero
  4792  00079C                     	endif
  4793  00079C                     	if	0	;tblptru may be non-zero
  4794  00079C                     	endif
  4795  00079C  0008               	tblrd		*
  4796  00079E  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4797  0007A2  0E99               	movlw	low (STR_1+9)
  4798  0007A4  6EF6               	movwf	tblptrl,c
  4799  0007A6  0E06               	movlw	high (STR_1+9)
  4800  0007A8  6EF7               	movwf	tblptrh,c
  4801  0007AA                     	if	0	;tblptru may be non-zero
  4802  0007AA                     	endif
  4803  0007AA                     	if	0	;tblptru may be non-zero
  4804  0007AA                     	endif
  4805  0007AA  0008               	tblrd		*
  4806  0007AC  50F5               	movf	tablat,w,c
  4807  0007AE  0FD0               	addlw	208
  4808  0007B0  0D0A               	mullw	10
  4809  0007B2  CFF3 F025          	movff	prodl,??_GetMcuFwVersion+1
  4810  0007B6  0E98               	movlw	low (STR_1+8)
  4811  0007B8  6EF6               	movwf	tblptrl,c
  4812  0007BA  0E06               	movlw	high (STR_1+8)
  4813  0007BC  6EF7               	movwf	tblptrh,c
  4814  0007BE                     	if	0	;tblptru may be non-zero
  4815  0007BE                     	endif
  4816  0007BE                     	if	0	;tblptru may be non-zero
  4817  0007BE                     	endif
  4818  0007BE  0008               	tblrd		*
  4819  0007C0  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4820  0007C4  0ED0               	movlw	208
  4821  0007C6  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4822  0007C8  6E18               	movwf	___wmul@multiplier,c
  4823  0007CA  6A19               	clrf	___wmul@multiplier+1,c
  4824  0007CC  0EFF               	movlw	255
  4825  0007CE  2219               	addwfc	___wmul@multiplier+1,f,c
  4826  0007D0  0E00               	movlw	0
  4827  0007D2  6E1B               	movwf	___wmul@multiplicand+1,c
  4828  0007D4  0E64               	movlw	100
  4829  0007D6  6E1A               	movwf	___wmul@multiplicand,c
  4830  0007D8  ECBF  F020         	call	___wmul	;wreg free
  4831  0007DC  0E97               	movlw	low (STR_1+7)
  4832  0007DE  6EF6               	movwf	tblptrl,c
  4833  0007E0  0E06               	movlw	high (STR_1+7)
  4834  0007E2  6EF7               	movwf	tblptrh,c
  4835  0007E4                     	if	0	;tblptru may be non-zero
  4836  0007E4                     	endif
  4837  0007E4                     	if	0	;tblptru may be non-zero
  4838  0007E4                     	endif
  4839  0007E4  0008               	tblrd		*
  4840  0007E6  50F5               	movf	tablat,w,c
  4841  0007E8  0FD0               	addlw	208
  4842  0007EA  0DE8               	mullw	232
  4843  0007EC  50F3               	movf	prodl,w,c
  4844  0007EE  2418               	addwf	?___wmul,w,c
  4845  0007F0  2425               	addwf	??_GetMcuFwVersion+1,w,c
  4846  0007F2  2424               	addwf	??_GetMcuFwVersion,w,c
  4847  0007F4  0FD0               	addlw	208
  4848  0007F6  0100               	movlb	0	; () banked
  4849  0007F8  6F69               	movwf	(GetMcuFwVersion@TxMsg+5)& (0+255),b
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;SystemStatus.c: 33: TxMsg[(0x4) + 2] = "Mar 28 2018"[0];
  4853  0007FA  0E90               	movlw	low STR_1
  4854  0007FC  6EF6               	movwf	tblptrl,c
  4855  0007FE                     	if	1	;There is more than 1 active tblptr byte
  4856  0007FE  0E06               	movlw	high STR_1
  4857  000800  6EF7               	movwf	tblptrh,c
  4858  000802                     	endif
  4859  000802                     	if	0	;There are less than 3 active tblptr bytes
  4860  000802                     	endif
  4861  000802  0008               	tblrd		*
  4862  000804  CFF5 F06A          	movff	tablat,GetMcuFwVersion@TxMsg+6
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;SystemStatus.c: 34: TxMsg[(0x4) + 3] = "Mar 28 2018"[1];
  4866  000808  0E91               	movlw	low (STR_1+1)
  4867  00080A  6EF6               	movwf	tblptrl,c
  4868  00080C  0E06               	movlw	high (STR_1+1)
  4869  00080E  6EF7               	movwf	tblptrh,c
  4870  000810                     	if	0	;tblptru may be non-zero
  4871  000810                     	endif
  4872  000810                     	if	0	;tblptru may be non-zero
  4873  000810                     	endif
  4874  000810  0008               	tblrd		*
  4875  000812  CFF5 F06B          	movff	tablat,GetMcuFwVersion@TxMsg+7
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;SystemStatus.c: 35: TxMsg[(0x4) + 4] = "Mar 28 2018"[2];
  4879  000816  0E92               	movlw	low (STR_1+2)
  4880  000818  6EF6               	movwf	tblptrl,c
  4881  00081A  0E06               	movlw	high (STR_1+2)
  4882  00081C  6EF7               	movwf	tblptrh,c
  4883  00081E                     	if	0	;tblptru may be non-zero
  4884  00081E                     	endif
  4885  00081E                     	if	0	;tblptru may be non-zero
  4886  00081E                     	endif
  4887  00081E  0008               	tblrd		*
  4888  000820  CFF5 F06C          	movff	tablat,GetMcuFwVersion@TxMsg+8
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;SystemStatus.c: 38: TxMsg[(0x4) + 5] = (( (("Mar 28 2018"[4] >= '0') ? ("Mar 28 2018"[4
      +                          ] - '0') * 10 : 0) + ("Mar 28 2018"[5] - '0') ) & 0xFF00) >> 8;
  4892  000824  0E94               	movlw	low (STR_1+4)
  4893  000826  6EF6               	movwf	tblptrl,c
  4894  000828  0E06               	movlw	high (STR_1+4)
  4895  00082A  6EF7               	movwf	tblptrh,c
  4896  00082C                     	if	0	;tblptru may be non-zero
  4897  00082C                     	endif
  4898  00082C                     	if	0	;tblptru may be non-zero
  4899  00082C                     	endif
  4900  00082C  0E30               	movlw	48
  4901  00082E  0008               	tblrd		*
  4902  000830  60F5               	cpfslt	tablat,c
  4903  000832  D005               	goto	l1504
  4904                           
  4905                           ; BSR set to: 0
  4906  000834  0E00               	movlw	0
  4907  000836  6F77               	movwf	(_GetMcuFwVersion$2698+1)& (0+255),b
  4908  000838  0E00               	movlw	0
  4909  00083A  6F76               	movwf	_GetMcuFwVersion$2698& (0+255),b
  4910  00083C  D017               	goto	l1506
  4911  00083E                     l1504:
  4912                           
  4913                           ; BSR set to: 0
  4914                           
  4915                           ; BSR set to: 0
  4916  00083E  0E94               	movlw	low (STR_1+4)
  4917  000840  6EF6               	movwf	tblptrl,c
  4918  000842  0E06               	movlw	high (STR_1+4)
  4919  000844  6EF7               	movwf	tblptrh,c
  4920  000846                     	if	0	;tblptru may be non-zero
  4921  000846                     	endif
  4922  000846                     	if	0	;tblptru may be non-zero
  4923  000846                     	endif
  4924  000846  0008               	tblrd		*
  4925  000848  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4926  00084C  0ED0               	movlw	208
  4927  00084E  2424               	addwf	??_GetMcuFwVersion,w,c
  4928  000850  6E18               	movwf	___wmul@multiplier,c
  4929  000852  6A19               	clrf	___wmul@multiplier+1,c
  4930  000854  0EFF               	movlw	255
  4931  000856  2219               	addwfc	___wmul@multiplier+1,f,c
  4932  000858  0E00               	movlw	0
  4933  00085A  6E1B               	movwf	___wmul@multiplicand+1,c
  4934  00085C  0E0A               	movlw	10
  4935  00085E  6E1A               	movwf	___wmul@multiplicand,c
  4936  000860  ECBF  F020         	call	___wmul	;wreg free
  4937  000864  C018  F076         	movff	?___wmul,_GetMcuFwVersion$2698
  4938  000868  C019  F077         	movff	?___wmul+1,_GetMcuFwVersion$2698+1
  4939  00086C                     l1506:
  4940  00086C  0ED0               	movlw	208
  4941  00086E  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4942  000870  0EFF               	movlw	255
  4943  000872  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4944  000874  0E95               	movlw	low (STR_1+5)
  4945  000876  6EF6               	movwf	tblptrl,c
  4946  000878  0E06               	movlw	high (STR_1+5)
  4947  00087A  6EF7               	movwf	tblptrh,c
  4948  00087C                     	if	0	;tblptru may be non-zero
  4949  00087C                     	endif
  4950  00087C                     	if	0	;tblptru may be non-zero
  4951  00087C                     	endif
  4952  00087C  0008               	tblrd		*
  4953  00087E  50F5               	movf	tablat,w,c
  4954  000880  0100               	movlb	0	; () banked
  4955  000882  2576               	addwf	_GetMcuFwVersion$2698& (0+255),w,b
  4956  000884  6E26               	movwf	(??_GetMcuFwVersion+2)& (0+255),c
  4957  000886  0E00               	movlw	0
  4958  000888  2177               	addwfc	(_GetMcuFwVersion$2698+1)& (0+255),w,b
  4959  00088A  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4960  00088C  5024               	movf	??_GetMcuFwVersion,w,c
  4961  00088E  2626               	addwf	??_GetMcuFwVersion+2,f,c
  4962  000890  5025               	movf	??_GetMcuFwVersion+1,w,c
  4963  000892  2227               	addwfc	??_GetMcuFwVersion+3,f,c
  4964  000894  C027  F026         	movff	??_GetMcuFwVersion+3,??_GetMcuFwVersion+2
  4965  000898  6A27               	clrf	??_GetMcuFwVersion+3,c
  4966  00089A  5026               	movf	??_GetMcuFwVersion+2,w,c
  4967  00089C  6F6D               	movwf	(GetMcuFwVersion@TxMsg+9)& (0+255),b
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;SystemStatus.c: 39: TxMsg[(0x4) + 6] = ( (("Mar 28 2018"[4] >= '0') ? ("Mar 28 2018"[4]
      +                           - '0') * 10 : 0) + ("Mar 28 2018"[5] - '0') ) & 0xFF;
  4971  00089E  0E94               	movlw	low (STR_1+4)
  4972  0008A0  6EF6               	movwf	tblptrl,c
  4973  0008A2  0E06               	movlw	high (STR_1+4)
  4974  0008A4  6EF7               	movwf	tblptrh,c
  4975  0008A6                     	if	0	;tblptru may be non-zero
  4976  0008A6                     	endif
  4977  0008A6                     	if	0	;tblptru may be non-zero
  4978  0008A6                     	endif
  4979  0008A6  0E30               	movlw	48
  4980  0008A8  0008               	tblrd		*
  4981  0008AA  60F5               	cpfslt	tablat,c
  4982  0008AC  D005               	goto	l1508
  4983                           
  4984                           ; BSR set to: 0
  4985  0008AE  0E00               	movlw	0
  4986  0008B0  6F79               	movwf	(_GetMcuFwVersion$2702+1)& (0+255),b
  4987  0008B2  0E00               	movlw	0
  4988  0008B4  6F78               	movwf	_GetMcuFwVersion$2702& (0+255),b
  4989  0008B6  D017               	goto	l1510
  4990  0008B8                     l1508:
  4991                           
  4992                           ; BSR set to: 0
  4993                           
  4994                           ; BSR set to: 0
  4995  0008B8  0E94               	movlw	low (STR_1+4)
  4996  0008BA  6EF6               	movwf	tblptrl,c
  4997  0008BC  0E06               	movlw	high (STR_1+4)
  4998  0008BE  6EF7               	movwf	tblptrh,c
  4999  0008C0                     	if	0	;tblptru may be non-zero
  5000  0008C0                     	endif
  5001  0008C0                     	if	0	;tblptru may be non-zero
  5002  0008C0                     	endif
  5003  0008C0  0008               	tblrd		*
  5004  0008C2  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5005  0008C6  0ED0               	movlw	208
  5006  0008C8  2424               	addwf	??_GetMcuFwVersion,w,c
  5007  0008CA  6E18               	movwf	___wmul@multiplier,c
  5008  0008CC  6A19               	clrf	___wmul@multiplier+1,c
  5009  0008CE  0EFF               	movlw	255
  5010  0008D0  2219               	addwfc	___wmul@multiplier+1,f,c
  5011  0008D2  0E00               	movlw	0
  5012  0008D4  6E1B               	movwf	___wmul@multiplicand+1,c
  5013  0008D6  0E0A               	movlw	10
  5014  0008D8  6E1A               	movwf	___wmul@multiplicand,c
  5015  0008DA  ECBF  F020         	call	___wmul	;wreg free
  5016  0008DE  C018  F078         	movff	?___wmul,_GetMcuFwVersion$2702
  5017  0008E2  C019  F079         	movff	?___wmul+1,_GetMcuFwVersion$2702+1
  5018  0008E6                     l1510:
  5019  0008E6  0E95               	movlw	low (STR_1+5)
  5020  0008E8  6EF6               	movwf	tblptrl,c
  5021  0008EA  0E06               	movlw	high (STR_1+5)
  5022  0008EC  6EF7               	movwf	tblptrh,c
  5023  0008EE                     	if	0	;tblptru may be non-zero
  5024  0008EE                     	endif
  5025  0008EE                     	if	0	;tblptru may be non-zero
  5026  0008EE                     	endif
  5027  0008EE  0008               	tblrd		*
  5028  0008F0  50F5               	movf	tablat,w,c
  5029  0008F2  0100               	movlb	0	; () banked
  5030  0008F4  2578               	addwf	_GetMcuFwVersion$2702& (0+255),w,b
  5031  0008F6  0FD0               	addlw	208
  5032  0008F8  6F6E               	movwf	(GetMcuFwVersion@TxMsg+10)& (0+255),b
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;SystemStatus.c: 42: TxMsg[(0x4) + 7] = ((("15:42:07"[0] - '0') * 10 + "15:42:07"[1] - '
      +                          0') & 0xFF00) >> 8;
  5036  0008FA  0ED0               	movlw	208
  5037  0008FC  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5038  0008FE  0EFF               	movlw	255
  5039  000900  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5040  000902  0E9C               	movlw	low STR_18
  5041  000904  6EF6               	movwf	tblptrl,c
  5042  000906                     	if	1	;There is more than 1 active tblptr byte
  5043  000906  0E06               	movlw	high STR_18
  5044  000908  6EF7               	movwf	tblptrh,c
  5045  00090A                     	endif
  5046  00090A                     	if	0	;There are less than 3 active tblptr bytes
  5047  00090A                     	endif
  5048  00090A  0008               	tblrd		*
  5049  00090C  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5050  000910  0ED0               	movlw	208
  5051  000912  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5052  000914  6E18               	movwf	___wmul@multiplier,c
  5053  000916  6A19               	clrf	___wmul@multiplier+1,c
  5054  000918  0EFF               	movlw	255
  5055  00091A  2219               	addwfc	___wmul@multiplier+1,f,c
  5056  00091C  0E00               	movlw	0
  5057  00091E  6E1B               	movwf	___wmul@multiplicand+1,c
  5058  000920  0E0A               	movlw	10
  5059  000922  6E1A               	movwf	___wmul@multiplicand,c
  5060  000924  ECBF  F020         	call	___wmul	;wreg free
  5061  000928  0E9D               	movlw	low (STR_18+1)
  5062  00092A  6EF6               	movwf	tblptrl,c
  5063  00092C  0E06               	movlw	high (STR_18+1)
  5064  00092E  6EF7               	movwf	tblptrh,c
  5065  000930                     	if	0	;tblptru may be non-zero
  5066  000930                     	endif
  5067  000930                     	if	0	;tblptru may be non-zero
  5068  000930                     	endif
  5069  000930  0008               	tblrd		*
  5070  000932  50F5               	movf	tablat,w,c
  5071  000934  2618               	addwf	?___wmul,f,c
  5072  000936  0E00               	movlw	0
  5073  000938  2219               	addwfc	?___wmul+1,f,c
  5074  00093A  5024               	movf	??_GetMcuFwVersion,w,c
  5075  00093C  2618               	addwf	?___wmul,f,c
  5076  00093E  5025               	movf	??_GetMcuFwVersion+1,w,c
  5077  000940  2219               	addwfc	?___wmul+1,f,c
  5078  000942  C019  F018         	movff	?___wmul+1,?___wmul
  5079  000946  6A19               	clrf	?___wmul+1,c
  5080  000948  5018               	movf	?___wmul,w,c
  5081  00094A  0100               	movlb	0	; () banked
  5082  00094C  6F6F               	movwf	(GetMcuFwVersion@TxMsg+11)& (0+255),b
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;SystemStatus.c: 43: TxMsg[(0x4) + 8] = (("15:42:07"[0] - '0') * 10 + "15:42:07"[1] - '0
      +                          ') & 0xFF;
  5086  00094E  0E9D               	movlw	low (STR_18+1)
  5087  000950  6EF6               	movwf	tblptrl,c
  5088  000952  0E06               	movlw	high (STR_18+1)
  5089  000954  6EF7               	movwf	tblptrh,c
  5090  000956                     	if	0	;tblptru may be non-zero
  5091  000956                     	endif
  5092  000956                     	if	0	;tblptru may be non-zero
  5093  000956                     	endif
  5094  000956  0008               	tblrd		*
  5095  000958  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5096  00095C  0E9C               	movlw	low STR_18
  5097  00095E  6EF6               	movwf	tblptrl,c
  5098  000960                     	if	1	;There is more than 1 active tblptr byte
  5099  000960  0E06               	movlw	high STR_18
  5100  000962  6EF7               	movwf	tblptrh,c
  5101  000964                     	endif
  5102  000964                     	if	0	;There are less than 3 active tblptr bytes
  5103  000964                     	endif
  5104  000964  0008               	tblrd		*
  5105  000966  50F5               	movf	tablat,w,c
  5106  000968  0FD0               	addlw	208
  5107  00096A  0D0A               	mullw	10
  5108  00096C  50F3               	movf	prodl,w,c
  5109  00096E  2424               	addwf	??_GetMcuFwVersion,w,c
  5110  000970  0FD0               	addlw	208
  5111  000972  6F70               	movwf	(GetMcuFwVersion@TxMsg+12)& (0+255),b
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;SystemStatus.c: 46: TxMsg[(0x4) + 9] = ((("15:42:07"[3] - '0') * 10 + "15:42:07"[4] - '
      +                          0') & 0xFF00) >> 8;
  5115  000974  0ED0               	movlw	208
  5116  000976  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5117  000978  0EFF               	movlw	255
  5118  00097A  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5119  00097C  0E9F               	movlw	low (STR_18+3)
  5120  00097E  6EF6               	movwf	tblptrl,c
  5121  000980  0E06               	movlw	high (STR_18+3)
  5122  000982  6EF7               	movwf	tblptrh,c
  5123  000984                     	if	0	;tblptru may be non-zero
  5124  000984                     	endif
  5125  000984                     	if	0	;tblptru may be non-zero
  5126  000984                     	endif
  5127  000984  0008               	tblrd		*
  5128  000986  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5129  00098A  0ED0               	movlw	208
  5130  00098C  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5131  00098E  6E18               	movwf	___wmul@multiplier,c
  5132  000990  6A19               	clrf	___wmul@multiplier+1,c
  5133  000992  0EFF               	movlw	255
  5134  000994  2219               	addwfc	___wmul@multiplier+1,f,c
  5135  000996  0E00               	movlw	0
  5136  000998  6E1B               	movwf	___wmul@multiplicand+1,c
  5137  00099A  0E0A               	movlw	10
  5138  00099C  6E1A               	movwf	___wmul@multiplicand,c
  5139  00099E  ECBF  F020         	call	___wmul	;wreg free
  5140  0009A2  0EA0               	movlw	low (STR_18+4)
  5141  0009A4  6EF6               	movwf	tblptrl,c
  5142  0009A6  0E06               	movlw	high (STR_18+4)
  5143  0009A8  6EF7               	movwf	tblptrh,c
  5144  0009AA                     	if	0	;tblptru may be non-zero
  5145  0009AA                     	endif
  5146  0009AA                     	if	0	;tblptru may be non-zero
  5147  0009AA                     	endif
  5148  0009AA  0008               	tblrd		*
  5149  0009AC  50F5               	movf	tablat,w,c
  5150  0009AE  2618               	addwf	?___wmul,f,c
  5151  0009B0  0E00               	movlw	0
  5152  0009B2  2219               	addwfc	?___wmul+1,f,c
  5153  0009B4  5024               	movf	??_GetMcuFwVersion,w,c
  5154  0009B6  2618               	addwf	?___wmul,f,c
  5155  0009B8  5025               	movf	??_GetMcuFwVersion+1,w,c
  5156  0009BA  2219               	addwfc	?___wmul+1,f,c
  5157  0009BC  C019  F018         	movff	?___wmul+1,?___wmul
  5158  0009C0  6A19               	clrf	?___wmul+1,c
  5159  0009C2  5018               	movf	?___wmul,w,c
  5160  0009C4  0100               	movlb	0	; () banked
  5161  0009C6  6F71               	movwf	(GetMcuFwVersion@TxMsg+13)& (0+255),b
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;SystemStatus.c: 47: TxMsg[(0x4) + 10] = (("15:42:07"[3] - '0') * 10 + "15:42:07"[4] - '
      +                          0') & 0xFF;
  5165  0009C8  0EA0               	movlw	low (STR_18+4)
  5166  0009CA  6EF6               	movwf	tblptrl,c
  5167  0009CC  0E06               	movlw	high (STR_18+4)
  5168  0009CE  6EF7               	movwf	tblptrh,c
  5169  0009D0                     	if	0	;tblptru may be non-zero
  5170  0009D0                     	endif
  5171  0009D0                     	if	0	;tblptru may be non-zero
  5172  0009D0                     	endif
  5173  0009D0  0008               	tblrd		*
  5174  0009D2  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5175  0009D6  0E9F               	movlw	low (STR_18+3)
  5176  0009D8  6EF6               	movwf	tblptrl,c
  5177  0009DA  0E06               	movlw	high (STR_18+3)
  5178  0009DC  6EF7               	movwf	tblptrh,c
  5179  0009DE                     	if	0	;tblptru may be non-zero
  5180  0009DE                     	endif
  5181  0009DE                     	if	0	;tblptru may be non-zero
  5182  0009DE                     	endif
  5183  0009DE  0008               	tblrd		*
  5184  0009E0  50F5               	movf	tablat,w,c
  5185  0009E2  0FD0               	addlw	208
  5186  0009E4  0D0A               	mullw	10
  5187  0009E6  50F3               	movf	prodl,w,c
  5188  0009E8  2424               	addwf	??_GetMcuFwVersion,w,c
  5189  0009EA  0FD0               	addlw	208
  5190  0009EC  6F72               	movwf	(GetMcuFwVersion@TxMsg+14)& (0+255),b
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;SystemStatus.c: 49: TxMsg[(0x4) + 11] = ((("15:42:07"[6] - '0') * 10 + "15:42:07"[7] - 
      +                          '0') & 0xFF00) >> 8;
  5194  0009EE  0ED0               	movlw	208
  5195  0009F0  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5196  0009F2  0EFF               	movlw	255
  5197  0009F4  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5198  0009F6  0EA2               	movlw	low (STR_18+6)
  5199  0009F8  6EF6               	movwf	tblptrl,c
  5200  0009FA  0E06               	movlw	high (STR_18+6)
  5201  0009FC  6EF7               	movwf	tblptrh,c
  5202  0009FE                     	if	0	;tblptru may be non-zero
  5203  0009FE                     	endif
  5204  0009FE                     	if	0	;tblptru may be non-zero
  5205  0009FE                     	endif
  5206  0009FE  0008               	tblrd		*
  5207  000A00  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5208  000A04  0ED0               	movlw	208
  5209  000A06  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5210  000A08  6E18               	movwf	___wmul@multiplier,c
  5211  000A0A  6A19               	clrf	___wmul@multiplier+1,c
  5212  000A0C  0EFF               	movlw	255
  5213  000A0E  2219               	addwfc	___wmul@multiplier+1,f,c
  5214  000A10  0E00               	movlw	0
  5215  000A12  6E1B               	movwf	___wmul@multiplicand+1,c
  5216  000A14  0E0A               	movlw	10
  5217  000A16  6E1A               	movwf	___wmul@multiplicand,c
  5218  000A18  ECBF  F020         	call	___wmul	;wreg free
  5219  000A1C  0EA3               	movlw	low (STR_18+7)
  5220  000A1E  6EF6               	movwf	tblptrl,c
  5221  000A20  0E06               	movlw	high (STR_18+7)
  5222  000A22  6EF7               	movwf	tblptrh,c
  5223  000A24                     	if	0	;tblptru may be non-zero
  5224  000A24                     	endif
  5225  000A24                     	if	0	;tblptru may be non-zero
  5226  000A24                     	endif
  5227  000A24  0008               	tblrd		*
  5228  000A26  50F5               	movf	tablat,w,c
  5229  000A28  2618               	addwf	?___wmul,f,c
  5230  000A2A  0E00               	movlw	0
  5231  000A2C  2219               	addwfc	?___wmul+1,f,c
  5232  000A2E  5024               	movf	??_GetMcuFwVersion,w,c
  5233  000A30  2618               	addwf	?___wmul,f,c
  5234  000A32  5025               	movf	??_GetMcuFwVersion+1,w,c
  5235  000A34  2219               	addwfc	?___wmul+1,f,c
  5236  000A36  C019  F018         	movff	?___wmul+1,?___wmul
  5237  000A3A  6A19               	clrf	?___wmul+1,c
  5238  000A3C  5018               	movf	?___wmul,w,c
  5239  000A3E  0100               	movlb	0	; () banked
  5240  000A40  6F73               	movwf	(GetMcuFwVersion@TxMsg+15)& (0+255),b
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;SystemStatus.c: 50: TxMsg[(0x4) + 12] = (("15:42:07"[6] - '0') * 10 + "15:42:07"[7] - '
      +                          0') & 0xFF;
  5244  000A42  0EA3               	movlw	low (STR_18+7)
  5245  000A44  6EF6               	movwf	tblptrl,c
  5246  000A46  0E06               	movlw	high (STR_18+7)
  5247  000A48  6EF7               	movwf	tblptrh,c
  5248  000A4A                     	if	0	;tblptru may be non-zero
  5249  000A4A                     	endif
  5250  000A4A                     	if	0	;tblptru may be non-zero
  5251  000A4A                     	endif
  5252  000A4A  0008               	tblrd		*
  5253  000A4C  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5254  000A50  0EA2               	movlw	low (STR_18+6)
  5255  000A52  6EF6               	movwf	tblptrl,c
  5256  000A54  0E06               	movlw	high (STR_18+6)
  5257  000A56  6EF7               	movwf	tblptrh,c
  5258  000A58                     	if	0	;tblptru may be non-zero
  5259  000A58                     	endif
  5260  000A58                     	if	0	;tblptru may be non-zero
  5261  000A58                     	endif
  5262  000A58  0008               	tblrd		*
  5263  000A5A  50F5               	movf	tablat,w,c
  5264  000A5C  0FD0               	addlw	208
  5265  000A5E  0D0A               	mullw	10
  5266  000A60  50F3               	movf	prodl,w,c
  5267  000A62  2424               	addwf	??_GetMcuFwVersion,w,c
  5268  000A64  0FD0               	addlw	208
  5269  000A66  6F74               	movwf	(GetMcuFwVersion@TxMsg+16)& (0+255),b
  5270                           
  5271                           ; BSR set to: 0
  5272                           ;SystemStatus.c: 52: TxMsg[(13) + (0x4)] = crc8(TxMsg, (13) + (0x4));
  5273  000A68  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5274  000A6A  6E18               	movwf	crc8@dataArray,c
  5275  000A6C  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5276  000A6E  6E19               	movwf	crc8@dataArray+1,c
  5277  000A70  0E00               	movlw	0
  5278  000A72  6E1B               	movwf	crc8@dataSize+1,c
  5279  000A74  0E11               	movlw	17
  5280  000A76  6E1A               	movwf	crc8@dataSize,c
  5281  000A78  ECD9  F01D         	call	_crc8	;wreg free
  5282  000A7C  0100               	movlb	0	; () banked
  5283  000A7E  6F75               	movwf	(GetMcuFwVersion@TxMsg+17)& (0+255),b
  5284                           
  5285                           ;SystemStatus.c: 54: WriteUartMessage(TxMsg, (13) + (0x4) + 1);
  5286  000A80  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5287  000A82  6E19               	movwf	WriteUartMessage@dataBuf,c
  5288  000A84  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5289  000A86  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5290  000A88  0E00               	movlw	0
  5291  000A8A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5292  000A8C  0E12               	movlw	18
  5293  000A8E  6E1B               	movwf	WriteUartMessage@dataSize,c
  5294  000A90  EC8B  F01F         	call	_WriteUartMessage	;wreg free
  5295  000A94  0012               	return		;funcret
  5296  000A96                     __end_of_GetMcuFwVersion:
  5297                           	opt stack 0
  5298                           tosu	equ	0xFFF
  5299                           tosh	equ	0xFFE
  5300                           tosl	equ	0xFFD
  5301                           pclath	equ	0xFFA
  5302                           tblptru	equ	0xFF8
  5303                           tblptrh	equ	0xFF7
  5304                           tblptrl	equ	0xFF6
  5305                           tablat	equ	0xFF5
  5306                           prodh	equ	0xFF4
  5307                           prodl	equ	0xFF3
  5308                           postinc0	equ	0xFEE
  5309                           plusw0	equ	0xFEB
  5310                           wreg	equ	0xFE8
  5311                           postdec1	equ	0xFE5
  5312                           fsr1l	equ	0xFE1
  5313                           indf2	equ	0xFDF
  5314                           postinc2	equ	0xFDE
  5315                           plusw2	equ	0xFDB
  5316                           fsr2h	equ	0xFDA
  5317                           fsr2l	equ	0xFD9
  5318                           status	equ	0xFD8
  5319                           
  5320 ;; *************** function _FlashReadUart *****************
  5321 ;; Defined at:
  5322 ;;		line 63 in file "FlashApp.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;  data            2   39[BANK0 ] PTR unsigned char 
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;  idx             2  132[BANK0 ] int 
  5327 ;;  j               2  128[BANK0 ] int 
  5328 ;;  TxMsg          69   47[BANK0 ] unsigned char [69]
  5329 ;;  val             8  116[BANK0 ] struct .
  5330 ;;  numOfSampleT    2  130[BANK0 ] int 
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      void 
  5333 ;; Registers used:
  5334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5340 ;;      Params:         0       2       0       0       0       0       0
  5341 ;;      Locals:         0      87       0       0       0       0       0
  5342 ;;      Temps:          0       6       0       0       0       0       0
  5343 ;;      Totals:         0      95       0       0       0       0       0
  5344 ;;Total ram usage:       95 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    8
  5347 ;; This function calls:
  5348 ;;		_FLASH_IsWriteDone
  5349 ;;		_FLASH_ReadByte
  5350 ;;		_GetIntFromUartData
  5351 ;;		_SendAckMessage
  5352 ;;		_WriteUartMessage
  5353 ;;		_ZeroArray
  5354 ;;		_crc8
  5355 ;; This function is called by:
  5356 ;;		_GroupFlashMemory
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           	psect	text15
  5361  0011D8                     __ptext15:
  5362                           	opt stack 0
  5363  0011D8                     _FlashReadUart:
  5364                           	opt stack 20
  5365                           
  5366                           ;FlashApp.c: 69: int16_t numOfSampleToRead = 0x0;
  5367                           
  5368                           ;incstack = 0
  5369  0011D8  0E00               	movlw	0
  5370  0011DA  0100               	movlb	0	; () banked
  5371  0011DC  6FE3               	movwf	(FlashReadUart@numOfSampleToRead+1)& (0+255),b
  5372  0011DE  0E00               	movlw	0
  5373  0011E0  6FE2               	movwf	FlashReadUart@numOfSampleToRead& (0+255),b
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;FlashApp.c: 70: INT_VAL val = GetIntFromUartData(10, data);
  5377  0011E2  C087  F066         	movff	FlashReadUart@data,GetIntFromUartData@data
  5378  0011E6  C088  F067         	movff	FlashReadUart@data+1,GetIntFromUartData@data+1
  5379  0011EA  0E0A               	movlw	10
  5380  0011EC  EC1D  F00F         	call	_GetIntFromUartData
  5381  0011F0  EE20  F0D4         	lfsr	2,FlashReadUart@val
  5382  0011F4  0E07               	movlw	7
  5383  0011F6                     u8361:
  5384  0011F6  CFEB FFDB          	movff	plusw0,plusw2
  5385  0011FA  06E8               	decf	wreg,f,c
  5386  0011FC  E2FC               	bc	u8361
  5387                           
  5388                           ;FlashApp.c: 72: int numOfSampleToRead = val.num;
  5389  0011FE  C0D4  F0E2         	movff	FlashReadUart@val,FlashReadUart@numOfSampleToRead
  5390  001202  C0D5  F0E3         	movff	FlashReadUart@val+1,FlashReadUart@numOfSampleToRead+1
  5391                           
  5392                           ;FlashApp.c: 74: char TxMsg[(64) + (0x4) + 1];
  5393                           ;FlashApp.c: 76: if (FLASH_IsWriteDone() == 0)
  5394  001206  ECFE  F021         	call	_FLASH_IsWriteDone	;wreg free
  5395  00120A  0900               	iorlw	0
  5396  00120C  B4D8               	btfsc	status,2,c
  5397  00120E  0012               	return	
  5398                           
  5399                           ;FlashApp.c: 80: }
  5400                           ;FlashApp.c: 82: if(numOfValidateSamples == 0)
  5401                           
  5402                           ;FlashApp.c: 78: {
  5403                           ;FlashApp.c: 79: return;
  5404  001210  0101               	movlb	1	; () banked
  5405  001212  5130               	movf	_numOfValidateSamples& (0+255),w,b
  5406  001214  1131               	iorwf	(_numOfValidateSamples+1)& (0+255),w,b
  5407  001216  1132               	iorwf	(_numOfValidateSamples+2)& (0+255),w,b
  5408  001218  1133               	iorwf	(_numOfValidateSamples+3)& (0+255),w,b
  5409  00121A  A4D8               	btfss	status,2,c
  5410  00121C  D005               	goto	l326
  5411                           
  5412                           ; BSR set to: 1
  5413                           ;FlashApp.c: 83: {
  5414                           ;FlashApp.c: 84: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET)
      +                          ;
  5415  00121E  0E55               	movlw	85
  5416  001220  6E24               	movwf	SendAckMessage@inRequest,c
  5417  001222  0E05               	movlw	5
  5418  001224  ECB0  F01D         	call	_SendAckMessage
  5419  001228                     l326:
  5420                           
  5421                           ;FlashApp.c: 85: }
  5422                           ;FlashApp.c: 88: numOfSampleToRead = numOfSampleToRead >= numOfValidateSamples ? numOfVa
      +                          lidateSamples : numOfSampleToRead;
  5423  001228  C0E2  F089         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5424  00122C  C0E3  F08A         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5425  001230  0E00               	movlw	0
  5426  001232  0100               	movlb	0	; () banked
  5427  001234  BF8A               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5428  001236  0EFF               	movlw	255
  5429  001238  6F8B               	movwf	(??_FlashReadUart+2)& (0+255),b
  5430  00123A  6F8C               	movwf	(??_FlashReadUart+3)& (0+255),b
  5431  00123C  0101               	movlb	1	; () banked
  5432  00123E  5130               	movf	_numOfValidateSamples& (0+255),w,b
  5433  001240  0100               	movlb	0	; () banked
  5434  001242  5D89               	subwf	??_FlashReadUart& (0+255),w,b
  5435  001244  0101               	movlb	1	; () banked
  5436  001246  5131               	movf	(_numOfValidateSamples+1)& (0+255),w,b
  5437  001248  0100               	movlb	0	; () banked
  5438  00124A  598A               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5439  00124C  0101               	movlb	1	; () banked
  5440  00124E  5132               	movf	(_numOfValidateSamples+2)& (0+255),w,b
  5441  001250  0100               	movlb	0	; () banked
  5442  001252  598B               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5443  001254  0101               	movlb	1	; () banked
  5444  001256  5133               	movf	(_numOfValidateSamples+3)& (0+255),w,b
  5445  001258  0100               	movlb	0	; () banked
  5446  00125A  598C               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5447  00125C  B0D8               	btfsc	status,0,c
  5448  00125E  D00A               	goto	l328
  5449                           
  5450                           ; BSR set to: 0
  5451  001260  C0E2  F0DC         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$609
  5452  001264  C0E3  F0DD         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$609+1
  5453  001268  0E00               	movlw	0
  5454  00126A  BFDD               	btfsc	(_FlashReadUart$609+1)& (0+255),7,b
  5455  00126C  0EFF               	movlw	-1
  5456  00126E  6FDE               	movwf	(_FlashReadUart$609+2)& (0+255),b
  5457  001270  6FDF               	movwf	(_FlashReadUart$609+3)& (0+255),b
  5458  001272  D008               	goto	l330
  5459  001274                     l328:
  5460                           
  5461                           ; BSR set to: 0
  5462  001274  C130  F0DC         	movff	_numOfValidateSamples,_FlashReadUart$609
  5463  001278  C131  F0DD         	movff	_numOfValidateSamples+1,_FlashReadUart$609+1
  5464  00127C  C132  F0DE         	movff	_numOfValidateSamples+2,_FlashReadUart$609+2
  5465  001280  C133  F0DF         	movff	_numOfValidateSamples+3,_FlashReadUart$609+3
  5466  001284                     l330:
  5467                           
  5468                           ; BSR set to: 0
  5469  001284  C0DC  F0E2         	movff	_FlashReadUart$609,FlashReadUart@numOfSampleToRead
  5470  001288  C0DD  F0E3         	movff	_FlashReadUart$609+1,FlashReadUart@numOfSampleToRead+1
  5471                           
  5472                           ;FlashApp.c: 91: readAddress = writeAddress;
  5473  00128C  C03E  F1C8         	movff	_writeAddress,_readAddress
  5474  001290  C03F  F1C9         	movff	_writeAddress+1,_readAddress+1
  5475  001294  C040  F1CA         	movff	_writeAddress+2,_readAddress+2
  5476  001298  C041  F1CB         	movff	_writeAddress+3,_readAddress+3
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;FlashApp.c: 93: for (int j=0; j<numOfSampleToRead; j++)
  5480  00129C  0E00               	movlw	0
  5481  00129E  6FE1               	movwf	(FlashReadUart@j+1)& (0+255),b
  5482  0012A0  0E00               	movlw	0
  5483  0012A2  6FE0               	movwf	FlashReadUart@j& (0+255),b
  5484  0012A4  D08A               	goto	l331
  5485  0012A6                     
  5486                           ; BSR set to: 0
  5487                           ;FlashApp.c: 94: {
  5488                           ;FlashApp.c: 96: if(readAddress > 0)
  5489                           
  5490                           ; BSR set to: 0
  5491  0012A6  0101               	movlb	1	; () banked
  5492  0012A8  51C8               	movf	_readAddress& (0+255),w,b
  5493  0012AA  11C9               	iorwf	(_readAddress+1)& (0+255),w,b
  5494  0012AC  11CA               	iorwf	(_readAddress+2)& (0+255),w,b
  5495  0012AE  11CB               	iorwf	(_readAddress+3)& (0+255),w,b
  5496  0012B0  B4D8               	btfsc	status,2,c
  5497  0012B2  D007               	goto	l333
  5498                           
  5499                           ; BSR set to: 1
  5500                           ;FlashApp.c: 97: {
  5501                           ;FlashApp.c: 98: readAddress -= (64);
  5502  0012B4  0E40               	movlw	64
  5503  0012B6  5FC8               	subwf	_readAddress& (0+255),f,b
  5504  0012B8  0E00               	movlw	0
  5505  0012BA  5BC9               	subwfb	(_readAddress+1)& (0+255),f,b
  5506  0012BC  5BCA               	subwfb	(_readAddress+2)& (0+255),f,b
  5507  0012BE  5BCB               	subwfb	(_readAddress+3)& (0+255),f,b
  5508                           
  5509                           ;FlashApp.c: 99: }
  5510  0012C0  D008               	goto	l334
  5511  0012C2                     l333:
  5512                           
  5513                           ; BSR set to: 1
  5514                           ;FlashApp.c: 100: else
  5515                           ;FlashApp.c: 101: {
  5516                           ;FlashApp.c: 102: readAddress = 0x7FF0 - (64);
  5517                           
  5518                           ; BSR set to: 1
  5519  0012C2  0EB0               	movlw	176
  5520  0012C4  6FC8               	movwf	_readAddress& (0+255),b
  5521  0012C6  0E7F               	movlw	127
  5522  0012C8  6FC9               	movwf	(_readAddress+1)& (0+255),b
  5523  0012CA  0E00               	movlw	0
  5524  0012CC  6FCA               	movwf	(_readAddress+2)& (0+255),b
  5525  0012CE  0E00               	movlw	0
  5526  0012D0  6FCB               	movwf	(_readAddress+3)& (0+255),b
  5527  0012D2                     l334:
  5528                           
  5529                           ; BSR set to: 1
  5530                           ;FlashApp.c: 103: }
  5531                           ;FlashApp.c: 106: ZeroArray(TxMsg, (64) + (0x4) + 1);
  5532                           
  5533                           ; BSR set to: 1
  5534  0012D2  0E8F               	movlw	low FlashReadUart@TxMsg
  5535  0012D4  6E20               	movwf	ZeroArray@array,c
  5536  0012D6  0E00               	movlw	high FlashReadUart@TxMsg
  5537  0012D8  6E21               	movwf	ZeroArray@array+1,c
  5538  0012DA  0E00               	movlw	0
  5539  0012DC  6E23               	movwf	ZeroArray@size+1,c
  5540  0012DE  0E45               	movlw	69
  5541  0012E0  6E22               	movwf	ZeroArray@size,c
  5542  0012E2  EC58  F021         	call	_ZeroArray	;wreg free
  5543                           
  5544                           ;FlashApp.c: 107: TxMsg[(0)] = (0x24);
  5545  0012E6  0E24               	movlw	36
  5546  0012E8  0100               	movlb	0	; () banked
  5547  0012EA  6F8F               	movwf	FlashReadUart@TxMsg& (0+255),b
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;FlashApp.c: 108: TxMsg[(1)] = FLASH_MSG;
  5551  0012EC  0E05               	movlw	5
  5552  0012EE  6F90               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;FlashApp.c: 109: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  5556  0012F0  0E54               	movlw	84
  5557  0012F2  6F91               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  5558                           
  5559                           ; BSR set to: 0
  5560                           ;FlashApp.c: 110: TxMsg[(3)] = (64);
  5561  0012F4  0E40               	movlw	64
  5562  0012F6  6F92               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  5563                           
  5564                           ; BSR set to: 0
  5565                           ;FlashApp.c: 112: for(int idx = 0; idx < (64); idx++)
  5566  0012F8  0E00               	movlw	0
  5567  0012FA  6FE5               	movwf	(FlashReadUart@idx+1)& (0+255),b
  5568  0012FC  0E00               	movlw	0
  5569  0012FE  6FE4               	movwf	FlashReadUart@idx& (0+255),b
  5570  001300                     l8308:
  5571                           
  5572                           ; BSR set to: 0
  5573  001300  BFE5               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  5574  001302  D006               	goto	l335
  5575  001304  51E5               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  5576  001306  E134               	bnz	l8318
  5577  001308  0E40               	movlw	64
  5578  00130A  5DE4               	subwf	FlashReadUart@idx& (0+255),w,b
  5579  00130C  B0D8               	btfsc	status,0,c
  5580  00130E  D030               	goto	u8420
  5581  001310                     l335:
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;FlashApp.c: 113: {
  5585                           ;FlashApp.c: 114: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  5586                           
  5587                           ; BSR set to: 0
  5588  001310  0E04               	movlw	4
  5589  001312  25E4               	addwf	FlashReadUart@idx& (0+255),w,b
  5590  001314  6F89               	movwf	??_FlashReadUart& (0+255),b
  5591  001316  0E00               	movlw	0
  5592  001318  21E5               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  5593  00131A  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5594  00131C  0E8F               	movlw	low FlashReadUart@TxMsg
  5595  00131E  2589               	addwf	??_FlashReadUart& (0+255),w,b
  5596  001320  6ED9               	movwf	fsr2l,c
  5597  001322  0E00               	movlw	high FlashReadUart@TxMsg
  5598  001324  218A               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  5599  001326  6EDA               	movwf	fsr2h,c
  5600  001328  C0E4  F08B         	movff	FlashReadUart@idx,??_FlashReadUart+2
  5601  00132C  C0E5  F08C         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  5602  001330  0E00               	movlw	0
  5603  001332  BF8C               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5604  001334  0EFF               	movlw	255
  5605  001336  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5606  001338  6F8E               	movwf	(??_FlashReadUart+5)& (0+255),b
  5607  00133A  0101               	movlb	1	; () banked
  5608  00133C  51C8               	movf	_readAddress& (0+255),w,b
  5609  00133E  0100               	movlb	0	; () banked
  5610  001340  258B               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  5611  001342  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  5612  001344  0101               	movlb	1	; () banked
  5613  001346  51C9               	movf	(_readAddress+1)& (0+255),w,b
  5614  001348  0100               	movlb	0	; () banked
  5615  00134A  218C               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  5616  00134C  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  5617  00134E  0101               	movlb	1	; () banked
  5618  001350  51CA               	movf	(_readAddress+2)& (0+255),w,b
  5619  001352  0100               	movlb	0	; () banked
  5620  001354  218D               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  5621  001356  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  5622  001358  0101               	movlb	1	; () banked
  5623  00135A  51CB               	movf	(_readAddress+3)& (0+255),w,b
  5624  00135C  0100               	movlb	0	; () banked
  5625  00135E  218E               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5626  001360  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  5627  001362  ECD0  F021         	call	_FLASH_ReadByte	;wreg free
  5628  001366  6EDF               	movwf	indf2,c
  5629  001368  0100               	movlb	0	; () banked
  5630  00136A  4BE4               	infsnz	FlashReadUart@idx& (0+255),f,b
  5631  00136C  2BE5               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  5632  00136E  D7C8               	goto	l8308
  5633  001370                     u8420:
  5634  001370                     l8318:
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;FlashApp.c: 115: }
  5638                           ;FlashApp.c: 117: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  5639  001370  0E8F               	movlw	low FlashReadUart@TxMsg
  5640  001372  6E18               	movwf	crc8@dataArray,c
  5641  001374  0E00               	movlw	high FlashReadUart@TxMsg
  5642  001376  6E19               	movwf	crc8@dataArray+1,c
  5643  001378  0E00               	movlw	0
  5644  00137A  6E1B               	movwf	crc8@dataSize+1,c
  5645  00137C  0E44               	movlw	68
  5646  00137E  6E1A               	movwf	crc8@dataSize,c
  5647  001380  ECD9  F01D         	call	_crc8	;wreg free
  5648  001384  0100               	movlb	0	; () banked
  5649  001386  6FD3               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;FlashApp.c: 119: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  5653  001388  0E8F               	movlw	low FlashReadUart@TxMsg
  5654  00138A  6E19               	movwf	WriteUartMessage@dataBuf,c
  5655  00138C  0E00               	movlw	high FlashReadUart@TxMsg
  5656  00138E  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5657  001390  0E00               	movlw	0
  5658  001392  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5659  001394  0E45               	movlw	69
  5660  001396  6E1B               	movwf	WriteUartMessage@dataSize,c
  5661  001398  EC8B  F01F         	call	_WriteUartMessage	;wreg free
  5662                           
  5663                           ;FlashApp.c: 120: _delay((unsigned long)((200)*(8000000/4000.0)));
  5664  00139C  0E03               	movlw	3
  5665  00139E  0100               	movlb	0	; () banked
  5666  0013A0  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5667  0013A2  0E08               	movlw	8
  5668  0013A4  6F89               	movwf	??_FlashReadUart& (0+255),b
  5669  0013A6  0E77               	movlw	119
  5670  0013A8                     u9137:
  5671  0013A8  2EE8               	decfsz	wreg,f,c
  5672  0013AA  D7FE               	bra	u9137
  5673  0013AC  2F89               	decfsz	??_FlashReadUart& (0+255),f,b
  5674  0013AE  D7FC               	bra	u9137
  5675  0013B0  2F8A               	decfsz	(??_FlashReadUart+1)& (0+255),f,b
  5676  0013B2  D7FA               	bra	u9137
  5677  0013B4  0100               	movlb	0	; () banked
  5678  0013B6  4BE0               	infsnz	FlashReadUart@j& (0+255),f,b
  5679  0013B8  2BE1               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5680  0013BA                     l331:
  5681                           
  5682                           ; BSR set to: 0
  5683                           
  5684                           ; BSR set to: 0
  5685  0013BA  51E2               	movf	FlashReadUart@numOfSampleToRead& (0+255),w,b
  5686  0013BC  5DE0               	subwf	FlashReadUart@j& (0+255),w,b
  5687  0013BE  51E1               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5688  0013C0  0A80               	xorlw	128
  5689  0013C2  6F89               	movwf	??_FlashReadUart& (0+255),b
  5690  0013C4  51E3               	movf	(FlashReadUart@numOfSampleToRead+1)& (0+255),w,b
  5691  0013C6  0A80               	xorlw	128
  5692  0013C8  5989               	subwfb	??_FlashReadUart& (0+255),w,b
  5693  0013CA  B0D8               	btfsc	status,0,c
  5694  0013CC  0012               	return	
  5695  0013CE  D76B               	goto	l332
  5696  0013D0                     __end_of_FlashReadUart:
  5697                           	opt stack 0
  5698                           tosu	equ	0xFFF
  5699                           tosh	equ	0xFFE
  5700                           tosl	equ	0xFFD
  5701                           pclath	equ	0xFFA
  5702                           tblptru	equ	0xFF8
  5703                           tblptrh	equ	0xFF7
  5704                           tblptrl	equ	0xFF6
  5705                           tablat	equ	0xFF5
  5706                           prodh	equ	0xFF4
  5707                           prodl	equ	0xFF3
  5708                           postinc0	equ	0xFEE
  5709                           plusw0	equ	0xFEB
  5710                           wreg	equ	0xFE8
  5711                           postdec1	equ	0xFE5
  5712                           fsr1l	equ	0xFE1
  5713                           indf2	equ	0xFDF
  5714                           postinc2	equ	0xFDE
  5715                           plusw2	equ	0xFDB
  5716                           fsr2h	equ	0xFDA
  5717                           fsr2l	equ	0xFD9
  5718                           status	equ	0xFD8
  5719                           
  5720 ;; *************** function _FLASH_ReadByte *****************
  5721 ;; Defined at:
  5722 ;;		line 58 in file "mcc_generated_files/memory.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;  flashAddr       4   23[COMRAM] unsigned long 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;		None
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  1    wreg      unsigned char 
  5729 ;; Registers used:
  5730 ;;		wreg, status,2
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5736 ;;      Params:         4       0       0       0       0       0       0
  5737 ;;      Locals:         0       0       0       0       0       0       0
  5738 ;;      Temps:          0       0       0       0       0       0       0
  5739 ;;      Totals:         4       0       0       0       0       0       0
  5740 ;;Total ram usage:        4 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    4
  5743 ;; This function calls:
  5744 ;;		Nothing
  5745 ;; This function is called by:
  5746 ;;		_FlashReadUart
  5747 ;;		_FLASH_ReadWord
  5748 ;;		_FLASH_WriteByte
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           	psect	text16
  5753  0043A0                     __ptext16:
  5754                           	opt stack 0
  5755  0043A0                     _FLASH_ReadByte:
  5756                           	opt stack 23
  5757                           
  5758                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  5759                           
  5760                           ;incstack = 0
  5761  0043A0  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  5762                           
  5763                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  5764  0043A4  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  5765                           
  5766                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  5767  0043A8  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  5768  0043AC  0008               	tblrd		*	;# 
  5769                           
  5770                           ;memory.c: 66: return (TABLAT);
  5771  0043AE  50F5               	movf	tablat,w,c	;volatile
  5772  0043B0  0012               	return	
  5773  0043B2                     __end_of_FLASH_ReadByte:
  5774                           	opt stack 0
  5775                           tosu	equ	0xFFF
  5776                           tosh	equ	0xFFE
  5777                           tosl	equ	0xFFD
  5778                           pclath	equ	0xFFA
  5779                           tblptru	equ	0xFF8
  5780                           tblptrh	equ	0xFF7
  5781                           tblptrl	equ	0xFF6
  5782                           tablat	equ	0xFF5
  5783                           prodh	equ	0xFF4
  5784                           prodl	equ	0xFF3
  5785                           postinc0	equ	0xFEE
  5786                           plusw0	equ	0xFEB
  5787                           wreg	equ	0xFE8
  5788                           postdec1	equ	0xFE5
  5789                           fsr1l	equ	0xFE1
  5790                           indf2	equ	0xFDF
  5791                           postinc2	equ	0xFDE
  5792                           plusw2	equ	0xFDB
  5793                           fsr2h	equ	0xFDA
  5794                           fsr2l	equ	0xFD9
  5795                           status	equ	0xFD8
  5796                           
  5797 ;; *************** function _FlashReadCondition *****************
  5798 ;; Defined at:
  5799 ;;		line 138 in file "FlashApp.c"
  5800 ;; Parameters:    Size  Location     Type
  5801 ;;		None
  5802 ;; Auto vars:     Size  Location     Type
  5803 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  5804 ;; Return value:  Size  Location     Type
  5805 ;;                  1    wreg      void 
  5806 ;; Registers used:
  5807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5808 ;; Tracked objects:
  5809 ;;		On entry : 0/0
  5810 ;;		On exit  : 0/0
  5811 ;;		Unchanged: 0/0
  5812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5813 ;;      Params:         0       0       0       0       0       0       0
  5814 ;;      Locals:         9       0       0       0       0       0       0
  5815 ;;      Temps:          4       0       0       0       0       0       0
  5816 ;;      Totals:        13       0       0       0       0       0       0
  5817 ;;Total ram usage:       13 bytes
  5818 ;; Hardware stack levels used:    1
  5819 ;; Hardware stack levels required when called:    6
  5820 ;; This function calls:
  5821 ;;		_WriteUartMessage
  5822 ;;		_ZeroArray
  5823 ;;		_crc8
  5824 ;;		_make8
  5825 ;; This function is called by:
  5826 ;;		_GroupFlashMemory
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829                           
  5830                           	psect	text17
  5831  002206                     __ptext17:
  5832                           	opt stack 0
  5833  002206                     _FlashReadCondition:
  5834                           	opt stack 22
  5835                           
  5836                           ;FlashApp.c: 141: char TxMsg[4 + (0x4) + 1];
  5837                           ;FlashApp.c: 142: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5838                           
  5839                           ;incstack = 0
  5840  002206  0E28               	movlw	low FlashReadCondition@TxMsg
  5841  002208  6E20               	movwf	ZeroArray@array,c
  5842  00220A  0E00               	movlw	high FlashReadCondition@TxMsg
  5843  00220C  6E21               	movwf	ZeroArray@array+1,c
  5844  00220E  0E00               	movlw	0
  5845  002210  6E23               	movwf	ZeroArray@size+1,c
  5846  002212  0E09               	movlw	9
  5847  002214  6E22               	movwf	ZeroArray@size,c
  5848  002216  EC58  F021         	call	_ZeroArray	;wreg free
  5849                           
  5850                           ;FlashApp.c: 145: TxMsg[(0)] = (0x24);
  5851  00221A  0E24               	movlw	36
  5852  00221C  6E28               	movwf	FlashReadCondition@TxMsg,c
  5853                           
  5854                           ;FlashApp.c: 146: TxMsg[(1)] = FLASH_MSG;
  5855  00221E  0E05               	movlw	5
  5856  002220  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  5857                           
  5858                           ;FlashApp.c: 147: TxMsg[(2)] = FLASH_READ_CONDITION;
  5859  002222  0E52               	movlw	82
  5860  002224  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  5861                           
  5862                           ;FlashApp.c: 148: TxMsg[(3)] = 4;
  5863  002226  0E04               	movlw	4
  5864  002228  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  5865                           
  5866                           ;FlashApp.c: 153: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4580,1);
  5867  00222A  0E70               	movlw	112
  5868  00222C  6E18               	movwf	make8@data,c
  5869  00222E  0E3A               	movlw	58
  5870  002230  6E19               	movwf	make8@data+1,c
  5871  002232  0E00               	movlw	0
  5872  002234  6E1A               	movwf	make8@data+2,c
  5873  002236  0E00               	movlw	0
  5874  002238  6E1B               	movwf	make8@data+3,c
  5875  00223A  0E01               	movlw	1
  5876  00223C  6E1C               	movwf	make8@dataLocation,c
  5877  00223E  EC52  F01C         	call	_make8	;wreg free
  5878  002242  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  5879                           
  5880                           ;FlashApp.c: 154: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4580,0);
  5881  002244  0E70               	movlw	112
  5882  002246  6E18               	movwf	make8@data,c
  5883  002248  0E3A               	movlw	58
  5884  00224A  6E19               	movwf	make8@data+1,c
  5885  00224C  0E00               	movlw	0
  5886  00224E  6E1A               	movwf	make8@data+2,c
  5887  002250  0E00               	movlw	0
  5888  002252  6E1B               	movwf	make8@data+3,c
  5889  002254  0E00               	movlw	0
  5890  002256  6E1C               	movwf	make8@dataLocation,c
  5891  002258  EC52  F01C         	call	_make8	;wreg free
  5892  00225C  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  5893                           
  5894                           ;FlashApp.c: 157: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5895  00225E  C03E  F024         	movff	_writeAddress,??_FlashReadCondition
  5896  002262  C03F  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5897  002266  C040  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5898  00226A  C041  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5899  00226E  1E24               	comf	??_FlashReadCondition,f,c
  5900  002270  1E25               	comf	??_FlashReadCondition+1,f,c
  5901  002272  1E26               	comf	??_FlashReadCondition+2,f,c
  5902  002274  1E27               	comf	??_FlashReadCondition+3,f,c
  5903  002276  2A24               	incf	??_FlashReadCondition,f,c
  5904  002278  0E00               	movlw	0
  5905  00227A  2225               	addwfc	??_FlashReadCondition+1,f,c
  5906  00227C  2226               	addwfc	??_FlashReadCondition+2,f,c
  5907  00227E  2227               	addwfc	??_FlashReadCondition+3,f,c
  5908  002280  0EF0               	movlw	240
  5909  002282  2424               	addwf	??_FlashReadCondition,w,c
  5910  002284  6E18               	movwf	make8@data,c
  5911  002286  0E7F               	movlw	127
  5912  002288  2025               	addwfc	??_FlashReadCondition+1,w,c
  5913  00228A  6E19               	movwf	make8@data+1,c
  5914  00228C  0E00               	movlw	0
  5915  00228E  2026               	addwfc	??_FlashReadCondition+2,w,c
  5916  002290  6E1A               	movwf	make8@data+2,c
  5917  002292  0E00               	movlw	0
  5918  002294  2027               	addwfc	??_FlashReadCondition+3,w,c
  5919  002296  6E1B               	movwf	make8@data+3,c
  5920  002298  0E01               	movlw	1
  5921  00229A  6E1C               	movwf	make8@dataLocation,c
  5922  00229C  EC52  F01C         	call	_make8	;wreg free
  5923  0022A0  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  5924                           
  5925                           ;FlashApp.c: 158: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5926  0022A2  C03E  F024         	movff	_writeAddress,??_FlashReadCondition
  5927  0022A6  C03F  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5928  0022AA  C040  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5929  0022AE  C041  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5930  0022B2  1E24               	comf	??_FlashReadCondition,f,c
  5931  0022B4  1E25               	comf	??_FlashReadCondition+1,f,c
  5932  0022B6  1E26               	comf	??_FlashReadCondition+2,f,c
  5933  0022B8  1E27               	comf	??_FlashReadCondition+3,f,c
  5934  0022BA  2A24               	incf	??_FlashReadCondition,f,c
  5935  0022BC  0E00               	movlw	0
  5936  0022BE  2225               	addwfc	??_FlashReadCondition+1,f,c
  5937  0022C0  2226               	addwfc	??_FlashReadCondition+2,f,c
  5938  0022C2  2227               	addwfc	??_FlashReadCondition+3,f,c
  5939  0022C4  0EF0               	movlw	240
  5940  0022C6  2424               	addwf	??_FlashReadCondition,w,c
  5941  0022C8  6E18               	movwf	make8@data,c
  5942  0022CA  0E7F               	movlw	127
  5943  0022CC  2025               	addwfc	??_FlashReadCondition+1,w,c
  5944  0022CE  6E19               	movwf	make8@data+1,c
  5945  0022D0  0E00               	movlw	0
  5946  0022D2  2026               	addwfc	??_FlashReadCondition+2,w,c
  5947  0022D4  6E1A               	movwf	make8@data+2,c
  5948  0022D6  0E00               	movlw	0
  5949  0022D8  2027               	addwfc	??_FlashReadCondition+3,w,c
  5950  0022DA  6E1B               	movwf	make8@data+3,c
  5951  0022DC  0E00               	movlw	0
  5952  0022DE  6E1C               	movwf	make8@dataLocation,c
  5953  0022E0  EC52  F01C         	call	_make8	;wreg free
  5954  0022E4  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  5955                           
  5956                           ;FlashApp.c: 160: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5957  0022E6  0E28               	movlw	low FlashReadCondition@TxMsg
  5958  0022E8  6E18               	movwf	crc8@dataArray,c
  5959  0022EA  0E00               	movlw	high FlashReadCondition@TxMsg
  5960  0022EC  6E19               	movwf	crc8@dataArray+1,c
  5961  0022EE  0E00               	movlw	0
  5962  0022F0  6E1B               	movwf	crc8@dataSize+1,c
  5963  0022F2  0E08               	movlw	8
  5964  0022F4  6E1A               	movwf	crc8@dataSize,c
  5965  0022F6  ECD9  F01D         	call	_crc8	;wreg free
  5966  0022FA  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  5967                           
  5968                           ;FlashApp.c: 162: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5969  0022FC  0E28               	movlw	low FlashReadCondition@TxMsg
  5970  0022FE  6E19               	movwf	WriteUartMessage@dataBuf,c
  5971  002300  0E00               	movlw	high FlashReadCondition@TxMsg
  5972  002302  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5973  002304  0E00               	movlw	0
  5974  002306  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5975  002308  0E09               	movlw	9
  5976  00230A  6E1B               	movwf	WriteUartMessage@dataSize,c
  5977  00230C  EC8B  F01F         	call	_WriteUartMessage	;wreg free
  5978  002310  0012               	return		;funcret
  5979  002312                     __end_of_FlashReadCondition:
  5980                           	opt stack 0
  5981                           tosu	equ	0xFFF
  5982                           tosh	equ	0xFFE
  5983                           tosl	equ	0xFFD
  5984                           pclath	equ	0xFFA
  5985                           tblptru	equ	0xFF8
  5986                           tblptrh	equ	0xFF7
  5987                           tblptrl	equ	0xFF6
  5988                           tablat	equ	0xFF5
  5989                           prodh	equ	0xFF4
  5990                           prodl	equ	0xFF3
  5991                           postinc0	equ	0xFEE
  5992                           plusw0	equ	0xFEB
  5993                           wreg	equ	0xFE8
  5994                           postdec1	equ	0xFE5
  5995                           fsr1l	equ	0xFE1
  5996                           indf2	equ	0xFDF
  5997                           postinc2	equ	0xFDE
  5998                           plusw2	equ	0xFDB
  5999                           fsr2h	equ	0xFDA
  6000                           fsr2l	equ	0xFD9
  6001                           status	equ	0xFD8
  6002                           
  6003 ;; *************** function _FlashEreaseMem *****************
  6004 ;; Defined at:
  6005 ;;		line 129 in file "FlashApp.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;		None
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;		None
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  1    wreg      void 
  6012 ;; Registers used:
  6013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6019 ;;      Params:         0       0       0       0       0       0       0
  6020 ;;      Locals:         0       0       0       0       0       0       0
  6021 ;;      Temps:          0       0       0       0       0       0       0
  6022 ;;      Totals:         0       0       0       0       0       0       0
  6023 ;;Total ram usage:        0 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    7
  6026 ;; This function calls:
  6027 ;;		_SendAckMessage
  6028 ;;		_ZeroArray
  6029 ;; This function is called by:
  6030 ;;		_GroupFlashMemory
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           	psect	text18
  6035  003B0E                     __ptext18:
  6036                           	opt stack 0
  6037  003B0E                     _FlashEreaseMem:
  6038                           	opt stack 21
  6039                           
  6040                           ;FlashApp.c: 131: writeAddress = 0x4580;
  6041                           
  6042                           ;incstack = 0
  6043  003B0E  0E80               	movlw	128
  6044  003B10  6E3E               	movwf	_writeAddress,c
  6045  003B12  0E45               	movlw	69
  6046  003B14  6E3F               	movwf	_writeAddress+1,c
  6047  003B16  0E00               	movlw	0
  6048  003B18  6E40               	movwf	_writeAddress+2,c
  6049  003B1A  0E00               	movlw	0
  6050  003B1C  6E41               	movwf	_writeAddress+3,c
  6051                           
  6052                           ;FlashApp.c: 132: readAddress = 0x4580;
  6053  003B1E  0E80               	movlw	128
  6054  003B20  0101               	movlb	1	; () banked
  6055  003B22  6FC8               	movwf	_readAddress& (0+255),b
  6056  003B24  0E45               	movlw	69
  6057  003B26  6FC9               	movwf	(_readAddress+1)& (0+255),b
  6058  003B28  0E00               	movlw	0
  6059  003B2A  6FCA               	movwf	(_readAddress+2)& (0+255),b
  6060  003B2C  0E00               	movlw	0
  6061  003B2E  6FCB               	movwf	(_readAddress+3)& (0+255),b
  6062                           
  6063                           ;FlashApp.c: 133: numOfValidateSamples = 0;
  6064  003B30  0E00               	movlw	0
  6065  003B32  6F30               	movwf	_numOfValidateSamples& (0+255),b
  6066  003B34  0E00               	movlw	0
  6067  003B36  6F31               	movwf	(_numOfValidateSamples+1)& (0+255),b
  6068  003B38  0E00               	movlw	0
  6069  003B3A  6F32               	movwf	(_numOfValidateSamples+2)& (0+255),b
  6070  003B3C  0E00               	movlw	0
  6071  003B3E  6F33               	movwf	(_numOfValidateSamples+3)& (0+255),b
  6072                           
  6073                           ; BSR set to: 1
  6074                           ;FlashApp.c: 134: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  6075  003B40  0E3C               	movlw	low _sampleArray
  6076  003B42  6E20               	movwf	ZeroArray@array,c
  6077  003B44  0E01               	movlw	high _sampleArray
  6078  003B46  6E21               	movwf	ZeroArray@array+1,c
  6079  003B48  0E00               	movlw	0
  6080  003B4A  6E23               	movwf	ZeroArray@size+1,c
  6081  003B4C  0E20               	movlw	32
  6082  003B4E  6E22               	movwf	ZeroArray@size,c
  6083  003B50  EC58  F021         	call	_ZeroArray	;wreg free
  6084                           
  6085                           ;FlashApp.c: 135: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  6086  003B54  0E51               	movlw	81
  6087  003B56  6E24               	movwf	SendAckMessage@inRequest,c
  6088  003B58  0E05               	movlw	5
  6089  003B5A  ECB0  F01D         	call	_SendAckMessage
  6090  003B5E  0012               	return		;funcret
  6091  003B60                     __end_of_FlashEreaseMem:
  6092                           	opt stack 0
  6093                           tosu	equ	0xFFF
  6094                           tosh	equ	0xFFE
  6095                           tosl	equ	0xFFD
  6096                           pclath	equ	0xFFA
  6097                           tblptru	equ	0xFF8
  6098                           tblptrh	equ	0xFF7
  6099                           tblptrl	equ	0xFF6
  6100                           tablat	equ	0xFF5
  6101                           prodh	equ	0xFF4
  6102                           prodl	equ	0xFF3
  6103                           postinc0	equ	0xFEE
  6104                           plusw0	equ	0xFEB
  6105                           wreg	equ	0xFE8
  6106                           postdec1	equ	0xFE5
  6107                           fsr1l	equ	0xFE1
  6108                           indf2	equ	0xFDF
  6109                           postinc2	equ	0xFDE
  6110                           plusw2	equ	0xFDB
  6111                           fsr2h	equ	0xFDA
  6112                           fsr2l	equ	0xFD9
  6113                           status	equ	0xFD8
  6114                           
  6115 ;; *************** function _DacSetValue *****************
  6116 ;; Defined at:
  6117 ;;		line 30 in file "DacApp.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;  data            2   42[BANK0 ] PTR unsigned char 
  6120 ;;		 -> rxMsgData(20), 
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;  retVal          8   49[BANK0 ] struct .
  6123 ;;  dacIndex        1   48[BANK0 ] char 
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  1    wreg      void 
  6126 ;; Registers used:
  6127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6133 ;;      Params:         0       2       0       0       0       0       0
  6134 ;;      Locals:         0       9       0       0       0       0       0
  6135 ;;      Temps:          0       4       0       0       0       0       0
  6136 ;;      Totals:         0      15       0       0       0       0       0
  6137 ;;Total ram usage:       15 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    8
  6140 ;; This function calls:
  6141 ;;		_GetIntFromUartData
  6142 ;;		_SWSPI_send_word
  6143 ;;		_SendAckMessage
  6144 ;;		_StoreIntInEeprom
  6145 ;; This function is called by:
  6146 ;;		_GroupDAC
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text19
  6151  003128                     __ptext19:
  6152                           	opt stack 0
  6153  003128                     _DacSetValue:
  6154                           	opt stack 20
  6155                           
  6156                           ;DacApp.c: 32: INT_VAL retVal;
  6157                           ;DacApp.c: 33: retVal = GetIntFromUartData(16, data);
  6158                           
  6159                           ;incstack = 0
  6160  003128  C08A  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  6161  00312C  C08B  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  6162  003130  0E10               	movlw	16
  6163  003132  EC1D  F00F         	call	_GetIntFromUartData
  6164  003136  EE20  F091         	lfsr	2,DacSetValue@retVal
  6165  00313A  0E07               	movlw	7
  6166  00313C                     u8441:
  6167  00313C  CFEB FFDB          	movff	plusw0,plusw2
  6168  003140  06E8               	decf	wreg,f,c
  6169  003142  E2FC               	bc	u8441
  6170                           
  6171                           ;DacApp.c: 34: SWSPI_send_word(EXT_DAC, retVal.num, 1);
  6172  003144  C091  F029         	movff	DacSetValue@retVal,SWSPI_send_word@data
  6173  003148  C092  F02A         	movff	DacSetValue@retVal+1,SWSPI_send_word@data+1
  6174  00314C  C093  F02B         	movff	DacSetValue@retVal+2,SWSPI_send_word@data+2
  6175  003150  C094  F02C         	movff	DacSetValue@retVal+3,SWSPI_send_word@data+3
  6176  003154  0E01               	movlw	1
  6177  003156  6E2D               	movwf	SWSPI_send_word@dataSize,c
  6178  003158  0E02               	movlw	2
  6179  00315A  EC3F  F018         	call	_SWSPI_send_word
  6180                           
  6181                           ;DacApp.c: 37: int8_t dacIndex = (retVal.num >> 14);
  6182  00315E  C091  F08C         	movff	DacSetValue@retVal,??_DacSetValue
  6183  003162  C092  F08D         	movff	DacSetValue@retVal+1,??_DacSetValue+1
  6184  003166  C093  F08E         	movff	DacSetValue@retVal+2,??_DacSetValue+2
  6185  00316A  C094  F08F         	movff	DacSetValue@retVal+3,??_DacSetValue+3
  6186  00316E  0E0F               	movlw	15
  6187  003170  D006               	goto	u8450
  6188  003172                     u8455:
  6189  003172  0100               	movlb	0	; () banked
  6190  003174  90D8               	bcf	status,0,c
  6191  003176  338F               	rrcf	(??_DacSetValue+3)& (0+255),f,b
  6192  003178  338E               	rrcf	(??_DacSetValue+2)& (0+255),f,b
  6193  00317A  338D               	rrcf	(??_DacSetValue+1)& (0+255),f,b
  6194  00317C  338C               	rrcf	??_DacSetValue& (0+255),f,b
  6195  00317E                     u8450:
  6196  00317E  2EE8               	decfsz	wreg,f,c
  6197  003180  D7F8               	goto	u8455
  6198  003182  518C               	movf	??_DacSetValue& (0+255),w,b
  6199  003184  6F90               	movwf	DacSetValue@dacIndex& (0+255),b
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;DacApp.c: 38: StoreIntInEeprom(retVal.num, (0x40) | DAC_ADDRES[dacIndex], 2);
  6203  003186  C091  F021         	movff	DacSetValue@retVal,StoreIntInEeprom@data
  6204  00318A  C092  F022         	movff	DacSetValue@retVal+1,StoreIntInEeprom@data+1
  6205  00318E  C093  F023         	movff	DacSetValue@retVal+2,StoreIntInEeprom@data+2
  6206  003192  C094  F024         	movff	DacSetValue@retVal+3,StoreIntInEeprom@data+3
  6207  003196  5190               	movf	DacSetValue@dacIndex& (0+255),w,b
  6208  003198  0D01               	mullw	1
  6209  00319A  0E53               	movlw	low _DAC_ADDRES
  6210  00319C  24F3               	addwf	prodl,w,c
  6211  00319E  6EF6               	movwf	tblptrl,c
  6212  0031A0  0E06               	movlw	high _DAC_ADDRES
  6213  0031A2  20F4               	addwfc	prodh,w,c
  6214  0031A4  6EF7               	movwf	tblptrh,c
  6215  0031A6                     	if	0	;There are less than 3 active tblptr bytes
  6216  0031A6                     	endif
  6217  0031A6  0008               	tblrd		*
  6218  0031A8  50F5               	movf	tablat,w,c
  6219  0031AA  0940               	iorlw	64
  6220  0031AC  6E25               	movwf	StoreIntInEeprom@address,c
  6221  0031AE  0E00               	movlw	0
  6222  0031B0  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  6223  0031B2  0E02               	movlw	2
  6224  0031B4  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  6225  0031B6  EC37  F01F         	call	_StoreIntInEeprom	;wreg free
  6226                           
  6227                           ;DacApp.c: 41: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  6228  0031BA  0E61               	movlw	97
  6229  0031BC  6E24               	movwf	SendAckMessage@inRequest,c
  6230  0031BE  0E06               	movlw	6
  6231  0031C0  ECB0  F01D         	call	_SendAckMessage
  6232  0031C4  0012               	return		;funcret
  6233  0031C6                     __end_of_DacSetValue:
  6234                           	opt stack 0
  6235                           tosu	equ	0xFFF
  6236                           tosh	equ	0xFFE
  6237                           tosl	equ	0xFFD
  6238                           pclath	equ	0xFFA
  6239                           tblptru	equ	0xFF8
  6240                           tblptrh	equ	0xFF7
  6241                           tblptrl	equ	0xFF6
  6242                           tablat	equ	0xFF5
  6243                           prodh	equ	0xFF4
  6244                           prodl	equ	0xFF3
  6245                           postinc0	equ	0xFEE
  6246                           plusw0	equ	0xFEB
  6247                           wreg	equ	0xFE8
  6248                           postdec1	equ	0xFE5
  6249                           fsr1l	equ	0xFE1
  6250                           indf2	equ	0xFDF
  6251                           postinc2	equ	0xFDE
  6252                           plusw2	equ	0xFDB
  6253                           fsr2h	equ	0xFDA
  6254                           fsr2l	equ	0xFD9
  6255                           status	equ	0xFD8
  6256                           
  6257 ;; *************** function _GetIntFromUartData *****************
  6258 ;; Defined at:
  6259 ;;		line 47 in file "SystemCommon.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;  num             1    wreg     char 
  6262 ;;  data            2    6[BANK0 ] PTR unsigned char 
  6263 ;;		 -> rxMsgData(20), 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  num             1   26[BANK0 ] char 
  6266 ;;  idxCon          2   36[BANK0 ] int 
  6267 ;;  dataRegArr     10   16[BANK0 ] unsigned char [10]
  6268 ;;  retVal          8   28[BANK0 ] struct .
  6269 ;;  idxData         1   38[BANK0 ] unsigned char 
  6270 ;;  recVal          1   27[BANK0 ] unsigned char 
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  8    6[BANK0 ] struct .
  6273 ;; Registers used:
  6274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6280 ;;      Params:         0       8       0       0       0       0       0
  6281 ;;      Locals:         0      23       0       0       0       0       0
  6282 ;;      Temps:          0       2       0       0       0       0       0
  6283 ;;      Totals:         0      33       0       0       0       0       0
  6284 ;;Total ram usage:       33 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:    7
  6287 ;; This function calls:
  6288 ;;		_ZeroArray
  6289 ;;		_strtol
  6290 ;; This function is called by:
  6291 ;;		_FlashReadUart
  6292 ;;		_DacSetValue
  6293 ;;		_UpdateSynthFreq
  6294 ;; This function uses a non-reentrant model
  6295 ;;
  6296                           
  6297                           	psect	text20
  6298  001E3A                     __ptext20:
  6299                           	opt stack 0
  6300  001E3A                     _GetIntFromUartData:
  6301                           	opt stack 20
  6302                           
  6303                           ;incstack = 0
  6304                           ;GetIntFromUartData@num stored from wreg
  6305  001E3A  0100               	movlb	0	; () banked
  6306  001E3C  6F7A               	movwf	GetIntFromUartData@num& (0+255),b
  6307                           
  6308                           ;SystemCommon.c: 49: INT_VAL retVal;
  6309                           ;SystemCommon.c: 50: retVal.num = 0;
  6310  001E3E  0E00               	movlw	0
  6311  001E40  0100               	movlb	0	; () banked
  6312  001E42  6F7C               	movwf	GetIntFromUartData@retVal& (0+255),b
  6313  001E44  0E00               	movlw	0
  6314  001E46  6F7D               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  6315  001E48  0E00               	movlw	0
  6316  001E4A  6F7E               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  6317  001E4C  0E00               	movlw	0
  6318  001E4E  6F7F               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  6319                           
  6320                           ;SystemCommon.c: 51: retVal.con = 0;
  6321  001E50  0E00               	movlw	0
  6322  001E52  6F80               	movwf	(GetIntFromUartData@retVal+4)& (0+255),b
  6323  001E54  0E00               	movlw	0
  6324  001E56  6F81               	movwf	(GetIntFromUartData@retVal+5)& (0+255),b
  6325  001E58  0E00               	movlw	0
  6326  001E5A  6F82               	movwf	(GetIntFromUartData@retVal+6)& (0+255),b
  6327  001E5C  0E00               	movlw	0
  6328  001E5E  6F83               	movwf	(GetIntFromUartData@retVal+7)& (0+255),b
  6329                           
  6330                           ;SystemCommon.c: 52: uint8_t idxData = 0;
  6331  001E60  0E00               	movlw	0
  6332  001E62  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6333                           
  6334                           ;SystemCommon.c: 53: char recVal = (0);
  6335  001E64  0E00               	movlw	0
  6336  001E66  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;SystemCommon.c: 55: char dataRegArr[0xA];
  6340                           ;SystemCommon.c: 56: ZeroArray(dataRegArr, 0xA);
  6341  001E68  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6342  001E6A  6E20               	movwf	ZeroArray@array,c
  6343  001E6C  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6344  001E6E  6E21               	movwf	ZeroArray@array+1,c
  6345  001E70  0E00               	movlw	0
  6346  001E72  6E23               	movwf	ZeroArray@size+1,c
  6347  001E74  0E0A               	movlw	10
  6348  001E76  6E22               	movwf	ZeroArray@size,c
  6349  001E78  EC58  F021         	call	_ZeroArray	;wreg free
  6350                           
  6351                           ;SystemCommon.c: 58: for(idxData = 0; idxData < 0xA; idxData++)
  6352  001E7C  0E00               	movlw	0
  6353  001E7E  0100               	movlb	0	; () banked
  6354  001E80  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6355  001E82                     l8034:
  6356                           
  6357                           ; BSR set to: 0
  6358  001E82  0E09               	movlw	9
  6359  001E84  6586               	cpfsgt	GetIntFromUartData@idxData& (0+255),b
  6360  001E86  D001               	goto	l1413
  6361  001E88  D01D               	goto	u8040
  6362  001E8A                     l1413:
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;SystemCommon.c: 59: {
  6366                           ;SystemCommon.c: 60: recVal = data[idxData];
  6367                           
  6368                           ; BSR set to: 0
  6369  001E8A  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6370  001E8C  0D01               	mullw	1
  6371  001E8E  50F3               	movf	prodl,w,c
  6372  001E90  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6373  001E92  6ED9               	movwf	fsr2l,c
  6374  001E94  50F4               	movf	prodh,w,c
  6375  001E96  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6376  001E98  6EDA               	movwf	fsr2h,c
  6377  001E9A  50DF               	movf	indf2,w,c
  6378  001E9C  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;SystemCommon.c: 61: if(recVal == 0x10)
  6382  001E9E  0E10               	movlw	16
  6383  001EA0  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6384  001EA2  A4D8               	btfss	status,2,c
  6385  001EA4  D002               	goto	l1415
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;SystemCommon.c: 62: {
  6389                           ;SystemCommon.c: 63: idxData++;
  6390  001EA6  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6391                           
  6392                           ;SystemCommon.c: 64: break;
  6393  001EA8  D00D               	goto	u8040
  6394  001EAA                     l1415:
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;SystemCommon.c: 66: else
  6398                           ;SystemCommon.c: 67: {
  6399                           ;SystemCommon.c: 68: dataRegArr[idxData] = recVal + '0';
  6400                           
  6401                           ; BSR set to: 0
  6402  001EAA  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6403  001EAC  0D01               	mullw	1
  6404  001EAE  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6405  001EB0  24F3               	addwf	prodl,w,c
  6406  001EB2  6ED9               	movwf	fsr2l,c
  6407  001EB4  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6408  001EB6  20F4               	addwfc	prodh,w,c
  6409  001EB8  6EDA               	movwf	fsr2h,c
  6410  001EBA  517B               	movf	GetIntFromUartData@recVal& (0+255),w,b
  6411  001EBC  0F30               	addlw	48
  6412  001EBE  6EDF               	movwf	indf2,c
  6413                           
  6414                           ; BSR set to: 0
  6415                           
  6416                           ; BSR set to: 0
  6417  001EC0  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6418  001EC2  D7DF               	goto	l8034
  6419  001EC4                     u8040:
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;SystemCommon.c: 69: }
  6423                           ;SystemCommon.c: 70: }
  6424                           ;SystemCommon.c: 71: retVal.num = strtol(dataRegArr, (0), num);
  6425                           
  6426                           ; BSR set to: 0
  6427  001EC4  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6428  001EC6  6E26               	movwf	strtol@s,c
  6429  001EC8  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6430  001ECA  6E27               	movwf	strtol@s+1,c
  6431  001ECC  0E00               	movlw	0
  6432  001ECE  6E28               	movwf	strtol@endptr,c
  6433  001ED0  0E00               	movlw	0
  6434  001ED2  6E29               	movwf	strtol@endptr+1,c
  6435  001ED4  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6436  001ED6  6E2A               	movwf	strtol@base,c
  6437  001ED8  6A2B               	clrf	strtol@base+1,c
  6438  001EDA  BE2A               	btfsc	strtol@base,7,c
  6439  001EDC  062B               	decf	strtol@base+1,f,c
  6440  001EDE  ECD4  F00B         	call	_strtol	;wreg free
  6441  001EE2  C026  F07C         	movff	?_strtol,GetIntFromUartData@retVal
  6442  001EE6  C027  F07D         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  6443  001EEA  C028  F07E         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  6444  001EEE  C029  F07F         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  6445                           
  6446                           ;SystemCommon.c: 73: ZeroArray(dataRegArr, 0xA);
  6447  001EF2  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6448  001EF4  6E20               	movwf	ZeroArray@array,c
  6449  001EF6  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6450  001EF8  6E21               	movwf	ZeroArray@array+1,c
  6451  001EFA  0E00               	movlw	0
  6452  001EFC  6E23               	movwf	ZeroArray@size+1,c
  6453  001EFE  0E0A               	movlw	10
  6454  001F00  6E22               	movwf	ZeroArray@size,c
  6455  001F02  EC58  F021         	call	_ZeroArray	;wreg free
  6456                           
  6457                           ;SystemCommon.c: 75: for(int idxCon = 0; idxCon < 0xA; idxCon++)
  6458  001F06  0E00               	movlw	0
  6459  001F08  0100               	movlb	0	; () banked
  6460  001F0A  6F85               	movwf	(GetIntFromUartData@idxCon+1)& (0+255),b
  6461  001F0C  0E00               	movlw	0
  6462  001F0E  6F84               	movwf	GetIntFromUartData@idxCon& (0+255),b
  6463  001F10                     l8056:
  6464                           
  6465                           ; BSR set to: 0
  6466  001F10  BF85               	btfsc	(GetIntFromUartData@idxCon+1)& (0+255),7,b
  6467  001F12  D006               	goto	l1417
  6468  001F14  5185               	movf	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6469  001F16  E12E               	bnz	l8074
  6470  001F18  0E0A               	movlw	10
  6471  001F1A  5D84               	subwf	GetIntFromUartData@idxCon& (0+255),w,b
  6472  001F1C  B0D8               	btfsc	status,0,c
  6473  001F1E  D02A               	goto	u8070
  6474  001F20                     l1417:
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;SystemCommon.c: 76: {
  6478                           ;SystemCommon.c: 77: recVal = data[idxData + idxCon];
  6479                           
  6480                           ; BSR set to: 0
  6481  001F20  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6482  001F22  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6483  001F24  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6484  001F26  0E00               	movlw	0
  6485  001F28  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6486  001F2A  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6487  001F2C  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6488  001F2E  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6489  001F30  6ED9               	movwf	fsr2l,c
  6490  001F32  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6491  001F34  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6492  001F36  6EDA               	movwf	fsr2h,c
  6493  001F38  50DF               	movf	indf2,w,c
  6494  001F3A  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;SystemCommon.c: 78: if(recVal == 0x23)
  6498  001F3C  0E23               	movlw	35
  6499  001F3E  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6500  001F40  B4D8               	btfsc	status,2,c
  6501  001F42  D018               	goto	u8070
  6502                           
  6503                           ; BSR set to: 0
  6504                           ;SystemCommon.c: 82: else
  6505                           ;SystemCommon.c: 83: {
  6506                           ;SystemCommon.c: 84: dataRegArr[idxCon] = data[idxCon + idxData] + '0';
  6507                           
  6508                           ; BSR set to: 0
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;SystemCommon.c: 81: }
  6512                           
  6513                           ; BSR set to: 0
  6514                           ;SystemCommon.c: 79: {
  6515                           ;SystemCommon.c: 80: break;
  6516  001F44  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6517  001F46  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6518  001F48  6ED9               	movwf	fsr2l,c
  6519  001F4A  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6520  001F4C  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6521  001F4E  6EDA               	movwf	fsr2h,c
  6522  001F50  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6523  001F52  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6524  001F54  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6525  001F56  0E00               	movlw	0
  6526  001F58  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6527  001F5A  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6528  001F5C  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6529  001F5E  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6530  001F60  6EE1               	movwf	fsr1l,c
  6531  001F62  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6532  001F64  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6533  001F66  6EE2               	movwf	fsr1h,c
  6534  001F68  50E7               	movf	indf1,w,c
  6535  001F6A  0F30               	addlw	48
  6536  001F6C  6EDF               	movwf	indf2,c
  6537                           
  6538                           ; BSR set to: 0
  6539                           
  6540                           ; BSR set to: 0
  6541  001F6E  4B84               	infsnz	GetIntFromUartData@idxCon& (0+255),f,b
  6542  001F70  2B85               	incf	(GetIntFromUartData@idxCon+1)& (0+255),f,b
  6543  001F72  D7CE               	goto	l8056
  6544  001F74                     u8070:
  6545  001F74                     l8074:
  6546                           
  6547                           ; BSR set to: 0
  6548                           ;SystemCommon.c: 85: }
  6549                           ;SystemCommon.c: 86: }
  6550                           ;SystemCommon.c: 87: retVal.con = strtol(dataRegArr, (0), num);
  6551  001F74  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6552  001F76  6E26               	movwf	strtol@s,c
  6553  001F78  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6554  001F7A  6E27               	movwf	strtol@s+1,c
  6555  001F7C  0E00               	movlw	0
  6556  001F7E  6E28               	movwf	strtol@endptr,c
  6557  001F80  0E00               	movlw	0
  6558  001F82  6E29               	movwf	strtol@endptr+1,c
  6559  001F84  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6560  001F86  6E2A               	movwf	strtol@base,c
  6561  001F88  6A2B               	clrf	strtol@base+1,c
  6562  001F8A  BE2A               	btfsc	strtol@base,7,c
  6563  001F8C  062B               	decf	strtol@base+1,f,c
  6564  001F8E  ECD4  F00B         	call	_strtol	;wreg free
  6565  001F92  C026  F080         	movff	?_strtol,GetIntFromUartData@retVal+4
  6566  001F96  C027  F081         	movff	?_strtol+1,GetIntFromUartData@retVal+5
  6567  001F9A  C028  F082         	movff	?_strtol+2,GetIntFromUartData@retVal+6
  6568  001F9E  C029  F083         	movff	?_strtol+3,GetIntFromUartData@retVal+7
  6569                           
  6570                           ;SystemCommon.c: 89: return retVal;
  6571  001FA2  EE20  F07C         	lfsr	2,GetIntFromUartData@retVal
  6572  001FA6  EE00  F066         	lfsr	0,?_GetIntFromUartData
  6573  001FAA  0E07               	movlw	7
  6574  001FAC                     u8081:
  6575  001FAC  CFDB FFEB          	movff	plusw2,plusw0
  6576  001FB0  06E8               	decf	wreg,f,c
  6577  001FB2  E2FC               	bc	u8081
  6578  001FB4  0012               	return	
  6579  001FB6                     __end_of_GetIntFromUartData:
  6580                           	opt stack 0
  6581                           tosu	equ	0xFFF
  6582                           tosh	equ	0xFFE
  6583                           tosl	equ	0xFFD
  6584                           pclath	equ	0xFFA
  6585                           tblptru	equ	0xFF8
  6586                           tblptrh	equ	0xFF7
  6587                           tblptrl	equ	0xFF6
  6588                           tablat	equ	0xFF5
  6589                           prodh	equ	0xFF4
  6590                           prodl	equ	0xFF3
  6591                           postinc0	equ	0xFEE
  6592                           plusw0	equ	0xFEB
  6593                           wreg	equ	0xFE8
  6594                           indf1	equ	0xFE7
  6595                           postdec1	equ	0xFE5
  6596                           fsr1h	equ	0xFE2
  6597                           fsr1l	equ	0xFE1
  6598                           indf2	equ	0xFDF
  6599                           postinc2	equ	0xFDE
  6600                           plusw2	equ	0xFDB
  6601                           fsr2h	equ	0xFDA
  6602                           fsr2l	equ	0xFD9
  6603                           status	equ	0xFD8
  6604                           
  6605 ;; *************** function _strtol *****************
  6606 ;; Defined at:
  6607 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;  s               2   37[COMRAM] PTR const unsigned char 
  6610 ;;		 -> GetIntFromUartData@dataRegArr(10), 
  6611 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  6612 ;;		 -> NULL(0), 
  6613 ;;  base            2   41[COMRAM] int 
  6614 ;; Auto vars:     Size  Location     Type
  6615 ;;  a               4    1[BANK0 ] long 
  6616 ;;  c               1    5[BANK0 ] unsigned char 
  6617 ;;  sign            1    0[BANK0 ] unsigned char 
  6618 ;; Return value:  Size  Location     Type
  6619 ;;                  4   37[COMRAM] long 
  6620 ;; Registers used:
  6621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6622 ;; Tracked objects:
  6623 ;;		On entry : 0/0
  6624 ;;		On exit  : 0/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6627 ;;      Params:         6       0       0       0       0       0       0
  6628 ;;      Locals:         0       6       0       0       0       0       0
  6629 ;;      Temps:          4       0       0       0       0       0       0
  6630 ;;      Totals:        10       6       0       0       0       0       0
  6631 ;;Total ram usage:       16 bytes
  6632 ;; Hardware stack levels used:    1
  6633 ;; Hardware stack levels required when called:    6
  6634 ;; This function calls:
  6635 ;;		___lmul
  6636 ;;		_isalpha
  6637 ;;		_isdigit
  6638 ;;		_isspace
  6639 ;;		_toupper
  6640 ;; This function is called by:
  6641 ;;		_GetIntFromUartData
  6642 ;; This function uses a non-reentrant model
  6643 ;;
  6644                           
  6645                           	psect	text21
  6646  0017A8                     __ptext21:
  6647                           	opt stack 0
  6648  0017A8                     _strtol:
  6649                           	opt stack 20
  6650                           
  6651                           ;incstack = 0
  6652  0017A8  C026  FFD9         	movff	strtol@s,fsr2l
  6653  0017AC  C027  FFDA         	movff	strtol@s+1,fsr2h
  6654  0017B0  50DF               	movf	indf2,w,c
  6655  0017B2  0100               	movlb	0	; () banked
  6656  0017B4  6F65               	movwf	strtol@c& (0+255),b
  6657                           
  6658                           ; BSR set to: 0
  6659  0017B6  4A26               	infsnz	strtol@s,f,c
  6660  0017B8  2A27               	incf	strtol@s+1,f,c
  6661                           
  6662                           ; BSR set to: 0
  6663  0017BA  5165               	movf	strtol@c& (0+255),w,b
  6664  0017BC  ECAC  F020         	call	_isspace
  6665  0017C0  B0D8               	btfsc	status,0,c
  6666  0017C2  D7F2               	goto	_strtol
  6667  0017C4  0E00               	movlw	0
  6668  0017C6  0100               	movlb	0	; () banked
  6669  0017C8  6F61               	movwf	strtol@a& (0+255),b
  6670  0017CA  0E00               	movlw	0
  6671  0017CC  6F62               	movwf	(strtol@a+1)& (0+255),b
  6672  0017CE  0E00               	movlw	0
  6673  0017D0  6F63               	movwf	(strtol@a+2)& (0+255),b
  6674  0017D2  0E00               	movlw	0
  6675  0017D4  6F64               	movwf	(strtol@a+3)& (0+255),b
  6676  0017D6  0E00               	movlw	0
  6677  0017D8  6F60               	movwf	strtol@sign& (0+255),b
  6678                           
  6679                           ; BSR set to: 0
  6680  0017DA  0E2D               	movlw	45
  6681  0017DC  1965               	xorwf	strtol@c& (0+255),w,b
  6682  0017DE  A4D8               	btfss	status,2,c
  6683  0017E0  D003               	goto	l2180
  6684                           
  6685                           ; BSR set to: 0
  6686  0017E2  0E01               	movlw	1
  6687  0017E4  6F60               	movwf	strtol@sign& (0+255),b
  6688  0017E6  D004               	goto	u7870
  6689  0017E8                     l2180:
  6690                           
  6691                           ; BSR set to: 0
  6692                           
  6693                           ; BSR set to: 0
  6694  0017E8  0E2B               	movlw	43
  6695  0017EA  1965               	xorwf	strtol@c& (0+255),w,b
  6696  0017EC  A4D8               	btfss	status,2,c
  6697  0017EE  D008               	goto	l2182
  6698  0017F0                     u7870:
  6699                           
  6700                           ; BSR set to: 0
  6701  0017F0  C026  FFD9         	movff	strtol@s,fsr2l
  6702  0017F4  C027  FFDA         	movff	strtol@s+1,fsr2h
  6703  0017F8  50DF               	movf	indf2,w,c
  6704  0017FA  6F65               	movwf	strtol@c& (0+255),b
  6705                           
  6706                           ; BSR set to: 0
  6707  0017FC  4A26               	infsnz	strtol@s,f,c
  6708  0017FE  2A27               	incf	strtol@s+1,f,c
  6709  001800                     l2182:
  6710                           
  6711                           ; BSR set to: 0
  6712                           
  6713                           ; BSR set to: 0
  6714                           
  6715                           ; BSR set to: 0
  6716  001800  0E30               	movlw	48
  6717  001802  1965               	xorwf	strtol@c& (0+255),w,b
  6718  001804  A4D8               	btfss	status,2,c
  6719  001806  D02E               	goto	l2190
  6720                           
  6721                           ; BSR set to: 0
  6722  001808  C026  FFD9         	movff	strtol@s,fsr2l
  6723  00180C  C027  FFDA         	movff	strtol@s+1,fsr2h
  6724  001810  50DF               	movf	indf2,w,c
  6725  001812  6F65               	movwf	strtol@c& (0+255),b
  6726                           
  6727                           ; BSR set to: 0
  6728  001814  4A26               	infsnz	strtol@s,f,c
  6729  001816  2A27               	incf	strtol@s+1,f,c
  6730                           
  6731                           ; BSR set to: 0
  6732  001818  502A               	movf	strtol@base,w,c
  6733  00181A  102B               	iorwf	strtol@base+1,w,c
  6734  00181C  B4D8               	btfsc	status,2,c
  6735  00181E  D005               	goto	u7900
  6736                           
  6737                           ; BSR set to: 0
  6738  001820  0E10               	movlw	16
  6739  001822  182A               	xorwf	strtol@base,w,c
  6740  001824  102B               	iorwf	strtol@base+1,w,c
  6741  001826  A4D8               	btfss	status,2,c
  6742  001828  D015               	goto	l2184
  6743  00182A                     u7900:
  6744                           
  6745                           ; BSR set to: 0
  6746                           
  6747                           ; BSR set to: 0
  6748  00182A  0E78               	movlw	120
  6749  00182C  1965               	xorwf	strtol@c& (0+255),w,b
  6750  00182E  B4D8               	btfsc	status,2,c
  6751  001830  D004               	goto	u7920
  6752                           
  6753                           ; BSR set to: 0
  6754  001832  0E58               	movlw	88
  6755  001834  1965               	xorwf	strtol@c& (0+255),w,b
  6756  001836  A4D8               	btfss	status,2,c
  6757  001838  D00D               	goto	l2184
  6758  00183A                     u7920:
  6759                           
  6760                           ; BSR set to: 0
  6761                           
  6762                           ; BSR set to: 0
  6763  00183A  0E00               	movlw	0
  6764  00183C  6E2B               	movwf	strtol@base+1,c
  6765  00183E  0E10               	movlw	16
  6766  001840  6E2A               	movwf	strtol@base,c
  6767                           
  6768                           ; BSR set to: 0
  6769  001842  C026  FFD9         	movff	strtol@s,fsr2l
  6770  001846  C027  FFDA         	movff	strtol@s+1,fsr2h
  6771  00184A  50DF               	movf	indf2,w,c
  6772  00184C  6F65               	movwf	strtol@c& (0+255),b
  6773                           
  6774                           ; BSR set to: 0
  6775  00184E  4A26               	infsnz	strtol@s,f,c
  6776  001850  2A27               	incf	strtol@s+1,f,c
  6777  001852  D008               	goto	l2190
  6778  001854                     l2184:
  6779                           
  6780                           ; BSR set to: 0
  6781                           
  6782                           ; BSR set to: 0
  6783  001854  502A               	movf	strtol@base,w,c
  6784  001856  102B               	iorwf	strtol@base+1,w,c
  6785  001858  A4D8               	btfss	status,2,c
  6786  00185A  D004               	goto	l2190
  6787                           
  6788                           ; BSR set to: 0
  6789  00185C  0E00               	movlw	0
  6790  00185E  6E2B               	movwf	strtol@base+1,c
  6791  001860  0E08               	movlw	8
  6792  001862  6E2A               	movwf	strtol@base,c
  6793  001864                     l2190:
  6794                           
  6795                           ; BSR set to: 0
  6796                           
  6797                           ; BSR set to: 0
  6798                           
  6799                           ; BSR set to: 0
  6800                           
  6801                           ; BSR set to: 0
  6802  001864  502A               	movf	strtol@base,w,c
  6803  001866  102B               	iorwf	strtol@base+1,w,c
  6804  001868  A4D8               	btfss	status,2,c
  6805  00186A  D004               	goto	l2191
  6806                           
  6807                           ; BSR set to: 0
  6808  00186C  0E00               	movlw	0
  6809  00186E  6E2B               	movwf	strtol@base+1,c
  6810  001870  0E0A               	movlw	10
  6811  001872  6E2A               	movwf	strtol@base,c
  6812  001874                     l2191:
  6813                           
  6814                           ; BSR set to: 0
  6815                           
  6816                           ; BSR set to: 0
  6817                           
  6818                           ; BSR set to: 0
  6819  001874  5165               	movf	strtol@c& (0+255),w,b
  6820  001876  EC98  F020         	call	_isalpha
  6821  00187A  A0D8               	btfss	status,0,c
  6822  00187C  D008               	goto	l2193
  6823  00187E  0100               	movlb	0	; () banked
  6824  001880  5165               	movf	strtol@c& (0+255),w,b
  6825  001882  ECB2  F021         	call	_toupper
  6826  001886  0FC9               	addlw	201
  6827  001888  0100               	movlb	0	; () banked
  6828  00188A  6F65               	movwf	strtol@c& (0+255),b
  6829  00188C  D009               	goto	l2196
  6830  00188E                     l2193:
  6831                           
  6832                           ; BSR set to: 0
  6833  00188E  0100               	movlb	0	; () banked
  6834  001890  5165               	movf	strtol@c& (0+255),w,b
  6835  001892  EC3A  F021         	call	_isdigit
  6836  001896  A0D8               	btfss	status,0,c
  6837  001898  D039               	goto	l2197
  6838  00189A  0E30               	movlw	48
  6839  00189C  0100               	movlb	0	; () banked
  6840  00189E  5F65               	subwf	strtol@c& (0+255),f,b
  6841  0018A0                     l2196:
  6842                           
  6843                           ; BSR set to: 0
  6844                           
  6845                           ; BSR set to: 0
  6846                           
  6847                           ; BSR set to: 0
  6848  0018A0  5165               	movf	strtol@c& (0+255),w,b
  6849  0018A2  6E2C               	movwf	??_strtol& (0+255),c
  6850  0018A4  6A2D               	clrf	(??_strtol+1)& (0+255),c
  6851  0018A6  502A               	movf	strtol@base,w,c
  6852  0018A8  5C2C               	subwf	??_strtol,w,c
  6853  0018AA  502D               	movf	??_strtol+1,w,c
  6854  0018AC  0A80               	xorlw	128
  6855  0018AE  6E2E               	movwf	(??_strtol+2)& (0+255),c
  6856  0018B0  502B               	movf	strtol@base+1,w,c
  6857  0018B2  0A80               	xorlw	128
  6858  0018B4  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  6859  0018B6  B0D8               	btfsc	status,0,c
  6860  0018B8  D029               	goto	l2197
  6861                           
  6862                           ; BSR set to: 0
  6863                           
  6864                           ; BSR set to: 0
  6865                           
  6866                           ; BSR set to: 0
  6867  0018BA  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  6868  0018BE  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  6869  0018C2  0E00               	movlw	0
  6870  0018C4  BE1B               	btfsc	___lmul@multiplier+1,7,c
  6871  0018C6  0EFF               	movlw	-1
  6872  0018C8  6E1C               	movwf	___lmul@multiplier+2,c
  6873  0018CA  6E1D               	movwf	___lmul@multiplier+3,c
  6874  0018CC  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  6875  0018D0  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  6876  0018D4  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  6877  0018D8  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  6878  0018DC  EC5C  F01D         	call	___lmul	;wreg free
  6879  0018E0  0100               	movlb	0	; () banked
  6880  0018E2  5165               	movf	strtol@c& (0+255),w,b
  6881  0018E4  241A               	addwf	?___lmul,w,c
  6882  0018E6  6F61               	movwf	strtol@a& (0+255),b
  6883  0018E8  0E00               	movlw	0
  6884  0018EA  201B               	addwfc	?___lmul+1,w,c
  6885  0018EC  6F62               	movwf	(strtol@a+1)& (0+255),b
  6886  0018EE  0E00               	movlw	0
  6887  0018F0  201C               	addwfc	?___lmul+2,w,c
  6888  0018F2  6F63               	movwf	(strtol@a+2)& (0+255),b
  6889  0018F4  0E00               	movlw	0
  6890  0018F6  201D               	addwfc	?___lmul+3,w,c
  6891  0018F8  6F64               	movwf	(strtol@a+3)& (0+255),b
  6892                           
  6893                           ; BSR set to: 0
  6894  0018FA  C026  FFD9         	movff	strtol@s,fsr2l
  6895  0018FE  C027  FFDA         	movff	strtol@s+1,fsr2h
  6896  001902  50DF               	movf	indf2,w,c
  6897  001904  6F65               	movwf	strtol@c& (0+255),b
  6898                           
  6899                           ; BSR set to: 0
  6900  001906  4A26               	infsnz	strtol@s,f,c
  6901  001908  2A27               	incf	strtol@s+1,f,c
  6902  00190A  D7B4               	goto	l2191
  6903  00190C                     l2197:
  6904                           
  6905                           ; BSR set to: 0
  6906  00190C  5028               	movf	strtol@endptr,w,c
  6907  00190E  1029               	iorwf	strtol@endptr+1,w,c
  6908  001910  B4D8               	btfsc	status,2,c
  6909  001912  D00E               	goto	l2199
  6910  001914  0EFF               	movlw	255
  6911  001916  2426               	addwf	strtol@s,w,c
  6912  001918  6E2C               	movwf	??_strtol& (0+255),c
  6913  00191A  0EFF               	movlw	255
  6914  00191C  2027               	addwfc	strtol@s+1,w,c
  6915  00191E  6E2D               	movwf	(??_strtol+1)& (0+255),c
  6916  001920  C028  FFD9         	movff	strtol@endptr,fsr2l
  6917  001924  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  6918  001928  C02C  FFDE         	movff	??_strtol,postinc2
  6919  00192C  C02D  FFDD         	movff	??_strtol+1,postdec2
  6920  001930                     l2199:
  6921  001930  0100               	movlb	0	; () banked
  6922  001932  5160               	movf	strtol@sign& (0+255),w,b
  6923  001934  B4D8               	btfsc	status,2,c
  6924  001936  D01A               	goto	l2200
  6925                           
  6926                           ; BSR set to: 0
  6927  001938  C061  F02C         	movff	strtol@a,??_strtol
  6928  00193C  C062  F02D         	movff	strtol@a+1,??_strtol+1
  6929  001940  C063  F02E         	movff	strtol@a+2,??_strtol+2
  6930  001944  C064  F02F         	movff	strtol@a+3,??_strtol+3
  6931  001948  1E2C               	comf	??_strtol,f,c
  6932  00194A  1E2D               	comf	??_strtol+1,f,c
  6933  00194C  1E2E               	comf	??_strtol+2,f,c
  6934  00194E  1E2F               	comf	??_strtol+3,f,c
  6935  001950  2A2C               	incf	??_strtol,f,c
  6936  001952  0E00               	movlw	0
  6937  001954  222D               	addwfc	??_strtol+1,f,c
  6938  001956  222E               	addwfc	??_strtol+2,f,c
  6939  001958  222F               	addwfc	??_strtol+3,f,c
  6940  00195A  C02C  F026         	movff	??_strtol,?_strtol
  6941  00195E  C02D  F027         	movff	??_strtol+1,?_strtol+1
  6942  001962  C02E  F028         	movff	??_strtol+2,?_strtol+2
  6943  001966  C02F  F029         	movff	??_strtol+3,?_strtol+3
  6944                           
  6945                           ; BSR set to: 0
  6946  00196A  0012               	return	
  6947  00196C                     l2200:
  6948                           
  6949                           ; BSR set to: 0
  6950  00196C  C061  F026         	movff	strtol@a,?_strtol
  6951  001970  C062  F027         	movff	strtol@a+1,?_strtol+1
  6952  001974  C063  F028         	movff	strtol@a+2,?_strtol+2
  6953  001978  C064  F029         	movff	strtol@a+3,?_strtol+3
  6954                           
  6955                           ; BSR set to: 0
  6956  00197C  0012               	return		;funcret
  6957  00197E                     __end_of_strtol:
  6958                           	opt stack 0
  6959                           tosu	equ	0xFFF
  6960                           tosh	equ	0xFFE
  6961                           tosl	equ	0xFFD
  6962                           pclath	equ	0xFFA
  6963                           tblptru	equ	0xFF8
  6964                           tblptrh	equ	0xFF7
  6965                           tblptrl	equ	0xFF6
  6966                           tablat	equ	0xFF5
  6967                           prodh	equ	0xFF4
  6968                           prodl	equ	0xFF3
  6969                           postinc0	equ	0xFEE
  6970                           plusw0	equ	0xFEB
  6971                           wreg	equ	0xFE8
  6972                           indf1	equ	0xFE7
  6973                           postdec1	equ	0xFE5
  6974                           fsr1h	equ	0xFE2
  6975                           fsr1l	equ	0xFE1
  6976                           indf2	equ	0xFDF
  6977                           postinc2	equ	0xFDE
  6978                           postdec2	equ	0xFDD
  6979                           plusw2	equ	0xFDB
  6980                           fsr2h	equ	0xFDA
  6981                           fsr2l	equ	0xFD9
  6982                           status	equ	0xFD8
  6983                           
  6984 ;; *************** function _toupper *****************
  6985 ;; Defined at:
  6986 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;  c               1    wreg     unsigned char 
  6989 ;; Auto vars:     Size  Location     Type
  6990 ;;  c               1   23[COMRAM] unsigned char 
  6991 ;; Return value:  Size  Location     Type
  6992 ;;                  1    wreg      unsigned char 
  6993 ;; Registers used:
  6994 ;;		wreg, status,2, status,0
  6995 ;; Tracked objects:
  6996 ;;		On entry : 0/0
  6997 ;;		On exit  : 0/0
  6998 ;;		Unchanged: 0/0
  6999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7000 ;;      Params:         0       0       0       0       0       0       0
  7001 ;;      Locals:         1       0       0       0       0       0       0
  7002 ;;      Temps:          0       0       0       0       0       0       0
  7003 ;;      Totals:         1       0       0       0       0       0       0
  7004 ;;Total ram usage:        1 bytes
  7005 ;; Hardware stack levels used:    1
  7006 ;; Hardware stack levels required when called:    4
  7007 ;; This function calls:
  7008 ;;		Nothing
  7009 ;; This function is called by:
  7010 ;;		_strtol
  7011 ;; This function uses a non-reentrant model
  7012 ;;
  7013                           
  7014                           	psect	text22
  7015  004364                     __ptext22:
  7016                           	opt stack 0
  7017  004364                     _toupper:
  7018                           	opt stack 21
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;incstack = 0
  7022                           ;toupper@c stored from wreg
  7023  004364  6E18               	movwf	toupper@c,c
  7024  004366  0E7B               	movlw	123
  7025  004368  6018               	cpfslt	toupper@c,c
  7026  00436A  D004               	goto	l2204
  7027  00436C  0E60               	movlw	96
  7028  00436E  6418               	cpfsgt	toupper@c,c
  7029  004370  D001               	goto	l2204
  7030  004372  9A18               	bcf	toupper@c,5,c
  7031  004374                     l2204:
  7032  004374  5018               	movf	toupper@c,w,c
  7033  004376  0012               	return	
  7034  004378                     __end_of_toupper:
  7035                           	opt stack 0
  7036                           tosu	equ	0xFFF
  7037                           tosh	equ	0xFFE
  7038                           tosl	equ	0xFFD
  7039                           pclath	equ	0xFFA
  7040                           tblptru	equ	0xFF8
  7041                           tblptrh	equ	0xFF7
  7042                           tblptrl	equ	0xFF6
  7043                           tablat	equ	0xFF5
  7044                           prodh	equ	0xFF4
  7045                           prodl	equ	0xFF3
  7046                           postinc0	equ	0xFEE
  7047                           plusw0	equ	0xFEB
  7048                           wreg	equ	0xFE8
  7049                           indf1	equ	0xFE7
  7050                           postdec1	equ	0xFE5
  7051                           fsr1h	equ	0xFE2
  7052                           fsr1l	equ	0xFE1
  7053                           indf2	equ	0xFDF
  7054                           postinc2	equ	0xFDE
  7055                           postdec2	equ	0xFDD
  7056                           plusw2	equ	0xFDB
  7057                           fsr2h	equ	0xFDA
  7058                           fsr2l	equ	0xFD9
  7059                           status	equ	0xFD8
  7060                           
  7061 ;; *************** function _isspace *****************
  7062 ;; Defined at:
  7063 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  7064 ;; Parameters:    Size  Location     Type
  7065 ;;  c               1    wreg     unsigned char 
  7066 ;; Auto vars:     Size  Location     Type
  7067 ;;  c               1   25[COMRAM] unsigned char 
  7068 ;; Return value:  Size  Location     Type
  7069 ;;		None               void
  7070 ;; Registers used:
  7071 ;;		wreg, status,2, status,0
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/0
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7077 ;;      Params:         0       0       0       0       0       0       0
  7078 ;;      Locals:         2       0       0       0       0       0       0
  7079 ;;      Temps:          1       0       0       0       0       0       0
  7080 ;;      Totals:         3       0       0       0       0       0       0
  7081 ;;Total ram usage:        3 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; Hardware stack levels required when called:    4
  7084 ;; This function calls:
  7085 ;;		Nothing
  7086 ;; This function is called by:
  7087 ;;		_strtol
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           	psect	text23
  7092  004158                     __ptext23:
  7093                           	opt stack 0
  7094  004158                     _isspace:
  7095                           	opt stack 21
  7096                           
  7097                           ;incstack = 0
  7098                           ;isspace@c stored from wreg
  7099  004158  6E1A               	movwf	isspace@c,c
  7100  00415A  0E01               	movlw	1
  7101  00415C  6E19               	movwf	_isspace$3332,c
  7102  00415E  0E20               	movlw	32
  7103  004160  181A               	xorwf	isspace@c,w,c
  7104  004162  B4D8               	btfsc	status,2,c
  7105  004164  D008               	goto	l2286
  7106  004166  0E0E               	movlw	14
  7107  004168  601A               	cpfslt	isspace@c,c
  7108  00416A  D003               	goto	u7640
  7109  00416C  0E09               	movlw	9
  7110  00416E  601A               	cpfslt	isspace@c,c
  7111  004170  D002               	goto	l2286
  7112  004172                     u7640:
  7113  004172  0E00               	movlw	0
  7114  004174  6E19               	movwf	_isspace$3332,c
  7115  004176                     l2286:
  7116  004176  C019  F018         	movff	_isspace$3332,??_isspace
  7117  00417A  3018               	rrcf	??_isspace,w,c
  7118  00417C  0012               	return	
  7119  00417E                     __end_of_isspace:
  7120                           	opt stack 0
  7121                           tosu	equ	0xFFF
  7122                           tosh	equ	0xFFE
  7123                           tosl	equ	0xFFD
  7124                           pclath	equ	0xFFA
  7125                           tblptru	equ	0xFF8
  7126                           tblptrh	equ	0xFF7
  7127                           tblptrl	equ	0xFF6
  7128                           tablat	equ	0xFF5
  7129                           prodh	equ	0xFF4
  7130                           prodl	equ	0xFF3
  7131                           postinc0	equ	0xFEE
  7132                           plusw0	equ	0xFEB
  7133                           wreg	equ	0xFE8
  7134                           indf1	equ	0xFE7
  7135                           postdec1	equ	0xFE5
  7136                           fsr1h	equ	0xFE2
  7137                           fsr1l	equ	0xFE1
  7138                           indf2	equ	0xFDF
  7139                           postinc2	equ	0xFDE
  7140                           postdec2	equ	0xFDD
  7141                           plusw2	equ	0xFDB
  7142                           fsr2h	equ	0xFDA
  7143                           fsr2l	equ	0xFD9
  7144                           status	equ	0xFD8
  7145                           
  7146 ;; *************** function _isdigit *****************
  7147 ;; Defined at:
  7148 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7149 ;; Parameters:    Size  Location     Type
  7150 ;;  c               1    wreg     unsigned char 
  7151 ;; Auto vars:     Size  Location     Type
  7152 ;;  c               1   25[COMRAM] unsigned char 
  7153 ;; Return value:  Size  Location     Type
  7154 ;;		None               void
  7155 ;; Registers used:
  7156 ;;		wreg, status,2, status,0
  7157 ;; Tracked objects:
  7158 ;;		On entry : 0/0
  7159 ;;		On exit  : 0/0
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7162 ;;      Params:         0       0       0       0       0       0       0
  7163 ;;      Locals:         2       0       0       0       0       0       0
  7164 ;;      Temps:          1       0       0       0       0       0       0
  7165 ;;      Totals:         3       0       0       0       0       0       0
  7166 ;;Total ram usage:        3 bytes
  7167 ;; Hardware stack levels used:    1
  7168 ;; Hardware stack levels required when called:    4
  7169 ;; This function calls:
  7170 ;;		Nothing
  7171 ;; This function is called by:
  7172 ;;		_strtol
  7173 ;; This function uses a non-reentrant model
  7174 ;;
  7175                           
  7176                           	psect	text24
  7177  004274                     __ptext24:
  7178                           	opt stack 0
  7179  004274                     _isdigit:
  7180                           	opt stack 21
  7181                           
  7182                           ;incstack = 0
  7183                           ;isdigit@c stored from wreg
  7184  004274  6E1A               	movwf	isdigit@c,c
  7185  004276  0E00               	movlw	0
  7186  004278  6E19               	movwf	_isdigit$3329,c
  7187  00427A  0E3A               	movlw	58
  7188  00427C  601A               	cpfslt	isdigit@c,c
  7189  00427E  D005               	goto	l2281
  7190  004280  0E2F               	movlw	47
  7191  004282  641A               	cpfsgt	isdigit@c,c
  7192  004284  D002               	goto	l2281
  7193  004286  0E01               	movlw	1
  7194  004288  6E19               	movwf	_isdigit$3329,c
  7195  00428A                     l2281:
  7196  00428A  C019  F018         	movff	_isdigit$3329,??_isdigit
  7197  00428E  3018               	rrcf	??_isdigit,w,c
  7198  004290  0012               	return	
  7199  004292                     __end_of_isdigit:
  7200                           	opt stack 0
  7201                           tosu	equ	0xFFF
  7202                           tosh	equ	0xFFE
  7203                           tosl	equ	0xFFD
  7204                           pclath	equ	0xFFA
  7205                           tblptru	equ	0xFF8
  7206                           tblptrh	equ	0xFF7
  7207                           tblptrl	equ	0xFF6
  7208                           tablat	equ	0xFF5
  7209                           prodh	equ	0xFF4
  7210                           prodl	equ	0xFF3
  7211                           postinc0	equ	0xFEE
  7212                           plusw0	equ	0xFEB
  7213                           wreg	equ	0xFE8
  7214                           indf1	equ	0xFE7
  7215                           postdec1	equ	0xFE5
  7216                           fsr1h	equ	0xFE2
  7217                           fsr1l	equ	0xFE1
  7218                           indf2	equ	0xFDF
  7219                           postinc2	equ	0xFDE
  7220                           postdec2	equ	0xFDD
  7221                           plusw2	equ	0xFDB
  7222                           fsr2h	equ	0xFDA
  7223                           fsr2l	equ	0xFD9
  7224                           status	equ	0xFD8
  7225                           
  7226 ;; *************** function _isalpha *****************
  7227 ;; Defined at:
  7228 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  7229 ;; Parameters:    Size  Location     Type
  7230 ;;  c               1    wreg     unsigned char 
  7231 ;; Auto vars:     Size  Location     Type
  7232 ;;  c               1   28[COMRAM] unsigned char 
  7233 ;; Return value:  Size  Location     Type
  7234 ;;		None               void
  7235 ;; Registers used:
  7236 ;;		wreg, status,2, status,0, cstack
  7237 ;; Tracked objects:
  7238 ;;		On entry : 0/0
  7239 ;;		On exit  : 0/0
  7240 ;;		Unchanged: 0/0
  7241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7242 ;;      Params:         0       0       0       0       0       0       0
  7243 ;;      Locals:         2       0       0       0       0       0       0
  7244 ;;      Temps:          1       0       0       0       0       0       0
  7245 ;;      Totals:         3       0       0       0       0       0       0
  7246 ;;Total ram usage:        3 bytes
  7247 ;; Hardware stack levels used:    1
  7248 ;; Hardware stack levels required when called:    5
  7249 ;; This function calls:
  7250 ;;		_isupper
  7251 ;; This function is called by:
  7252 ;;		_strtol
  7253 ;; This function uses a non-reentrant model
  7254 ;;
  7255                           
  7256                           	psect	text25
  7257  004130                     __ptext25:
  7258                           	opt stack 0
  7259  004130                     _isalpha:
  7260                           	opt stack 20
  7261                           
  7262                           ;incstack = 0
  7263                           ;isalpha@c stored from wreg
  7264  004130  6E1D               	movwf	isalpha@c,c
  7265  004132  0E01               	movlw	1
  7266  004134  6E1C               	movwf	_isalpha$3326,c
  7267  004136  0E7B               	movlw	123
  7268  004138  601D               	cpfslt	isalpha@c,c
  7269  00413A  D003               	goto	u7660
  7270  00413C  0E61               	movlw	97
  7271  00413E  601D               	cpfslt	isalpha@c,c
  7272  004140  D007               	goto	l2276
  7273  004142                     u7660:
  7274  004142  501D               	movf	isalpha@c,w,c
  7275  004144  EC49  F021         	call	_isupper
  7276  004148  B0D8               	btfsc	status,0,c
  7277  00414A  D002               	goto	l2276
  7278  00414C  0E00               	movlw	0
  7279  00414E  6E1C               	movwf	_isalpha$3326,c
  7280  004150                     l2276:
  7281  004150  C01C  F01B         	movff	_isalpha$3326,??_isalpha
  7282  004154  301B               	rrcf	??_isalpha,w,c
  7283  004156  0012               	return	
  7284  004158                     __end_of_isalpha:
  7285                           	opt stack 0
  7286                           tosu	equ	0xFFF
  7287                           tosh	equ	0xFFE
  7288                           tosl	equ	0xFFD
  7289                           pclath	equ	0xFFA
  7290                           tblptru	equ	0xFF8
  7291                           tblptrh	equ	0xFF7
  7292                           tblptrl	equ	0xFF6
  7293                           tablat	equ	0xFF5
  7294                           prodh	equ	0xFF4
  7295                           prodl	equ	0xFF3
  7296                           postinc0	equ	0xFEE
  7297                           plusw0	equ	0xFEB
  7298                           wreg	equ	0xFE8
  7299                           indf1	equ	0xFE7
  7300                           postdec1	equ	0xFE5
  7301                           fsr1h	equ	0xFE2
  7302                           fsr1l	equ	0xFE1
  7303                           indf2	equ	0xFDF
  7304                           postinc2	equ	0xFDE
  7305                           postdec2	equ	0xFDD
  7306                           plusw2	equ	0xFDB
  7307                           fsr2h	equ	0xFDA
  7308                           fsr2l	equ	0xFD9
  7309                           status	equ	0xFD8
  7310                           
  7311 ;; *************** function _isupper *****************
  7312 ;; Defined at:
  7313 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  7314 ;; Parameters:    Size  Location     Type
  7315 ;;  c               1    wreg     unsigned char 
  7316 ;; Auto vars:     Size  Location     Type
  7317 ;;  c               1   25[COMRAM] unsigned char 
  7318 ;; Return value:  Size  Location     Type
  7319 ;;		None               void
  7320 ;; Registers used:
  7321 ;;		wreg, status,2, status,0
  7322 ;; Tracked objects:
  7323 ;;		On entry : 0/0
  7324 ;;		On exit  : 0/0
  7325 ;;		Unchanged: 0/0
  7326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7327 ;;      Params:         0       0       0       0       0       0       0
  7328 ;;      Locals:         2       0       0       0       0       0       0
  7329 ;;      Temps:          1       0       0       0       0       0       0
  7330 ;;      Totals:         3       0       0       0       0       0       0
  7331 ;;Total ram usage:        3 bytes
  7332 ;; Hardware stack levels used:    1
  7333 ;; Hardware stack levels required when called:    4
  7334 ;; This function calls:
  7335 ;;		Nothing
  7336 ;; This function is called by:
  7337 ;;		_isalpha
  7338 ;; This function uses a non-reentrant model
  7339 ;;
  7340                           
  7341                           	psect	text26
  7342  004292                     __ptext26:
  7343                           	opt stack 0
  7344  004292                     _isupper:
  7345                           	opt stack 20
  7346                           
  7347                           ;incstack = 0
  7348                           ;isupper@c stored from wreg
  7349  004292  6E1A               	movwf	isupper@c,c
  7350  004294  0E00               	movlw	0
  7351  004296  6E19               	movwf	_isupper$3335,c
  7352  004298  0E5B               	movlw	91
  7353  00429A  601A               	cpfslt	isupper@c,c
  7354  00429C  D005               	goto	l2291
  7355  00429E  0E40               	movlw	64
  7356  0042A0  641A               	cpfsgt	isupper@c,c
  7357  0042A2  D002               	goto	l2291
  7358  0042A4  0E01               	movlw	1
  7359  0042A6  6E19               	movwf	_isupper$3335,c
  7360  0042A8                     l2291:
  7361  0042A8  C019  F018         	movff	_isupper$3335,??_isupper
  7362  0042AC  3018               	rrcf	??_isupper,w,c
  7363  0042AE  0012               	return	
  7364  0042B0                     __end_of_isupper:
  7365                           	opt stack 0
  7366                           tosu	equ	0xFFF
  7367                           tosh	equ	0xFFE
  7368                           tosl	equ	0xFFD
  7369                           pclath	equ	0xFFA
  7370                           tblptru	equ	0xFF8
  7371                           tblptrh	equ	0xFF7
  7372                           tblptrl	equ	0xFF6
  7373                           tablat	equ	0xFF5
  7374                           prodh	equ	0xFF4
  7375                           prodl	equ	0xFF3
  7376                           postinc0	equ	0xFEE
  7377                           plusw0	equ	0xFEB
  7378                           wreg	equ	0xFE8
  7379                           indf1	equ	0xFE7
  7380                           postdec1	equ	0xFE5
  7381                           fsr1h	equ	0xFE2
  7382                           fsr1l	equ	0xFE1
  7383                           indf2	equ	0xFDF
  7384                           postinc2	equ	0xFDE
  7385                           postdec2	equ	0xFDD
  7386                           plusw2	equ	0xFDB
  7387                           fsr2h	equ	0xFDA
  7388                           fsr2l	equ	0xFD9
  7389                           status	equ	0xFD8
  7390                           
  7391 ;; *************** function _DacReadValue *****************
  7392 ;; Defined at:
  7393 ;;		line 44 in file "DacApp.c"
  7394 ;; Parameters:    Size  Location     Type
  7395 ;;  data            2  104[BANK0 ] PTR unsigned char 
  7396 ;;		 -> rxMsgData(20), 
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;  byteIdx         2  120[BANK0 ] int 
  7399 ;;  TxMsg           7  113[BANK0 ] unsigned char [7]
  7400 ;;  readVal         2  110[BANK0 ] unsigned int 
  7401 ;;  dacIndex        1  112[BANK0 ] unsigned char 
  7402 ;;  byteNum         1  109[BANK0 ] unsigned char 
  7403 ;;  regNum          1  108[BANK0 ] unsigned char 
  7404 ;; Return value:  Size  Location     Type
  7405 ;;                  1    wreg      void 
  7406 ;; Registers used:
  7407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7408 ;; Tracked objects:
  7409 ;;		On entry : 0/0
  7410 ;;		On exit  : 0/0
  7411 ;;		Unchanged: 0/0
  7412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7413 ;;      Params:         0       2       0       0       0       0       0
  7414 ;;      Locals:         0      14       0       0       0       0       0
  7415 ;;      Temps:          0       2       0       0       0       0       0
  7416 ;;      Totals:         0      18       0       0       0       0       0
  7417 ;;Total ram usage:       18 bytes
  7418 ;; Hardware stack levels used:    1
  7419 ;; Hardware stack levels required when called:   10
  7420 ;; This function calls:
  7421 ;;		_ReadIntFromEeprom
  7422 ;;		_WriteUartMessage
  7423 ;;		_ZeroArray
  7424 ;;		_crc8
  7425 ;;		_make8
  7426 ;; This function is called by:
  7427 ;;		_GroupDAC
  7428 ;; This function uses a non-reentrant model
  7429 ;;
  7430                           
  7431                           	psect	text27
  7432  0027D0                     __ptext27:
  7433                           	opt stack 0
  7434  0027D0                     _DacReadValue:
  7435                           	opt stack 18
  7436                           
  7437                           ;DacApp.c: 46: uint16_t readVal;
  7438                           ;DacApp.c: 47: uint8_t regNum = 0, byteNum = 0;
  7439                           
  7440                           ;incstack = 0
  7441  0027D0  0E00               	movlw	0
  7442  0027D2  0100               	movlb	0	; () banked
  7443  0027D4  6FCC               	movwf	DacReadValue@regNum& (0+255),b
  7444  0027D6  0E00               	movlw	0
  7445  0027D8  6FCD               	movwf	DacReadValue@byteNum& (0+255),b
  7446                           
  7447                           ; BSR set to: 0
  7448                           ;DacApp.c: 48: char TxMsg[2 + (0x4) + 1];
  7449                           ;DacApp.c: 49: ZeroArray(TxMsg, 2 + (0x4) + 1);
  7450  0027DA  0ED1               	movlw	low DacReadValue@TxMsg
  7451  0027DC  6E20               	movwf	ZeroArray@array,c
  7452  0027DE  0E00               	movlw	high DacReadValue@TxMsg
  7453  0027E0  6E21               	movwf	ZeroArray@array+1,c
  7454  0027E2  0E00               	movlw	0
  7455  0027E4  6E23               	movwf	ZeroArray@size+1,c
  7456  0027E6  0E07               	movlw	7
  7457  0027E8  6E22               	movwf	ZeroArray@size,c
  7458  0027EA  EC58  F021         	call	_ZeroArray	;wreg free
  7459                           
  7460                           ;DacApp.c: 52: TxMsg[(0)] = (0x24);
  7461  0027EE  0E24               	movlw	36
  7462  0027F0  0100               	movlb	0	; () banked
  7463  0027F2  6FD1               	movwf	DacReadValue@TxMsg& (0+255),b
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;DacApp.c: 53: TxMsg[(1)] = DAC_MSG;
  7467  0027F4  0E06               	movlw	6
  7468  0027F6  6FD2               	movwf	(DacReadValue@TxMsg+1)& (0+255),b
  7469                           
  7470                           ; BSR set to: 0
  7471                           ;DacApp.c: 54: TxMsg[(2)] = DAC_READ_VALUE;
  7472  0027F8  0E62               	movlw	98
  7473  0027FA  6FD3               	movwf	(DacReadValue@TxMsg+2)& (0+255),b
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;DacApp.c: 55: TxMsg[(3)] = 2;
  7477  0027FC  0E02               	movlw	2
  7478  0027FE  6FD4               	movwf	(DacReadValue@TxMsg+3)& (0+255),b
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;DacApp.c: 57: uint8_t dacIndex = data[0];
  7482  002800  C0C8  FFD9         	movff	DacReadValue@data,fsr2l
  7483  002804  C0C9  FFDA         	movff	DacReadValue@data+1,fsr2h
  7484  002808  50DF               	movf	indf2,w,c
  7485  00280A  6FD0               	movwf	DacReadValue@dacIndex& (0+255),b
  7486                           
  7487                           ; BSR set to: 0
  7488                           ;DacApp.c: 58: uint16_t readVal = ReadIntFromEeprom((0x40) | DAC_ADDRES[dacIndex], 2);
  7489  00280C  0E00               	movlw	0
  7490  00280E  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  7491  002810  0E02               	movlw	2
  7492  002812  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  7493  002814  51D0               	movf	DacReadValue@dacIndex& (0+255),w,b
  7494  002816  0D01               	mullw	1
  7495  002818  0E53               	movlw	low _DAC_ADDRES
  7496  00281A  24F3               	addwf	prodl,w,c
  7497  00281C  6EF6               	movwf	tblptrl,c
  7498  00281E  0E06               	movlw	high _DAC_ADDRES
  7499  002820  20F4               	addwfc	prodh,w,c
  7500  002822  6EF7               	movwf	tblptrh,c
  7501  002824                     	if	0	;There are less than 3 active tblptr bytes
  7502  002824                     	endif
  7503  002824  0008               	tblrd		*
  7504  002826  50F5               	movf	tablat,w,c
  7505  002828  0940               	iorlw	64
  7506  00282A  EC70  F010         	call	_ReadIntFromEeprom
  7507  00282E  C0B1  F0CE         	movff	?_ReadIntFromEeprom,DacReadValue@readVal
  7508  002832  C0B2  F0CF         	movff	?_ReadIntFromEeprom+1,DacReadValue@readVal+1
  7509                           
  7510                           ;DacApp.c: 60: for(int byteIdx = 0; byteIdx < 2; byteIdx++)
  7511  002836  0E00               	movlw	0
  7512  002838  0100               	movlb	0	; () banked
  7513  00283A  6FD9               	movwf	(DacReadValue@byteIdx+1)& (0+255),b
  7514  00283C  0E00               	movlw	0
  7515  00283E  6FD8               	movwf	DacReadValue@byteIdx& (0+255),b
  7516  002840                     l8382:
  7517                           
  7518                           ; BSR set to: 0
  7519  002840  BFD9               	btfsc	(DacReadValue@byteIdx+1)& (0+255),7,b
  7520  002842  D006               	goto	l419
  7521  002844  51D9               	movf	(DacReadValue@byteIdx+1)& (0+255),w,b
  7522  002846  E11F               	bnz	l8392
  7523  002848  0E02               	movlw	2
  7524  00284A  5DD8               	subwf	DacReadValue@byteIdx& (0+255),w,b
  7525  00284C  B0D8               	btfsc	status,0,c
  7526  00284E  D01B               	goto	u8470
  7527  002850                     l419:
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;DacApp.c: 61: {
  7531                           ;DacApp.c: 62: TxMsg[(0x4) + byteIdx] = make8(readVal, byteIdx);
  7532                           
  7533                           ; BSR set to: 0
  7534  002850  0E04               	movlw	4
  7535  002852  25D8               	addwf	DacReadValue@byteIdx& (0+255),w,b
  7536  002854  6FCA               	movwf	??_DacReadValue& (0+255),b
  7537  002856  0E00               	movlw	0
  7538  002858  21D9               	addwfc	(DacReadValue@byteIdx+1)& (0+255),w,b
  7539  00285A  6FCB               	movwf	(??_DacReadValue+1)& (0+255),b
  7540  00285C  0ED1               	movlw	low DacReadValue@TxMsg
  7541  00285E  25CA               	addwf	??_DacReadValue& (0+255),w,b
  7542  002860  6ED9               	movwf	fsr2l,c
  7543  002862  0E00               	movlw	high DacReadValue@TxMsg
  7544  002864  21CB               	addwfc	(??_DacReadValue+1)& (0+255),w,b
  7545  002866  6EDA               	movwf	fsr2h,c
  7546  002868  C0CE  F018         	movff	DacReadValue@readVal,make8@data
  7547  00286C  C0CF  F019         	movff	DacReadValue@readVal+1,make8@data+1
  7548  002870  6A1A               	clrf	make8@data+2,c
  7549  002872  6A1B               	clrf	make8@data+3,c
  7550  002874  C0D8  F01C         	movff	DacReadValue@byteIdx,make8@dataLocation
  7551  002878  EC52  F01C         	call	_make8	;wreg free
  7552  00287C  6EDF               	movwf	indf2,c
  7553  00287E  0100               	movlb	0	; () banked
  7554  002880  4BD8               	infsnz	DacReadValue@byteIdx& (0+255),f,b
  7555  002882  2BD9               	incf	(DacReadValue@byteIdx+1)& (0+255),f,b
  7556  002884  D7DD               	goto	l8382
  7557  002886                     u8470:
  7558  002886                     l8392:
  7559                           
  7560                           ; BSR set to: 0
  7561                           ;DacApp.c: 63: }
  7562                           ;DacApp.c: 64: TxMsg[2 + (0x4)] = crc8(TxMsg, 2 + (0x4));
  7563  002886  0ED1               	movlw	low DacReadValue@TxMsg
  7564  002888  6E18               	movwf	crc8@dataArray,c
  7565  00288A  0E00               	movlw	high DacReadValue@TxMsg
  7566  00288C  6E19               	movwf	crc8@dataArray+1,c
  7567  00288E  0E00               	movlw	0
  7568  002890  6E1B               	movwf	crc8@dataSize+1,c
  7569  002892  0E06               	movlw	6
  7570  002894  6E1A               	movwf	crc8@dataSize,c
  7571  002896  ECD9  F01D         	call	_crc8	;wreg free
  7572  00289A  0100               	movlb	0	; () banked
  7573  00289C  6FD7               	movwf	(DacReadValue@TxMsg+6)& (0+255),b
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;DacApp.c: 65: WriteUartMessage(TxMsg, 2 + (0x4) + 1);
  7577  00289E  0ED1               	movlw	low DacReadValue@TxMsg
  7578  0028A0  6E19               	movwf	WriteUartMessage@dataBuf,c
  7579  0028A2  0E00               	movlw	high DacReadValue@TxMsg
  7580  0028A4  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  7581  0028A6  0E00               	movlw	0
  7582  0028A8  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  7583  0028AA  0E07               	movlw	7
  7584  0028AC  6E1B               	movwf	WriteUartMessage@dataSize,c
  7585  0028AE  EC8B  F01F         	call	_WriteUartMessage	;wreg free
  7586  0028B2  0012               	return		;funcret
  7587  0028B4                     __end_of_DacReadValue:
  7588                           	opt stack 0
  7589                           tosu	equ	0xFFF
  7590                           tosh	equ	0xFFE
  7591                           tosl	equ	0xFFD
  7592                           pclath	equ	0xFFA
  7593                           tblptru	equ	0xFF8
  7594                           tblptrh	equ	0xFF7
  7595                           tblptrl	equ	0xFF6
  7596                           tablat	equ	0xFF5
  7597                           prodh	equ	0xFF4
  7598                           prodl	equ	0xFF3
  7599                           postinc0	equ	0xFEE
  7600                           plusw0	equ	0xFEB
  7601                           wreg	equ	0xFE8
  7602                           indf1	equ	0xFE7
  7603                           postdec1	equ	0xFE5
  7604                           fsr1h	equ	0xFE2
  7605                           fsr1l	equ	0xFE1
  7606                           indf2	equ	0xFDF
  7607                           postinc2	equ	0xFDE
  7608                           postdec2	equ	0xFDD
  7609                           plusw2	equ	0xFDB
  7610                           fsr2h	equ	0xFDA
  7611                           fsr2l	equ	0xFD9
  7612                           status	equ	0xFD8
  7613                           
  7614 ;; *************** function _testLeds *****************
  7615 ;; Defined at:
  7616 ;;		line 43 in file "LedsApp.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;		None
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;  idx             2   44[COMRAM] int 
  7621 ;; Return value:  Size  Location     Type
  7622 ;;                  1    wreg      void 
  7623 ;; Registers used:
  7624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7630 ;;      Params:         0       0       0       0       0       0       0
  7631 ;;      Locals:         2       0       0       0       0       0       0
  7632 ;;      Temps:          1       0       0       0       0       0       0
  7633 ;;      Totals:         3       0       0       0       0       0       0
  7634 ;;Total ram usage:        3 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    7
  7637 ;; This function calls:
  7638 ;;		_SendAckMessage
  7639 ;; This function is called by:
  7640 ;;		_GroupControlMcu
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           	psect	text28
  7645  00364C                     __ptext28:
  7646                           	opt stack 0
  7647  00364C                     _testLeds:
  7648                           	opt stack 21
  7649                           
  7650                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7651                           
  7652                           ;incstack = 0
  7653  00364C  0E00               	movlw	0
  7654  00364E  6E2E               	movwf	testLeds@idx+1,c
  7655  003650  0E00               	movlw	0
  7656  003652  6E2D               	movwf	testLeds@idx,c
  7657  003654                     l8202:
  7658  003654  BE2E               	btfsc	testLeds@idx+1,7,c
  7659  003656  D006               	goto	l60
  7660  003658  502E               	movf	testLeds@idx+1,w,c
  7661  00365A  E127               	bnz	l8216
  7662  00365C  0E0A               	movlw	10
  7663  00365E  5C2D               	subwf	testLeds@idx,w,c
  7664  003660  B0D8               	btfsc	status,0,c
  7665  003662  D023               	goto	u8290
  7666  003664                     l60:
  7667                           
  7668                           ;LedsApp.c: 47: {
  7669                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7670  003664  808B               	bsf	3979,0,c	;volatile
  7671                           
  7672                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7673  003666  0E82               	movlw	130
  7674  003668  6E2C               	movwf	??_testLeds& (0+255),c
  7675  00366A  0EDE               	movlw	222
  7676  00366C                     u9147:
  7677  00366C  2EE8               	decfsz	wreg,f,c
  7678  00366E  D7FE               	bra	u9147
  7679  003670  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7680  003672  D7FC               	bra	u9147
  7681                           
  7682                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7683  003674  888A               	bsf	3978,4,c	;volatile
  7684                           
  7685                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7686  003676  0E82               	movlw	130
  7687  003678  6E2C               	movwf	??_testLeds& (0+255),c
  7688  00367A  0EDE               	movlw	222
  7689  00367C                     u9157:
  7690  00367C  2EE8               	decfsz	wreg,f,c
  7691  00367E  D7FE               	bra	u9157
  7692  003680  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7693  003682  D7FC               	bra	u9157
  7694                           
  7695                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7696  003684  908B               	bcf	3979,0,c	;volatile
  7697                           
  7698                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7699  003686  0E82               	movlw	130
  7700  003688  6E2C               	movwf	??_testLeds& (0+255),c
  7701  00368A  0EDE               	movlw	222
  7702  00368C                     u9167:
  7703  00368C  2EE8               	decfsz	wreg,f,c
  7704  00368E  D7FE               	bra	u9167
  7705  003690  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7706  003692  D7FC               	bra	u9167
  7707                           
  7708                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7709  003694  988A               	bcf	3978,4,c	;volatile
  7710                           
  7711                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7712  003696  0E82               	movlw	130
  7713  003698  6E2C               	movwf	??_testLeds& (0+255),c
  7714  00369A  0EDE               	movlw	222
  7715  00369C                     u9177:
  7716  00369C  2EE8               	decfsz	wreg,f,c
  7717  00369E  D7FE               	bra	u9177
  7718  0036A0  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7719  0036A2  D7FC               	bra	u9177
  7720  0036A4  4A2D               	infsnz	testLeds@idx,f,c
  7721  0036A6  2A2E               	incf	testLeds@idx+1,f,c
  7722  0036A8  D7D5               	goto	l8202
  7723  0036AA                     u8290:
  7724  0036AA                     l8216:
  7725                           
  7726                           ;LedsApp.c: 57: }
  7727                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  7728  0036AA  0E14               	movlw	20
  7729  0036AC  6E24               	movwf	SendAckMessage@inRequest,c
  7730  0036AE  0E01               	movlw	1
  7731  0036B0  ECB0  F01D         	call	_SendAckMessage
  7732  0036B4  0012               	return	
  7733  0036B6                     __end_of_testLeds:
  7734                           	opt stack 0
  7735                           tosu	equ	0xFFF
  7736                           tosh	equ	0xFFE
  7737                           tosl	equ	0xFFD
  7738                           pclath	equ	0xFFA
  7739                           tblptru	equ	0xFF8
  7740                           tblptrh	equ	0xFF7
  7741                           tblptrl	equ	0xFF6
  7742                           tablat	equ	0xFF5
  7743                           prodh	equ	0xFF4
  7744                           prodl	equ	0xFF3
  7745                           postinc0	equ	0xFEE
  7746                           plusw0	equ	0xFEB
  7747                           wreg	equ	0xFE8
  7748                           indf1	equ	0xFE7
  7749                           postdec1	equ	0xFE5
  7750                           fsr1h	equ	0xFE2
  7751                           fsr1l	equ	0xFE1
  7752                           indf2	equ	0xFDF
  7753                           postinc2	equ	0xFDE
  7754                           postdec2	equ	0xFDD
  7755                           plusw2	equ	0xFDB
  7756                           fsr2h	equ	0xFDA
  7757                           fsr2l	equ	0xFD9
  7758                           status	equ	0xFD8
  7759                           
  7760 ;; *************** function _ResetMcu *****************
  7761 ;; Defined at:
  7762 ;;		line 144 in file "SystemCommon.c"
  7763 ;; Parameters:    Size  Location     Type
  7764 ;;		None
  7765 ;; Auto vars:     Size  Location     Type
  7766 ;;		None
  7767 ;; Return value:  Size  Location     Type
  7768 ;;                  1    wreg      void 
  7769 ;; Registers used:
  7770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7771 ;; Tracked objects:
  7772 ;;		On entry : 0/0
  7773 ;;		On exit  : 0/0
  7774 ;;		Unchanged: 0/0
  7775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7776 ;;      Params:         0       0       0       0       0       0       0
  7777 ;;      Locals:         0       0       0       0       0       0       0
  7778 ;;      Temps:          0       0       0       0       0       0       0
  7779 ;;      Totals:         0       0       0       0       0       0       0
  7780 ;;Total ram usage:        0 bytes
  7781 ;; Hardware stack levels used:    1
  7782 ;; Hardware stack levels required when called:    7
  7783 ;; This function calls:
  7784 ;;		_SendAckMessage
  7785 ;; This function is called by:
  7786 ;;		_GroupControlMcu
  7787 ;; This function uses a non-reentrant model
  7788 ;;
  7789                           
  7790                           	psect	text29
  7791  0043D2                     __ptext29:
  7792                           	opt stack 0
  7793  0043D2                     _ResetMcu:
  7794                           	opt stack 21
  7795                           
  7796                           ;SystemCommon.c: 147: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  7797                           
  7798                           ;incstack = 0
  7799  0043D2  0E11               	movlw	17
  7800  0043D4  6E24               	movwf	SendAckMessage@inRequest,c
  7801  0043D6  0E01               	movlw	1
  7802  0043D8  ECB0  F01D         	call	_SendAckMessage
  7803  0043DC  00FF               	reset		;# 
  7804  0043DE  0012               	return		;funcret
  7805  0043E0                     __end_of_ResetMcu:
  7806                           	opt stack 0
  7807                           tosu	equ	0xFFF
  7808                           tosh	equ	0xFFE
  7809                           tosl	equ	0xFFD
  7810                           pclath	equ	0xFFA
  7811                           tblptru	equ	0xFF8
  7812                           tblptrh	equ	0xFF7
  7813                           tblptrl	equ	0xFF6
  7814                           tablat	equ	0xFF5
  7815                           prodh	equ	0xFF4
  7816                           prodl	equ	0xFF3
  7817                           postinc0	equ	0xFEE
  7818                           plusw0	equ	0xFEB
  7819                           wreg	equ	0xFE8
  7820                           indf1	equ	0xFE7
  7821                           postdec1	equ	0xFE5
  7822                           fsr1h	equ	0xFE2
  7823                           fsr1l	equ	0xFE1
  7824                           indf2	equ	0xFDF
  7825                           postinc2	equ	0xFDE
  7826                           postdec2	equ	0xFDD
  7827                           plusw2	equ	0xFDB
  7828                           fsr2h	equ	0xFDA
  7829                           fsr2l	equ	0xFD9
  7830                           status	equ	0xFD8
  7831                           
  7832 ;; *************** function _SetChannelMode *****************
  7833 ;; Defined at:
  7834 ;;		line 30 in file "AdcApp.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;  data            2   43[COMRAM] PTR unsigned char 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;		None
  7839 ;; Return value:  Size  Location     Type
  7840 ;;                  1    wreg      void 
  7841 ;; Registers used:
  7842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7848 ;;      Params:         2       0       0       0       0       0       0
  7849 ;;      Locals:         0       0       0       0       0       0       0
  7850 ;;      Temps:          0       0       0       0       0       0       0
  7851 ;;      Totals:         2       0       0       0       0       0       0
  7852 ;;Total ram usage:        2 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; Hardware stack levels required when called:    7
  7855 ;; This function calls:
  7856 ;;		_SendAckMessage
  7857 ;; This function is called by:
  7858 ;;		_GroupAdc
  7859 ;; This function uses a non-reentrant model
  7860 ;;
  7861                           
  7862                           	psect	text30
  7863  00404E                     __ptext30:
  7864                           	opt stack 0
  7865  00404E                     _SetChannelMode:
  7866                           	opt stack 21
  7867                           
  7868                           ;AdcApp.c: 32: adcSampleMode = data[0];
  7869                           
  7870                           ;incstack = 0
  7871  00404E  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7872  004052  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7873  004056  50DF               	movf	indf2,w,c
  7874  004058  6E3D               	movwf	_adcSampleMode,c
  7875                           
  7876                           ;AdcApp.c: 33: if (adcSampleMode == SINGLE_CHANNEL)
  7877  00405A  043D               	decf	_adcSampleMode,w,c
  7878  00405C  A4D8               	btfss	status,2,c
  7879  00405E  D009               	goto	l122
  7880                           
  7881                           ;AdcApp.c: 34: {
  7882                           ;AdcApp.c: 35: channel = data[1];
  7883  004060  EE20 F001          	lfsr	2,1
  7884  004064  502C               	movf	SetChannelMode@data,w,c
  7885  004066  26D9               	addwf	fsr2l,f,c
  7886  004068  502D               	movf	SetChannelMode@data+1,w,c
  7887  00406A  22DA               	addwfc	fsr2h,f,c
  7888  00406C  50DF               	movf	indf2,w,c
  7889  00406E  0100               	movlb	0	; () banked
  7890  004070  6FF6               	movwf	_channel& (0+255),b
  7891  004072                     l122:
  7892                           
  7893                           ;AdcApp.c: 36: }
  7894                           ;AdcApp.c: 37: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7895                           
  7896                           ; BSR set to: 0
  7897  004072  0E32               	movlw	50
  7898  004074  6E24               	movwf	SendAckMessage@inRequest,c
  7899  004076  0E03               	movlw	3
  7900  004078  ECB0  F01D         	call	_SendAckMessage
  7901  00407C  0012               	return		;funcret
  7902  00407E                     __end_of_SetChannelMode:
  7903                           	opt stack 0
  7904                           tosu	equ	0xFFF
  7905                           tosh	equ	0xFFE
  7906                           tosl	equ	0xFFD
  7907                           pclath	equ	0xFFA
  7908                           tblptru	equ	0xFF8
  7909                           tblptrh	equ	0xFF7
  7910                           tblptrl	equ	0xFF6
  7911                           tablat	equ	0xFF5
  7912                           prodh	equ	0xFF4
  7913                           prodl	equ	0xFF3
  7914                           postinc0	equ	0xFEE
  7915                           plusw0	equ	0xFEB
  7916                           wreg	equ	0xFE8
  7917                           indf1	equ	0xFE7
  7918                           postdec1	equ	0xFE5
  7919                           fsr1h	equ	0xFE2
  7920                           fsr1l	equ	0xFE1
  7921                           indf2	equ	0xFDF
  7922                           postinc2	equ	0xFDE
  7923                           postdec2	equ	0xFDD
  7924                           plusw2	equ	0xFDB
  7925                           fsr2h	equ	0xFDA
  7926                           fsr2l	equ	0xFD9
  7927                           status	equ	0xFD8
  7928                           
  7929 ;; *************** function _EUSART1_Read *****************
  7930 ;; Defined at:
  7931 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;		None
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;  readValue       2   24[COMRAM] unsigned int 
  7936 ;; Return value:  Size  Location     Type
  7937 ;;                  1    wreg      unsigned char 
  7938 ;; Registers used:
  7939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7940 ;; Tracked objects:
  7941 ;;		On entry : 0/0
  7942 ;;		On exit  : 0/0
  7943 ;;		Unchanged: 0/0
  7944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7945 ;;      Params:         0       0       0       0       0       0       0
  7946 ;;      Locals:         2       0       0       0       0       0       0
  7947 ;;      Temps:          1       0       0       0       0       0       0
  7948 ;;      Totals:         3       0       0       0       0       0       0
  7949 ;;Total ram usage:        3 bytes
  7950 ;; Hardware stack levels used:    1
  7951 ;; Hardware stack levels required when called:    4
  7952 ;; This function calls:
  7953 ;;		Nothing
  7954 ;; This function is called by:
  7955 ;;		_readUartMessage
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           	psect	text31
  7960  003C00                     __ptext31:
  7961                           	opt stack 0
  7962  003C00                     _EUSART1_Read:
  7963                           	opt stack 25
  7964                           
  7965                           ;eusart1.c: 112: uint16_t readValue = 0;
  7966                           
  7967                           ;incstack = 0
  7968  003C00  0E00               	movlw	0
  7969  003C02  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7970  003C04  0E00               	movlw	0
  7971  003C06  6E19               	movwf	EUSART1_Read@readValue,c
  7972                           
  7973                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7974  003C08  0100               	movlb	0	; () banked
  7975  003C0A  51F5               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7976  003C0C  A4D8               	btfss	status,2,c
  7977  003C0E  D002               	goto	l900
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;eusart1.c: 120: {
  7981                           ;eusart1.c: 121: return readValue;
  7982  003C10  5019               	movf	EUSART1_Read@readValue,w,c
  7983                           
  7984                           ; BSR set to: 0
  7985  003C12  0012               	return	
  7986  003C14                     l900:
  7987                           
  7988                           ; BSR set to: 0
  7989                           ;eusart1.c: 122: }
  7990                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7991                           
  7992                           ; BSR set to: 0
  7993  003C14  5033               	movf	_eusart1RxTail,w,c	;volatile
  7994  003C16  0D01               	mullw	1
  7995  003C18  0E00               	movlw	low _eusart1RxBuffer
  7996  003C1A  24F3               	addwf	prodl,w,c
  7997  003C1C  6ED9               	movwf	fsr2l,c
  7998  003C1E  0E01               	movlw	high _eusart1RxBuffer
  7999  003C20  20F4               	addwfc	prodh,w,c
  8000  003C22  6EDA               	movwf	fsr2h,c
  8001  003C24  50DF               	movf	indf2,w,c
  8002  003C26  6E18               	movwf	??_EUSART1_Read& (0+255),c
  8003  003C28  5018               	movf	??_EUSART1_Read,w,c
  8004  003C2A  6E19               	movwf	EUSART1_Read@readValue,c
  8005  003C2C  6A1A               	clrf	EUSART1_Read@readValue+1,c
  8006                           
  8007                           ; BSR set to: 0
  8008  003C2E  2A33               	incf	_eusart1RxTail,f,c	;volatile
  8009                           
  8010                           ; BSR set to: 0
  8011                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  8012  003C30  0E27               	movlw	39
  8013  003C32  6433               	cpfsgt	_eusart1RxTail,c	;volatile
  8014  003C34  D002               	goto	l902
  8015                           
  8016                           ; BSR set to: 0
  8017                           ;eusart1.c: 126: {
  8018                           ;eusart1.c: 127: eusart1RxTail = 0;
  8019  003C36  0E00               	movlw	0
  8020  003C38  6E33               	movwf	_eusart1RxTail,c	;volatile
  8021  003C3A                     l902:
  8022                           
  8023                           ; BSR set to: 0
  8024                           ;eusart1.c: 128: }
  8025                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  8026                           
  8027                           ; BSR set to: 0
  8028  003C3A  9A9D               	bcf	3997,5,c	;volatile
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;eusart1.c: 130: eusart1RxCount--;
  8032  003C3C  07F5               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  8033                           
  8034                           ; BSR set to: 0
  8035                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  8036  003C3E  8A9D               	bsf	3997,5,c	;volatile
  8037                           
  8038                           ; BSR set to: 0
  8039                           ;eusart1.c: 133: return readValue;
  8040  003C40  5019               	movf	EUSART1_Read@readValue,w,c
  8041  003C42  0012               	return	
  8042  003C44                     __end_of_EUSART1_Read:
  8043                           	opt stack 0
  8044                           tosu	equ	0xFFF
  8045                           tosh	equ	0xFFE
  8046                           tosl	equ	0xFFD
  8047                           pclath	equ	0xFFA
  8048                           tblptru	equ	0xFF8
  8049                           tblptrh	equ	0xFF7
  8050                           tblptrl	equ	0xFF6
  8051                           tablat	equ	0xFF5
  8052                           prodh	equ	0xFF4
  8053                           prodl	equ	0xFF3
  8054                           postinc0	equ	0xFEE
  8055                           plusw0	equ	0xFEB
  8056                           wreg	equ	0xFE8
  8057                           indf1	equ	0xFE7
  8058                           postdec1	equ	0xFE5
  8059                           fsr1h	equ	0xFE2
  8060                           fsr1l	equ	0xFE1
  8061                           indf2	equ	0xFDF
  8062                           postinc2	equ	0xFDE
  8063                           postdec2	equ	0xFDD
  8064                           plusw2	equ	0xFDB
  8065                           fsr2h	equ	0xFDA
  8066                           fsr2l	equ	0xFD9
  8067                           status	equ	0xFD8
  8068                           
  8069 ;; *************** function _keepAliveSignalUart *****************
  8070 ;; Defined at:
  8071 ;;		line 93 in file "SystemStatus.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;		None
  8074 ;; Auto vars:     Size  Location     Type
  8075 ;;		None
  8076 ;; Return value:  Size  Location     Type
  8077 ;;                  1    wreg      void 
  8078 ;; Registers used:
  8079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8080 ;; Tracked objects:
  8081 ;;		On entry : 0/0
  8082 ;;		On exit  : 0/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8085 ;;      Params:         0       0       0       0       0       0       0
  8086 ;;      Locals:         0       0       0       0       0       0       0
  8087 ;;      Temps:          0       0       0       0       0       0       0
  8088 ;;      Totals:         0       0       0       0       0       0       0
  8089 ;;Total ram usage:        0 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; Hardware stack levels required when called:    7
  8092 ;; This function calls:
  8093 ;;		_SendAckMessage
  8094 ;; This function is called by:
  8095 ;;		_main
  8096 ;; This function uses a non-reentrant model
  8097 ;;
  8098                           
  8099                           	psect	text32
  8100  00440A                     __ptext32:
  8101                           	opt stack 0
  8102  00440A                     _keepAliveSignalUart:
  8103                           	opt stack 23
  8104                           
  8105                           ;SystemStatus.c: 95: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_A
      +                          LIVE);
  8106                           
  8107                           ; BSR set to: 0
  8108                           ;incstack = 0
  8109  00440A  0E15               	movlw	21
  8110  00440C  6E24               	movwf	SendAckMessage@inRequest,c
  8111  00440E  0E01               	movlw	1
  8112  004410  ECB0  F01D         	call	_SendAckMessage
  8113  004414  0012               	return		;funcret
  8114  004416                     __end_of_keepAliveSignalUart:
  8115                           	opt stack 0
  8116                           tosu	equ	0xFFF
  8117                           tosh	equ	0xFFE
  8118                           tosl	equ	0xFFD
  8119                           pclath	equ	0xFFA
  8120                           tblptru	equ	0xFF8
  8121                           tblptrh	equ	0xFF7
  8122                           tblptrl	equ	0xFF6
  8123                           tablat	equ	0xFF5
  8124                           prodh	equ	0xFF4
  8125                           prodl	equ	0xFF3
  8126                           postinc0	equ	0xFEE
  8127                           plusw0	equ	0xFEB
  8128                           wreg	equ	0xFE8
  8129                           indf1	equ	0xFE7
  8130                           postdec1	equ	0xFE5
  8131                           fsr1h	equ	0xFE2
  8132                           fsr1l	equ	0xFE1
  8133                           indf2	equ	0xFDF
  8134                           postinc2	equ	0xFDE
  8135                           postdec2	equ	0xFDD
  8136                           plusw2	equ	0xFDB
  8137                           fsr2h	equ	0xFDA
  8138                           fsr2l	equ	0xFD9
  8139                           status	equ	0xFD8
  8140                           
  8141 ;; *************** function _keepAliveSignalLed *****************
  8142 ;; Defined at:
  8143 ;;		line 35 in file "LedsApp.c"
  8144 ;; Parameters:    Size  Location     Type
  8145 ;;		None
  8146 ;; Auto vars:     Size  Location     Type
  8147 ;;		None
  8148 ;; Return value:  Size  Location     Type
  8149 ;;                  1    wreg      void 
  8150 ;; Registers used:
  8151 ;;		wreg, status,2, status,0
  8152 ;; Tracked objects:
  8153 ;;		On entry : 0/0
  8154 ;;		On exit  : 0/0
  8155 ;;		Unchanged: 0/0
  8156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8157 ;;      Params:         0       0       0       0       0       0       0
  8158 ;;      Locals:         0       0       0       0       0       0       0
  8159 ;;      Temps:          1       0       0       0       0       0       0
  8160 ;;      Totals:         1       0       0       0       0       0       0
  8161 ;;Total ram usage:        1 bytes
  8162 ;; Hardware stack levels used:    1
  8163 ;; Hardware stack levels required when called:    4
  8164 ;; This function calls:
  8165 ;;		Nothing
  8166 ;; This function is called by:
  8167 ;;		_main
  8168 ;; This function uses a non-reentrant model
  8169 ;;
  8170                           
  8171                           	psect	text33
  8172  004320                     __ptext33:
  8173                           	opt stack 0
  8174  004320                     _keepAliveSignalLed:
  8175                           	opt stack 26
  8176                           
  8177                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  8178                           
  8179                           ;incstack = 0
  8180  004320  B08B               	btfsc	3979,0,c	;volatile
  8181  004322  D003               	goto	u5860
  8182  004324  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8183  004326  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  8184  004328  D001               	goto	u5878
  8185  00432A                     u5860:
  8186  00432A  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8187  00432C                     u5878:
  8188  00432C  508B               	movf	3979,w,c	;volatile
  8189  00432E  1818               	xorwf	??_keepAliveSignalLed,w,c
  8190  004330  0BFE               	andlw	-2
  8191  004332  1818               	xorwf	??_keepAliveSignalLed,w,c
  8192  004334  6E8B               	movwf	3979,c	;volatile
  8193  004336  0012               	return		;funcret
  8194  004338                     __end_of_keepAliveSignalLed:
  8195                           	opt stack 0
  8196                           tosu	equ	0xFFF
  8197                           tosh	equ	0xFFE
  8198                           tosl	equ	0xFFD
  8199                           pclath	equ	0xFFA
  8200                           tblptru	equ	0xFF8
  8201                           tblptrh	equ	0xFF7
  8202                           tblptrl	equ	0xFF6
  8203                           tablat	equ	0xFF5
  8204                           prodh	equ	0xFF4
  8205                           prodl	equ	0xFF3
  8206                           postinc0	equ	0xFEE
  8207                           plusw0	equ	0xFEB
  8208                           wreg	equ	0xFE8
  8209                           indf1	equ	0xFE7
  8210                           postdec1	equ	0xFE5
  8211                           fsr1h	equ	0xFE2
  8212                           fsr1l	equ	0xFE1
  8213                           indf2	equ	0xFDF
  8214                           postinc2	equ	0xFDE
  8215                           postdec2	equ	0xFDD
  8216                           plusw2	equ	0xFDB
  8217                           fsr2h	equ	0xFDA
  8218                           fsr2l	equ	0xFD9
  8219                           status	equ	0xFD8
  8220                           
  8221 ;; *************** function _SynthLdDetect *****************
  8222 ;; Defined at:
  8223 ;;		line 221 in file "SyntApp.c"
  8224 ;; Parameters:    Size  Location     Type
  8225 ;;		None
  8226 ;; Auto vars:     Size  Location     Type
  8227 ;;		None
  8228 ;; Return value:  Size  Location     Type
  8229 ;;                  1    wreg      void 
  8230 ;; Registers used:
  8231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8232 ;; Tracked objects:
  8233 ;;		On entry : 0/0
  8234 ;;		On exit  : 0/0
  8235 ;;		Unchanged: 0/0
  8236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8237 ;;      Params:         0       0       0       0       0       0       0
  8238 ;;      Locals:         0       0       0       0       0       0       0
  8239 ;;      Temps:          0       0       0       0       0       0       0
  8240 ;;      Totals:         0       0       0       0       0       0       0
  8241 ;;Total ram usage:        0 bytes
  8242 ;; Hardware stack levels used:    1
  8243 ;; Hardware stack levels required when called:   11
  8244 ;; This function calls:
  8245 ;;		_BlinkErrorLeds
  8246 ;;		_InitSynth
  8247 ;;		___awmod
  8248 ;; This function is called by:
  8249 ;;		_main
  8250 ;; This function uses a non-reentrant model
  8251 ;;
  8252                           
  8253                           	psect	text34
  8254  002A7A                     __ptext34:
  8255                           	opt stack 0
  8256  002A7A                     _SynthLdDetect:
  8257                           	opt stack 19
  8258                           
  8259                           ;SyntApp.c: 225: if(PORTDbits.RD4 == 0)
  8260                           
  8261                           ;incstack = 0
  8262  002A7A  B883               	btfsc	3971,4,c	;volatile
  8263  002A7C  D01E               	goto	l562
  8264                           
  8265                           ;SyntApp.c: 226: {
  8266                           ;SyntApp.c: 227: if(synthLdRxCnt > 0)
  8267  002A7E  5043               	movf	_synthLdRxCnt,w,c
  8268  002A80  0A80               	xorlw	128
  8269  002A82  0F7F               	addlw	-129
  8270  002A84  A0D8               	btfss	status,0,c
  8271  002A86  D005               	goto	l563
  8272                           
  8273                           ;SyntApp.c: 228: {
  8274                           ;SyntApp.c: 229: InitSynth(SYNTH_RX);
  8275  002A88  0E01               	movlw	1
  8276  002A8A  ECA3  F006         	call	_InitSynth
  8277                           
  8278                           ;SyntApp.c: 230: synthLdRxCnt--;
  8279  002A8E  0643               	decf	_synthLdRxCnt,f,c
  8280                           
  8281                           ;SyntApp.c: 231: }
  8282  002A90  D003               	goto	l564
  8283  002A92                     l563:
  8284                           
  8285                           ;SyntApp.c: 232: else
  8286                           ;SyntApp.c: 233: {
  8287                           ;SyntApp.c: 234: BlinkErrorLeds(FAIL_SYNTH_RX_LATCH);
  8288  002A92  0E03               	movlw	3
  8289  002A94  ECF4  F01B         	call	_BlinkErrorLeds
  8290  002A98                     l564:
  8291                           
  8292                           ;SyntApp.c: 235: }
  8293                           ;SyntApp.c: 236: synthLdRxArray[synthLdRxArrayCnt++ % 12] = UNLOCK;
  8294  002A98  C038  F018         	movff	_synthLdRxArrayCnt,___awmod@dividend
  8295  002A9C  6A19               	clrf	___awmod@dividend+1,c
  8296  002A9E  0E00               	movlw	0
  8297  002AA0  6E1B               	movwf	___awmod@divisor+1,c
  8298  002AA2  0E0C               	movlw	12
  8299  002AA4  6E1A               	movwf	___awmod@divisor,c
  8300  002AA6  ECEE  F01A         	call	___awmod	;wreg free
  8301  002AAA  0EB0               	movlw	low _synthLdRxArray
  8302  002AAC  2418               	addwf	?___awmod,w,c
  8303  002AAE  6ED9               	movwf	fsr2l,c
  8304  002AB0  0E01               	movlw	high _synthLdRxArray
  8305  002AB2  2019               	addwfc	?___awmod+1,w,c
  8306  002AB4  6EDA               	movwf	fsr2h,c
  8307  002AB6  0E00               	movlw	0
  8308  002AB8  D012               	goto	L3
  8309  002ABA                     l562:
  8310                           
  8311                           ;SyntApp.c: 238: else
  8312                           ;SyntApp.c: 239: {
  8313                           ;SyntApp.c: 240: synthLdRxCnt = 2;
  8314  002ABA  0E02               	movlw	2
  8315  002ABC  6E43               	movwf	_synthLdRxCnt,c
  8316                           
  8317                           ;SyntApp.c: 241: synthLdRxArray[synthLdRxArrayCnt++ % 12] = LOCK;
  8318  002ABE  C038  F018         	movff	_synthLdRxArrayCnt,___awmod@dividend
  8319  002AC2  6A19               	clrf	___awmod@dividend+1,c
  8320  002AC4  0E00               	movlw	0
  8321  002AC6  6E1B               	movwf	___awmod@divisor+1,c
  8322  002AC8  0E0C               	movlw	12
  8323  002ACA  6E1A               	movwf	___awmod@divisor,c
  8324  002ACC  ECEE  F01A         	call	___awmod	;wreg free
  8325  002AD0  0EB0               	movlw	low _synthLdRxArray
  8326  002AD2  2418               	addwf	?___awmod,w,c
  8327  002AD4  6ED9               	movwf	fsr2l,c
  8328  002AD6  0E01               	movlw	high _synthLdRxArray
  8329  002AD8  2019               	addwfc	?___awmod+1,w,c
  8330  002ADA  6EDA               	movwf	fsr2h,c
  8331  002ADC  0E01               	movlw	1
  8332  002ADE                     L3:
  8333  002ADE  6EDF               	movwf	indf2,c
  8334  002AE0  2A38               	incf	_synthLdRxArrayCnt,f,c
  8335                           
  8336                           ;SyntApp.c: 242: }
  8337                           ;SyntApp.c: 247: if(PORTDbits.RD1 == 0)
  8338  002AE2  B283               	btfsc	3971,1,c	;volatile
  8339  002AE4  D020               	goto	l566
  8340                           
  8341                           ;SyntApp.c: 248: {
  8342                           ;SyntApp.c: 249: if(synthLdTxCnt > 0)
  8343  002AE6  5042               	movf	_synthLdTxCnt,w,c
  8344  002AE8  0A80               	xorlw	128
  8345  002AEA  0F7F               	addlw	-129
  8346  002AEC  A0D8               	btfss	status,0,c
  8347  002AEE  D005               	goto	l567
  8348                           
  8349                           ;SyntApp.c: 250: {
  8350                           ;SyntApp.c: 251: InitSynth(SYNTH_TX);
  8351  002AF0  0E00               	movlw	0
  8352  002AF2  ECA3  F006         	call	_InitSynth
  8353                           
  8354                           ;SyntApp.c: 252: synthLdTxCnt--;
  8355  002AF6  0642               	decf	_synthLdTxCnt,f,c
  8356                           
  8357                           ;SyntApp.c: 253: }
  8358  002AF8  D003               	goto	l568
  8359  002AFA                     l567:
  8360                           
  8361                           ;SyntApp.c: 254: else
  8362                           ;SyntApp.c: 255: {
  8363                           ;SyntApp.c: 256: BlinkErrorLeds(FAIL_SYNTH_TX_LATCH);
  8364  002AFA  0E04               	movlw	4
  8365  002AFC  ECF4  F01B         	call	_BlinkErrorLeds
  8366  002B00                     l568:
  8367                           
  8368                           ;SyntApp.c: 257: }
  8369                           ;SyntApp.c: 258: synthLdTxArray[synthLdTxArrayCnt++ % 12] = UNLOCK;
  8370  002B00  C037  F018         	movff	_synthLdTxArrayCnt,___awmod@dividend
  8371  002B04  6A19               	clrf	___awmod@dividend+1,c
  8372  002B06  0E00               	movlw	0
  8373  002B08  6E1B               	movwf	___awmod@divisor+1,c
  8374  002B0A  0E0C               	movlw	12
  8375  002B0C  6E1A               	movwf	___awmod@divisor,c
  8376  002B0E  ECEE  F01A         	call	___awmod	;wreg free
  8377  002B12  0EA4               	movlw	low _synthLdTxArray
  8378  002B14  2418               	addwf	?___awmod,w,c
  8379  002B16  6ED9               	movwf	fsr2l,c
  8380  002B18  0E01               	movlw	high _synthLdTxArray
  8381  002B1A  2019               	addwfc	?___awmod+1,w,c
  8382  002B1C  6EDA               	movwf	fsr2h,c
  8383  002B1E  0E00               	movlw	0
  8384  002B20  6EDF               	movwf	indf2,c
  8385  002B22  2A37               	incf	_synthLdTxArrayCnt,f,c
  8386                           
  8387                           ;SyntApp.c: 259: }
  8388  002B24  0012               	return	
  8389  002B26                     l566:
  8390                           
  8391                           ;SyntApp.c: 260: else
  8392                           ;SyntApp.c: 261: {
  8393                           ;SyntApp.c: 262: synthLdTxCnt = 2;
  8394  002B26  0E02               	movlw	2
  8395  002B28  6E42               	movwf	_synthLdTxCnt,c
  8396                           
  8397                           ;SyntApp.c: 263: synthLdTxArray[synthLdTxArrayCnt++ % 12] = LOCK;
  8398  002B2A  C037  F018         	movff	_synthLdTxArrayCnt,___awmod@dividend
  8399  002B2E  6A19               	clrf	___awmod@dividend+1,c
  8400  002B30  0E00               	movlw	0
  8401  002B32  6E1B               	movwf	___awmod@divisor+1,c
  8402  002B34  0E0C               	movlw	12
  8403  002B36  6E1A               	movwf	___awmod@divisor,c
  8404  002B38  ECEE  F01A         	call	___awmod	;wreg free
  8405  002B3C  0EA4               	movlw	low _synthLdTxArray
  8406  002B3E  2418               	addwf	?___awmod,w,c
  8407  002B40  6ED9               	movwf	fsr2l,c
  8408  002B42  0E01               	movlw	high _synthLdTxArray
  8409  002B44  2019               	addwfc	?___awmod+1,w,c
  8410  002B46  6EDA               	movwf	fsr2h,c
  8411  002B48  0E01               	movlw	1
  8412  002B4A  6EDF               	movwf	indf2,c
  8413  002B4C  2A37               	incf	_synthLdTxArrayCnt,f,c
  8414  002B4E  0012               	return	
  8415  002B50                     __end_of_SynthLdDetect:
  8416                           	opt stack 0
  8417                           tosu	equ	0xFFF
  8418                           tosh	equ	0xFFE
  8419                           tosl	equ	0xFFD
  8420                           pclath	equ	0xFFA
  8421                           tblptru	equ	0xFF8
  8422                           tblptrh	equ	0xFF7
  8423                           tblptrl	equ	0xFF6
  8424                           tablat	equ	0xFF5
  8425                           prodh	equ	0xFF4
  8426                           prodl	equ	0xFF3
  8427                           postinc0	equ	0xFEE
  8428                           plusw0	equ	0xFEB
  8429                           wreg	equ	0xFE8
  8430                           indf1	equ	0xFE7
  8431                           postdec1	equ	0xFE5
  8432                           fsr1h	equ	0xFE2
  8433                           fsr1l	equ	0xFE1
  8434                           indf2	equ	0xFDF
  8435                           postinc2	equ	0xFDE
  8436                           postdec2	equ	0xFDD
  8437                           plusw2	equ	0xFDB
  8438                           fsr2h	equ	0xFDA
  8439                           fsr2l	equ	0xFD9
  8440                           status	equ	0xFD8
  8441                           
  8442 ;; *************** function ___awmod *****************
  8443 ;; Defined at:
  8444 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  8445 ;; Parameters:    Size  Location     Type
  8446 ;;  dividend        2   23[COMRAM] int 
  8447 ;;  divisor         2   25[COMRAM] int 
  8448 ;; Auto vars:     Size  Location     Type
  8449 ;;  sign            1   28[COMRAM] unsigned char 
  8450 ;;  counter         1   27[COMRAM] unsigned char 
  8451 ;; Return value:  Size  Location     Type
  8452 ;;                  2   23[COMRAM] int 
  8453 ;; Registers used:
  8454 ;;		wreg, status,2, status,0
  8455 ;; Tracked objects:
  8456 ;;		On entry : 0/0
  8457 ;;		On exit  : 0/0
  8458 ;;		Unchanged: 0/0
  8459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8460 ;;      Params:         4       0       0       0       0       0       0
  8461 ;;      Locals:         2       0       0       0       0       0       0
  8462 ;;      Temps:          0       0       0       0       0       0       0
  8463 ;;      Totals:         6       0       0       0       0       0       0
  8464 ;;Total ram usage:        6 bytes
  8465 ;; Hardware stack levels used:    1
  8466 ;; Hardware stack levels required when called:    4
  8467 ;; This function calls:
  8468 ;;		Nothing
  8469 ;; This function is called by:
  8470 ;;		_SynthLdDetect
  8471 ;; This function uses a non-reentrant model
  8472 ;;
  8473                           
  8474                           	psect	text35
  8475  0035DC                     __ptext35:
  8476                           	opt stack 0
  8477  0035DC                     ___awmod:
  8478                           	opt stack 25
  8479                           
  8480                           ;incstack = 0
  8481  0035DC  0E00               	movlw	0
  8482  0035DE  6E1D               	movwf	___awmod@sign,c
  8483  0035E0  AE19               	btfss	___awmod@dividend+1,7,c
  8484  0035E2  D006               	goto	l1782
  8485  0035E4  6C18               	negf	___awmod@dividend,c
  8486  0035E6  1E19               	comf	___awmod@dividend+1,f,c
  8487  0035E8  B0D8               	btfsc	status,0,c
  8488  0035EA  2A19               	incf	___awmod@dividend+1,f,c
  8489  0035EC  0E01               	movlw	1
  8490  0035EE  6E1D               	movwf	___awmod@sign,c
  8491  0035F0                     l1782:
  8492  0035F0  AE1B               	btfss	___awmod@divisor+1,7,c
  8493  0035F2  D004               	goto	l1783
  8494  0035F4  6C1A               	negf	___awmod@divisor,c
  8495  0035F6  1E1B               	comf	___awmod@divisor+1,f,c
  8496  0035F8  B0D8               	btfsc	status,0,c
  8497  0035FA  2A1B               	incf	___awmod@divisor+1,f,c
  8498  0035FC                     l1783:
  8499  0035FC  501A               	movf	___awmod@divisor,w,c
  8500  0035FE  101B               	iorwf	___awmod@divisor+1,w,c
  8501  003600  B4D8               	btfsc	status,2,c
  8502  003602  D018               	goto	l1790
  8503  003604  0E01               	movlw	1
  8504  003606  6E1C               	movwf	___awmod@counter,c
  8505  003608  D004               	goto	l1785
  8506  00360A  90D8               	bcf	status,0,c
  8507  00360C  361A               	rlcf	___awmod@divisor,f,c
  8508  00360E  361B               	rlcf	___awmod@divisor+1,f,c
  8509  003610  2A1C               	incf	___awmod@counter,f,c
  8510  003612                     l1785:
  8511  003612  AE1B               	btfss	___awmod@divisor+1,7,c
  8512  003614  D7FA               	goto	l1786
  8513  003616                     u5780:
  8514  003616  501A               	movf	___awmod@divisor,w,c
  8515  003618  5C18               	subwf	___awmod@dividend,w,c
  8516  00361A  501B               	movf	___awmod@divisor+1,w,c
  8517  00361C  5819               	subwfb	___awmod@dividend+1,w,c
  8518  00361E  A0D8               	btfss	status,0,c
  8519  003620  D004               	goto	l1789
  8520  003622  501A               	movf	___awmod@divisor,w,c
  8521  003624  5E18               	subwf	___awmod@dividend,f,c
  8522  003626  501B               	movf	___awmod@divisor+1,w,c
  8523  003628  5A19               	subwfb	___awmod@dividend+1,f,c
  8524  00362A                     l1789:
  8525  00362A  90D8               	bcf	status,0,c
  8526  00362C  321B               	rrcf	___awmod@divisor+1,f,c
  8527  00362E  321A               	rrcf	___awmod@divisor,f,c
  8528  003630  2E1C               	decfsz	___awmod@counter,f,c
  8529  003632  D7F1               	goto	u5780
  8530  003634                     l1790:
  8531  003634  501D               	movf	___awmod@sign,w,c
  8532  003636  B4D8               	btfsc	status,2,c
  8533  003638  D004               	goto	l1791
  8534  00363A  6C18               	negf	___awmod@dividend,c
  8535  00363C  1E19               	comf	___awmod@dividend+1,f,c
  8536  00363E  B0D8               	btfsc	status,0,c
  8537  003640  2A19               	incf	___awmod@dividend+1,f,c
  8538  003642                     l1791:
  8539  003642  C018  F018         	movff	___awmod@dividend,?___awmod
  8540  003646  C019  F019         	movff	___awmod@dividend+1,?___awmod+1
  8541  00364A  0012               	return	
  8542  00364C                     __end_of___awmod:
  8543                           	opt stack 0
  8544                           tosu	equ	0xFFF
  8545                           tosh	equ	0xFFE
  8546                           tosl	equ	0xFFD
  8547                           pclath	equ	0xFFA
  8548                           tblptru	equ	0xFF8
  8549                           tblptrh	equ	0xFF7
  8550                           tblptrl	equ	0xFF6
  8551                           tablat	equ	0xFF5
  8552                           prodh	equ	0xFF4
  8553                           prodl	equ	0xFF3
  8554                           postinc0	equ	0xFEE
  8555                           plusw0	equ	0xFEB
  8556                           wreg	equ	0xFE8
  8557                           indf1	equ	0xFE7
  8558                           postdec1	equ	0xFE5
  8559                           fsr1h	equ	0xFE2
  8560                           fsr1l	equ	0xFE1
  8561                           indf2	equ	0xFDF
  8562                           postinc2	equ	0xFDE
  8563                           postdec2	equ	0xFDD
  8564                           plusw2	equ	0xFDB
  8565                           fsr2h	equ	0xFDA
  8566                           fsr2l	equ	0xFD9
  8567                           status	equ	0xFD8
  8568                           
  8569 ;; *************** function _BlinkErrorLeds *****************
  8570 ;; Defined at:
  8571 ;;		line 13 in file "LedsApp.c"
  8572 ;; Parameters:    Size  Location     Type
  8573 ;;  state           1    wreg     enum E7598
  8574 ;; Auto vars:     Size  Location     Type
  8575 ;;  state           1   26[COMRAM] enum E7598
  8576 ;;  idx             2   27[COMRAM] int 
  8577 ;; Return value:  Size  Location     Type
  8578 ;;                  1    wreg      void 
  8579 ;; Registers used:
  8580 ;;		wreg, status,2, status,0
  8581 ;; Tracked objects:
  8582 ;;		On entry : 0/0
  8583 ;;		On exit  : 0/0
  8584 ;;		Unchanged: 0/0
  8585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8586 ;;      Params:         0       0       0       0       0       0       0
  8587 ;;      Locals:         3       0       0       0       0       0       0
  8588 ;;      Temps:          3       0       0       0       0       0       0
  8589 ;;      Totals:         6       0       0       0       0       0       0
  8590 ;;Total ram usage:        6 bytes
  8591 ;; Hardware stack levels used:    1
  8592 ;; Hardware stack levels required when called:    4
  8593 ;; This function calls:
  8594 ;;		Nothing
  8595 ;; This function is called by:
  8596 ;;		_SynthLdDetect
  8597 ;;		_main
  8598 ;; This function uses a non-reentrant model
  8599 ;;
  8600                           
  8601                           	psect	text36
  8602  0037E8                     __ptext36:
  8603                           	opt stack 0
  8604  0037E8                     _BlinkErrorLeds:
  8605                           	opt stack 25
  8606                           
  8607                           ;incstack = 0
  8608                           ;BlinkErrorLeds@state stored from wreg
  8609  0037E8  6E1B               	movwf	BlinkErrorLeds@state,c
  8610                           
  8611                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
  8612  0037EA  0E00               	movlw	0
  8613  0037EC  6E1D               	movwf	BlinkErrorLeds@idx+1,c
  8614  0037EE  0E00               	movlw	0
  8615  0037F0  6E1C               	movwf	BlinkErrorLeds@idx,c
  8616  0037F2                     l6376:
  8617  0037F2  501B               	movf	BlinkErrorLeds@state,w,c
  8618  0037F4  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8619  0037F6  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
  8620  0037F8  5018               	movf	??_BlinkErrorLeds,w,c
  8621  0037FA  5C1C               	subwf	BlinkErrorLeds@idx,w,c
  8622  0037FC  501D               	movf	BlinkErrorLeds@idx+1,w,c
  8623  0037FE  0A80               	xorlw	128
  8624  003800  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
  8625  003802  5019               	movf	??_BlinkErrorLeds+1,w,c
  8626  003804  0A80               	xorlw	128
  8627  003806  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
  8628  003808  B0D8               	btfsc	status,0,c
  8629  00380A  0012               	return	
  8630                           
  8631                           ;LedsApp.c: 16: {
  8632                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
  8633  00380C  988A               	bcf	3978,4,c	;volatile
  8634                           
  8635                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
  8636  00380E  0E02               	movlw	2
  8637  003810  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8638  003812  0E04               	movlw	4
  8639  003814  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8640  003816  0EBA               	movlw	186
  8641  003818                     u9187:
  8642  003818  2EE8               	decfsz	wreg,f,c
  8643  00381A  D7FE               	bra	u9187
  8644  00381C  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8645  00381E  D7FC               	bra	u9187
  8646  003820  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8647  003822  D7FA               	bra	u9187
  8648  003824  D000               	nop2	
  8649                           
  8650                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
  8651  003826  888A               	bsf	3978,4,c	;volatile
  8652                           
  8653                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
  8654  003828  0E02               	movlw	2
  8655  00382A  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8656  00382C  0E04               	movlw	4
  8657  00382E  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8658  003830  0EBA               	movlw	186
  8659  003832                     u9197:
  8660  003832  2EE8               	decfsz	wreg,f,c
  8661  003834  D7FE               	bra	u9197
  8662  003836  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8663  003838  D7FC               	bra	u9197
  8664  00383A  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8665  00383C  D7FA               	bra	u9197
  8666  00383E  D000               	nop2	
  8667  003840  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
  8668  003842  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
  8669  003844  D7D6               	goto	l6376
  8670  003846                     __end_of_BlinkErrorLeds:
  8671                           	opt stack 0
  8672                           tosu	equ	0xFFF
  8673                           tosh	equ	0xFFE
  8674                           tosl	equ	0xFFD
  8675                           pclath	equ	0xFFA
  8676                           tblptru	equ	0xFF8
  8677                           tblptrh	equ	0xFF7
  8678                           tblptrl	equ	0xFF6
  8679                           tablat	equ	0xFF5
  8680                           prodh	equ	0xFF4
  8681                           prodl	equ	0xFF3
  8682                           postinc0	equ	0xFEE
  8683                           plusw0	equ	0xFEB
  8684                           wreg	equ	0xFE8
  8685                           indf1	equ	0xFE7
  8686                           postdec1	equ	0xFE5
  8687                           fsr1h	equ	0xFE2
  8688                           fsr1l	equ	0xFE1
  8689                           indf2	equ	0xFDF
  8690                           postinc2	equ	0xFDE
  8691                           postdec2	equ	0xFDD
  8692                           plusw2	equ	0xFDB
  8693                           fsr2h	equ	0xFDA
  8694                           fsr2l	equ	0xFD9
  8695                           status	equ	0xFD8
  8696                           
  8697 ;; *************** function _SetMcuSystem *****************
  8698 ;; Defined at:
  8699 ;;		line 11 in file "SystemSettings.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;		None
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;		None
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  1    wreg      void 
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0, cstack
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8713 ;;      Params:         0       0       0       0       0       0       0
  8714 ;;      Locals:         0       0       0       0       0       0       0
  8715 ;;      Temps:          0       0       0       0       0       0       0
  8716 ;;      Totals:         0       0       0       0       0       0       0
  8717 ;;Total ram usage:        0 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    7
  8720 ;; This function calls:
  8721 ;;		_SYSTEM_Initialize
  8722 ;; This function is called by:
  8723 ;;		_main
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           	psect	text37
  8728  004422                     __ptext37:
  8729                           	opt stack 0
  8730  004422                     _SetMcuSystem:
  8731                           	opt stack 23
  8732                           
  8733                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  8734                           
  8735                           ;incstack = 0
  8736  004422  EC83  F021         	call	_SYSTEM_Initialize	;wreg free
  8737                           
  8738                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  8739  004426  8EF2               	bsf	intcon,7,c	;volatile
  8740                           
  8741                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  8742  004428  8CF2               	bsf	intcon,6,c	;volatile
  8743  00442A  0012               	return		;funcret
  8744  00442C                     __end_of_SetMcuSystem:
  8745                           	opt stack 0
  8746                           tosu	equ	0xFFF
  8747                           tosh	equ	0xFFE
  8748                           tosl	equ	0xFFD
  8749                           pclath	equ	0xFFA
  8750                           tblptru	equ	0xFF8
  8751                           tblptrh	equ	0xFF7
  8752                           tblptrl	equ	0xFF6
  8753                           tablat	equ	0xFF5
  8754                           prodh	equ	0xFF4
  8755                           prodl	equ	0xFF3
  8756                           intcon	equ	0xFF2
  8757                           postinc0	equ	0xFEE
  8758                           plusw0	equ	0xFEB
  8759                           wreg	equ	0xFE8
  8760                           indf1	equ	0xFE7
  8761                           postdec1	equ	0xFE5
  8762                           fsr1h	equ	0xFE2
  8763                           fsr1l	equ	0xFE1
  8764                           indf2	equ	0xFDF
  8765                           postinc2	equ	0xFDE
  8766                           postdec2	equ	0xFDD
  8767                           plusw2	equ	0xFDB
  8768                           fsr2h	equ	0xFDA
  8769                           fsr2l	equ	0xFD9
  8770                           status	equ	0xFD8
  8771                           
  8772 ;; *************** function _SYSTEM_Initialize *****************
  8773 ;; Defined at:
  8774 ;;		line 112 in file "mcc_generated_files/mcc.c"
  8775 ;; Parameters:    Size  Location     Type
  8776 ;;		None
  8777 ;; Auto vars:     Size  Location     Type
  8778 ;;		None
  8779 ;; Return value:  Size  Location     Type
  8780 ;;                  1    wreg      void 
  8781 ;; Registers used:
  8782 ;;		wreg, status,2, status,0, cstack
  8783 ;; Tracked objects:
  8784 ;;		On entry : 0/0
  8785 ;;		On exit  : 0/0
  8786 ;;		Unchanged: 0/0
  8787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8788 ;;      Params:         0       0       0       0       0       0       0
  8789 ;;      Locals:         0       0       0       0       0       0       0
  8790 ;;      Temps:          0       0       0       0       0       0       0
  8791 ;;      Totals:         0       0       0       0       0       0       0
  8792 ;;Total ram usage:        0 bytes
  8793 ;; Hardware stack levels used:    1
  8794 ;; Hardware stack levels required when called:    6
  8795 ;; This function calls:
  8796 ;;		_ADC_Initialize
  8797 ;;		_EUSART1_Initialize
  8798 ;;		_INTERRUPT_Initialize
  8799 ;;		_OSCILLATOR_Initialize
  8800 ;;		_PIN_MANAGER_Initialize
  8801 ;;		_TMR0_Initialize
  8802 ;; This function is called by:
  8803 ;;		_SetMcuSystem
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           	psect	text38
  8808  004306                     __ptext38:
  8809                           	opt stack 0
  8810  004306                     _SYSTEM_Initialize:
  8811                           	opt stack 23
  8812                           
  8813                           ;mcc.c: 114: INTERRUPT_Initialize();
  8814                           
  8815                           ;incstack = 0
  8816  004306  EC31  F022         	call	_INTERRUPT_Initialize	;wreg free
  8817                           
  8818                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  8819  00430A  ECC2  F01B         	call	_PIN_MANAGER_Initialize	;wreg free
  8820                           
  8821                           ;mcc.c: 116: OSCILLATOR_Initialize();
  8822  00430E  ECF0  F021         	call	_OSCILLATOR_Initialize	;wreg free
  8823                           
  8824                           ;mcc.c: 117: TMR0_Initialize();
  8825  004312  ECDB  F01F         	call	_TMR0_Initialize	;wreg free
  8826                           
  8827                           ;mcc.c: 118: ADC_Initialize();
  8828  004316  EC9C  F021         	call	_ADC_Initialize	;wreg free
  8829                           
  8830                           ;mcc.c: 119: EUSART1_Initialize();
  8831  00431A  EC1B  F01F         	call	_EUSART1_Initialize	;wreg free
  8832  00431E  0012               	return		;funcret
  8833  004320                     __end_of_SYSTEM_Initialize:
  8834                           	opt stack 0
  8835                           tosu	equ	0xFFF
  8836                           tosh	equ	0xFFE
  8837                           tosl	equ	0xFFD
  8838                           pclath	equ	0xFFA
  8839                           tblptru	equ	0xFF8
  8840                           tblptrh	equ	0xFF7
  8841                           tblptrl	equ	0xFF6
  8842                           tablat	equ	0xFF5
  8843                           prodh	equ	0xFF4
  8844                           prodl	equ	0xFF3
  8845                           intcon	equ	0xFF2
  8846                           postinc0	equ	0xFEE
  8847                           plusw0	equ	0xFEB
  8848                           wreg	equ	0xFE8
  8849                           indf1	equ	0xFE7
  8850                           postdec1	equ	0xFE5
  8851                           fsr1h	equ	0xFE2
  8852                           fsr1l	equ	0xFE1
  8853                           indf2	equ	0xFDF
  8854                           postinc2	equ	0xFDE
  8855                           postdec2	equ	0xFDD
  8856                           plusw2	equ	0xFDB
  8857                           fsr2h	equ	0xFDA
  8858                           fsr2l	equ	0xFD9
  8859                           status	equ	0xFD8
  8860                           
  8861 ;; *************** function _TMR0_Initialize *****************
  8862 ;; Defined at:
  8863 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;		None
  8866 ;; Auto vars:     Size  Location     Type
  8867 ;;		None
  8868 ;; Return value:  Size  Location     Type
  8869 ;;                  1    wreg      void 
  8870 ;; Registers used:
  8871 ;;		wreg, status,2, status,0, cstack
  8872 ;; Tracked objects:
  8873 ;;		On entry : 0/0
  8874 ;;		On exit  : 0/0
  8875 ;;		Unchanged: 0/0
  8876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8877 ;;      Params:         0       0       0       0       0       0       0
  8878 ;;      Locals:         0       0       0       0       0       0       0
  8879 ;;      Temps:          2       0       0       0       0       0       0
  8880 ;;      Totals:         2       0       0       0       0       0       0
  8881 ;;Total ram usage:        2 bytes
  8882 ;; Hardware stack levels used:    1
  8883 ;; Hardware stack levels required when called:    5
  8884 ;; This function calls:
  8885 ;;		_TMR0_SetInterruptHandler
  8886 ;; This function is called by:
  8887 ;;		_SYSTEM_Initialize
  8888 ;; This function uses a non-reentrant model
  8889 ;;
  8890                           
  8891                           	psect	text39
  8892  003FB6                     __ptext39:
  8893                           	opt stack 0
  8894  003FB6                     _TMR0_Initialize:
  8895                           	opt stack 23
  8896                           
  8897                           ;tmr0.c: 71: TMR0H = 0xF8;
  8898                           
  8899                           ;incstack = 0
  8900  003FB6  0EF8               	movlw	248
  8901  003FB8  6ED7               	movwf	4055,c	;volatile
  8902                           
  8903                           ;tmr0.c: 74: TMR0L = 0x2F;
  8904  003FBA  0E2F               	movlw	47
  8905  003FBC  6ED6               	movwf	4054,c	;volatile
  8906                           
  8907                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  8908  003FBE  50D6               	movf	4054,w,c	;volatile
  8909  003FC0  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  8910  003FC4  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  8911  003FC6  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  8912  003FCA  6A1A               	clrf	??_TMR0_Initialize,c
  8913  003FCC  101A               	iorwf	??_TMR0_Initialize,w,c
  8914  003FCE  6E46               	movwf	_timer0ReloadVal,c	;volatile
  8915  003FD0  501B               	movf	??_TMR0_Initialize+1,w,c
  8916  003FD2  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  8917                           
  8918                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  8919  003FD4  94F2               	bcf	intcon,2,c	;volatile
  8920                           
  8921                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  8922  003FD6  8AF2               	bsf	intcon,5,c	;volatile
  8923                           
  8924                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  8925  003FD8  0E00               	movlw	0
  8926  003FDA  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  8927  003FDC  0E00               	movlw	0
  8928  003FDE  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  8929  003FE0  EC16  F022         	call	_TMR0_SetInterruptHandler	;wreg free
  8930                           
  8931                           ;tmr0.c: 90: T0CON = 0x90;
  8932  003FE4  0E90               	movlw	144
  8933  003FE6  6ED5               	movwf	4053,c	;volatile
  8934  003FE8  0012               	return		;funcret
  8935  003FEA                     __end_of_TMR0_Initialize:
  8936                           	opt stack 0
  8937                           tosu	equ	0xFFF
  8938                           tosh	equ	0xFFE
  8939                           tosl	equ	0xFFD
  8940                           pclath	equ	0xFFA
  8941                           tblptru	equ	0xFF8
  8942                           tblptrh	equ	0xFF7
  8943                           tblptrl	equ	0xFF6
  8944                           tablat	equ	0xFF5
  8945                           prodh	equ	0xFF4
  8946                           prodl	equ	0xFF3
  8947                           intcon	equ	0xFF2
  8948                           postinc0	equ	0xFEE
  8949                           plusw0	equ	0xFEB
  8950                           wreg	equ	0xFE8
  8951                           indf1	equ	0xFE7
  8952                           postdec1	equ	0xFE5
  8953                           fsr1h	equ	0xFE2
  8954                           fsr1l	equ	0xFE1
  8955                           indf2	equ	0xFDF
  8956                           postinc2	equ	0xFDE
  8957                           postdec2	equ	0xFDD
  8958                           plusw2	equ	0xFDB
  8959                           fsr2h	equ	0xFDA
  8960                           fsr2l	equ	0xFD9
  8961                           status	equ	0xFD8
  8962                           
  8963 ;; *************** function _TMR0_SetInterruptHandler *****************
  8964 ;; Defined at:
  8965 ;;		line 179 in file "mcc_generated_files/tmr0.c"
  8966 ;; Parameters:    Size  Location     Type
  8967 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8968 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;		None
  8971 ;; Return value:  Size  Location     Type
  8972 ;;                  1    wreg      void 
  8973 ;; Registers used:
  8974 ;;		wreg, status,2, status,0
  8975 ;; Tracked objects:
  8976 ;;		On entry : 0/0
  8977 ;;		On exit  : 0/0
  8978 ;;		Unchanged: 0/0
  8979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8980 ;;      Params:         2       0       0       0       0       0       0
  8981 ;;      Locals:         0       0       0       0       0       0       0
  8982 ;;      Temps:          0       0       0       0       0       0       0
  8983 ;;      Totals:         2       0       0       0       0       0       0
  8984 ;;Total ram usage:        2 bytes
  8985 ;; Hardware stack levels used:    1
  8986 ;; Hardware stack levels required when called:    4
  8987 ;; This function calls:
  8988 ;;		Nothing
  8989 ;; This function is called by:
  8990 ;;		_TMR0_Initialize
  8991 ;; This function uses a non-reentrant model
  8992 ;;
  8993                           
  8994                           	psect	text40
  8995  00442C                     __ptext40:
  8996                           	opt stack 0
  8997  00442C                     _TMR0_SetInterruptHandler:
  8998                           	opt stack 23
  8999                           
  9000                           ;tmr0.c: 180: TMR0_InterruptHandler = InterruptHandler;
  9001                           
  9002                           ;incstack = 0
  9003  00442C  C018  F1CC         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  9004  004430  C019  F1CD         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  9005  004434  0012               	return		;funcret
  9006  004436                     __end_of_TMR0_SetInterruptHandler:
  9007                           	opt stack 0
  9008                           tosu	equ	0xFFF
  9009                           tosh	equ	0xFFE
  9010                           tosl	equ	0xFFD
  9011                           pclath	equ	0xFFA
  9012                           tblptru	equ	0xFF8
  9013                           tblptrh	equ	0xFF7
  9014                           tblptrl	equ	0xFF6
  9015                           tablat	equ	0xFF5
  9016                           prodh	equ	0xFF4
  9017                           prodl	equ	0xFF3
  9018                           intcon	equ	0xFF2
  9019                           postinc0	equ	0xFEE
  9020                           plusw0	equ	0xFEB
  9021                           wreg	equ	0xFE8
  9022                           indf1	equ	0xFE7
  9023                           postdec1	equ	0xFE5
  9024                           fsr1h	equ	0xFE2
  9025                           fsr1l	equ	0xFE1
  9026                           indf2	equ	0xFDF
  9027                           postinc2	equ	0xFDE
  9028                           postdec2	equ	0xFDD
  9029                           plusw2	equ	0xFDB
  9030                           fsr2h	equ	0xFDA
  9031                           fsr2l	equ	0xFD9
  9032                           status	equ	0xFD8
  9033                           
  9034 ;; *************** function _PIN_MANAGER_Initialize *****************
  9035 ;; Defined at:
  9036 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;		None
  9039 ;; Auto vars:     Size  Location     Type
  9040 ;;		None
  9041 ;; Return value:  Size  Location     Type
  9042 ;;                  1    wreg      void 
  9043 ;; Registers used:
  9044 ;;		wreg, status,2, status,0, cstack
  9045 ;; Tracked objects:
  9046 ;;		On entry : 0/0
  9047 ;;		On exit  : 0/0
  9048 ;;		Unchanged: 0/0
  9049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9050 ;;      Params:         0       0       0       0       0       0       0
  9051 ;;      Locals:         0       0       0       0       0       0       0
  9052 ;;      Temps:          0       0       0       0       0       0       0
  9053 ;;      Totals:         0       0       0       0       0       0       0
  9054 ;;Total ram usage:        0 bytes
  9055 ;; Hardware stack levels used:    1
  9056 ;; Hardware stack levels required when called:    5
  9057 ;; This function calls:
  9058 ;;		_IOCB4_SetInterruptHandler
  9059 ;;		_IOCB5_SetInterruptHandler
  9060 ;; This function is called by:
  9061 ;;		_SYSTEM_Initialize
  9062 ;; This function uses a non-reentrant model
  9063 ;;
  9064                           
  9065                           	psect	text41
  9066  003784                     __ptext41:
  9067                           	opt stack 0
  9068  003784                     _PIN_MANAGER_Initialize:
  9069                           	opt stack 23
  9070                           
  9071                           ;pin_manager.c: 60: LATE = 0x00;
  9072                           
  9073                           ;incstack = 0
  9074  003784  0E00               	movlw	0
  9075  003786  6E8D               	movwf	3981,c	;volatile
  9076                           
  9077                           ;pin_manager.c: 61: LATD = 0x00;
  9078  003788  0E00               	movlw	0
  9079  00378A  6E8C               	movwf	3980,c	;volatile
  9080                           
  9081                           ;pin_manager.c: 62: LATA = 0x06;
  9082  00378C  0E06               	movlw	6
  9083  00378E  6E89               	movwf	3977,c	;volatile
  9084                           
  9085                           ;pin_manager.c: 63: LATB = 0x00;
  9086  003790  0E00               	movlw	0
  9087  003792  6E8A               	movwf	3978,c	;volatile
  9088                           
  9089                           ;pin_manager.c: 64: LATC = 0x00;
  9090  003794  0E00               	movlw	0
  9091  003796  6E8B               	movwf	3979,c	;volatile
  9092                           
  9093                           ;pin_manager.c: 69: TRISE = 0x07;
  9094  003798  0E07               	movlw	7
  9095  00379A  6E96               	movwf	3990,c	;volatile
  9096                           
  9097                           ;pin_manager.c: 70: TRISA = 0xE1;
  9098  00379C  0EE1               	movlw	225
  9099  00379E  6E92               	movwf	3986,c	;volatile
  9100                           
  9101                           ;pin_manager.c: 71: TRISB = 0xEF;
  9102  0037A0  0EEF               	movlw	239
  9103  0037A2  6E93               	movwf	3987,c	;volatile
  9104                           
  9105                           ;pin_manager.c: 72: TRISC = 0x80;
  9106  0037A4  0E80               	movlw	128
  9107  0037A6  6E94               	movwf	3988,c	;volatile
  9108                           
  9109                           ;pin_manager.c: 73: TRISD = 0xF2;
  9110  0037A8  0EF2               	movlw	242
  9111  0037AA  6E95               	movwf	3989,c	;volatile
  9112                           
  9113                           ;pin_manager.c: 78: ANSELC = 0x34;
  9114  0037AC  0E34               	movlw	52
  9115  0037AE  010F               	movlb	15	; () banked
  9116  0037B0  6F3A               	movwf	58,b	;volatile
  9117                           
  9118                           ;pin_manager.c: 79: ANSELB = 0x3E;
  9119  0037B2  0E3E               	movlw	62
  9120  0037B4  6F39               	movwf	57,b	;volatile
  9121                           
  9122                           ;pin_manager.c: 80: ANSELD = 0xE4;
  9123  0037B6  0EE4               	movlw	228
  9124  0037B8  6F3B               	movwf	59,b	;volatile
  9125                           
  9126                           ;pin_manager.c: 81: ANSELE = 0x07;
  9127  0037BA  0E07               	movlw	7
  9128  0037BC  6F3C               	movwf	60,b	;volatile
  9129                           
  9130                           ;pin_manager.c: 82: ANSELA = 0x2F;
  9131  0037BE  0E2F               	movlw	47
  9132  0037C0  6F38               	movwf	56,b	;volatile
  9133                           
  9134                           ;pin_manager.c: 87: WPUB = 0xC3;
  9135  0037C2  0EC3               	movlw	195
  9136  0037C4  6E61               	movwf	3937,c	;volatile
  9137                           
  9138                           ; BSR set to: 15
  9139                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 0;
  9140  0037C6  9EF1               	bcf	intcon2,7,c	;volatile
  9141                           
  9142                           ; BSR set to: 15
  9143                           ;pin_manager.c: 96: IOCBbits.IOCB4 = 1;
  9144  0037C8  8862               	bsf	3938,4,c	;volatile
  9145                           
  9146                           ; BSR set to: 15
  9147                           ;pin_manager.c: 97: IOCBbits.IOCB5 = 1;
  9148  0037CA  8A62               	bsf	3938,5,c	;volatile
  9149                           
  9150                           ; BSR set to: 15
  9151                           ;pin_manager.c: 100: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  9152  0037CC  0E70               	movlw	low _IOCB4_DefaultInterruptHandler
  9153  0037CE  6E18               	movwf	IOCB4_SetInterruptHandler@InterruptHandler,c
  9154  0037D0  0E44               	movlw	high _IOCB4_DefaultInterruptHandler
  9155  0037D2  6E19               	movwf	IOCB4_SetInterruptHandler@InterruptHandler+1,c
  9156  0037D4  EC20  F022         	call	_IOCB4_SetInterruptHandler	;wreg free
  9157                           
  9158                           ;pin_manager.c: 101: IOCB5_SetInterruptHandler(IOCB5_DefaultInterruptHandler);
  9159  0037D8  0E6E               	movlw	low _IOCB5_DefaultInterruptHandler
  9160  0037DA  6E18               	movwf	IOCB5_SetInterruptHandler@InterruptHandler,c
  9161  0037DC  0E44               	movlw	high _IOCB5_DefaultInterruptHandler
  9162  0037DE  6E19               	movwf	IOCB5_SetInterruptHandler@InterruptHandler+1,c
  9163  0037E0  EC1B  F022         	call	_IOCB5_SetInterruptHandler	;wreg free
  9164                           
  9165                           ;pin_manager.c: 104: INTCONbits.RBIE = 1;
  9166  0037E4  86F2               	bsf	intcon,3,c	;volatile
  9167  0037E6  0012               	return		;funcret
  9168  0037E8                     __end_of_PIN_MANAGER_Initialize:
  9169                           	opt stack 0
  9170                           tosu	equ	0xFFF
  9171                           tosh	equ	0xFFE
  9172                           tosl	equ	0xFFD
  9173                           pclath	equ	0xFFA
  9174                           tblptru	equ	0xFF8
  9175                           tblptrh	equ	0xFF7
  9176                           tblptrl	equ	0xFF6
  9177                           tablat	equ	0xFF5
  9178                           prodh	equ	0xFF4
  9179                           prodl	equ	0xFF3
  9180                           intcon	equ	0xFF2
  9181                           intcon2	equ	0xFF1
  9182                           postinc0	equ	0xFEE
  9183                           plusw0	equ	0xFEB
  9184                           wreg	equ	0xFE8
  9185                           indf1	equ	0xFE7
  9186                           postdec1	equ	0xFE5
  9187                           fsr1h	equ	0xFE2
  9188                           fsr1l	equ	0xFE1
  9189                           indf2	equ	0xFDF
  9190                           postinc2	equ	0xFDE
  9191                           postdec2	equ	0xFDD
  9192                           plusw2	equ	0xFDB
  9193                           fsr2h	equ	0xFDA
  9194                           fsr2l	equ	0xFD9
  9195                           status	equ	0xFD8
  9196                           
  9197 ;; *************** function _IOCB5_SetInterruptHandler *****************
  9198 ;; Defined at:
  9199 ;;		line 172 in file "mcc_generated_files/pin_manager.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9202 ;;		 -> IOCB5_DefaultInterruptHandler(1), 
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;		None
  9205 ;; Return value:  Size  Location     Type
  9206 ;;                  1    wreg      void 
  9207 ;; Registers used:
  9208 ;;		wreg, status,2, status,0
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9214 ;;      Params:         2       0       0       0       0       0       0
  9215 ;;      Locals:         0       0       0       0       0       0       0
  9216 ;;      Temps:          0       0       0       0       0       0       0
  9217 ;;      Totals:         2       0       0       0       0       0       0
  9218 ;;Total ram usage:        2 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; Hardware stack levels required when called:    4
  9221 ;; This function calls:
  9222 ;;		Nothing
  9223 ;; This function is called by:
  9224 ;;		_PIN_MANAGER_Initialize
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           	psect	text42
  9229  004436                     __ptext42:
  9230                           	opt stack 0
  9231  004436                     _IOCB5_SetInterruptHandler:
  9232                           	opt stack 23
  9233                           
  9234                           ;pin_manager.c: 173: IOCB5_InterruptHandler = InterruptHandler;
  9235                           
  9236                           ;incstack = 0
  9237  004436  C018  F1CE         	movff	IOCB5_SetInterruptHandler@InterruptHandler,_IOCB5_InterruptHandler
  9238  00443A  C019  F1CF         	movff	IOCB5_SetInterruptHandler@InterruptHandler+1,_IOCB5_InterruptHandler+1
  9239  00443E  0012               	return		;funcret
  9240  004440                     __end_of_IOCB5_SetInterruptHandler:
  9241                           	opt stack 0
  9242                           tosu	equ	0xFFF
  9243                           tosh	equ	0xFFE
  9244                           tosl	equ	0xFFD
  9245                           pclath	equ	0xFFA
  9246                           tblptru	equ	0xFF8
  9247                           tblptrh	equ	0xFF7
  9248                           tblptrl	equ	0xFF6
  9249                           tablat	equ	0xFF5
  9250                           prodh	equ	0xFF4
  9251                           prodl	equ	0xFF3
  9252                           intcon	equ	0xFF2
  9253                           intcon2	equ	0xFF1
  9254                           postinc0	equ	0xFEE
  9255                           plusw0	equ	0xFEB
  9256                           wreg	equ	0xFE8
  9257                           indf1	equ	0xFE7
  9258                           postdec1	equ	0xFE5
  9259                           fsr1h	equ	0xFE2
  9260                           fsr1l	equ	0xFE1
  9261                           indf2	equ	0xFDF
  9262                           postinc2	equ	0xFDE
  9263                           postdec2	equ	0xFDD
  9264                           plusw2	equ	0xFDB
  9265                           fsr2h	equ	0xFDA
  9266                           fsr2l	equ	0xFD9
  9267                           status	equ	0xFD8
  9268                           
  9269 ;; *************** function _IOCB4_SetInterruptHandler *****************
  9270 ;; Defined at:
  9271 ;;		line 143 in file "mcc_generated_files/pin_manager.c"
  9272 ;; Parameters:    Size  Location     Type
  9273 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9274 ;;		 -> IOCB4_DefaultInterruptHandler(1), 
  9275 ;; Auto vars:     Size  Location     Type
  9276 ;;		None
  9277 ;; Return value:  Size  Location     Type
  9278 ;;                  1    wreg      void 
  9279 ;; Registers used:
  9280 ;;		wreg, status,2, status,0
  9281 ;; Tracked objects:
  9282 ;;		On entry : 0/0
  9283 ;;		On exit  : 0/0
  9284 ;;		Unchanged: 0/0
  9285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9286 ;;      Params:         2       0       0       0       0       0       0
  9287 ;;      Locals:         0       0       0       0       0       0       0
  9288 ;;      Temps:          0       0       0       0       0       0       0
  9289 ;;      Totals:         2       0       0       0       0       0       0
  9290 ;;Total ram usage:        2 bytes
  9291 ;; Hardware stack levels used:    1
  9292 ;; Hardware stack levels required when called:    4
  9293 ;; This function calls:
  9294 ;;		Nothing
  9295 ;; This function is called by:
  9296 ;;		_PIN_MANAGER_Initialize
  9297 ;; This function uses a non-reentrant model
  9298 ;;
  9299                           
  9300                           	psect	text43
  9301  004440                     __ptext43:
  9302                           	opt stack 0
  9303  004440                     _IOCB4_SetInterruptHandler:
  9304                           	opt stack 23
  9305                           
  9306                           ;pin_manager.c: 144: IOCB4_InterruptHandler = InterruptHandler;
  9307                           
  9308                           ;incstack = 0
  9309  004440  C018  F1D0         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  9310  004444  C019  F1D1         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  9311  004448  0012               	return		;funcret
  9312  00444A                     __end_of_IOCB4_SetInterruptHandler:
  9313                           	opt stack 0
  9314                           tosu	equ	0xFFF
  9315                           tosh	equ	0xFFE
  9316                           tosl	equ	0xFFD
  9317                           pclath	equ	0xFFA
  9318                           tblptru	equ	0xFF8
  9319                           tblptrh	equ	0xFF7
  9320                           tblptrl	equ	0xFF6
  9321                           tablat	equ	0xFF5
  9322                           prodh	equ	0xFF4
  9323                           prodl	equ	0xFF3
  9324                           intcon	equ	0xFF2
  9325                           intcon2	equ	0xFF1
  9326                           postinc0	equ	0xFEE
  9327                           plusw0	equ	0xFEB
  9328                           wreg	equ	0xFE8
  9329                           indf1	equ	0xFE7
  9330                           postdec1	equ	0xFE5
  9331                           fsr1h	equ	0xFE2
  9332                           fsr1l	equ	0xFE1
  9333                           indf2	equ	0xFDF
  9334                           postinc2	equ	0xFDE
  9335                           postdec2	equ	0xFDD
  9336                           plusw2	equ	0xFDB
  9337                           fsr2h	equ	0xFDA
  9338                           fsr2l	equ	0xFD9
  9339                           status	equ	0xFD8
  9340                           
  9341 ;; *************** function _OSCILLATOR_Initialize *****************
  9342 ;; Defined at:
  9343 ;;		line 122 in file "mcc_generated_files/mcc.c"
  9344 ;; Parameters:    Size  Location     Type
  9345 ;;		None
  9346 ;; Auto vars:     Size  Location     Type
  9347 ;;		None
  9348 ;; Return value:  Size  Location     Type
  9349 ;;                  1    wreg      void 
  9350 ;; Registers used:
  9351 ;;		wreg, status,2
  9352 ;; Tracked objects:
  9353 ;;		On entry : 0/0
  9354 ;;		On exit  : 0/0
  9355 ;;		Unchanged: 0/0
  9356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9357 ;;      Params:         0       0       0       0       0       0       0
  9358 ;;      Locals:         0       0       0       0       0       0       0
  9359 ;;      Temps:          0       0       0       0       0       0       0
  9360 ;;      Totals:         0       0       0       0       0       0       0
  9361 ;;Total ram usage:        0 bytes
  9362 ;; Hardware stack levels used:    1
  9363 ;; Hardware stack levels required when called:    4
  9364 ;; This function calls:
  9365 ;;		Nothing
  9366 ;; This function is called by:
  9367 ;;		_SYSTEM_Initialize
  9368 ;; This function uses a non-reentrant model
  9369 ;;
  9370                           
  9371                           	psect	text44
  9372  0043E0                     __ptext44:
  9373                           	opt stack 0
  9374  0043E0                     _OSCILLATOR_Initialize:
  9375                           	opt stack 24
  9376                           
  9377                           ;mcc.c: 125: OSCCON = 0x60;
  9378                           
  9379                           ;incstack = 0
  9380  0043E0  0E60               	movlw	96
  9381  0043E2  6ED3               	movwf	4051,c	;volatile
  9382                           
  9383                           ;mcc.c: 127: OSCCON2 = 0x04;
  9384  0043E4  0E04               	movlw	4
  9385  0043E6  6ED2               	movwf	4050,c	;volatile
  9386                           
  9387                           ;mcc.c: 129: OSCTUNE = 0x80;
  9388  0043E8  0E80               	movlw	128
  9389  0043EA  6E9B               	movwf	3995,c	;volatile
  9390  0043EC  0012               	return		;funcret
  9391  0043EE                     __end_of_OSCILLATOR_Initialize:
  9392                           	opt stack 0
  9393                           tosu	equ	0xFFF
  9394                           tosh	equ	0xFFE
  9395                           tosl	equ	0xFFD
  9396                           pclath	equ	0xFFA
  9397                           tblptru	equ	0xFF8
  9398                           tblptrh	equ	0xFF7
  9399                           tblptrl	equ	0xFF6
  9400                           tablat	equ	0xFF5
  9401                           prodh	equ	0xFF4
  9402                           prodl	equ	0xFF3
  9403                           intcon	equ	0xFF2
  9404                           intcon2	equ	0xFF1
  9405                           postinc0	equ	0xFEE
  9406                           plusw0	equ	0xFEB
  9407                           wreg	equ	0xFE8
  9408                           indf1	equ	0xFE7
  9409                           postdec1	equ	0xFE5
  9410                           fsr1h	equ	0xFE2
  9411                           fsr1l	equ	0xFE1
  9412                           indf2	equ	0xFDF
  9413                           postinc2	equ	0xFDE
  9414                           postdec2	equ	0xFDD
  9415                           plusw2	equ	0xFDB
  9416                           fsr2h	equ	0xFDA
  9417                           fsr2l	equ	0xFD9
  9418                           status	equ	0xFD8
  9419                           
  9420 ;; *************** function _INTERRUPT_Initialize *****************
  9421 ;; Defined at:
  9422 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9423 ;; Parameters:    Size  Location     Type
  9424 ;;		None
  9425 ;; Auto vars:     Size  Location     Type
  9426 ;;		None
  9427 ;; Return value:  Size  Location     Type
  9428 ;;                  1    wreg      void 
  9429 ;; Registers used:
  9430 ;;		None
  9431 ;; Tracked objects:
  9432 ;;		On entry : 0/0
  9433 ;;		On exit  : 0/0
  9434 ;;		Unchanged: 0/0
  9435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9436 ;;      Params:         0       0       0       0       0       0       0
  9437 ;;      Locals:         0       0       0       0       0       0       0
  9438 ;;      Temps:          0       0       0       0       0       0       0
  9439 ;;      Totals:         0       0       0       0       0       0       0
  9440 ;;Total ram usage:        0 bytes
  9441 ;; Hardware stack levels used:    1
  9442 ;; Hardware stack levels required when called:    4
  9443 ;; This function calls:
  9444 ;;		Nothing
  9445 ;; This function is called by:
  9446 ;;		_SYSTEM_Initialize
  9447 ;; This function uses a non-reentrant model
  9448 ;;
  9449                           
  9450                           	psect	text45
  9451  004462                     __ptext45:
  9452                           	opt stack 0
  9453  004462                     _INTERRUPT_Initialize:
  9454                           	opt stack 24
  9455                           
  9456                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  9457                           
  9458                           ;incstack = 0
  9459  004462  9ED0               	bcf	4048,7,c	;volatile
  9460  004464  0012               	return		;funcret
  9461  004466                     __end_of_INTERRUPT_Initialize:
  9462                           	opt stack 0
  9463                           tosu	equ	0xFFF
  9464                           tosh	equ	0xFFE
  9465                           tosl	equ	0xFFD
  9466                           pclath	equ	0xFFA
  9467                           tblptru	equ	0xFF8
  9468                           tblptrh	equ	0xFF7
  9469                           tblptrl	equ	0xFF6
  9470                           tablat	equ	0xFF5
  9471                           prodh	equ	0xFF4
  9472                           prodl	equ	0xFF3
  9473                           intcon	equ	0xFF2
  9474                           intcon2	equ	0xFF1
  9475                           postinc0	equ	0xFEE
  9476                           plusw0	equ	0xFEB
  9477                           wreg	equ	0xFE8
  9478                           indf1	equ	0xFE7
  9479                           postdec1	equ	0xFE5
  9480                           fsr1h	equ	0xFE2
  9481                           fsr1l	equ	0xFE1
  9482                           indf2	equ	0xFDF
  9483                           postinc2	equ	0xFDE
  9484                           postdec2	equ	0xFDD
  9485                           plusw2	equ	0xFDB
  9486                           fsr2h	equ	0xFDA
  9487                           fsr2l	equ	0xFD9
  9488                           status	equ	0xFD8
  9489                           
  9490 ;; *************** function _EUSART1_Initialize *****************
  9491 ;; Defined at:
  9492 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  9493 ;; Parameters:    Size  Location     Type
  9494 ;;		None
  9495 ;; Auto vars:     Size  Location     Type
  9496 ;;		None
  9497 ;; Return value:  Size  Location     Type
  9498 ;;                  1    wreg      void 
  9499 ;; Registers used:
  9500 ;;		wreg, status,2
  9501 ;; Tracked objects:
  9502 ;;		On entry : 0/0
  9503 ;;		On exit  : 0/0
  9504 ;;		Unchanged: 0/0
  9505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9506 ;;      Params:         0       0       0       0       0       0       0
  9507 ;;      Locals:         0       0       0       0       0       0       0
  9508 ;;      Temps:          0       0       0       0       0       0       0
  9509 ;;      Totals:         0       0       0       0       0       0       0
  9510 ;;Total ram usage:        0 bytes
  9511 ;; Hardware stack levels used:    1
  9512 ;; Hardware stack levels required when called:    4
  9513 ;; This function calls:
  9514 ;;		Nothing
  9515 ;; This function is called by:
  9516 ;;		_SYSTEM_Initialize
  9517 ;; This function uses a non-reentrant model
  9518 ;;
  9519                           
  9520                           	psect	text46
  9521  003E36                     __ptext46:
  9522                           	opt stack 0
  9523  003E36                     _EUSART1_Initialize:
  9524                           	opt stack 24
  9525                           
  9526                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  9527                           
  9528                           ;incstack = 0
  9529  003E36  9A9D               	bcf	3997,5,c	;volatile
  9530                           
  9531                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  9532  003E38  989D               	bcf	3997,4,c	;volatile
  9533                           
  9534                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  9535  003E3A  0E08               	movlw	8
  9536  003E3C  6EB8               	movwf	4024,c	;volatile
  9537                           
  9538                           ;eusart1.c: 85: RCSTA1 = 0x90;
  9539  003E3E  0E90               	movlw	144
  9540  003E40  6EAB               	movwf	4011,c	;volatile
  9541                           
  9542                           ;eusart1.c: 88: TXSTA1 = 0x24;
  9543  003E42  0E24               	movlw	36
  9544  003E44  6EAC               	movwf	4012,c	;volatile
  9545                           
  9546                           ;eusart1.c: 91: SPBRG1 = 0x10;
  9547  003E46  0E10               	movlw	16
  9548  003E48  6EAF               	movwf	4015,c	;volatile
  9549                           
  9550                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  9551  003E4A  0E00               	movlw	0
  9552  003E4C  6EB0               	movwf	4016,c	;volatile
  9553                           
  9554                           ;eusart1.c: 98: eusart1TxHead = 0;
  9555  003E4E  0E00               	movlw	0
  9556  003E50  6E36               	movwf	_eusart1TxHead,c	;volatile
  9557                           
  9558                           ;eusart1.c: 99: eusart1TxTail = 0;
  9559  003E52  0E00               	movlw	0
  9560  003E54  6E35               	movwf	_eusart1TxTail,c	;volatile
  9561                           
  9562                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9563  003E56  0E46               	movlw	70
  9564  003E58  0101               	movlb	1	; () banked
  9565  003E5A  6FD2               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  9566                           
  9567                           ;eusart1.c: 102: eusart1RxHead = 0;
  9568  003E5C  0E00               	movlw	0
  9569  003E5E  6E34               	movwf	_eusart1RxHead,c	;volatile
  9570                           
  9571                           ;eusart1.c: 103: eusart1RxTail = 0;
  9572  003E60  0E00               	movlw	0
  9573  003E62  6E33               	movwf	_eusart1RxTail,c	;volatile
  9574                           
  9575                           ;eusart1.c: 104: eusart1RxCount = 0;
  9576  003E64  0E00               	movlw	0
  9577  003E66  0100               	movlb	0	; () banked
  9578  003E68  6FF5               	movwf	_eusart1RxCount& (0+255),b	;volatile
  9579                           
  9580                           ; BSR set to: 0
  9581                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  9582  003E6A  8A9D               	bsf	3997,5,c	;volatile
  9583                           
  9584                           ; BSR set to: 0
  9585  003E6C  0012               	return		;funcret
  9586  003E6E                     __end_of_EUSART1_Initialize:
  9587                           	opt stack 0
  9588                           tosu	equ	0xFFF
  9589                           tosh	equ	0xFFE
  9590                           tosl	equ	0xFFD
  9591                           pclath	equ	0xFFA
  9592                           tblptru	equ	0xFF8
  9593                           tblptrh	equ	0xFF7
  9594                           tblptrl	equ	0xFF6
  9595                           tablat	equ	0xFF5
  9596                           prodh	equ	0xFF4
  9597                           prodl	equ	0xFF3
  9598                           intcon	equ	0xFF2
  9599                           intcon2	equ	0xFF1
  9600                           postinc0	equ	0xFEE
  9601                           plusw0	equ	0xFEB
  9602                           wreg	equ	0xFE8
  9603                           indf1	equ	0xFE7
  9604                           postdec1	equ	0xFE5
  9605                           fsr1h	equ	0xFE2
  9606                           fsr1l	equ	0xFE1
  9607                           indf2	equ	0xFDF
  9608                           postinc2	equ	0xFDE
  9609                           postdec2	equ	0xFDD
  9610                           plusw2	equ	0xFDB
  9611                           fsr2h	equ	0xFDA
  9612                           fsr2l	equ	0xFD9
  9613                           status	equ	0xFD8
  9614                           
  9615 ;; *************** function _ADC_Initialize *****************
  9616 ;; Defined at:
  9617 ;;		line 58 in file "mcc_generated_files/adc.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;		None
  9620 ;; Auto vars:     Size  Location     Type
  9621 ;;		None
  9622 ;; Return value:  Size  Location     Type
  9623 ;;                  1    wreg      void 
  9624 ;; Registers used:
  9625 ;;		wreg, status,2
  9626 ;; Tracked objects:
  9627 ;;		On entry : 0/0
  9628 ;;		On exit  : 0/0
  9629 ;;		Unchanged: 0/0
  9630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9631 ;;      Params:         0       0       0       0       0       0       0
  9632 ;;      Locals:         0       0       0       0       0       0       0
  9633 ;;      Temps:          0       0       0       0       0       0       0
  9634 ;;      Totals:         0       0       0       0       0       0       0
  9635 ;;Total ram usage:        0 bytes
  9636 ;; Hardware stack levels used:    1
  9637 ;; Hardware stack levels required when called:    4
  9638 ;; This function calls:
  9639 ;;		Nothing
  9640 ;; This function is called by:
  9641 ;;		_SYSTEM_Initialize
  9642 ;; This function uses a non-reentrant model
  9643 ;;
  9644                           
  9645                           	psect	text47
  9646  004338                     __ptext47:
  9647                           	opt stack 0
  9648  004338                     _ADC_Initialize:
  9649                           	opt stack 24
  9650                           
  9651                           ;adc.c: 63: ADCON0 = 0x05;
  9652                           
  9653                           ; BSR set to: 0
  9654                           ;incstack = 0
  9655  004338  0E05               	movlw	5
  9656  00433A  6EC2               	movwf	4034,c	;volatile
  9657                           
  9658                           ;adc.c: 66: ADCON1 = 0x00;
  9659  00433C  0E00               	movlw	0
  9660  00433E  6EC1               	movwf	4033,c	;volatile
  9661                           
  9662                           ;adc.c: 69: ADCON2 = 0x87;
  9663  004340  0E87               	movlw	135
  9664  004342  6EC0               	movwf	4032,c	;volatile
  9665                           
  9666                           ;adc.c: 72: ADRESL = 0x00;
  9667  004344  0E00               	movlw	0
  9668  004346  6EC3               	movwf	4035,c	;volatile
  9669                           
  9670                           ;adc.c: 75: ADRESH = 0x00;
  9671  004348  0E00               	movlw	0
  9672  00434A  6EC4               	movwf	4036,c	;volatile
  9673  00434C  0012               	return		;funcret
  9674  00434E                     __end_of_ADC_Initialize:
  9675                           	opt stack 0
  9676                           tosu	equ	0xFFF
  9677                           tosh	equ	0xFFE
  9678                           tosl	equ	0xFFD
  9679                           pclath	equ	0xFFA
  9680                           tblptru	equ	0xFF8
  9681                           tblptrh	equ	0xFF7
  9682                           tblptrl	equ	0xFF6
  9683                           tablat	equ	0xFF5
  9684                           prodh	equ	0xFF4
  9685                           prodl	equ	0xFF3
  9686                           intcon	equ	0xFF2
  9687                           intcon2	equ	0xFF1
  9688                           postinc0	equ	0xFEE
  9689                           plusw0	equ	0xFEB
  9690                           wreg	equ	0xFE8
  9691                           indf1	equ	0xFE7
  9692                           postdec1	equ	0xFE5
  9693                           fsr1h	equ	0xFE2
  9694                           fsr1l	equ	0xFE1
  9695                           indf2	equ	0xFDF
  9696                           postinc2	equ	0xFDE
  9697                           postdec2	equ	0xFDD
  9698                           plusw2	equ	0xFDB
  9699                           fsr2h	equ	0xFDA
  9700                           fsr2l	equ	0xFD9
  9701                           status	equ	0xFD8
  9702                           
  9703 ;; *************** function _SetMcuRunTime *****************
  9704 ;; Defined at:
  9705 ;;		line 57 in file "SystemStatus.c"
  9706 ;; Parameters:    Size  Location     Type
  9707 ;;		None
  9708 ;; Auto vars:     Size  Location     Type
  9709 ;;		None
  9710 ;; Return value:  Size  Location     Type
  9711 ;;                  1    wreg      void 
  9712 ;; Registers used:
  9713 ;;		wreg, status,2, status,0, cstack
  9714 ;; Tracked objects:
  9715 ;;		On entry : 0/0
  9716 ;;		On exit  : 0/0
  9717 ;;		Unchanged: 0/0
  9718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9719 ;;      Params:         0       0       0       0       0       0       0
  9720 ;;      Locals:         0       0       0       0       0       0       0
  9721 ;;      Temps:          0       0       0       0       0       0       0
  9722 ;;      Totals:         0       0       0       0       0       0       0
  9723 ;;Total ram usage:        0 bytes
  9724 ;; Hardware stack levels used:    1
  9725 ;; Hardware stack levels required when called:    5
  9726 ;; This function calls:
  9727 ;;		___llmod
  9728 ;; This function is called by:
  9729 ;;		_main
  9730 ;; This function uses a non-reentrant model
  9731 ;;
  9732                           
  9733                           	psect	text48
  9734  003C44                     __ptext48:
  9735                           	opt stack 0
  9736  003C44                     _SetMcuRunTime:
  9737                           	opt stack 25
  9738                           
  9739                           ;SystemStatus.c: 59: mcuRunTimeIn5SecTicks++;
  9740                           
  9741                           ;incstack = 0
  9742  003C44  0E01               	movlw	1
  9743  003C46  0101               	movlb	1	; () banked
  9744  003C48  2728               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  9745  003C4A  0E00               	movlw	0
  9746  003C4C  2329               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  9747  003C4E  232A               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  9748  003C50  232B               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  9749                           
  9750                           ; BSR set to: 1
  9751                           ;SystemStatus.c: 60: mcuRunTimeIn5SecTicks %= (17280);
  9752  003C52  C128  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  9753  003C56  C129  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  9754  003C5A  C12A  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  9755  003C5E  C12B  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  9756  003C62  0E80               	movlw	128
  9757  003C64  6E1C               	movwf	___llmod@divisor,c
  9758  003C66  0E43               	movlw	67
  9759  003C68  6E1D               	movwf	___llmod@divisor+1,c
  9760  003C6A  0E00               	movlw	0
  9761  003C6C  6E1E               	movwf	___llmod@divisor+2,c
  9762  003C6E  0E00               	movlw	0
  9763  003C70  6E1F               	movwf	___llmod@divisor+3,c
  9764  003C72  EC8F  F01B         	call	___llmod	;wreg free
  9765  003C76  C018  F128         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  9766  003C7A  C019  F129         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  9767  003C7E  C01A  F12A         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  9768  003C82  C01B  F12B         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  9769  003C86  0012               	return		;funcret
  9770  003C88                     __end_of_SetMcuRunTime:
  9771                           	opt stack 0
  9772                           tosu	equ	0xFFF
  9773                           tosh	equ	0xFFE
  9774                           tosl	equ	0xFFD
  9775                           pclath	equ	0xFFA
  9776                           tblptru	equ	0xFF8
  9777                           tblptrh	equ	0xFF7
  9778                           tblptrl	equ	0xFF6
  9779                           tablat	equ	0xFF5
  9780                           prodh	equ	0xFF4
  9781                           prodl	equ	0xFF3
  9782                           intcon	equ	0xFF2
  9783                           intcon2	equ	0xFF1
  9784                           postinc0	equ	0xFEE
  9785                           plusw0	equ	0xFEB
  9786                           wreg	equ	0xFE8
  9787                           indf1	equ	0xFE7
  9788                           postdec1	equ	0xFE5
  9789                           fsr1h	equ	0xFE2
  9790                           fsr1l	equ	0xFE1
  9791                           indf2	equ	0xFDF
  9792                           postinc2	equ	0xFDE
  9793                           postdec2	equ	0xFDD
  9794                           plusw2	equ	0xFDB
  9795                           fsr2h	equ	0xFDA
  9796                           fsr2l	equ	0xFD9
  9797                           status	equ	0xFD8
  9798                           
  9799 ;; *************** function ___llmod *****************
  9800 ;; Defined at:
  9801 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9802 ;; Parameters:    Size  Location     Type
  9803 ;;  dividend        4   23[COMRAM] unsigned long 
  9804 ;;  divisor         4   27[COMRAM] unsigned long 
  9805 ;; Auto vars:     Size  Location     Type
  9806 ;;  counter         1   31[COMRAM] unsigned char 
  9807 ;; Return value:  Size  Location     Type
  9808 ;;                  4   23[COMRAM] unsigned long 
  9809 ;; Registers used:
  9810 ;;		wreg, status,2, status,0
  9811 ;; Tracked objects:
  9812 ;;		On entry : 0/0
  9813 ;;		On exit  : 0/0
  9814 ;;		Unchanged: 0/0
  9815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9816 ;;      Params:         8       0       0       0       0       0       0
  9817 ;;      Locals:         1       0       0       0       0       0       0
  9818 ;;      Temps:          0       0       0       0       0       0       0
  9819 ;;      Totals:         9       0       0       0       0       0       0
  9820 ;;Total ram usage:        9 bytes
  9821 ;; Hardware stack levels used:    1
  9822 ;; Hardware stack levels required when called:    4
  9823 ;; This function calls:
  9824 ;;		Nothing
  9825 ;; This function is called by:
  9826 ;;		_SetMcuRunTime
  9827 ;;		_GetMcuRunTime
  9828 ;; This function uses a non-reentrant model
  9829 ;;
  9830                           
  9831                           	psect	text49
  9832  00371E                     __ptext49:
  9833                           	opt stack 0
  9834  00371E                     ___llmod:
  9835                           	opt stack 23
  9836                           
  9837                           ;incstack = 0
  9838  00371E  501C               	movf	___llmod@divisor,w,c
  9839  003720  101D               	iorwf	___llmod@divisor+1,w,c
  9840  003722  101E               	iorwf	___llmod@divisor+2,w,c
  9841  003724  101F               	iorwf	___llmod@divisor+3,w,c
  9842  003726  B4D8               	btfsc	status,2,c
  9843  003728  D024               	goto	l1967
  9844  00372A  0E01               	movlw	1
  9845  00372C  6E20               	movwf	___llmod@counter,c
  9846  00372E  D006               	goto	l1962
  9847  003730  90D8               	bcf	status,0,c
  9848  003732  361C               	rlcf	___llmod@divisor,f,c
  9849  003734  361D               	rlcf	___llmod@divisor+1,f,c
  9850  003736  361E               	rlcf	___llmod@divisor+2,f,c
  9851  003738  361F               	rlcf	___llmod@divisor+3,f,c
  9852  00373A  2A20               	incf	___llmod@counter,f,c
  9853  00373C                     l1962:
  9854  00373C  AE1F               	btfss	___llmod@divisor+3,7,c
  9855  00373E  D7F8               	goto	l1963
  9856  003740                     u8260:
  9857  003740  501C               	movf	___llmod@divisor,w,c
  9858  003742  5C18               	subwf	___llmod@dividend,w,c
  9859  003744  501D               	movf	___llmod@divisor+1,w,c
  9860  003746  5819               	subwfb	___llmod@dividend+1,w,c
  9861  003748  501E               	movf	___llmod@divisor+2,w,c
  9862  00374A  581A               	subwfb	___llmod@dividend+2,w,c
  9863  00374C  501F               	movf	___llmod@divisor+3,w,c
  9864  00374E  581B               	subwfb	___llmod@dividend+3,w,c
  9865  003750  A0D8               	btfss	status,0,c
  9866  003752  D008               	goto	l1966
  9867  003754  501C               	movf	___llmod@divisor,w,c
  9868  003756  5E18               	subwf	___llmod@dividend,f,c
  9869  003758  501D               	movf	___llmod@divisor+1,w,c
  9870  00375A  5A19               	subwfb	___llmod@dividend+1,f,c
  9871  00375C  501E               	movf	___llmod@divisor+2,w,c
  9872  00375E  5A1A               	subwfb	___llmod@dividend+2,f,c
  9873  003760  501F               	movf	___llmod@divisor+3,w,c
  9874  003762  5A1B               	subwfb	___llmod@dividend+3,f,c
  9875  003764                     l1966:
  9876  003764  90D8               	bcf	status,0,c
  9877  003766  321F               	rrcf	___llmod@divisor+3,f,c
  9878  003768  321E               	rrcf	___llmod@divisor+2,f,c
  9879  00376A  321D               	rrcf	___llmod@divisor+1,f,c
  9880  00376C  321C               	rrcf	___llmod@divisor,f,c
  9881  00376E  2E20               	decfsz	___llmod@counter,f,c
  9882  003770  D7E7               	goto	u8260
  9883  003772                     l1967:
  9884  003772  C018  F018         	movff	___llmod@dividend,?___llmod
  9885  003776  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  9886  00377A  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  9887  00377E  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  9888  003782  0012               	return		;funcret
  9889  003784                     __end_of___llmod:
  9890                           	opt stack 0
  9891                           tosu	equ	0xFFF
  9892                           tosh	equ	0xFFE
  9893                           tosl	equ	0xFFD
  9894                           pclath	equ	0xFFA
  9895                           tblptru	equ	0xFF8
  9896                           tblptrh	equ	0xFF7
  9897                           tblptrl	equ	0xFF6
  9898                           tablat	equ	0xFF5
  9899                           prodh	equ	0xFF4
  9900                           prodl	equ	0xFF3
  9901                           intcon	equ	0xFF2
  9902                           intcon2	equ	0xFF1
  9903                           postinc0	equ	0xFEE
  9904                           plusw0	equ	0xFEB
  9905                           wreg	equ	0xFE8
  9906                           indf1	equ	0xFE7
  9907                           postdec1	equ	0xFE5
  9908                           fsr1h	equ	0xFE2
  9909                           fsr1l	equ	0xFE1
  9910                           indf2	equ	0xFDF
  9911                           postinc2	equ	0xFDE
  9912                           postdec2	equ	0xFDD
  9913                           plusw2	equ	0xFDB
  9914                           fsr2h	equ	0xFDA
  9915                           fsr2l	equ	0xFD9
  9916                           status	equ	0xFD8
  9917                           
  9918 ;; *************** function _SendSystemStartAck *****************
  9919 ;; Defined at:
  9920 ;;		line 153 in file "SystemCommon.c"
  9921 ;; Parameters:    Size  Location     Type
  9922 ;;		None
  9923 ;; Auto vars:     Size  Location     Type
  9924 ;;		None
  9925 ;; Return value:  Size  Location     Type
  9926 ;;                  1    wreg      void 
  9927 ;; Registers used:
  9928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9929 ;; Tracked objects:
  9930 ;;		On entry : 0/0
  9931 ;;		On exit  : 0/0
  9932 ;;		Unchanged: 0/0
  9933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9934 ;;      Params:         0       0       0       0       0       0       0
  9935 ;;      Locals:         0       0       0       0       0       0       0
  9936 ;;      Temps:          0       0       0       0       0       0       0
  9937 ;;      Totals:         0       0       0       0       0       0       0
  9938 ;;Total ram usage:        0 bytes
  9939 ;; Hardware stack levels used:    1
  9940 ;; Hardware stack levels required when called:    7
  9941 ;; This function calls:
  9942 ;;		_SendAckMessage
  9943 ;; This function is called by:
  9944 ;;		_main
  9945 ;; This function uses a non-reentrant model
  9946 ;;
  9947                           
  9948                           	psect	text50
  9949  004416                     __ptext50:
  9950                           	opt stack 0
  9951  004416                     _SendSystemStartAck:
  9952                           	opt stack 23
  9953                           
  9954                           ;SystemCommon.c: 155: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  9955                           
  9956                           ;incstack = 0
  9957  004416  0E10               	movlw	16
  9958  004418  6E24               	movwf	SendAckMessage@inRequest,c
  9959  00441A  0E01               	movlw	1
  9960  00441C  ECB0  F01D         	call	_SendAckMessage
  9961  004420  0012               	return		;funcret
  9962  004422                     __end_of_SendSystemStartAck:
  9963                           	opt stack 0
  9964                           tosu	equ	0xFFF
  9965                           tosh	equ	0xFFE
  9966                           tosl	equ	0xFFD
  9967                           pclath	equ	0xFFA
  9968                           tblptru	equ	0xFF8
  9969                           tblptrh	equ	0xFF7
  9970                           tblptrl	equ	0xFF6
  9971                           tablat	equ	0xFF5
  9972                           prodh	equ	0xFF4
  9973                           prodl	equ	0xFF3
  9974                           intcon	equ	0xFF2
  9975                           intcon2	equ	0xFF1
  9976                           postinc0	equ	0xFEE
  9977                           plusw0	equ	0xFEB
  9978                           wreg	equ	0xFE8
  9979                           indf1	equ	0xFE7
  9980                           postdec1	equ	0xFE5
  9981                           fsr1h	equ	0xFE2
  9982                           fsr1l	equ	0xFE1
  9983                           indf2	equ	0xFDF
  9984                           postinc2	equ	0xFDE
  9985                           postdec2	equ	0xFDD
  9986                           plusw2	equ	0xFDB
  9987                           fsr2h	equ	0xFDA
  9988                           fsr2l	equ	0xFD9
  9989                           status	equ	0xFD8
  9990                           
  9991 ;; *************** function _SendAckMessage *****************
  9992 ;; Defined at:
  9993 ;;		line 171 in file "EusartApp.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;  inGroup         1    wreg     enum E7193
  9996 ;;  inRequest       1   35[COMRAM] enum E7201
  9997 ;; Auto vars:     Size  Location     Type
  9998 ;;  inGroup         1   36[COMRAM] enum E7193
  9999 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
 10000 ;; Return value:  Size  Location     Type
 10001 ;;                  1    wreg      void 
 10002 ;; Registers used:
 10003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10004 ;; Tracked objects:
 10005 ;;		On entry : 0/0
 10006 ;;		On exit  : 0/0
 10007 ;;		Unchanged: 0/0
 10008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10009 ;;      Params:         1       0       0       0       0       0       0
 10010 ;;      Locals:         7       0       0       0       0       0       0
 10011 ;;      Temps:          0       0       0       0       0       0       0
 10012 ;;      Totals:         8       0       0       0       0       0       0
 10013 ;;Total ram usage:        8 bytes
 10014 ;; Hardware stack levels used:    1
 10015 ;; Hardware stack levels required when called:    6
 10016 ;; This function calls:
 10017 ;;		_WriteUartMessage
 10018 ;;		_ZeroArray
 10019 ;;		_crc8
 10020 ;; This function is called by:
 10021 ;;		_testLeds
 10022 ;;		_SetChannelMode
 10023 ;;		_FlashReadUart
 10024 ;;		_FlashEreaseMem
 10025 ;;		_DacSetValue
 10026 ;;		_UpdateSynthFreq
 10027 ;;		_SetSynthOper
 10028 ;;		_ResetMcu
 10029 ;;		_SendSystemStartAck
 10030 ;;		_keepAliveSignalUart
 10031 ;; This function uses a non-reentrant model
 10032 ;;
 10033                           
 10034                           	psect	text51
 10035  003B60                     __ptext51:
 10036                           	opt stack 0
 10037  003B60                     _SendAckMessage:
 10038                           	opt stack 21
 10039                           
 10040                           ;incstack = 0
 10041                           ;SendAckMessage@inGroup stored from wreg
 10042  003B60  6E25               	movwf	SendAckMessage@inGroup,c
 10043                           
 10044                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
 10045                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
 10046  003B62  0E26               	movlw	low SendAckMessage@TxMsg
 10047  003B64  6E20               	movwf	ZeroArray@array,c
 10048  003B66  0E00               	movlw	high SendAckMessage@TxMsg
 10049  003B68  6E21               	movwf	ZeroArray@array+1,c
 10050  003B6A  0E00               	movlw	0
 10051  003B6C  6E23               	movwf	ZeroArray@size+1,c
 10052  003B6E  0E06               	movlw	6
 10053  003B70  6E22               	movwf	ZeroArray@size,c
 10054  003B72  EC58  F021         	call	_ZeroArray	;wreg free
 10055                           
 10056                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
 10057  003B76  0E24               	movlw	36
 10058  003B78  6E26               	movwf	SendAckMessage@TxMsg,c
 10059                           
 10060                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
 10061  003B7A  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
 10062                           
 10063                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
 10064  003B7E  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
 10065                           
 10066                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
 10067  003B82  0E00               	movlw	0
 10068  003B84  6E29               	movwf	SendAckMessage@TxMsg+3,c
 10069                           
 10070                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
 10071  003B86  0E26               	movlw	low SendAckMessage@TxMsg
 10072  003B88  6E18               	movwf	crc8@dataArray,c
 10073  003B8A  0E00               	movlw	high SendAckMessage@TxMsg
 10074  003B8C  6E19               	movwf	crc8@dataArray+1,c
 10075  003B8E  0E00               	movlw	0
 10076  003B90  6E1B               	movwf	crc8@dataSize+1,c
 10077  003B92  0E05               	movlw	5
 10078  003B94  6E1A               	movwf	crc8@dataSize,c
 10079  003B96  ECD9  F01D         	call	_crc8	;wreg free
 10080  003B9A  6E2B               	movwf	SendAckMessage@TxMsg+5,c
 10081                           
 10082                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
 10083  003B9C  0E26               	movlw	low SendAckMessage@TxMsg
 10084  003B9E  6E19               	movwf	WriteUartMessage@dataBuf,c
 10085  003BA0  0E00               	movlw	high SendAckMessage@TxMsg
 10086  003BA2  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
 10087  003BA4  0E00               	movlw	0
 10088  003BA6  6E1C               	movwf	WriteUartMessage@dataSize+1,c
 10089  003BA8  0E06               	movlw	6
 10090  003BAA  6E1B               	movwf	WriteUartMessage@dataSize,c
 10091  003BAC  EC8B  F01F         	call	_WriteUartMessage	;wreg free
 10092  003BB0  0012               	return		;funcret
 10093  003BB2                     __end_of_SendAckMessage:
 10094                           	opt stack 0
 10095                           tosu	equ	0xFFF
 10096                           tosh	equ	0xFFE
 10097                           tosl	equ	0xFFD
 10098                           pclath	equ	0xFFA
 10099                           tblptru	equ	0xFF8
 10100                           tblptrh	equ	0xFF7
 10101                           tblptrl	equ	0xFF6
 10102                           tablat	equ	0xFF5
 10103                           prodh	equ	0xFF4
 10104                           prodl	equ	0xFF3
 10105                           intcon	equ	0xFF2
 10106                           intcon2	equ	0xFF1
 10107                           postinc0	equ	0xFEE
 10108                           plusw0	equ	0xFEB
 10109                           wreg	equ	0xFE8
 10110                           indf1	equ	0xFE7
 10111                           postdec1	equ	0xFE5
 10112                           fsr1h	equ	0xFE2
 10113                           fsr1l	equ	0xFE1
 10114                           indf2	equ	0xFDF
 10115                           postinc2	equ	0xFDE
 10116                           postdec2	equ	0xFDD
 10117                           plusw2	equ	0xFDB
 10118                           fsr2h	equ	0xFDA
 10119                           fsr2l	equ	0xFD9
 10120                           status	equ	0xFD8
 10121                           
 10122 ;; *************** function _crc8 *****************
 10123 ;; Defined at:
 10124 ;;		line 13 in file "SystemCommon.c"
 10125 ;; Parameters:    Size  Location     Type
 10126 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
 10127 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(29), DacReadValue@TxMsg(7), 
 10128 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
 10129 ;;  dataSize        2   25[COMRAM] int 
 10130 ;; Auto vars:     Size  Location     Type
 10131 ;;  i               2   30[COMRAM] int 
 10132 ;;  crc             2   28[COMRAM] int 
 10133 ;; Return value:  Size  Location     Type
 10134 ;;                  1    wreg      unsigned char 
 10135 ;; Registers used:
 10136 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10137 ;; Tracked objects:
 10138 ;;		On entry : 0/0
 10139 ;;		On exit  : 0/0
 10140 ;;		Unchanged: 0/0
 10141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10142 ;;      Params:         4       0       0       0       0       0       0
 10143 ;;      Locals:         4       0       0       0       0       0       0
 10144 ;;      Temps:          1       0       0       0       0       0       0
 10145 ;;      Totals:         9       0       0       0       0       0       0
 10146 ;;Total ram usage:        9 bytes
 10147 ;; Hardware stack levels used:    1
 10148 ;; Hardware stack levels required when called:    4
 10149 ;; This function calls:
 10150 ;;		Nothing
 10151 ;; This function is called by:
 10152 ;;		_readUartMessage
 10153 ;;		_SendAckMessage
 10154 ;;		_FlashReadUart
 10155 ;;		_FlashReadCondition
 10156 ;;		_DacReadValue
 10157 ;;		_SynthReadData
 10158 ;;		_GetMcuFwVersion
 10159 ;;		_GetMcuRunTime
 10160 ;; This function uses a non-reentrant model
 10161 ;;
 10162                           
 10163                           	psect	text52
 10164  003BB2                     __ptext52:
 10165                           	opt stack 0
 10166  003BB2                     _crc8:
 10167                           	opt stack 25
 10168                           
 10169                           ;SystemCommon.c: 15: int crc = 0;
 10170                           
 10171                           ;incstack = 0
 10172  003BB2  0E00               	movlw	0
 10173  003BB4  6E1E               	movwf	crc8@crc+1,c
 10174  003BB6  0E00               	movlw	0
 10175  003BB8  6E1D               	movwf	crc8@crc,c
 10176                           
 10177                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
 10178  003BBA  0E00               	movlw	0
 10179  003BBC  6E20               	movwf	crc8@i+1,c
 10180  003BBE  0E00               	movlw	0
 10181  003BC0  6E1F               	movwf	crc8@i,c
 10182  003BC2  D00E               	goto	l1394
 10183  003BC4                     
 10184                           ;SystemCommon.c: 17: {
 10185                           ;SystemCommon.c: 18: crc += dataArray[i];
 10186  003BC4  501F               	movf	crc8@i,w,c
 10187  003BC6  2418               	addwf	crc8@dataArray,w,c
 10188  003BC8  6ED9               	movwf	fsr2l,c
 10189  003BCA  5020               	movf	crc8@i+1,w,c
 10190  003BCC  2019               	addwfc	crc8@dataArray+1,w,c
 10191  003BCE  6EDA               	movwf	fsr2h,c
 10192  003BD0  50DF               	movf	indf2,w,c
 10193  003BD2  6E1C               	movwf	??_crc8& (0+255),c
 10194  003BD4  501C               	movf	??_crc8,w,c
 10195  003BD6  261D               	addwf	crc8@crc,f,c
 10196  003BD8  0E00               	movlw	0
 10197  003BDA  221E               	addwfc	crc8@crc+1,f,c
 10198  003BDC  4A1F               	infsnz	crc8@i,f,c
 10199  003BDE  2A20               	incf	crc8@i+1,f,c
 10200  003BE0                     l1394:
 10201  003BE0  501A               	movf	crc8@dataSize,w,c
 10202  003BE2  5C1F               	subwf	crc8@i,w,c
 10203  003BE4  5020               	movf	crc8@i+1,w,c
 10204  003BE6  0A80               	xorlw	128
 10205  003BE8  6E1C               	movwf	??_crc8& (0+255),c
 10206  003BEA  501B               	movf	crc8@dataSize+1,w,c
 10207  003BEC  0A80               	xorlw	128
 10208  003BEE  581C               	subwfb	??_crc8& (0+255),w,c
 10209  003BF0  A0D8               	btfss	status,0,c
 10210  003BF2  D7E8               	goto	l1395
 10211                           
 10212                           ;SystemCommon.c: 19: }
 10213                           ;SystemCommon.c: 20: crc &= 0xff;
 10214  003BF4  0EFF               	movlw	255
 10215  003BF6  161D               	andwf	crc8@crc,f,c
 10216  003BF8  0E00               	movlw	0
 10217  003BFA  161E               	andwf	crc8@crc+1,f,c
 10218                           
 10219                           ;SystemCommon.c: 21: return crc;
 10220  003BFC  501D               	movf	crc8@crc,w,c
 10221  003BFE  0012               	return	
 10222  003C00                     __end_of_crc8:
 10223                           	opt stack 0
 10224                           tosu	equ	0xFFF
 10225                           tosh	equ	0xFFE
 10226                           tosl	equ	0xFFD
 10227                           pclath	equ	0xFFA
 10228                           tblptru	equ	0xFF8
 10229                           tblptrh	equ	0xFF7
 10230                           tblptrl	equ	0xFF6
 10231                           tablat	equ	0xFF5
 10232                           prodh	equ	0xFF4
 10233                           prodl	equ	0xFF3
 10234                           intcon	equ	0xFF2
 10235                           intcon2	equ	0xFF1
 10236                           postinc0	equ	0xFEE
 10237                           plusw0	equ	0xFEB
 10238                           wreg	equ	0xFE8
 10239                           indf1	equ	0xFE7
 10240                           postdec1	equ	0xFE5
 10241                           fsr1h	equ	0xFE2
 10242                           fsr1l	equ	0xFE1
 10243                           indf2	equ	0xFDF
 10244                           postinc2	equ	0xFDE
 10245                           postdec2	equ	0xFDD
 10246                           plusw2	equ	0xFDB
 10247                           fsr2h	equ	0xFDA
 10248                           fsr2l	equ	0xFD9
 10249                           status	equ	0xFD8
 10250                           
 10251 ;; *************** function _ZeroArray *****************
 10252 ;; Defined at:
 10253 ;;		line 24 in file "SystemCommon.c"
 10254 ;; Parameters:    Size  Location     Type
 10255 ;;  array           2   31[COMRAM] PTR unsigned char 
 10256 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SynthReadData@TxMsg(29), SynthReadData@eepromDataA
      +rray(20), 
 10257 ;;		 -> DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
 10258 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 10259 ;;  size            2   33[COMRAM] int 
 10260 ;; Auto vars:     Size  Location     Type
 10261 ;;		None
 10262 ;; Return value:  Size  Location     Type
 10263 ;;                  1    wreg      void 
 10264 ;; Registers used:
 10265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10266 ;; Tracked objects:
 10267 ;;		On entry : 0/0
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10271 ;;      Params:         4       0       0       0       0       0       0
 10272 ;;      Locals:         0       0       0       0       0       0       0
 10273 ;;      Temps:          0       0       0       0       0       0       0
 10274 ;;      Totals:         4       0       0       0       0       0       0
 10275 ;;Total ram usage:        4 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; Hardware stack levels required when called:    5
 10278 ;; This function calls:
 10279 ;;		_memset
 10280 ;; This function is called by:
 10281 ;;		_readUartMessage
 10282 ;;		_InitRxMessageParams
 10283 ;;		_SendAckMessage
 10284 ;;		_FlashReadUart
 10285 ;;		_FlashEreaseMem
 10286 ;;		_FlashReadCondition
 10287 ;;		_DacReadValue
 10288 ;;		_SynthReadData
 10289 ;;		_GetIntFromUartData
 10290 ;;		_GetMcuFwVersion
 10291 ;; This function uses a non-reentrant model
 10292 ;;
 10293                           
 10294                           	psect	text53
 10295  0042B0                     __ptext53:
 10296                           	opt stack 0
 10297  0042B0                     _ZeroArray:
 10298                           	opt stack 24
 10299                           
 10300                           ;SystemCommon.c: 26: memset(array, 0x0, size);
 10301                           
 10302                           ;incstack = 0
 10303  0042B0  C020  F018         	movff	ZeroArray@array,memset@p1
 10304  0042B4  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
 10305  0042B8  0E00               	movlw	0
 10306  0042BA  6E1B               	movwf	memset@c+1,c
 10307  0042BC  0E00               	movlw	0
 10308  0042BE  6E1A               	movwf	memset@c,c
 10309  0042C0  C022  F01C         	movff	ZeroArray@size,memset@n
 10310  0042C4  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
 10311  0042C8  EC6E  F020         	call	_memset	;wreg free
 10312  0042CC  0012               	return		;funcret
 10313  0042CE                     __end_of_ZeroArray:
 10314                           	opt stack 0
 10315                           tosu	equ	0xFFF
 10316                           tosh	equ	0xFFE
 10317                           tosl	equ	0xFFD
 10318                           pclath	equ	0xFFA
 10319                           tblptru	equ	0xFF8
 10320                           tblptrh	equ	0xFF7
 10321                           tblptrl	equ	0xFF6
 10322                           tablat	equ	0xFF5
 10323                           prodh	equ	0xFF4
 10324                           prodl	equ	0xFF3
 10325                           intcon	equ	0xFF2
 10326                           intcon2	equ	0xFF1
 10327                           postinc0	equ	0xFEE
 10328                           plusw0	equ	0xFEB
 10329                           wreg	equ	0xFE8
 10330                           indf1	equ	0xFE7
 10331                           postdec1	equ	0xFE5
 10332                           fsr1h	equ	0xFE2
 10333                           fsr1l	equ	0xFE1
 10334                           indf2	equ	0xFDF
 10335                           postinc2	equ	0xFDE
 10336                           postdec2	equ	0xFDD
 10337                           plusw2	equ	0xFDB
 10338                           fsr2h	equ	0xFDA
 10339                           fsr2l	equ	0xFD9
 10340                           status	equ	0xFD8
 10341                           
 10342 ;; *************** function _WriteUartMessage *****************
 10343 ;; Defined at:
 10344 ;;		line 158 in file "EusartApp.c"
 10345 ;; Parameters:    Size  Location     Type
 10346 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
 10347 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(29), DacReadValue@TxMsg(7), 
 10348 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
 10349 ;;  dataSize        2   26[COMRAM] int 
 10350 ;; Auto vars:     Size  Location     Type
 10351 ;;  idx             2   29[COMRAM] int 
 10352 ;; Return value:  Size  Location     Type
 10353 ;;                  1    wreg      void 
 10354 ;; Registers used:
 10355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10356 ;; Tracked objects:
 10357 ;;		On entry : 0/0
 10358 ;;		On exit  : 0/0
 10359 ;;		Unchanged: 0/0
 10360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10361 ;;      Params:         4       0       0       0       0       0       0
 10362 ;;      Locals:         2       0       0       0       0       0       0
 10363 ;;      Temps:          1       0       0       0       0       0       0
 10364 ;;      Totals:         7       0       0       0       0       0       0
 10365 ;;Total ram usage:        7 bytes
 10366 ;; Hardware stack levels used:    1
 10367 ;; Hardware stack levels required when called:    5
 10368 ;; This function calls:
 10369 ;;		_EUSART1_Write
 10370 ;; This function is called by:
 10371 ;;		_SendAckMessage
 10372 ;;		_FlashReadUart
 10373 ;;		_FlashReadCondition
 10374 ;;		_DacReadValue
 10375 ;;		_SynthReadData
 10376 ;;		_GetMcuFwVersion
 10377 ;;		_GetMcuRunTime
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           	psect	text54
 10382  003F16                     __ptext54:
 10383                           	opt stack 0
 10384  003F16                     _WriteUartMessage:
 10385                           	opt stack 21
 10386                           
 10387                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
 10388                           
 10389                           ;incstack = 0
 10390  003F16  0E00               	movlw	0
 10391  003F18  6E1F               	movwf	WriteUartMessage@idx+1,c
 10392  003F1A  0E00               	movlw	0
 10393  003F1C  6E1E               	movwf	WriteUartMessage@idx,c
 10394  003F1E  D00B               	goto	l234
 10395  003F20                     
 10396                           ;EusartApp.c: 161: {
 10397                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
 10398  003F20  501E               	movf	WriteUartMessage@idx,w,c
 10399  003F22  2419               	addwf	WriteUartMessage@dataBuf,w,c
 10400  003F24  6ED9               	movwf	fsr2l,c
 10401  003F26  501F               	movf	WriteUartMessage@idx+1,w,c
 10402  003F28  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
 10403  003F2A  6EDA               	movwf	fsr2h,c
 10404  003F2C  50DF               	movf	indf2,w,c
 10405  003F2E  ECA5  F01E         	call	_EUSART1_Write
 10406  003F32  4A1E               	infsnz	WriteUartMessage@idx,f,c
 10407  003F34  2A1F               	incf	WriteUartMessage@idx+1,f,c
 10408  003F36                     l234:
 10409  003F36  501B               	movf	WriteUartMessage@dataSize,w,c
 10410  003F38  5C1E               	subwf	WriteUartMessage@idx,w,c
 10411  003F3A  501F               	movf	WriteUartMessage@idx+1,w,c
 10412  003F3C  0A80               	xorlw	128
 10413  003F3E  6E1D               	movwf	??_WriteUartMessage& (0+255),c
 10414  003F40  501C               	movf	WriteUartMessage@dataSize+1,w,c
 10415  003F42  0A80               	xorlw	128
 10416  003F44  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
 10417  003F46  B0D8               	btfsc	status,0,c
 10418  003F48  0012               	return	
 10419  003F4A  D7EA               	goto	l235
 10420  003F4C                     __end_of_WriteUartMessage:
 10421                           	opt stack 0
 10422                           tosu	equ	0xFFF
 10423                           tosh	equ	0xFFE
 10424                           tosl	equ	0xFFD
 10425                           pclath	equ	0xFFA
 10426                           tblptru	equ	0xFF8
 10427                           tblptrh	equ	0xFF7
 10428                           tblptrl	equ	0xFF6
 10429                           tablat	equ	0xFF5
 10430                           prodh	equ	0xFF4
 10431                           prodl	equ	0xFF3
 10432                           intcon	equ	0xFF2
 10433                           intcon2	equ	0xFF1
 10434                           postinc0	equ	0xFEE
 10435                           plusw0	equ	0xFEB
 10436                           wreg	equ	0xFE8
 10437                           indf1	equ	0xFE7
 10438                           postdec1	equ	0xFE5
 10439                           fsr1h	equ	0xFE2
 10440                           fsr1l	equ	0xFE1
 10441                           indf2	equ	0xFDF
 10442                           postinc2	equ	0xFDE
 10443                           postdec2	equ	0xFDD
 10444                           plusw2	equ	0xFDB
 10445                           fsr2h	equ	0xFDA
 10446                           fsr2l	equ	0xFD9
 10447                           status	equ	0xFD8
 10448                           
 10449 ;; *************** function _EUSART1_Write *****************
 10450 ;; Defined at:
 10451 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 10452 ;; Parameters:    Size  Location     Type
 10453 ;;  txData          1    wreg     unsigned char 
 10454 ;; Auto vars:     Size  Location     Type
 10455 ;;  txData          1   23[COMRAM] unsigned char 
 10456 ;; Return value:  Size  Location     Type
 10457 ;;                  1    wreg      void 
 10458 ;; Registers used:
 10459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10460 ;; Tracked objects:
 10461 ;;		On entry : 0/0
 10462 ;;		On exit  : 0/0
 10463 ;;		Unchanged: 0/0
 10464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10465 ;;      Params:         0       0       0       0       0       0       0
 10466 ;;      Locals:         1       0       0       0       0       0       0
 10467 ;;      Temps:          0       0       0       0       0       0       0
 10468 ;;      Totals:         1       0       0       0       0       0       0
 10469 ;;Total ram usage:        1 bytes
 10470 ;; Hardware stack levels used:    1
 10471 ;; Hardware stack levels required when called:    4
 10472 ;; This function calls:
 10473 ;;		Nothing
 10474 ;; This function is called by:
 10475 ;;		_WriteUartMessage
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           	psect	text55
 10480  003D4A                     __ptext55:
 10481                           	opt stack 0
 10482  003D4A                     _EUSART1_Write:
 10483                           	opt stack 21
 10484                           
 10485                           ;incstack = 0
 10486                           ;EUSART1_Write@txData stored from wreg
 10487  003D4A  6E18               	movwf	EUSART1_Write@txData,c
 10488  003D4C                     
 10489                           ;eusart1.c: 160: {
 10490                           
 10491                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 10492  003D4C  0101               	movlb	1	; () banked
 10493  003D4E  51D2               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 10494  003D50  B4D8               	btfsc	status,2,c
 10495  003D52  D7FC               	goto	l7660
 10496                           
 10497                           ; BSR set to: 1
 10498                           ;eusart1.c: 161: }
 10499                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 10500  003D54  B89D               	btfsc	3997,4,c	;volatile
 10501  003D56  D003               	goto	l913
 10502                           
 10503                           ; BSR set to: 1
 10504                           ;eusart1.c: 164: {
 10505                           ;eusart1.c: 165: TXREG1 = txData;
 10506  003D58  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 10507                           
 10508                           ;eusart1.c: 166: }
 10509  003D5C  D012               	goto	l914
 10510  003D5E                     l913:
 10511                           
 10512                           ; BSR set to: 1
 10513                           ;eusart1.c: 167: else
 10514                           ;eusart1.c: 168: {
 10515                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 10516  003D5E  989D               	bcf	3997,4,c	;volatile
 10517                           
 10518                           ; BSR set to: 1
 10519                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 10520  003D60  5036               	movf	_eusart1TxHead,w,c	;volatile
 10521  003D62  0D01               	mullw	1
 10522  003D64  0E00               	movlw	low _eusart1TxBuffer
 10523  003D66  24F3               	addwf	prodl,w,c
 10524  003D68  6ED9               	movwf	fsr2l,c
 10525  003D6A  0E02               	movlw	high _eusart1TxBuffer
 10526  003D6C  20F4               	addwfc	prodh,w,c
 10527  003D6E  6EDA               	movwf	fsr2h,c
 10528  003D70  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 10529                           
 10530                           ; BSR set to: 1
 10531  003D74  2A36               	incf	_eusart1TxHead,f,c	;volatile
 10532                           
 10533                           ; BSR set to: 1
 10534                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 10535  003D76  0E45               	movlw	69
 10536  003D78  6436               	cpfsgt	_eusart1TxHead,c	;volatile
 10537  003D7A  D002               	goto	l915
 10538                           
 10539                           ; BSR set to: 1
 10540                           ;eusart1.c: 172: {
 10541                           ;eusart1.c: 173: eusart1TxHead = 0;
 10542  003D7C  0E00               	movlw	0
 10543  003D7E  6E36               	movwf	_eusart1TxHead,c	;volatile
 10544  003D80                     l915:
 10545                           
 10546                           ; BSR set to: 1
 10547                           ;eusart1.c: 174: }
 10548                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 10549                           
 10550                           ; BSR set to: 1
 10551  003D80  07D2               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 10552  003D82                     l914:
 10553                           
 10554                           ; BSR set to: 1
 10555                           ;eusart1.c: 176: }
 10556                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 10557                           
 10558                           ; BSR set to: 1
 10559  003D82  889D               	bsf	3997,4,c	;volatile
 10560                           
 10561                           ; BSR set to: 1
 10562  003D84  0012               	return		;funcret
 10563  003D86                     __end_of_EUSART1_Write:
 10564                           	opt stack 0
 10565                           tosu	equ	0xFFF
 10566                           tosh	equ	0xFFE
 10567                           tosl	equ	0xFFD
 10568                           pclath	equ	0xFFA
 10569                           tblptru	equ	0xFF8
 10570                           tblptrh	equ	0xFF7
 10571                           tblptrl	equ	0xFF6
 10572                           tablat	equ	0xFF5
 10573                           prodh	equ	0xFF4
 10574                           prodl	equ	0xFF3
 10575                           intcon	equ	0xFF2
 10576                           intcon2	equ	0xFF1
 10577                           postinc0	equ	0xFEE
 10578                           plusw0	equ	0xFEB
 10579                           wreg	equ	0xFE8
 10580                           indf1	equ	0xFE7
 10581                           postdec1	equ	0xFE5
 10582                           fsr1h	equ	0xFE2
 10583                           fsr1l	equ	0xFE1
 10584                           indf2	equ	0xFDF
 10585                           postinc2	equ	0xFDE
 10586                           postdec2	equ	0xFDD
 10587                           plusw2	equ	0xFDB
 10588                           fsr2h	equ	0xFDA
 10589                           fsr2l	equ	0xFD9
 10590                           status	equ	0xFD8
 10591                           
 10592 ;; *************** function _InitSystemApplicationManagers *****************
 10593 ;; Defined at:
 10594 ;;		line 33 in file "SystemSettings.c"
 10595 ;; Parameters:    Size  Location     Type
 10596 ;;		None
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;		None
 10599 ;; Return value:  Size  Location     Type
 10600 ;;                  1    wreg      void 
 10601 ;; Registers used:
 10602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10603 ;; Tracked objects:
 10604 ;;		On entry : 0/0
 10605 ;;		On exit  : 0/0
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10608 ;;      Params:         0       0       0       0       0       0       0
 10609 ;;      Locals:         0       0       0       0       0       0       0
 10610 ;;      Temps:          0       0       0       0       0       0       0
 10611 ;;      Totals:         0       0       0       0       0       0       0
 10612 ;;Total ram usage:        0 bytes
 10613 ;; Hardware stack levels used:    1
 10614 ;; Hardware stack levels required when called:   12
 10615 ;; This function calls:
 10616 ;;		_ClearMcuRunTime
 10617 ;;		_DacInit
 10618 ;;		_InitAdcApplicationMgr
 10619 ;;		_PLLInitialize
 10620 ;;		_TMR0_StartTimer
 10621 ;; This function is called by:
 10622 ;;		_main
 10623 ;; This function uses a non-reentrant model
 10624 ;;
 10625                           
 10626                           	psect	text56
 10627  00434E                     __ptext56:
 10628                           	opt stack 0
 10629  00434E                     _InitSystemApplicationManagers:
 10630                           	opt stack 18
 10631                           
 10632                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 10633                           
 10634                           ; BSR set to: 1
 10635                           ;incstack = 0
 10636  00434E  EC2E  F022         	call	_InitAdcApplicationMgr	;wreg free
 10637                           
 10638                           ;SystemSettings.c: 39: TMR0_StartTimer();
 10639  004352  EC33  F022         	call	_TMR0_StartTimer	;wreg free
 10640                           
 10641                           ;SystemSettings.c: 42: PLLInitialize();
 10642  004356  EC86  F01E         	call	_PLLInitialize	;wreg free
 10643                           
 10644                           ;SystemSettings.c: 45: ClearMcuRunTime();
 10645  00435A  ECC6  F021         	call	_ClearMcuRunTime	;wreg free
 10646                           
 10647                           ;SystemSettings.c: 48: DacInit();
 10648  00435E  EC5A  F014         	call	_DacInit	;wreg free
 10649  004362  0012               	return		;funcret
 10650  004364                     __end_of_InitSystemApplicationManagers:
 10651                           	opt stack 0
 10652                           tosu	equ	0xFFF
 10653                           tosh	equ	0xFFE
 10654                           tosl	equ	0xFFD
 10655                           pclath	equ	0xFFA
 10656                           tblptru	equ	0xFF8
 10657                           tblptrh	equ	0xFF7
 10658                           tblptrl	equ	0xFF6
 10659                           tablat	equ	0xFF5
 10660                           prodh	equ	0xFF4
 10661                           prodl	equ	0xFF3
 10662                           intcon	equ	0xFF2
 10663                           intcon2	equ	0xFF1
 10664                           postinc0	equ	0xFEE
 10665                           plusw0	equ	0xFEB
 10666                           wreg	equ	0xFE8
 10667                           indf1	equ	0xFE7
 10668                           postdec1	equ	0xFE5
 10669                           fsr1h	equ	0xFE2
 10670                           fsr1l	equ	0xFE1
 10671                           indf2	equ	0xFDF
 10672                           postinc2	equ	0xFDE
 10673                           postdec2	equ	0xFDD
 10674                           plusw2	equ	0xFDB
 10675                           fsr2h	equ	0xFDA
 10676                           fsr2l	equ	0xFD9
 10677                           status	equ	0xFD8
 10678                           
 10679 ;; *************** function _TMR0_StartTimer *****************
 10680 ;; Defined at:
 10681 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 10682 ;; Parameters:    Size  Location     Type
 10683 ;;		None
 10684 ;; Auto vars:     Size  Location     Type
 10685 ;;		None
 10686 ;; Return value:  Size  Location     Type
 10687 ;;                  1    wreg      void 
 10688 ;; Registers used:
 10689 ;;		None
 10690 ;; Tracked objects:
 10691 ;;		On entry : 0/0
 10692 ;;		On exit  : 0/0
 10693 ;;		Unchanged: 0/0
 10694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10695 ;;      Params:         0       0       0       0       0       0       0
 10696 ;;      Locals:         0       0       0       0       0       0       0
 10697 ;;      Temps:          0       0       0       0       0       0       0
 10698 ;;      Totals:         0       0       0       0       0       0       0
 10699 ;;Total ram usage:        0 bytes
 10700 ;; Hardware stack levels used:    1
 10701 ;; Hardware stack levels required when called:    4
 10702 ;; This function calls:
 10703 ;;		Nothing
 10704 ;; This function is called by:
 10705 ;;		_InitSystemApplicationManagers
 10706 ;; This function uses a non-reentrant model
 10707 ;;
 10708                           
 10709                           	psect	text57
 10710  004466                     __ptext57:
 10711                           	opt stack 0
 10712  004466                     _TMR0_StartTimer:
 10713                           	opt stack 25
 10714                           
 10715                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 10716                           
 10717                           ;incstack = 0
 10718  004466  8ED5               	bsf	4053,7,c	;volatile
 10719  004468  0012               	return		;funcret
 10720  00446A                     __end_of_TMR0_StartTimer:
 10721                           	opt stack 0
 10722                           tosu	equ	0xFFF
 10723                           tosh	equ	0xFFE
 10724                           tosl	equ	0xFFD
 10725                           pclath	equ	0xFFA
 10726                           tblptru	equ	0xFF8
 10727                           tblptrh	equ	0xFF7
 10728                           tblptrl	equ	0xFF6
 10729                           tablat	equ	0xFF5
 10730                           prodh	equ	0xFF4
 10731                           prodl	equ	0xFF3
 10732                           intcon	equ	0xFF2
 10733                           intcon2	equ	0xFF1
 10734                           postinc0	equ	0xFEE
 10735                           plusw0	equ	0xFEB
 10736                           wreg	equ	0xFE8
 10737                           indf1	equ	0xFE7
 10738                           postdec1	equ	0xFE5
 10739                           fsr1h	equ	0xFE2
 10740                           fsr1l	equ	0xFE1
 10741                           indf2	equ	0xFDF
 10742                           postinc2	equ	0xFDE
 10743                           postdec2	equ	0xFDD
 10744                           plusw2	equ	0xFDB
 10745                           fsr2h	equ	0xFDA
 10746                           fsr2l	equ	0xFD9
 10747                           status	equ	0xFD8
 10748                           
 10749 ;; *************** function _PLLInitialize *****************
 10750 ;; Defined at:
 10751 ;;		line 29 in file "SyntApp.c"
 10752 ;; Parameters:    Size  Location     Type
 10753 ;;		None
 10754 ;; Auto vars:     Size  Location     Type
 10755 ;;		None
 10756 ;; Return value:  Size  Location     Type
 10757 ;;                  1    wreg      void 
 10758 ;; Registers used:
 10759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10760 ;; Tracked objects:
 10761 ;;		On entry : 0/0
 10762 ;;		On exit  : 0/0
 10763 ;;		Unchanged: 0/0
 10764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10765 ;;      Params:         0       0       0       0       0       0       0
 10766 ;;      Locals:         0       0       0       0       0       0       0
 10767 ;;      Temps:          0       0       0       0       0       0       0
 10768 ;;      Totals:         0       0       0       0       0       0       0
 10769 ;;Total ram usage:        0 bytes
 10770 ;; Hardware stack levels used:    1
 10771 ;; Hardware stack levels required when called:   11
 10772 ;; This function calls:
 10773 ;;		_FillArray
 10774 ;;		_InitSynth
 10775 ;; This function is called by:
 10776 ;;		_InitSystemApplicationManagers
 10777 ;; This function uses a non-reentrant model
 10778 ;;
 10779                           
 10780                           	psect	text58
 10781  003D0C                     __ptext58:
 10782                           	opt stack 0
 10783  003D0C                     _PLLInitialize:
 10784                           	opt stack 18
 10785                           
 10786                           ;SyntApp.c: 31: InitSynth(SYNTH_TX);
 10787                           
 10788                           ;incstack = 0
 10789  003D0C  0E00               	movlw	0
 10790  003D0E  ECA3  F006         	call	_InitSynth
 10791                           
 10792                           ;SyntApp.c: 32: InitSynth(SYNTH_RX);
 10793  003D12  0E01               	movlw	1
 10794  003D14  ECA3  F006         	call	_InitSynth
 10795                           
 10796                           ;SyntApp.c: 35: FillArray(synthLdRxArray, sizeof(synthLdRxArray), 0x0);
 10797  003D18  0EB0               	movlw	low _synthLdRxArray
 10798  003D1A  6E20               	movwf	FillArray@array,c
 10799  003D1C  0E01               	movlw	high _synthLdRxArray
 10800  003D1E  6E21               	movwf	FillArray@array+1,c
 10801  003D20  0E00               	movlw	0
 10802  003D22  6E23               	movwf	FillArray@size+1,c
 10803  003D24  0E0C               	movlw	12
 10804  003D26  6E22               	movwf	FillArray@size,c
 10805  003D28  0E00               	movlw	0
 10806  003D2A  6E24               	movwf	FillArray@value,c
 10807  003D2C  EC75  F021         	call	_FillArray	;wreg free
 10808                           
 10809                           ;SyntApp.c: 36: FillArray(synthLdTxArray, sizeof(synthLdTxArray), 0x0);
 10810  003D30  0EA4               	movlw	low _synthLdTxArray
 10811  003D32  6E20               	movwf	FillArray@array,c
 10812  003D34  0E01               	movlw	high _synthLdTxArray
 10813  003D36  6E21               	movwf	FillArray@array+1,c
 10814  003D38  0E00               	movlw	0
 10815  003D3A  6E23               	movwf	FillArray@size+1,c
 10816  003D3C  0E0C               	movlw	12
 10817  003D3E  6E22               	movwf	FillArray@size,c
 10818  003D40  0E00               	movlw	0
 10819  003D42  6E24               	movwf	FillArray@value,c
 10820  003D44  EC75  F021         	call	_FillArray	;wreg free
 10821  003D48  0012               	return		;funcret
 10822  003D4A                     __end_of_PLLInitialize:
 10823                           	opt stack 0
 10824                           tosu	equ	0xFFF
 10825                           tosh	equ	0xFFE
 10826                           tosl	equ	0xFFD
 10827                           pclath	equ	0xFFA
 10828                           tblptru	equ	0xFF8
 10829                           tblptrh	equ	0xFF7
 10830                           tblptrl	equ	0xFF6
 10831                           tablat	equ	0xFF5
 10832                           prodh	equ	0xFF4
 10833                           prodl	equ	0xFF3
 10834                           intcon	equ	0xFF2
 10835                           intcon2	equ	0xFF1
 10836                           postinc0	equ	0xFEE
 10837                           plusw0	equ	0xFEB
 10838                           wreg	equ	0xFE8
 10839                           indf1	equ	0xFE7
 10840                           postdec1	equ	0xFE5
 10841                           fsr1h	equ	0xFE2
 10842                           fsr1l	equ	0xFE1
 10843                           indf2	equ	0xFDF
 10844                           postinc2	equ	0xFDE
 10845                           postdec2	equ	0xFDD
 10846                           plusw2	equ	0xFDB
 10847                           fsr2h	equ	0xFDA
 10848                           fsr2l	equ	0xFD9
 10849                           status	equ	0xFD8
 10850                           
 10851 ;; *************** function _InitSynth *****************
 10852 ;; Defined at:
 10853 ;;		line 39 in file "SyntApp.c"
 10854 ;; Parameters:    Size  Location     Type
 10855 ;;  cType           1    wreg     enum E1
 10856 ;; Auto vars:     Size  Location     Type
 10857 ;;  cType           1  108[BANK0 ] enum E1
 10858 ;;  idx             1  109[BANK0 ] unsigned char 
 10859 ;;  EepromVal       4  104[BANK0 ] unsigned long 
 10860 ;;  regNum          1  110[BANK0 ] unsigned char 
 10861 ;; Return value:  Size  Location     Type
 10862 ;;                  1    wreg      void 
 10863 ;; Registers used:
 10864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10865 ;; Tracked objects:
 10866 ;;		On entry : 0/0
 10867 ;;		On exit  : 0/0
 10868 ;;		Unchanged: 0/0
 10869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10870 ;;      Params:         0       0       0       0       0       0       0
 10871 ;;      Locals:         0       7       0       0       0       0       0
 10872 ;;      Temps:          0       0       0       0       0       0       0
 10873 ;;      Totals:         0       7       0       0       0       0       0
 10874 ;;Total ram usage:        7 bytes
 10875 ;; Hardware stack levels used:    1
 10876 ;; Hardware stack levels required when called:   10
 10877 ;; This function calls:
 10878 ;;		_ReadIntFromEeprom
 10879 ;;		_SWSPI_send_word
 10880 ;;		_StoreIntInEeprom
 10881 ;;		_SwSpi_Set_CE_Pin
 10882 ;; This function is called by:
 10883 ;;		_PLLInitialize
 10884 ;;		_SetSynthOper
 10885 ;;		_SynthLdDetect
 10886 ;; This function uses a non-reentrant model
 10887 ;;
 10888                           
 10889                           	psect	text59
 10890  000D46                     __ptext59:
 10891                           	opt stack 0
 10892  000D46                     _InitSynth:
 10893                           	opt stack 17
 10894                           
 10895                           ;incstack = 0
 10896                           ;InitSynth@cType stored from wreg
 10897  000D46  0100               	movlb	0	; () banked
 10898  000D48  6FCC               	movwf	InitSynth@cType& (0+255),b
 10899                           
 10900                           ;SyntApp.c: 41: SwSpi_Set_CE_Pin(cType, 1);
 10901  000D4A  0E01               	movlw	1
 10902  000D4C  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 10903  000D4E  0100               	movlb	0	; () banked
 10904  000D50  51CC               	movf	InitSynth@cType& (0+255),w,b
 10905  000D52  ECC3  F01E         	call	_SwSpi_Set_CE_Pin
 10906                           
 10907                           ;SyntApp.c: 43: uint8_t regNum = 0;
 10908  000D56  0E00               	movlw	0
 10909  000D58  0100               	movlb	0	; () banked
 10910  000D5A  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10911                           
 10912                           ; BSR set to: 0
 10913                           ;SyntApp.c: 44: uint32_t EepromVal = 0x0;
 10914  000D5C  0E00               	movlw	0
 10915  000D5E  6FC8               	movwf	InitSynth@EepromVal& (0+255),b
 10916  000D60  0E00               	movlw	0
 10917  000D62  6FC9               	movwf	(InitSynth@EepromVal+1)& (0+255),b
 10918  000D64  0E00               	movlw	0
 10919  000D66  6FCA               	movwf	(InitSynth@EepromVal+2)& (0+255),b
 10920  000D68  0E00               	movlw	0
 10921  000D6A  6FCB               	movwf	(InitSynth@EepromVal+3)& (0+255),b
 10922                           
 10923                           ; BSR set to: 0
 10924                           ;SyntApp.c: 47: for(uint8_t idx = 0; idx < 13; idx++)
 10925  000D6C  0E00               	movlw	0
 10926  000D6E  6FCD               	movwf	InitSynth@idx& (0+255),b
 10927  000D70                     l8088:
 10928                           
 10929                           ; BSR set to: 0
 10930  000D70  0E0C               	movlw	12
 10931  000D72  65CD               	cpfsgt	InitSynth@idx& (0+255),b
 10932  000D74  D001               	goto	l507
 10933  000D76  0012               	return	
 10934  000D78                     l507:
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;SyntApp.c: 48: {
 10938                           ;SyntApp.c: 49: regNum = 13 - idx - 1;
 10939                           
 10940                           ; BSR set to: 0
 10941  000D78  29CD               	incf	InitSynth@idx& (0+255),w,b
 10942  000D7A  0800               	sublw	0
 10943  000D7C  0F0D               	addlw	13
 10944  000D7E  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10945                           
 10946                           ; BSR set to: 0
 10947                           ;SyntApp.c: 50: if(regNum == 0x0 || regNum == 0x1 || regNum == 0x2 || regNum == 0x4 || r
      +                          egNum == 0x6 || regNum == 0xA)
 10948  000D80  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10949  000D82  B4D8               	btfsc	status,2,c
 10950  000D84  D013               	goto	u8150
 10951                           
 10952                           ; BSR set to: 0
 10953  000D86  05CE               	decf	InitSynth@regNum& (0+255),w,b
 10954  000D88  B4D8               	btfsc	status,2,c
 10955  000D8A  D010               	goto	u8150
 10956                           
 10957                           ; BSR set to: 0
 10958  000D8C  0E02               	movlw	2
 10959  000D8E  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10960  000D90  B4D8               	btfsc	status,2,c
 10961  000D92  D00C               	goto	u8150
 10962                           
 10963                           ; BSR set to: 0
 10964  000D94  0E04               	movlw	4
 10965  000D96  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10966  000D98  B4D8               	btfsc	status,2,c
 10967  000D9A  D008               	goto	u8150
 10968                           
 10969                           ; BSR set to: 0
 10970  000D9C  0E06               	movlw	6
 10971  000D9E  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10972  000DA0  B4D8               	btfsc	status,2,c
 10973  000DA2  D004               	goto	u8150
 10974                           
 10975                           ; BSR set to: 0
 10976  000DA4  0E0A               	movlw	10
 10977  000DA6  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10978  000DA8  A4D8               	btfss	status,2,c
 10979  000DAA  D0EB               	goto	l509
 10980  000DAC                     u8150:
 10981                           
 10982                           ; BSR set to: 0
 10983                           ;SyntApp.c: 51: {
 10984                           ;SyntApp.c: 52: if(cType == SYNTH_TX)
 10985                           
 10986                           ; BSR set to: 0
 10987  000DAC  51CC               	movf	InitSynth@cType& (0+255),w,b
 10988  000DAE  A4D8               	btfss	status,2,c
 10989  000DB0  D071               	goto	l512
 10990                           
 10991                           ; BSR set to: 0
 10992                           ;SyntApp.c: 53: {
 10993                           ;SyntApp.c: 54: EepromVal = ReadIntFromEeprom((0) | SYNTH_ADDRES[regNum], 4);
 10994  000DB2  0E00               	movlw	0
 10995  000DB4  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10996  000DB6  0E04               	movlw	4
 10997  000DB8  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10998  000DBA  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10999  000DBC  0D01               	mullw	1
 11000  000DBE  0E35               	movlw	low _SYNTH_ADDRES
 11001  000DC0  24F3               	addwf	prodl,w,c
 11002  000DC2  6EF6               	movwf	tblptrl,c
 11003  000DC4  0E06               	movlw	high _SYNTH_ADDRES
 11004  000DC6  20F4               	addwfc	prodh,w,c
 11005  000DC8  6EF7               	movwf	tblptrh,c
 11006  000DCA                     	if	0	;There are less than 3 active tblptr bytes
 11007  000DCA                     	endif
 11008  000DCA  0008               	tblrd		*
 11009  000DCC  50F5               	movf	tablat,w,c
 11010  000DCE  EC70  F010         	call	_ReadIntFromEeprom
 11011  000DD2  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 11012  000DD6  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 11013  000DDA  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 11014  000DDE  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 11015                           
 11016                           ;SyntApp.c: 55: if(EepromVal == 0xFFFFFFFF)
 11017  000DE2  0100               	movlb	0	; () banked
 11018  000DE4  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 11019  000DE6  E147               	bnz	l8116
 11020  000DE8  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 11021  000DEA  E145               	bnz	l8116
 11022  000DEC  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 11023  000DEE  E143               	bnz	l8116
 11024  000DF0  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 11025  000DF2  A4D8               	btfss	status,2,c
 11026  000DF4  D040               	goto	l513
 11027                           
 11028                           ; BSR set to: 0
 11029                           ;SyntApp.c: 56: {
 11030                           ;SyntApp.c: 57: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11031  000DF6  51CD               	movf	InitSynth@idx& (0+255),w,b
 11032  000DF8  0D04               	mullw	4
 11033  000DFA  0E01               	movlw	low _SYNTH_REGS
 11034  000DFC  24F3               	addwf	prodl,w,c
 11035  000DFE  6EF6               	movwf	tblptrl,c
 11036  000E00  0E06               	movlw	high _SYNTH_REGS
 11037  000E02  20F4               	addwfc	prodh,w,c
 11038  000E04  6EF7               	movwf	tblptrh,c
 11039  000E06                     	if	0	;There are less than 3 active tblptr bytes
 11040  000E06                     	endif
 11041  000E06  0009               	tblrd		*+
 11042  000E08  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11043  000E0C  0009               	tblrd		*+
 11044  000E0E  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11045  000E12  0009               	tblrd		*+
 11046  000E14  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11047  000E18  000A               	tblrd		*-
 11048  000E1A  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11049  000E1E  0E03               	movlw	3
 11050  000E20  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11051  000E22  51CC               	movf	InitSynth@cType& (0+255),w,b
 11052  000E24  EC3F  F018         	call	_SWSPI_send_word
 11053                           
 11054                           ;SyntApp.c: 58: StoreIntInEeprom(SYNTH_REGS[idx], (0) | SYNTH_ADDRES[regNum], 4);
 11055  000E28  0100               	movlb	0	; () banked
 11056  000E2A  51CD               	movf	InitSynth@idx& (0+255),w,b
 11057  000E2C  0D04               	mullw	4
 11058  000E2E  0E01               	movlw	low _SYNTH_REGS
 11059  000E30  24F3               	addwf	prodl,w,c
 11060  000E32  6EF6               	movwf	tblptrl,c
 11061  000E34  0E06               	movlw	high _SYNTH_REGS
 11062  000E36  20F4               	addwfc	prodh,w,c
 11063  000E38  6EF7               	movwf	tblptrh,c
 11064  000E3A                     	if	0	;There are less than 3 active tblptr bytes
 11065  000E3A                     	endif
 11066  000E3A  0009               	tblrd		*+
 11067  000E3C  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 11068  000E40  0009               	tblrd		*+
 11069  000E42  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 11070  000E46  0009               	tblrd		*+
 11071  000E48  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 11072  000E4C  000A               	tblrd		*-
 11073  000E4E  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 11074  000E52  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11075  000E54  0D01               	mullw	1
 11076  000E56  0E35               	movlw	low _SYNTH_ADDRES
 11077  000E58  24F3               	addwf	prodl,w,c
 11078  000E5A  6EF6               	movwf	tblptrl,c
 11079  000E5C  0E06               	movlw	high _SYNTH_ADDRES
 11080  000E5E  20F4               	addwfc	prodh,w,c
 11081  000E60  6EF7               	movwf	tblptrh,c
 11082  000E62                     	if	0	;There are less than 3 active tblptr bytes
 11083  000E62                     	endif
 11084  000E62  0008               	tblrd		*
 11085  000E64  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
 11086  000E68  0E00               	movlw	0
 11087  000E6A  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11088  000E6C  0E04               	movlw	4
 11089  000E6E  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11090  000E70  EC37  F01F         	call	_StoreIntInEeprom	;wreg free
 11091                           
 11092                           ;SyntApp.c: 59: }
 11093  000E74  D0A0               	goto	l519
 11094  000E76                     l513:
 11095  000E76                     l8116:
 11096                           
 11097                           ;SyntApp.c: 60: else
 11098                           ;SyntApp.c: 61: {
 11099                           ;SyntApp.c: 62: SWSPI_send_word(cType, EepromVal,3);
 11100  000E76  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 11101  000E7A  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 11102  000E7E  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 11103  000E82  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 11104  000E86  0E03               	movlw	3
 11105  000E88  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11106  000E8A  0100               	movlb	0	; () banked
 11107  000E8C  51CC               	movf	InitSynth@cType& (0+255),w,b
 11108  000E8E  EC3F  F018         	call	_SWSPI_send_word
 11109                           
 11110                           ;SyntApp.c: 63: }
 11111                           ;SyntApp.c: 64: }
 11112  000E92  D091               	goto	l519
 11113  000E94                     l512:
 11114                           
 11115                           ;SyntApp.c: 65: else if (cType == SYNTH_RX)
 11116  000E94  0100               	movlb	0	; () banked
 11117  000E96  05CC               	decf	InitSynth@cType& (0+255),w,b
 11118  000E98  A4D8               	btfss	status,2,c
 11119  000E9A  D08D               	goto	l519
 11120                           
 11121                           ; BSR set to: 0
 11122                           ;SyntApp.c: 66: {
 11123                           ;SyntApp.c: 67: EepromVal = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[regNum], 4);
 11124  000E9C  0E00               	movlw	0
 11125  000E9E  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11126  000EA0  0E04               	movlw	4
 11127  000EA2  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11128  000EA4  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11129  000EA6  0D01               	mullw	1
 11130  000EA8  0E35               	movlw	low _SYNTH_ADDRES
 11131  000EAA  24F3               	addwf	prodl,w,c
 11132  000EAC  6EF6               	movwf	tblptrl,c
 11133  000EAE  0E06               	movlw	high _SYNTH_ADDRES
 11134  000EB0  20F4               	addwfc	prodh,w,c
 11135  000EB2  6EF7               	movwf	tblptrh,c
 11136  000EB4                     	if	0	;There are less than 3 active tblptr bytes
 11137  000EB4                     	endif
 11138  000EB4  0008               	tblrd		*
 11139  000EB6  50F5               	movf	tablat,w,c
 11140  000EB8  0920               	iorlw	32
 11141  000EBA  EC70  F010         	call	_ReadIntFromEeprom
 11142  000EBE  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 11143  000EC2  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 11144  000EC6  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 11145  000ECA  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 11146                           
 11147                           ;SyntApp.c: 68: if(EepromVal == 0xFFFFFFFF)
 11148  000ECE  0100               	movlb	0	; () banked
 11149  000ED0  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 11150  000ED2  E148               	bnz	l8128
 11151  000ED4  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 11152  000ED6  E146               	bnz	l8128
 11153  000ED8  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 11154  000EDA  E144               	bnz	l8128
 11155  000EDC  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 11156  000EDE  A4D8               	btfss	status,2,c
 11157  000EE0  D041               	goto	l517
 11158                           
 11159                           ; BSR set to: 0
 11160                           ;SyntApp.c: 69: {
 11161                           ;SyntApp.c: 70: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11162  000EE2  51CD               	movf	InitSynth@idx& (0+255),w,b
 11163  000EE4  0D04               	mullw	4
 11164  000EE6  0E01               	movlw	low _SYNTH_REGS
 11165  000EE8  24F3               	addwf	prodl,w,c
 11166  000EEA  6EF6               	movwf	tblptrl,c
 11167  000EEC  0E06               	movlw	high _SYNTH_REGS
 11168  000EEE  20F4               	addwfc	prodh,w,c
 11169  000EF0  6EF7               	movwf	tblptrh,c
 11170  000EF2                     	if	0	;There are less than 3 active tblptr bytes
 11171  000EF2                     	endif
 11172  000EF2  0009               	tblrd		*+
 11173  000EF4  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11174  000EF8  0009               	tblrd		*+
 11175  000EFA  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11176  000EFE  0009               	tblrd		*+
 11177  000F00  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11178  000F04  000A               	tblrd		*-
 11179  000F06  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11180  000F0A  0E03               	movlw	3
 11181  000F0C  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11182  000F0E  51CC               	movf	InitSynth@cType& (0+255),w,b
 11183  000F10  EC3F  F018         	call	_SWSPI_send_word
 11184                           
 11185                           ;SyntApp.c: 71: StoreIntInEeprom(SYNTH_REGS[idx], (0x20) | SYNTH_ADDRES[regNum], 4);
 11186  000F14  0100               	movlb	0	; () banked
 11187  000F16  51CD               	movf	InitSynth@idx& (0+255),w,b
 11188  000F18  0D04               	mullw	4
 11189  000F1A  0E01               	movlw	low _SYNTH_REGS
 11190  000F1C  24F3               	addwf	prodl,w,c
 11191  000F1E  6EF6               	movwf	tblptrl,c
 11192  000F20  0E06               	movlw	high _SYNTH_REGS
 11193  000F22  20F4               	addwfc	prodh,w,c
 11194  000F24  6EF7               	movwf	tblptrh,c
 11195  000F26                     	if	0	;There are less than 3 active tblptr bytes
 11196  000F26                     	endif
 11197  000F26  0009               	tblrd		*+
 11198  000F28  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 11199  000F2C  0009               	tblrd		*+
 11200  000F2E  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 11201  000F32  0009               	tblrd		*+
 11202  000F34  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 11203  000F38  000A               	tblrd		*-
 11204  000F3A  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 11205  000F3E  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11206  000F40  0D01               	mullw	1
 11207  000F42  0E35               	movlw	low _SYNTH_ADDRES
 11208  000F44  24F3               	addwf	prodl,w,c
 11209  000F46  6EF6               	movwf	tblptrl,c
 11210  000F48  0E06               	movlw	high _SYNTH_ADDRES
 11211  000F4A  20F4               	addwfc	prodh,w,c
 11212  000F4C  6EF7               	movwf	tblptrh,c
 11213  000F4E                     	if	0	;There are less than 3 active tblptr bytes
 11214  000F4E                     	endif
 11215  000F4E  0008               	tblrd		*
 11216  000F50  50F5               	movf	tablat,w,c
 11217  000F52  0920               	iorlw	32
 11218  000F54  6E25               	movwf	StoreIntInEeprom@address,c
 11219  000F56  0E00               	movlw	0
 11220  000F58  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11221  000F5A  0E04               	movlw	4
 11222  000F5C  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11223  000F5E  EC37  F01F         	call	_StoreIntInEeprom	;wreg free
 11224                           
 11225                           ;SyntApp.c: 72: }
 11226  000F62  D029               	goto	l519
 11227  000F64                     l517:
 11228  000F64                     l8128:
 11229                           
 11230                           ;SyntApp.c: 73: else
 11231                           ;SyntApp.c: 74: {
 11232                           ;SyntApp.c: 75: SWSPI_send_word(cType, EepromVal,3);
 11233  000F64  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 11234  000F68  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 11235  000F6C  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 11236  000F70  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 11237  000F74  0E03               	movlw	3
 11238  000F76  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11239  000F78  0100               	movlb	0	; () banked
 11240  000F7A  51CC               	movf	InitSynth@cType& (0+255),w,b
 11241  000F7C  EC3F  F018         	call	_SWSPI_send_word
 11242                           
 11243                           ;SyntApp.c: 76: }
 11244                           ;SyntApp.c: 77: }
 11245                           ;SyntApp.c: 78: }
 11246  000F80  D01A               	goto	l519
 11247  000F82                     l509:
 11248                           
 11249                           ;SyntApp.c: 79: else
 11250                           ;SyntApp.c: 80: {
 11251                           ;SyntApp.c: 81: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11252  000F82  0100               	movlb	0	; () banked
 11253  000F84  51CD               	movf	InitSynth@idx& (0+255),w,b
 11254  000F86  0D04               	mullw	4
 11255  000F88  0E01               	movlw	low _SYNTH_REGS
 11256  000F8A  24F3               	addwf	prodl,w,c
 11257  000F8C  6EF6               	movwf	tblptrl,c
 11258  000F8E  0E06               	movlw	high _SYNTH_REGS
 11259  000F90  20F4               	addwfc	prodh,w,c
 11260  000F92  6EF7               	movwf	tblptrh,c
 11261  000F94                     	if	0	;There are less than 3 active tblptr bytes
 11262  000F94                     	endif
 11263  000F94  0009               	tblrd		*+
 11264  000F96  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11265  000F9A  0009               	tblrd		*+
 11266  000F9C  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11267  000FA0  0009               	tblrd		*+
 11268  000FA2  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11269  000FA6  000A               	tblrd		*-
 11270  000FA8  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11271  000FAC  0E03               	movlw	3
 11272  000FAE  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11273  000FB0  51CC               	movf	InitSynth@cType& (0+255),w,b
 11274  000FB2  EC3F  F018         	call	_SWSPI_send_word
 11275  000FB6                     l519:
 11276  000FB6  0100               	movlb	0	; () banked
 11277  000FB8  2BCD               	incf	InitSynth@idx& (0+255),f,b
 11278  000FBA  D6DA               	goto	l8088
 11279  000FBC                     __end_of_InitSynth:
 11280                           	opt stack 0
 11281                           tosu	equ	0xFFF
 11282                           tosh	equ	0xFFE
 11283                           tosl	equ	0xFFD
 11284                           pclath	equ	0xFFA
 11285                           tblptru	equ	0xFF8
 11286                           tblptrh	equ	0xFF7
 11287                           tblptrl	equ	0xFF6
 11288                           tablat	equ	0xFF5
 11289                           prodh	equ	0xFF4
 11290                           prodl	equ	0xFF3
 11291                           intcon	equ	0xFF2
 11292                           intcon2	equ	0xFF1
 11293                           postinc0	equ	0xFEE
 11294                           plusw0	equ	0xFEB
 11295                           wreg	equ	0xFE8
 11296                           indf1	equ	0xFE7
 11297                           postdec1	equ	0xFE5
 11298                           fsr1h	equ	0xFE2
 11299                           fsr1l	equ	0xFE1
 11300                           indf2	equ	0xFDF
 11301                           postinc2	equ	0xFDE
 11302                           postdec2	equ	0xFDD
 11303                           plusw2	equ	0xFDB
 11304                           fsr2h	equ	0xFDA
 11305                           fsr2l	equ	0xFD9
 11306                           status	equ	0xFD8
 11307                           
 11308 ;; *************** function _SwSpi_Set_CE_Pin *****************
 11309 ;; Defined at:
 11310 ;;		line 201 in file "SwSpiApp.c"
 11311 ;; Parameters:    Size  Location     Type
 11312 ;;  phrType         1    wreg     enum E1
 11313 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11314 ;; Auto vars:     Size  Location     Type
 11315 ;;  phrType         1   24[COMRAM] enum E1
 11316 ;; Return value:  Size  Location     Type
 11317 ;;                  1    wreg      void 
 11318 ;; Registers used:
 11319 ;;		wreg, status,2, status,0
 11320 ;; Tracked objects:
 11321 ;;		On entry : 0/0
 11322 ;;		On exit  : 0/0
 11323 ;;		Unchanged: 0/0
 11324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11325 ;;      Params:         1       0       0       0       0       0       0
 11326 ;;      Locals:         1       0       0       0       0       0       0
 11327 ;;      Temps:          0       0       0       0       0       0       0
 11328 ;;      Totals:         2       0       0       0       0       0       0
 11329 ;;Total ram usage:        2 bytes
 11330 ;; Hardware stack levels used:    1
 11331 ;; Hardware stack levels required when called:    4
 11332 ;; This function calls:
 11333 ;;		Nothing
 11334 ;; This function is called by:
 11335 ;;		_InitSynth
 11336 ;;		_SetSynthOper
 11337 ;; This function uses a non-reentrant model
 11338 ;;
 11339                           
 11340                           	psect	text60
 11341  003D86                     __ptext60:
 11342                           	opt stack 0
 11343  003D86                     _SwSpi_Set_CE_Pin:
 11344                           	opt stack 23
 11345                           
 11346                           ; BSR set to: 0
 11347                           ;incstack = 0
 11348                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 11349  003D86  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 11350                           
 11351                           ;SwSpiApp.c: 203: switch(phrType)
 11352  003D88  D014               	goto	l728
 11353  003D8A                     
 11354                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 11355  003D8A  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11356  003D8C  A4D8               	btfss	status,2,c
 11357  003D8E  D002               	goto	l730
 11358                           
 11359                           ;SwSpiApp.c: 207: {
 11360                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 11361  003D90  828B               	bsf	3979,1,c	;volatile
 11362                           
 11363                           ;SwSpiApp.c: 209: }
 11364  003D92  0012               	return	
 11365  003D94                     l730:
 11366                           
 11367                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 11368  003D94  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11369  003D96  A4D8               	btfss	status,2,c
 11370  003D98  0012               	return	
 11371                           
 11372                           ;SwSpiApp.c: 211: {
 11373                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 11374  003D9A  928B               	bcf	3979,1,c	;volatile
 11375                           
 11376                           ;SwSpiApp.c: 213: }
 11377                           ;SwSpiApp.c: 214: break;
 11378  003D9C  0012               	return	
 11379  003D9E                     
 11380                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 11381  003D9E  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11382  003DA0  A4D8               	btfss	status,2,c
 11383  003DA2  D002               	goto	l739
 11384                           
 11385                           ;SwSpiApp.c: 218: {
 11386                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 11387  003DA4  848C               	bsf	3980,2,c	;volatile
 11388                           
 11389                           ;SwSpiApp.c: 220: }
 11390  003DA6  0012               	return	
 11391  003DA8                     l739:
 11392                           
 11393                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 11394  003DA8  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11395  003DAA  A4D8               	btfss	status,2,c
 11396  003DAC  0012               	return	
 11397                           
 11398                           ;SwSpiApp.c: 222: {
 11399                           ;SwSpiApp.c: 223: do { LATDbits.LATD2 = 0; } while(0);
 11400  003DAE  948C               	bcf	3980,2,c	;volatile
 11401                           
 11402                           ;SwSpiApp.c: 226: }
 11403                           
 11404                           ;SwSpiApp.c: 224: }
 11405                           ;SwSpiApp.c: 225: break;
 11406  003DB0  0012               	return	
 11407  003DB2                     l728:
 11408  003DB2  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 11409                           
 11410                           ; Switch size 1, requested type "space"
 11411                           ; Number of cases is 2, Range of values is 0 to 1
 11412                           ; switch strategies available:
 11413                           ; Name         Instructions Cycles
 11414                           ; simple_byte            7     4 (average)
 11415                           ;	Chosen strategy is simple_byte
 11416  003DB4  0A00               	xorlw	0	; case 0
 11417  003DB6  B4D8               	btfsc	status,2,c
 11418  003DB8  D7E8               	goto	l729
 11419  003DBA  0A01               	xorlw	1	; case 1
 11420  003DBC  A4D8               	btfss	status,2,c
 11421  003DBE  0012               	return	
 11422  003DC0  D7EE               	goto	l738
 11423  003DC2                     __end_of_SwSpi_Set_CE_Pin:
 11424                           	opt stack 0
 11425                           tosu	equ	0xFFF
 11426                           tosh	equ	0xFFE
 11427                           tosl	equ	0xFFD
 11428                           pclath	equ	0xFFA
 11429                           tblptru	equ	0xFF8
 11430                           tblptrh	equ	0xFF7
 11431                           tblptrl	equ	0xFF6
 11432                           tablat	equ	0xFF5
 11433                           prodh	equ	0xFF4
 11434                           prodl	equ	0xFF3
 11435                           intcon	equ	0xFF2
 11436                           intcon2	equ	0xFF1
 11437                           postinc0	equ	0xFEE
 11438                           plusw0	equ	0xFEB
 11439                           wreg	equ	0xFE8
 11440                           indf1	equ	0xFE7
 11441                           postdec1	equ	0xFE5
 11442                           fsr1h	equ	0xFE2
 11443                           fsr1l	equ	0xFE1
 11444                           indf2	equ	0xFDF
 11445                           postinc2	equ	0xFDE
 11446                           postdec2	equ	0xFDD
 11447                           plusw2	equ	0xFDB
 11448                           fsr2h	equ	0xFDA
 11449                           fsr2l	equ	0xFD9
 11450                           status	equ	0xFD8
 11451                           
 11452 ;; *************** function _InitAdcApplicationMgr *****************
 11453 ;; Defined at:
 11454 ;;		line 20 in file "AdcApp.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;		None
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;		None
 11459 ;; Return value:  Size  Location     Type
 11460 ;;                  1    wreg      void 
 11461 ;; Registers used:
 11462 ;;		wreg, status,2
 11463 ;; Tracked objects:
 11464 ;;		On entry : 0/0
 11465 ;;		On exit  : 0/0
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11468 ;;      Params:         0       0       0       0       0       0       0
 11469 ;;      Locals:         0       0       0       0       0       0       0
 11470 ;;      Temps:          0       0       0       0       0       0       0
 11471 ;;      Totals:         0       0       0       0       0       0       0
 11472 ;;Total ram usage:        0 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; Hardware stack levels required when called:    4
 11475 ;; This function calls:
 11476 ;;		Nothing
 11477 ;; This function is called by:
 11478 ;;		_InitSystemApplicationManagers
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           	psect	text61
 11483  00445C                     __ptext61:
 11484                           	opt stack 0
 11485  00445C                     _InitAdcApplicationMgr:
 11486                           	opt stack 25
 11487                           
 11488                           ;AdcApp.c: 22: adcSampleMode = CIRCULAR;
 11489                           
 11490                           ;incstack = 0
 11491  00445C  0E00               	movlw	0
 11492  00445E  6E3D               	movwf	_adcSampleMode,c
 11493  004460  0012               	return		;funcret
 11494  004462                     __end_of_InitAdcApplicationMgr:
 11495                           	opt stack 0
 11496                           tosu	equ	0xFFF
 11497                           tosh	equ	0xFFE
 11498                           tosl	equ	0xFFD
 11499                           pclath	equ	0xFFA
 11500                           tblptru	equ	0xFF8
 11501                           tblptrh	equ	0xFF7
 11502                           tblptrl	equ	0xFF6
 11503                           tablat	equ	0xFF5
 11504                           prodh	equ	0xFF4
 11505                           prodl	equ	0xFF3
 11506                           intcon	equ	0xFF2
 11507                           intcon2	equ	0xFF1
 11508                           postinc0	equ	0xFEE
 11509                           plusw0	equ	0xFEB
 11510                           wreg	equ	0xFE8
 11511                           indf1	equ	0xFE7
 11512                           postdec1	equ	0xFE5
 11513                           fsr1h	equ	0xFE2
 11514                           fsr1l	equ	0xFE1
 11515                           indf2	equ	0xFDF
 11516                           postinc2	equ	0xFDE
 11517                           postdec2	equ	0xFDD
 11518                           plusw2	equ	0xFDB
 11519                           fsr2h	equ	0xFDA
 11520                           fsr2l	equ	0xFD9
 11521                           status	equ	0xFD8
 11522                           
 11523 ;; *************** function _DacInit *****************
 11524 ;; Defined at:
 11525 ;;		line 11 in file "DacApp.c"
 11526 ;; Parameters:    Size  Location     Type
 11527 ;;		None
 11528 ;; Auto vars:     Size  Location     Type
 11529 ;;  dacInput        2  106[BANK0 ] unsigned int 
 11530 ;;  idx             1  108[BANK0 ] char 
 11531 ;; Return value:  Size  Location     Type
 11532 ;;                  1    wreg      void 
 11533 ;; Registers used:
 11534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11535 ;; Tracked objects:
 11536 ;;		On entry : 0/0
 11537 ;;		On exit  : 0/0
 11538 ;;		Unchanged: 0/0
 11539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11540 ;;      Params:         0       0       0       0       0       0       0
 11541 ;;      Locals:         0       3       0       0       0       0       0
 11542 ;;      Temps:          0       2       0       0       0       0       0
 11543 ;;      Totals:         0       5       0       0       0       0       0
 11544 ;;Total ram usage:        5 bytes
 11545 ;; Hardware stack levels used:    1
 11546 ;; Hardware stack levels required when called:   10
 11547 ;; This function calls:
 11548 ;;		_ReadIntFromEeprom
 11549 ;;		_SWSPI_send_word
 11550 ;;		_StoreIntInEeprom
 11551 ;; This function is called by:
 11552 ;;		_InitSystemApplicationManagers
 11553 ;; This function uses a non-reentrant model
 11554 ;;
 11555                           
 11556                           	psect	text62
 11557  0028B4                     __ptext62:
 11558                           	opt stack 0
 11559  0028B4                     _DacInit:
 11560                           	opt stack 19
 11561                           
 11562                           ;DacApp.c: 13: for(int8_t idx = 0; idx < (4); idx++)
 11563                           
 11564                           ;incstack = 0
 11565  0028B4  0E00               	movlw	0
 11566  0028B6  0100               	movlb	0	; () banked
 11567  0028B8  6FCC               	movwf	DacInit@idx& (0+255),b
 11568  0028BA                     l8638:
 11569                           
 11570                           ; BSR set to: 0
 11571  0028BA  51CC               	movf	DacInit@idx& (0+255),w,b
 11572  0028BC  0A80               	xorlw	128
 11573  0028BE  0F7C               	addlw	-132
 11574  0028C0  B0D8               	btfsc	status,0,c
 11575  0028C2  0012               	return	
 11576                           
 11577                           ; BSR set to: 0
 11578                           ;DacApp.c: 14: {
 11579                           ;DacApp.c: 15: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 11580                           
 11581                           ; BSR set to: 0
 11582                           
 11583                           ; BSR set to: 0
 11584  0028C4  0E00               	movlw	0
 11585  0028C6  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11586  0028C8  0E02               	movlw	2
 11587  0028CA  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11588  0028CC  51CC               	movf	DacInit@idx& (0+255),w,b
 11589  0028CE  0D01               	mullw	1
 11590  0028D0  0E53               	movlw	low _DAC_ADDRES
 11591  0028D2  24F3               	addwf	prodl,w,c
 11592  0028D4  6EF6               	movwf	tblptrl,c
 11593  0028D6  0E06               	movlw	high _DAC_ADDRES
 11594  0028D8  20F4               	addwfc	prodh,w,c
 11595  0028DA  6EF7               	movwf	tblptrh,c
 11596  0028DC                     	if	0	;There are less than 3 active tblptr bytes
 11597  0028DC                     	endif
 11598  0028DC  0008               	tblrd		*
 11599  0028DE  50F5               	movf	tablat,w,c
 11600  0028E0  0940               	iorlw	64
 11601  0028E2  EC70  F010         	call	_ReadIntFromEeprom
 11602  0028E6  C0B1  F0CA         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 11603  0028EA  C0B2  F0CB         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 11604                           
 11605                           ;DacApp.c: 16: if(dacInput == 0xFFFF)
 11606  0028EE  0100               	movlb	0	; () banked
 11607  0028F0  29CA               	incf	DacInit@dacInput& (0+255),w,b
 11608  0028F2  E144               	bnz	l8650
 11609  0028F4  29CB               	incf	(DacInit@dacInput+1)& (0+255),w,b
 11610  0028F6  A4D8               	btfss	status,2,c
 11611  0028F8  D041               	goto	l411
 11612                           
 11613                           ; BSR set to: 0
 11614                           ;DacApp.c: 17: {
 11615                           ;DacApp.c: 18: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 11616  0028FA  51CC               	movf	DacInit@idx& (0+255),w,b
 11617  0028FC  0D02               	mullw	2
 11618  0028FE  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11619  002900  24F3               	addwf	prodl,w,c
 11620  002902  6EF6               	movwf	tblptrl,c
 11621  002904  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11622  002906  20F4               	addwfc	prodh,w,c
 11623  002908  6EF7               	movwf	tblptrh,c
 11624  00290A                     	if	0	;There are less than 3 active tblptr bytes
 11625  00290A                     	endif
 11626  00290A  0009               	tblrd		*+
 11627  00290C  CFF5 F0C8          	movff	tablat,??_DacInit
 11628  002910  0009               	tblrd		*+
 11629  002912  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11630  002916  C0C8  F029         	movff	??_DacInit,SWSPI_send_word@data
 11631  00291A  C0C9  F02A         	movff	??_DacInit+1,SWSPI_send_word@data+1
 11632  00291E  6A2B               	clrf	SWSPI_send_word@data+2,c
 11633  002920  6A2C               	clrf	SWSPI_send_word@data+3,c
 11634  002922  0E01               	movlw	1
 11635  002924  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11636  002926  0E02               	movlw	2
 11637  002928  EC3F  F018         	call	_SWSPI_send_word
 11638                           
 11639                           ;DacApp.c: 19: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 11640  00292C  0100               	movlb	0	; () banked
 11641  00292E  51CC               	movf	DacInit@idx& (0+255),w,b
 11642  002930  0D02               	mullw	2
 11643  002932  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11644  002934  24F3               	addwf	prodl,w,c
 11645  002936  6EF6               	movwf	tblptrl,c
 11646  002938  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11647  00293A  20F4               	addwfc	prodh,w,c
 11648  00293C  6EF7               	movwf	tblptrh,c
 11649  00293E                     	if	0	;There are less than 3 active tblptr bytes
 11650  00293E                     	endif
 11651  00293E  0009               	tblrd		*+
 11652  002940  CFF5 F0C8          	movff	tablat,??_DacInit
 11653  002944  0009               	tblrd		*+
 11654  002946  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11655  00294A  C0C8  F021         	movff	??_DacInit,StoreIntInEeprom@data
 11656  00294E  C0C9  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 11657  002952  6A23               	clrf	StoreIntInEeprom@data+2,c
 11658  002954  6A24               	clrf	StoreIntInEeprom@data+3,c
 11659  002956  51CC               	movf	DacInit@idx& (0+255),w,b
 11660  002958  0D01               	mullw	1
 11661  00295A  0E53               	movlw	low _DAC_ADDRES
 11662  00295C  24F3               	addwf	prodl,w,c
 11663  00295E  6EF6               	movwf	tblptrl,c
 11664  002960  0E06               	movlw	high _DAC_ADDRES
 11665  002962  20F4               	addwfc	prodh,w,c
 11666  002964  6EF7               	movwf	tblptrh,c
 11667  002966                     	if	0	;There are less than 3 active tblptr bytes
 11668  002966                     	endif
 11669  002966  0008               	tblrd		*
 11670  002968  50F5               	movf	tablat,w,c
 11671  00296A  0940               	iorlw	64
 11672  00296C  6E25               	movwf	StoreIntInEeprom@address,c
 11673  00296E  0E00               	movlw	0
 11674  002970  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11675  002972  0E02               	movlw	2
 11676  002974  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11677  002976  EC37  F01F         	call	_StoreIntInEeprom	;wreg free
 11678                           
 11679                           ;DacApp.c: 20: }
 11680  00297A  D00B               	goto	l412
 11681  00297C                     l411:
 11682  00297C                     l8650:
 11683                           
 11684                           ;DacApp.c: 21: else
 11685                           ;DacApp.c: 22: {
 11686                           ;DacApp.c: 23: SWSPI_send_word(EXT_DAC, dacInput, 1);
 11687  00297C  C0CA  F029         	movff	DacInit@dacInput,SWSPI_send_word@data
 11688  002980  C0CB  F02A         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 11689  002984  6A2B               	clrf	SWSPI_send_word@data+2,c
 11690  002986  6A2C               	clrf	SWSPI_send_word@data+3,c
 11691  002988  0E01               	movlw	1
 11692  00298A  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11693  00298C  0E02               	movlw	2
 11694  00298E  EC3F  F018         	call	_SWSPI_send_word
 11695  002992                     l412:
 11696  002992  0100               	movlb	0	; () banked
 11697  002994  2BCC               	incf	DacInit@idx& (0+255),f,b
 11698  002996  D791               	goto	l8638
 11699  002998                     __end_of_DacInit:
 11700                           	opt stack 0
 11701                           tosu	equ	0xFFF
 11702                           tosh	equ	0xFFE
 11703                           tosl	equ	0xFFD
 11704                           pclath	equ	0xFFA
 11705                           tblptru	equ	0xFF8
 11706                           tblptrh	equ	0xFF7
 11707                           tblptrl	equ	0xFF6
 11708                           tablat	equ	0xFF5
 11709                           prodh	equ	0xFF4
 11710                           prodl	equ	0xFF3
 11711                           intcon	equ	0xFF2
 11712                           intcon2	equ	0xFF1
 11713                           postinc0	equ	0xFEE
 11714                           plusw0	equ	0xFEB
 11715                           wreg	equ	0xFE8
 11716                           indf1	equ	0xFE7
 11717                           postdec1	equ	0xFE5
 11718                           fsr1h	equ	0xFE2
 11719                           fsr1l	equ	0xFE1
 11720                           indf2	equ	0xFDF
 11721                           postinc2	equ	0xFDE
 11722                           postdec2	equ	0xFDD
 11723                           plusw2	equ	0xFDB
 11724                           fsr2h	equ	0xFDA
 11725                           fsr2l	equ	0xFD9
 11726                           status	equ	0xFD8
 11727                           
 11728 ;; *************** function _StoreIntInEeprom *****************
 11729 ;; Defined at:
 11730 ;;		line 122 in file "SystemCommon.c"
 11731 ;; Parameters:    Size  Location     Type
 11732 ;;  data            4   32[COMRAM] unsigned long 
 11733 ;;  address         1   36[COMRAM] unsigned char 
 11734 ;;  numOfByes       2   37[COMRAM] int 
 11735 ;; Auto vars:     Size  Location     Type
 11736 ;;  val             1   39[COMRAM] unsigned char 
 11737 ;;  idx             1   40[COMRAM] unsigned char 
 11738 ;; Return value:  Size  Location     Type
 11739 ;;                  1    wreg      void 
 11740 ;; Registers used:
 11741 ;;		wreg, status,2, status,0, cstack
 11742 ;; Tracked objects:
 11743 ;;		On entry : 0/0
 11744 ;;		On exit  : 0/0
 11745 ;;		Unchanged: 0/0
 11746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11747 ;;      Params:         7       0       0       0       0       0       0
 11748 ;;      Locals:         2       0       0       0       0       0       0
 11749 ;;      Temps:          0       0       0       0       0       0       0
 11750 ;;      Totals:         9       0       0       0       0       0       0
 11751 ;;Total ram usage:        9 bytes
 11752 ;; Hardware stack levels used:    1
 11753 ;; Hardware stack levels required when called:    6
 11754 ;; This function calls:
 11755 ;;		_EepromWrite
 11756 ;;		_make8
 11757 ;; This function is called by:
 11758 ;;		_DacInit
 11759 ;;		_DacSetValue
 11760 ;;		_InitSynth
 11761 ;;		_UpdateSynthFreq
 11762 ;; This function uses a non-reentrant model
 11763 ;;
 11764                           
 11765                           	psect	text63
 11766  003E6E                     __ptext63:
 11767                           	opt stack 0
 11768  003E6E                     _StoreIntInEeprom:
 11769                           	opt stack 21
 11770                           
 11771                           ;SystemCommon.c: 124: for(uint8_t idx = numOfByes; idx; idx--)
 11772                           
 11773                           ; BSR set to: 0
 11774                           ;incstack = 0
 11775  003E6E  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 11776  003E72  D015               	goto	l1439
 11777  003E74                     
 11778                           ;SystemCommon.c: 125: {
 11779                           ;SystemCommon.c: 126: uint8_t val = make8(data, idx - 1);
 11780  003E74  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 11781  003E78  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 11782  003E7C  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 11783  003E80  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 11784  003E84  0429               	decf	StoreIntInEeprom@idx,w,c
 11785  003E86  6E1C               	movwf	make8@dataLocation,c
 11786  003E88  EC52  F01C         	call	_make8	;wreg free
 11787  003E8C  6E28               	movwf	StoreIntInEeprom@val,c
 11788                           
 11789                           ;SystemCommon.c: 127: EepromWrite(address - idx, val);
 11790  003E8E  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 11791  003E92  5029               	movf	StoreIntInEeprom@idx,w,c
 11792  003E94  0800               	sublw	0
 11793  003E96  2425               	addwf	StoreIntInEeprom@address,w,c
 11794  003E98  ECF7  F021         	call	_EepromWrite
 11795  003E9C  0629               	decf	StoreIntInEeprom@idx,f,c
 11796  003E9E                     l1439:
 11797  003E9E  5029               	movf	StoreIntInEeprom@idx,w,c
 11798  003EA0  B4D8               	btfsc	status,2,c
 11799  003EA2  0012               	return	
 11800  003EA4  D7E7               	goto	l1440
 11801  003EA6                     __end_of_StoreIntInEeprom:
 11802                           	opt stack 0
 11803                           tosu	equ	0xFFF
 11804                           tosh	equ	0xFFE
 11805                           tosl	equ	0xFFD
 11806                           pclath	equ	0xFFA
 11807                           tblptru	equ	0xFF8
 11808                           tblptrh	equ	0xFF7
 11809                           tblptrl	equ	0xFF6
 11810                           tablat	equ	0xFF5
 11811                           prodh	equ	0xFF4
 11812                           prodl	equ	0xFF3
 11813                           intcon	equ	0xFF2
 11814                           intcon2	equ	0xFF1
 11815                           postinc0	equ	0xFEE
 11816                           plusw0	equ	0xFEB
 11817                           wreg	equ	0xFE8
 11818                           indf1	equ	0xFE7
 11819                           postdec1	equ	0xFE5
 11820                           fsr1h	equ	0xFE2
 11821                           fsr1l	equ	0xFE1
 11822                           indf2	equ	0xFDF
 11823                           postinc2	equ	0xFDE
 11824                           postdec2	equ	0xFDD
 11825                           plusw2	equ	0xFDB
 11826                           fsr2h	equ	0xFDA
 11827                           fsr2l	equ	0xFD9
 11828                           status	equ	0xFD8
 11829                           
 11830 ;; *************** function _EepromWrite *****************
 11831 ;; Defined at:
 11832 ;;		line 180 in file "FlashApp.c"
 11833 ;; Parameters:    Size  Location     Type
 11834 ;;  address         1    wreg     unsigned char 
 11835 ;;  data            1   26[COMRAM] unsigned char 
 11836 ;; Auto vars:     Size  Location     Type
 11837 ;;  address         1   27[COMRAM] unsigned char 
 11838 ;; Return value:  Size  Location     Type
 11839 ;;                  1    wreg      void 
 11840 ;; Registers used:
 11841 ;;		wreg, status,2, cstack
 11842 ;; Tracked objects:
 11843 ;;		On entry : 0/0
 11844 ;;		On exit  : 0/0
 11845 ;;		Unchanged: 0/0
 11846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11847 ;;      Params:         1       0       0       0       0       0       0
 11848 ;;      Locals:         1       0       0       0       0       0       0
 11849 ;;      Temps:          0       0       0       0       0       0       0
 11850 ;;      Totals:         2       0       0       0       0       0       0
 11851 ;;Total ram usage:        2 bytes
 11852 ;; Hardware stack levels used:    1
 11853 ;; Hardware stack levels required when called:    5
 11854 ;; This function calls:
 11855 ;;		_DATAEE_WriteByte
 11856 ;; This function is called by:
 11857 ;;		_StoreIntInEeprom
 11858 ;; This function uses a non-reentrant model
 11859 ;;
 11860                           
 11861                           	psect	text64
 11862  0043EE                     __ptext64:
 11863                           	opt stack 0
 11864  0043EE                     _EepromWrite:
 11865                           	opt stack 21
 11866                           
 11867                           ;incstack = 0
 11868                           ;EepromWrite@address stored from wreg
 11869  0043EE  6E1C               	movwf	EepromWrite@address,c
 11870                           
 11871                           ;FlashApp.c: 182: DATAEE_WriteByte(address, data);
 11872  0043F0  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 11873  0043F4  501C               	movf	EepromWrite@address,w,c
 11874  0043F6  ECA6  F01F         	call	_DATAEE_WriteByte
 11875  0043FA  0012               	return		;funcret
 11876  0043FC                     __end_of_EepromWrite:
 11877                           	opt stack 0
 11878                           tosu	equ	0xFFF
 11879                           tosh	equ	0xFFE
 11880                           tosl	equ	0xFFD
 11881                           pclath	equ	0xFFA
 11882                           tblptru	equ	0xFF8
 11883                           tblptrh	equ	0xFF7
 11884                           tblptrl	equ	0xFF6
 11885                           tablat	equ	0xFF5
 11886                           prodh	equ	0xFF4
 11887                           prodl	equ	0xFF3
 11888                           intcon	equ	0xFF2
 11889                           intcon2	equ	0xFF1
 11890                           postinc0	equ	0xFEE
 11891                           plusw0	equ	0xFEB
 11892                           wreg	equ	0xFE8
 11893                           indf1	equ	0xFE7
 11894                           postdec1	equ	0xFE5
 11895                           fsr1h	equ	0xFE2
 11896                           fsr1l	equ	0xFE1
 11897                           indf2	equ	0xFDF
 11898                           postinc2	equ	0xFDE
 11899                           postdec2	equ	0xFDD
 11900                           plusw2	equ	0xFDB
 11901                           fsr2h	equ	0xFDA
 11902                           fsr2l	equ	0xFD9
 11903                           status	equ	0xFD8
 11904                           
 11905 ;; *************** function _DATAEE_WriteByte *****************
 11906 ;; Defined at:
 11907 ;;		line 167 in file "mcc_generated_files/memory.c"
 11908 ;; Parameters:    Size  Location     Type
 11909 ;;  bAdd            1    wreg     unsigned char 
 11910 ;;  bData           1   23[COMRAM] unsigned char 
 11911 ;; Auto vars:     Size  Location     Type
 11912 ;;  bAdd            1   24[COMRAM] unsigned char 
 11913 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 11914 ;; Return value:  Size  Location     Type
 11915 ;;                  1    wreg      void 
 11916 ;; Registers used:
 11917 ;;		wreg, status,2
 11918 ;; Tracked objects:
 11919 ;;		On entry : 0/0
 11920 ;;		On exit  : 0/0
 11921 ;;		Unchanged: 0/0
 11922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11923 ;;      Params:         1       0       0       0       0       0       0
 11924 ;;      Locals:         2       0       0       0       0       0       0
 11925 ;;      Temps:          0       0       0       0       0       0       0
 11926 ;;      Totals:         3       0       0       0       0       0       0
 11927 ;;Total ram usage:        3 bytes
 11928 ;; Hardware stack levels used:    1
 11929 ;; Hardware stack levels required when called:    4
 11930 ;; This function calls:
 11931 ;;		Nothing
 11932 ;; This function is called by:
 11933 ;;		_EepromWrite
 11934 ;; This function uses a non-reentrant model
 11935 ;;
 11936                           
 11937                           	psect	text65
 11938  003F4C                     __ptext65:
 11939                           	opt stack 0
 11940  003F4C                     _DATAEE_WriteByte:
 11941                           	opt stack 21
 11942                           
 11943                           ;incstack = 0
 11944                           ;DATAEE_WriteByte@bAdd stored from wreg
 11945  003F4C  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 11946                           
 11947                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 11948  003F4E  0E00               	movlw	0
 11949  003F50  BEF2               	btfsc	intcon,7,c	;volatile
 11950  003F52  0E01               	movlw	1
 11951  003F54  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 11952                           
 11953                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 11954  003F56  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 11955                           
 11956                           ;memory.c: 172: EEDATA = bData;
 11957  003F5A  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 11958                           
 11959                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 11960  003F5E  9EA6               	bcf	4006,7,c	;volsfr
 11961                           
 11962                           ;memory.c: 174: EECON1bits.CFGS = 0;
 11963  003F60  9CA6               	bcf	4006,6,c	;volsfr
 11964                           
 11965                           ;memory.c: 175: EECON1bits.WREN = 1;
 11966  003F62  84A6               	bsf	4006,2,c	;volsfr
 11967                           
 11968                           ;memory.c: 176: INTCONbits.GIE = 0;
 11969  003F64  9EF2               	bcf	intcon,7,c	;volatile
 11970                           
 11971                           ;memory.c: 177: EECON2 = 0x55;
 11972  003F66  0E55               	movlw	85
 11973  003F68  6EA7               	movwf	4007,c	;volsfr
 11974                           
 11975                           ;memory.c: 178: EECON2 = 0xAA;
 11976  003F6A  0EAA               	movlw	170
 11977  003F6C  6EA7               	movwf	4007,c	;volsfr
 11978                           
 11979                           ;memory.c: 179: EECON1bits.WR = 1;
 11980  003F6E  82A6               	bsf	4006,1,c	;volsfr
 11981  003F70                     
 11982                           ;memory.c: 182: {
 11983  003F70  B2A6               	btfsc	4006,1,c	;volsfr
 11984  003F72  D7FE               	goto	l1061
 11985                           
 11986                           ;memory.c: 183: }
 11987                           ;memory.c: 185: EECON1bits.WREN = 0;
 11988  003F74  94A6               	bcf	4006,2,c	;volsfr
 11989                           
 11990                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 11991  003F76  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 11992  003F78  D002               	bra	u7135
 11993  003F7A  9EF2               	bcf	intcon,7,c	;volatile
 11994  003F7C  D001               	bra	u7136
 11995  003F7E                     u7135:
 11996  003F7E  8EF2               	bsf	intcon,7,c	;volatile
 11997  003F80                     u7136:
 11998  003F80  0012               	return		;funcret
 11999  003F82                     __end_of_DATAEE_WriteByte:
 12000                           	opt stack 0
 12001                           tosu	equ	0xFFF
 12002                           tosh	equ	0xFFE
 12003                           tosl	equ	0xFFD
 12004                           pclath	equ	0xFFA
 12005                           tblptru	equ	0xFF8
 12006                           tblptrh	equ	0xFF7
 12007                           tblptrl	equ	0xFF6
 12008                           tablat	equ	0xFF5
 12009                           prodh	equ	0xFF4
 12010                           prodl	equ	0xFF3
 12011                           intcon	equ	0xFF2
 12012                           intcon2	equ	0xFF1
 12013                           postinc0	equ	0xFEE
 12014                           plusw0	equ	0xFEB
 12015                           wreg	equ	0xFE8
 12016                           indf1	equ	0xFE7
 12017                           postdec1	equ	0xFE5
 12018                           fsr1h	equ	0xFE2
 12019                           fsr1l	equ	0xFE1
 12020                           indf2	equ	0xFDF
 12021                           postinc2	equ	0xFDE
 12022                           postdec2	equ	0xFDD
 12023                           plusw2	equ	0xFDB
 12024                           fsr2h	equ	0xFDA
 12025                           fsr2l	equ	0xFD9
 12026                           status	equ	0xFD8
 12027                           
 12028 ;; *************** function _SWSPI_send_word *****************
 12029 ;; Defined at:
 12030 ;;		line 17 in file "SwSpiApp.c"
 12031 ;; Parameters:    Size  Location     Type
 12032 ;;  phrType         1    wreg     enum E1
 12033 ;;  data            4   40[COMRAM] unsigned long 
 12034 ;;  dataSize        1   44[COMRAM] unsigned char 
 12035 ;; Auto vars:     Size  Location     Type
 12036 ;;  phrType         1   41[BANK0 ] enum E1
 12037 ;;  datac           1   38[BANK0 ] unsigned char 
 12038 ;;  idx             2   39[BANK0 ] int 
 12039 ;; Return value:  Size  Location     Type
 12040 ;;                  1    wreg      void 
 12041 ;; Registers used:
 12042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12043 ;; Tracked objects:
 12044 ;;		On entry : 0/0
 12045 ;;		On exit  : 0/0
 12046 ;;		Unchanged: 0/0
 12047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12048 ;;      Params:         5       0       0       0       0       0       0
 12049 ;;      Locals:         0       4       0       0       0       0       0
 12050 ;;      Temps:          0       0       0       0       0       0       0
 12051 ;;      Totals:         5       4       0       0       0       0       0
 12052 ;;Total ram usage:        9 bytes
 12053 ;; Hardware stack levels used:    1
 12054 ;; Hardware stack levels required when called:    7
 12055 ;; This function calls:
 12056 ;;		_SWSPI_DAC_send_bits
 12057 ;;		_SWSPI_Synth_send_bits
 12058 ;;		_SwSpi_Set_Dac_Sync_Pin
 12059 ;;		_SwSpi_Set_Synth_Le_Pin
 12060 ;;		_make8
 12061 ;; This function is called by:
 12062 ;;		_DacInit
 12063 ;;		_DacSetValue
 12064 ;;		_InitSynth
 12065 ;;		_UpdateSynthFreq
 12066 ;; This function uses a non-reentrant model
 12067 ;;
 12068                           
 12069                           	psect	text66
 12070  00307E                     __ptext66:
 12071                           	opt stack 0
 12072  00307E                     _SWSPI_send_word:
 12073                           	opt stack 20
 12074                           
 12075                           ;incstack = 0
 12076                           ;SWSPI_send_word@phrType stored from wreg
 12077  00307E  0100               	movlb	0	; () banked
 12078  003080  6F89               	movwf	SWSPI_send_word@phrType& (0+255),b
 12079                           
 12080                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 12081  003082  9EF2               	bcf	intcon,7,c	;volatile
 12082                           
 12083                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 12084  003084  0100               	movlb	0	; () banked
 12085  003086  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12086  003088  B4D8               	btfsc	status,2,c
 12087  00308A  D003               	goto	u7760
 12088                           
 12089                           ; BSR set to: 0
 12090  00308C  0589               	decf	SWSPI_send_word@phrType& (0+255),w,b
 12091  00308E  A4D8               	btfss	status,2,c
 12092  003090  D018               	goto	l637
 12093  003092                     u7760:
 12094                           
 12095                           ; BSR set to: 0
 12096                           ;SwSpiApp.c: 24: {
 12097                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 12098                           
 12099                           ; BSR set to: 0
 12100  003092  0E00               	movlw	0
 12101  003094  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 12102  003096  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12103  003098  ECE1  F01E         	call	_SwSpi_Set_Synth_Le_Pin
 12104                           
 12105                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 12106  00309C  C029  F025         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 12107  0030A0  C02A  F026         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 12108  0030A4  C02B  F027         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 12109  0030A8  C02C  F028         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 12110  0030AC  0100               	movlb	0	; () banked
 12111  0030AE  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12112  0030B0  EC7A  F016         	call	_SWSPI_Synth_send_bits
 12113                           
 12114                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 12115  0030B4  0E01               	movlw	1
 12116  0030B6  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 12117  0030B8  0100               	movlb	0	; () banked
 12118  0030BA  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12119  0030BC  ECE1  F01E         	call	_SwSpi_Set_Synth_Le_Pin
 12120                           
 12121                           ;SwSpiApp.c: 28: }
 12122  0030C0  D031               	goto	l641
 12123  0030C2                     l637:
 12124                           
 12125                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 12126  0030C2  0E02               	movlw	2
 12127  0030C4  0100               	movlb	0	; () banked
 12128  0030C6  1989               	xorwf	SWSPI_send_word@phrType& (0+255),w,b
 12129  0030C8  A4D8               	btfss	status,2,c
 12130  0030CA  D02C               	goto	l641
 12131                           
 12132                           ; BSR set to: 0
 12133                           ;SwSpiApp.c: 30: {
 12134                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 12135  0030CC  0E00               	movlw	0
 12136  0030CE  EC67  F021         	call	_SwSpi_Set_Dac_Sync_Pin
 12137                           
 12138                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 12139  0030D2  0E01               	movlw	1
 12140  0030D4  242D               	addwf	SWSPI_send_word@dataSize,w,c
 12141  0030D6  0100               	movlb	0	; () banked
 12142  0030D8  6F87               	movwf	SWSPI_send_word@idx& (0+255),b
 12143  0030DA  6B88               	clrf	(SWSPI_send_word@idx+1)& (0+255),b
 12144  0030DC  0E00               	movlw	0
 12145  0030DE  2388               	addwfc	(SWSPI_send_word@idx+1)& (0+255),f,b
 12146  0030E0                     l7898:
 12147                           
 12148                           ; BSR set to: 0
 12149  0030E0  BF88               	btfsc	(SWSPI_send_word@idx+1)& (0+255),7,b
 12150  0030E2  D01D               	goto	u7790
 12151  0030E4  5188               	movf	(SWSPI_send_word@idx+1)& (0+255),w,b
 12152  0030E6  E103               	bnz	l7902
 12153  0030E8  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 12154  0030EA  A0D8               	btfss	status,0,c
 12155  0030EC  D018               	goto	u7790
 12156  0030EE                     l7902:
 12157                           
 12158                           ; BSR set to: 0
 12159                           ;SwSpiApp.c: 33: {
 12160                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 12161  0030EE  C029  F018         	movff	SWSPI_send_word@data,make8@data
 12162  0030F2  C02A  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 12163  0030F6  C02B  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 12164  0030FA  C02C  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 12165  0030FE  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 12166  003100  6E1C               	movwf	make8@dataLocation,c
 12167  003102  EC52  F01C         	call	_make8	;wreg free
 12168  003106  0100               	movlb	0	; () banked
 12169  003108  6F86               	movwf	SWSPI_send_word@datac& (0+255),b
 12170                           
 12171                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 12172  00310A  C086  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 12173  00310E  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12174  003110  ECDA  F01C         	call	_SWSPI_DAC_send_bits
 12175  003114  0100               	movlb	0	; () banked
 12176  003116  0787               	decf	SWSPI_send_word@idx& (0+255),f,b
 12177  003118  A0D8               	btfss	status,0,c
 12178  00311A  0788               	decf	(SWSPI_send_word@idx+1)& (0+255),f,b
 12179  00311C  D7E1               	goto	l7898
 12180  00311E                     u7790:
 12181                           
 12182                           ; BSR set to: 0
 12183                           ;SwSpiApp.c: 36: }
 12184                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 12185                           
 12186                           ; BSR set to: 0
 12187  00311E  0E01               	movlw	1
 12188  003120  EC67  F021         	call	_SwSpi_Set_Dac_Sync_Pin
 12189  003124                     l641:
 12190                           
 12191                           ;SwSpiApp.c: 38: }
 12192                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 12193  003124  8EF2               	bsf	intcon,7,c	;volatile
 12194  003126  0012               	return		;funcret
 12195  003128                     __end_of_SWSPI_send_word:
 12196                           	opt stack 0
 12197                           tosu	equ	0xFFF
 12198                           tosh	equ	0xFFE
 12199                           tosl	equ	0xFFD
 12200                           pclath	equ	0xFFA
 12201                           tblptru	equ	0xFF8
 12202                           tblptrh	equ	0xFF7
 12203                           tblptrl	equ	0xFF6
 12204                           tablat	equ	0xFF5
 12205                           prodh	equ	0xFF4
 12206                           prodl	equ	0xFF3
 12207                           intcon	equ	0xFF2
 12208                           intcon2	equ	0xFF1
 12209                           postinc0	equ	0xFEE
 12210                           plusw0	equ	0xFEB
 12211                           wreg	equ	0xFE8
 12212                           indf1	equ	0xFE7
 12213                           postdec1	equ	0xFE5
 12214                           fsr1h	equ	0xFE2
 12215                           fsr1l	equ	0xFE1
 12216                           indf2	equ	0xFDF
 12217                           postinc2	equ	0xFDE
 12218                           postdec2	equ	0xFDD
 12219                           plusw2	equ	0xFDB
 12220                           fsr2h	equ	0xFDA
 12221                           fsr2l	equ	0xFD9
 12222                           status	equ	0xFD8
 12223                           
 12224 ;; *************** function _make8 *****************
 12225 ;; Defined at:
 12226 ;;		line 92 in file "SystemCommon.c"
 12227 ;; Parameters:    Size  Location     Type
 12228 ;;  data            4   23[COMRAM] unsigned long 
 12229 ;;  dataLocation    1   27[COMRAM] unsigned char 
 12230 ;; Auto vars:     Size  Location     Type
 12231 ;;		None
 12232 ;; Return value:  Size  Location     Type
 12233 ;;                  1    wreg      unsigned char 
 12234 ;; Registers used:
 12235 ;;		wreg, status,2, status,0
 12236 ;; Tracked objects:
 12237 ;;		On entry : 0/0
 12238 ;;		On exit  : 0/0
 12239 ;;		Unchanged: 0/0
 12240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12241 ;;      Params:         5       0       0       0       0       0       0
 12242 ;;      Locals:         0       0       0       0       0       0       0
 12243 ;;      Temps:          4       0       0       0       0       0       0
 12244 ;;      Totals:         9       0       0       0       0       0       0
 12245 ;;Total ram usage:        9 bytes
 12246 ;; Hardware stack levels used:    1
 12247 ;; Hardware stack levels required when called:    4
 12248 ;; This function calls:
 12249 ;;		Nothing
 12250 ;; This function is called by:
 12251 ;;		_FlashReadCondition
 12252 ;;		_DacReadValue
 12253 ;;		_SynthReadData
 12254 ;;		_SWSPI_send_word
 12255 ;;		_StoreIntInEeprom
 12256 ;; This function uses a non-reentrant model
 12257 ;;
 12258                           
 12259                           	psect	text67
 12260  0038A4                     __ptext67:
 12261                           	opt stack 0
 12262  0038A4                     _make8:
 12263                           	opt stack 22
 12264                           
 12265                           ;SystemCommon.c: 94: switch(dataLocation)
 12266                           
 12267                           ;incstack = 0
 12268  0038A4  D01F               	goto	l1424
 12269  0038A6                     
 12270                           ;SystemCommon.c: 97: return (data & 0x000000ff);
 12271  0038A6  5018               	movf	make8@data,w,c
 12272  0038A8  0012               	return	
 12273  0038AA                     
 12274                           ;SystemCommon.c: 100: return (data & 0x0000ff00) >> 8;
 12275  0038AA  5019               	movf	make8@data+1,w,c
 12276  0038AC  0012               	return	
 12277  0038AE                     
 12278                           ;SystemCommon.c: 103: return (data & 0x00ff0000) >> 16;
 12279  0038AE  501A               	movf	make8@data+2,w,c
 12280  0038B0  0012               	return	
 12281  0038B2                     
 12282                           ;SystemCommon.c: 106: return (data & 0xff000000) >> 24;
 12283  0038B2  0E00               	movlw	0
 12284  0038B4  1418               	andwf	make8@data,w,c
 12285  0038B6  6E1D               	movwf	??_make8& (0+255),c
 12286  0038B8  0E00               	movlw	0
 12287  0038BA  1419               	andwf	make8@data+1,w,c
 12288  0038BC  6E1E               	movwf	(??_make8+1)& (0+255),c
 12289  0038BE  0E00               	movlw	0
 12290  0038C0  141A               	andwf	make8@data+2,w,c
 12291  0038C2  6E1F               	movwf	(??_make8+2)& (0+255),c
 12292  0038C4  0EFF               	movlw	255
 12293  0038C6  141B               	andwf	make8@data+3,w,c
 12294  0038C8  6E20               	movwf	(??_make8+3)& (0+255),c
 12295  0038CA  0E19               	movlw	25
 12296  0038CC  D005               	goto	u7500
 12297  0038CE                     u7505:
 12298  0038CE  90D8               	bcf	status,0,c
 12299  0038D0  3220               	rrcf	??_make8+3,f,c
 12300  0038D2  321F               	rrcf	??_make8+2,f,c
 12301  0038D4  321E               	rrcf	??_make8+1,f,c
 12302  0038D6  321D               	rrcf	??_make8,f,c
 12303  0038D8                     u7500:
 12304  0038D8  2EE8               	decfsz	wreg,f,c
 12305  0038DA  D7F9               	goto	u7505
 12306  0038DC  501D               	movf	??_make8,w,c
 12307  0038DE  0012               	return	
 12308  0038E0                     
 12309                           ;SystemCommon.c: 109: return (0);
 12310  0038E0  0E00               	movlw	0
 12311                           
 12312                           ;SystemCommon.c: 110: }
 12313  0038E2  0012               	return	
 12314  0038E4                     l1424:
 12315  0038E4  501C               	movf	make8@dataLocation,w,c
 12316                           
 12317                           ; Switch size 1, requested type "space"
 12318                           ; Number of cases is 4, Range of values is 0 to 3
 12319                           ; switch strategies available:
 12320                           ; Name         Instructions Cycles
 12321                           ; simple_byte           13     7 (average)
 12322                           ;	Chosen strategy is simple_byte
 12323  0038E6  0A00               	xorlw	0	; case 0
 12324  0038E8  B4D8               	btfsc	status,2,c
 12325  0038EA  D7DD               	goto	l1425
 12326  0038EC  0A01               	xorlw	1	; case 1
 12327  0038EE  B4D8               	btfsc	status,2,c
 12328  0038F0  D7DC               	goto	l1427
 12329  0038F2  0A03               	xorlw	3	; case 2
 12330  0038F4  B4D8               	btfsc	status,2,c
 12331  0038F6  D7DB               	goto	l1428
 12332  0038F8  0A01               	xorlw	1	; case 3
 12333  0038FA  B4D8               	btfsc	status,2,c
 12334  0038FC  D7DA               	goto	l1429
 12335  0038FE  D7F0               	goto	l1430
 12336  003900                     __end_of_make8:
 12337                           	opt stack 0
 12338                           tosu	equ	0xFFF
 12339                           tosh	equ	0xFFE
 12340                           tosl	equ	0xFFD
 12341                           pclath	equ	0xFFA
 12342                           tblptru	equ	0xFF8
 12343                           tblptrh	equ	0xFF7
 12344                           tblptrl	equ	0xFF6
 12345                           tablat	equ	0xFF5
 12346                           prodh	equ	0xFF4
 12347                           prodl	equ	0xFF3
 12348                           intcon	equ	0xFF2
 12349                           intcon2	equ	0xFF1
 12350                           postinc0	equ	0xFEE
 12351                           plusw0	equ	0xFEB
 12352                           wreg	equ	0xFE8
 12353                           indf1	equ	0xFE7
 12354                           postdec1	equ	0xFE5
 12355                           fsr1h	equ	0xFE2
 12356                           fsr1l	equ	0xFE1
 12357                           indf2	equ	0xFDF
 12358                           postinc2	equ	0xFDE
 12359                           postdec2	equ	0xFDD
 12360                           plusw2	equ	0xFDB
 12361                           fsr2h	equ	0xFDA
 12362                           fsr2l	equ	0xFD9
 12363                           status	equ	0xFD8
 12364                           
 12365 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 12366 ;; Defined at:
 12367 ;;		line 232 in file "SwSpiApp.c"
 12368 ;; Parameters:    Size  Location     Type
 12369 ;;  phrType         1    wreg     enum E1
 12370 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12371 ;; Auto vars:     Size  Location     Type
 12372 ;;  phrType         1   24[COMRAM] enum E1
 12373 ;; Return value:  Size  Location     Type
 12374 ;;                  1    wreg      void 
 12375 ;; Registers used:
 12376 ;;		wreg, status,2, status,0
 12377 ;; Tracked objects:
 12378 ;;		On entry : 0/0
 12379 ;;		On exit  : 0/0
 12380 ;;		Unchanged: 0/0
 12381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12382 ;;      Params:         1       0       0       0       0       0       0
 12383 ;;      Locals:         1       0       0       0       0       0       0
 12384 ;;      Temps:          0       0       0       0       0       0       0
 12385 ;;      Totals:         2       0       0       0       0       0       0
 12386 ;;Total ram usage:        2 bytes
 12387 ;; Hardware stack levels used:    1
 12388 ;; Hardware stack levels required when called:    4
 12389 ;; This function calls:
 12390 ;;		Nothing
 12391 ;; This function is called by:
 12392 ;;		_SWSPI_send_word
 12393 ;; This function uses a non-reentrant model
 12394 ;;
 12395                           
 12396                           	psect	text68
 12397  003DC2                     __ptext68:
 12398                           	opt stack 0
 12399  003DC2                     _SwSpi_Set_Synth_Le_Pin:
 12400                           	opt stack 22
 12401                           
 12402                           ;incstack = 0
 12403                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 12404  003DC2  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 12405                           
 12406                           ;SwSpiApp.c: 234: switch(phrType)
 12407  003DC4  D014               	goto	l749
 12408  003DC6                     
 12409                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 12410  003DC6  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12411  003DC8  A4D8               	btfss	status,2,c
 12412  003DCA  D002               	goto	l751
 12413                           
 12414                           ;SwSpiApp.c: 238: {
 12415                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 12416  003DCC  848B               	bsf	3979,2,c	;volatile
 12417                           
 12418                           ;SwSpiApp.c: 240: }
 12419  003DCE  0012               	return	
 12420  003DD0                     l751:
 12421                           
 12422                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 12423  003DD0  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12424  003DD2  A4D8               	btfss	status,2,c
 12425  003DD4  0012               	return	
 12426                           
 12427                           ;SwSpiApp.c: 242: {
 12428                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 12429  003DD6  948B               	bcf	3979,2,c	;volatile
 12430                           
 12431                           ;SwSpiApp.c: 244: }
 12432                           ;SwSpiApp.c: 245: break;
 12433  003DD8  0012               	return	
 12434  003DDA                     
 12435                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 12436  003DDA  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12437  003DDC  A4D8               	btfss	status,2,c
 12438  003DDE  D002               	goto	l760
 12439                           
 12440                           ;SwSpiApp.c: 249: {
 12441                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 12442  003DE0  868C               	bsf	3980,3,c	;volatile
 12443                           
 12444                           ;SwSpiApp.c: 251: }
 12445  003DE2  0012               	return	
 12446  003DE4                     l760:
 12447                           
 12448                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 12449  003DE4  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12450  003DE6  A4D8               	btfss	status,2,c
 12451  003DE8  0012               	return	
 12452                           
 12453                           ;SwSpiApp.c: 253: {
 12454                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 12455  003DEA  968C               	bcf	3980,3,c	;volatile
 12456                           
 12457                           ;SwSpiApp.c: 257: }
 12458                           
 12459                           ;SwSpiApp.c: 255: }
 12460                           ;SwSpiApp.c: 256: break;
 12461  003DEC  0012               	return	
 12462  003DEE                     l749:
 12463  003DEE  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 12464                           
 12465                           ; Switch size 1, requested type "space"
 12466                           ; Number of cases is 2, Range of values is 0 to 1
 12467                           ; switch strategies available:
 12468                           ; Name         Instructions Cycles
 12469                           ; simple_byte            7     4 (average)
 12470                           ;	Chosen strategy is simple_byte
 12471  003DF0  0A00               	xorlw	0	; case 0
 12472  003DF2  B4D8               	btfsc	status,2,c
 12473  003DF4  D7E8               	goto	l750
 12474  003DF6  0A01               	xorlw	1	; case 1
 12475  003DF8  A4D8               	btfss	status,2,c
 12476  003DFA  0012               	return	
 12477  003DFC  D7EE               	goto	l759
 12478  003DFE                     __end_of_SwSpi_Set_Synth_Le_Pin:
 12479                           	opt stack 0
 12480                           tosu	equ	0xFFF
 12481                           tosh	equ	0xFFE
 12482                           tosl	equ	0xFFD
 12483                           pclath	equ	0xFFA
 12484                           tblptru	equ	0xFF8
 12485                           tblptrh	equ	0xFF7
 12486                           tblptrl	equ	0xFF6
 12487                           tablat	equ	0xFF5
 12488                           prodh	equ	0xFF4
 12489                           prodl	equ	0xFF3
 12490                           intcon	equ	0xFF2
 12491                           intcon2	equ	0xFF1
 12492                           postinc0	equ	0xFEE
 12493                           plusw0	equ	0xFEB
 12494                           wreg	equ	0xFE8
 12495                           indf1	equ	0xFE7
 12496                           postdec1	equ	0xFE5
 12497                           fsr1h	equ	0xFE2
 12498                           fsr1l	equ	0xFE1
 12499                           indf2	equ	0xFDF
 12500                           postinc2	equ	0xFDE
 12501                           postdec2	equ	0xFDD
 12502                           plusw2	equ	0xFDB
 12503                           fsr2h	equ	0xFDA
 12504                           fsr2l	equ	0xFD9
 12505                           status	equ	0xFD8
 12506                           
 12507 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 12508 ;; Defined at:
 12509 ;;		line 260 in file "SwSpiApp.c"
 12510 ;; Parameters:    Size  Location     Type
 12511 ;;  cPinMode        1    wreg     unsigned char 
 12512 ;; Auto vars:     Size  Location     Type
 12513 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12514 ;; Return value:  Size  Location     Type
 12515 ;;                  1    wreg      void 
 12516 ;; Registers used:
 12517 ;;		wreg, status,2, status,0
 12518 ;; Tracked objects:
 12519 ;;		On entry : 0/0
 12520 ;;		On exit  : 0/0
 12521 ;;		Unchanged: 0/0
 12522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12523 ;;      Params:         0       0       0       0       0       0       0
 12524 ;;      Locals:         1       0       0       0       0       0       0
 12525 ;;      Temps:          0       0       0       0       0       0       0
 12526 ;;      Totals:         1       0       0       0       0       0       0
 12527 ;;Total ram usage:        1 bytes
 12528 ;; Hardware stack levels used:    1
 12529 ;; Hardware stack levels required when called:    4
 12530 ;; This function calls:
 12531 ;;		Nothing
 12532 ;; This function is called by:
 12533 ;;		_SWSPI_send_word
 12534 ;; This function uses a non-reentrant model
 12535 ;;
 12536                           
 12537                           	psect	text69
 12538  0042CE                     __ptext69:
 12539                           	opt stack 0
 12540  0042CE                     _SwSpi_Set_Dac_Sync_Pin:
 12541                           	opt stack 22
 12542                           
 12543                           ;incstack = 0
 12544                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 12545  0042CE  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 12546                           
 12547                           ;SwSpiApp.c: 262: switch(cPinMode)
 12548  0042D0  D004               	goto	l770
 12549  0042D2                     
 12550                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 12551  0042D2  9489               	bcf	3977,2,c	;volatile
 12552                           
 12553                           ;SwSpiApp.c: 266: break;
 12554  0042D4  0012               	return	
 12555  0042D6                     
 12556                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 12557  0042D6  8489               	bsf	3977,2,c	;volatile
 12558                           
 12559                           ;SwSpiApp.c: 271: }
 12560                           
 12561                           ;SwSpiApp.c: 270: break;
 12562  0042D8  0012               	return	
 12563  0042DA                     l770:
 12564  0042DA  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 12565                           
 12566                           ; Switch size 1, requested type "space"
 12567                           ; Number of cases is 2, Range of values is 0 to 1
 12568                           ; switch strategies available:
 12569                           ; Name         Instructions Cycles
 12570                           ; simple_byte            7     4 (average)
 12571                           ;	Chosen strategy is simple_byte
 12572  0042DC  0A00               	xorlw	0	; case 0
 12573  0042DE  B4D8               	btfsc	status,2,c
 12574  0042E0  D7F8               	goto	l771
 12575  0042E2  0A01               	xorlw	1	; case 1
 12576  0042E4  A4D8               	btfss	status,2,c
 12577  0042E6  0012               	return	
 12578  0042E8  D7F6               	goto	l775
 12579  0042EA                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 12580                           	opt stack 0
 12581                           tosu	equ	0xFFF
 12582                           tosh	equ	0xFFE
 12583                           tosl	equ	0xFFD
 12584                           pclath	equ	0xFFA
 12585                           tblptru	equ	0xFF8
 12586                           tblptrh	equ	0xFF7
 12587                           tblptrl	equ	0xFF6
 12588                           tablat	equ	0xFF5
 12589                           prodh	equ	0xFF4
 12590                           prodl	equ	0xFF3
 12591                           intcon	equ	0xFF2
 12592                           intcon2	equ	0xFF1
 12593                           postinc0	equ	0xFEE
 12594                           plusw0	equ	0xFEB
 12595                           wreg	equ	0xFE8
 12596                           indf1	equ	0xFE7
 12597                           postdec1	equ	0xFE5
 12598                           fsr1h	equ	0xFE2
 12599                           fsr1l	equ	0xFE1
 12600                           indf2	equ	0xFDF
 12601                           postinc2	equ	0xFDE
 12602                           postdec2	equ	0xFDD
 12603                           plusw2	equ	0xFDB
 12604                           fsr2h	equ	0xFDA
 12605                           fsr2l	equ	0xFD9
 12606                           status	equ	0xFD8
 12607                           
 12608 ;; *************** function _SWSPI_Synth_send_bits *****************
 12609 ;; Defined at:
 12610 ;;		line 67 in file "SwSpiApp.c"
 12611 ;; Parameters:    Size  Location     Type
 12612 ;;  phrType         1    wreg     enum E1
 12613 ;;  data            4   36[COMRAM] unsigned long 
 12614 ;; Auto vars:     Size  Location     Type
 12615 ;;  phrType         1   37[BANK0 ] enum E1
 12616 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 12617 ;;  mask            4   32[BANK0 ] unsigned long 
 12618 ;;  count           1   36[BANK0 ] unsigned char 
 12619 ;; Return value:  Size  Location     Type
 12620 ;;                  1    wreg      void 
 12621 ;; Registers used:
 12622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12623 ;; Tracked objects:
 12624 ;;		On entry : 0/0
 12625 ;;		On exit  : 0/0
 12626 ;;		Unchanged: 0/0
 12627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12628 ;;      Params:         4       0       0       0       0       0       0
 12629 ;;      Locals:         0      38       0       0       0       0       0
 12630 ;;      Temps:          0       0       0       0       0       0       0
 12631 ;;      Totals:         4      38       0       0       0       0       0
 12632 ;;Total ram usage:       42 bytes
 12633 ;; Hardware stack levels used:    1
 12634 ;; Hardware stack levels required when called:    6
 12635 ;; This function calls:
 12636 ;;		_FillArray
 12637 ;;		_Make32bitsArray
 12638 ;;		_SwSpi_Clk_Pin
 12639 ;;		_SwSpi_Data_Pin
 12640 ;; This function is called by:
 12641 ;;		_SWSPI_send_word
 12642 ;; This function uses a non-reentrant model
 12643 ;;
 12644                           
 12645                           	psect	text70
 12646  002CF4                     __ptext70:
 12647                           	opt stack 0
 12648  002CF4                     _SWSPI_Synth_send_bits:
 12649                           	opt stack 20
 12650                           
 12651                           ;incstack = 0
 12652                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 12653  002CF4  0100               	movlb	0	; () banked
 12654  002CF6  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 12655                           
 12656                           ;SwSpiApp.c: 69: uint8_t count;
 12657                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 12658  002CF8  0E01               	movlw	1
 12659  002CFA  0100               	movlb	0	; () banked
 12660  002CFC  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 12661  002CFE  0E00               	movlw	0
 12662  002D00  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 12663  002D02  0E00               	movlw	0
 12664  002D04  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 12665  002D06  0E00               	movlw	0
 12666  002D08  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 12667                           
 12668                           ; BSR set to: 0
 12669                           ;SwSpiApp.c: 72: bool bitArray[32];
 12670                           ;SwSpiApp.c: 73: FillArray(bitArray, sizeof(bitArray), 0x0);
 12671  002D0A  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12672  002D0C  6E20               	movwf	FillArray@array,c
 12673  002D0E  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12674  002D10  6E21               	movwf	FillArray@array+1,c
 12675  002D12  0E00               	movlw	0
 12676  002D14  6E23               	movwf	FillArray@size+1,c
 12677  002D16  0E20               	movlw	32
 12678  002D18  6E22               	movwf	FillArray@size,c
 12679  002D1A  0E00               	movlw	0
 12680  002D1C  6E24               	movwf	FillArray@value,c
 12681  002D1E  EC75  F021         	call	_FillArray	;wreg free
 12682                           
 12683                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 12684  002D22  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12685  002D24  6E18               	movwf	Make32bitsArray@array,c
 12686  002D26  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12687  002D28  6E19               	movwf	Make32bitsArray@array+1,c
 12688  002D2A  C025  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 12689  002D2E  C026  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 12690  002D32  C027  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 12691  002D36  C028  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 12692  002D3A  ECAE  F01C         	call	_Make32bitsArray	;wreg free
 12693                           
 12694                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 12695  002D3E  0E00               	movlw	0
 12696  002D40  0100               	movlb	0	; () banked
 12697  002D42  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 12698  002D44                     l7732:
 12699                           
 12700                           ; BSR set to: 0
 12701  002D44  0E1F               	movlw	31
 12702  002D46  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 12703  002D48  D001               	goto	l655
 12704  002D4A  D026               	goto	u7570
 12705  002D4C                     l655:
 12706                           
 12707                           ; BSR set to: 0
 12708                           ;SwSpiApp.c: 78: {
 12709                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 12710                           
 12711                           ; BSR set to: 0
 12712  002D4C  0E00               	movlw	0
 12713  002D4E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12714  002D50  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12715  002D52  EC31  F01D         	call	_SwSpi_Clk_Pin
 12716                           
 12717                           ;SwSpiApp.c: 82: if (bitArray[count])
 12718  002D56  0100               	movlb	0	; () banked
 12719  002D58  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 12720  002D5A  0D01               	mullw	1
 12721  002D5C  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12722  002D5E  24F3               	addwf	prodl,w,c
 12723  002D60  6ED9               	movwf	fsr2l,c
 12724  002D62  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12725  002D64  20F4               	addwfc	prodh,w,c
 12726  002D66  6EDA               	movwf	fsr2h,c
 12727  002D68  50DF               	movf	indf2,w,c
 12728  002D6A  B4D8               	btfsc	status,2,c
 12729  002D6C  D006               	goto	l657
 12730                           
 12731                           ; BSR set to: 0
 12732                           ;SwSpiApp.c: 83: {
 12733                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 12734  002D6E  0E01               	movlw	1
 12735  002D70  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12736  002D72  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12737  002D74  EC06  F01D         	call	_SwSpi_Data_Pin
 12738                           
 12739                           ;SwSpiApp.c: 85: }
 12740  002D78  D006               	goto	l658
 12741  002D7A                     l657:
 12742                           
 12743                           ;SwSpiApp.c: 86: else
 12744                           ;SwSpiApp.c: 87: {
 12745                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 12746  002D7A  0E00               	movlw	0
 12747  002D7C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12748  002D7E  0100               	movlb	0	; () banked
 12749  002D80  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12750  002D82  EC06  F01D         	call	_SwSpi_Data_Pin
 12751  002D86                     l658:
 12752                           
 12753                           ;SwSpiApp.c: 89: }
 12754                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 12755  002D86  0E01               	movlw	1
 12756  002D88  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12757  002D8A  0100               	movlb	0	; () banked
 12758  002D8C  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12759  002D8E  EC31  F01D         	call	_SwSpi_Clk_Pin
 12760  002D92  0100               	movlb	0	; () banked
 12761  002D94  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 12762  002D96  D7D6               	goto	l7732
 12763  002D98                     u7570:
 12764                           
 12765                           ; BSR set to: 0
 12766                           ;SwSpiApp.c: 92: }
 12767                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 12768                           
 12769                           ; BSR set to: 0
 12770  002D98  0E21               	movlw	33
 12771  002D9A                     u9207:
 12772  002D9A  2EE8               	decfsz	wreg,f,c
 12773  002D9C  D7FE               	bra	u9207
 12774  002D9E  F000               	nop	
 12775                           
 12776                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 12777  002DA0  0E00               	movlw	0
 12778  002DA2  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12779  002DA4  0100               	movlb	0	; () banked
 12780  002DA6  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12781  002DA8  EC06  F01D         	call	_SwSpi_Data_Pin
 12782                           
 12783                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 12784  002DAC  0E00               	movlw	0
 12785  002DAE  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12786  002DB0  0100               	movlb	0	; () banked
 12787  002DB2  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12788  002DB4  EC31  F01D         	call	_SwSpi_Clk_Pin
 12789  002DB8  0012               	return		;funcret
 12790  002DBA                     __end_of_SWSPI_Synth_send_bits:
 12791                           	opt stack 0
 12792                           tosu	equ	0xFFF
 12793                           tosh	equ	0xFFE
 12794                           tosl	equ	0xFFD
 12795                           pclath	equ	0xFFA
 12796                           tblptru	equ	0xFF8
 12797                           tblptrh	equ	0xFF7
 12798                           tblptrl	equ	0xFF6
 12799                           tablat	equ	0xFF5
 12800                           prodh	equ	0xFF4
 12801                           prodl	equ	0xFF3
 12802                           intcon	equ	0xFF2
 12803                           intcon2	equ	0xFF1
 12804                           postinc0	equ	0xFEE
 12805                           plusw0	equ	0xFEB
 12806                           wreg	equ	0xFE8
 12807                           indf1	equ	0xFE7
 12808                           postdec1	equ	0xFE5
 12809                           fsr1h	equ	0xFE2
 12810                           fsr1l	equ	0xFE1
 12811                           indf2	equ	0xFDF
 12812                           postinc2	equ	0xFDE
 12813                           postdec2	equ	0xFDD
 12814                           plusw2	equ	0xFDB
 12815                           fsr2h	equ	0xFDA
 12816                           fsr2l	equ	0xFD9
 12817                           status	equ	0xFD8
 12818                           
 12819 ;; *************** function _Make32bitsArray *****************
 12820 ;; Defined at:
 12821 ;;		line 113 in file "SystemCommon.c"
 12822 ;; Parameters:    Size  Location     Type
 12823 ;;  array           2   23[COMRAM] PTR unsigned char 
 12824 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 12825 ;;  data            4   25[COMRAM] unsigned long 
 12826 ;; Auto vars:     Size  Location     Type
 12827 ;;  idx             2   31[COMRAM] int 
 12828 ;; Return value:  Size  Location     Type
 12829 ;;                  1    wreg      void 
 12830 ;; Registers used:
 12831 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12832 ;; Tracked objects:
 12833 ;;		On entry : 0/0
 12834 ;;		On exit  : 0/0
 12835 ;;		Unchanged: 0/0
 12836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12837 ;;      Params:         6       0       0       0       0       0       0
 12838 ;;      Locals:         2       0       0       0       0       0       0
 12839 ;;      Temps:          2       0       0       0       0       0       0
 12840 ;;      Totals:        10       0       0       0       0       0       0
 12841 ;;Total ram usage:       10 bytes
 12842 ;; Hardware stack levels used:    1
 12843 ;; Hardware stack levels required when called:    4
 12844 ;; This function calls:
 12845 ;;		Nothing
 12846 ;; This function is called by:
 12847 ;;		_SWSPI_Synth_send_bits
 12848 ;; This function uses a non-reentrant model
 12849 ;;
 12850                           
 12851                           	psect	text71
 12852  00395C                     __ptext71:
 12853                           	opt stack 0
 12854  00395C                     _Make32bitsArray:
 12855                           	opt stack 21
 12856                           
 12857                           ;SystemCommon.c: 115: for(int idx = 0; idx <= 32; idx++)
 12858                           
 12859                           ;incstack = 0
 12860  00395C  0E00               	movlw	0
 12861  00395E  6E21               	movwf	Make32bitsArray@idx+1,c
 12862  003960  0E00               	movlw	0
 12863  003962  6E20               	movwf	Make32bitsArray@idx,c
 12864  003964                     l7520:
 12865  003964  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 12866  003966  D006               	goto	l1434
 12867  003968  5021               	movf	Make32bitsArray@idx+1,w,c
 12868  00396A  E123               	bnz	l1436
 12869  00396C  0E21               	movlw	33
 12870  00396E  5C20               	subwf	Make32bitsArray@idx,w,c
 12871  003970  B0D8               	btfsc	status,0,c
 12872  003972  0012               	return	
 12873  003974                     l1434:
 12874                           
 12875                           ;SystemCommon.c: 116: {
 12876                           ;SystemCommon.c: 117: array[32 - idx - 1] = data % 2;
 12877  003974  0E01               	movlw	1
 12878  003976  2420               	addwf	Make32bitsArray@idx,w,c
 12879  003978  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 12880  00397A  0E00               	movlw	0
 12881  00397C  2021               	addwfc	Make32bitsArray@idx+1,w,c
 12882  00397E  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 12883  003980  1E1E               	comf	??_Make32bitsArray,f,c
 12884  003982  1E1F               	comf	??_Make32bitsArray+1,f,c
 12885  003984  4A1E               	infsnz	??_Make32bitsArray,f,c
 12886  003986  2A1F               	incf	??_Make32bitsArray+1,f,c
 12887  003988  0E20               	movlw	32
 12888  00398A  261E               	addwf	??_Make32bitsArray,f,c
 12889  00398C  0E00               	movlw	0
 12890  00398E  221F               	addwfc	??_Make32bitsArray+1,f,c
 12891  003990  501E               	movf	??_Make32bitsArray,w,c
 12892  003992  2418               	addwf	Make32bitsArray@array,w,c
 12893  003994  6ED9               	movwf	fsr2l,c
 12894  003996  501F               	movf	??_Make32bitsArray+1,w,c
 12895  003998  2019               	addwfc	Make32bitsArray@array+1,w,c
 12896  00399A  6EDA               	movwf	fsr2h,c
 12897  00399C  501A               	movf	Make32bitsArray@data,w,c
 12898  00399E  0B01               	andlw	1
 12899  0039A0  6EDF               	movwf	indf2,c
 12900                           
 12901                           ;SystemCommon.c: 118: data /= 2;
 12902  0039A2  90D8               	bcf	status,0,c
 12903  0039A4  321D               	rrcf	Make32bitsArray@data+3,f,c
 12904  0039A6  321C               	rrcf	Make32bitsArray@data+2,f,c
 12905  0039A8  321B               	rrcf	Make32bitsArray@data+1,f,c
 12906  0039AA  321A               	rrcf	Make32bitsArray@data,f,c
 12907  0039AC  4A20               	infsnz	Make32bitsArray@idx,f,c
 12908  0039AE  2A21               	incf	Make32bitsArray@idx+1,f,c
 12909  0039B0  D7D9               	goto	l7520
 12910  0039B2                     l1436:
 12911  0039B2  0012               	return		;funcret
 12912  0039B4                     __end_of_Make32bitsArray:
 12913                           	opt stack 0
 12914                           tosu	equ	0xFFF
 12915                           tosh	equ	0xFFE
 12916                           tosl	equ	0xFFD
 12917                           pclath	equ	0xFFA
 12918                           tblptru	equ	0xFF8
 12919                           tblptrh	equ	0xFF7
 12920                           tblptrl	equ	0xFF6
 12921                           tablat	equ	0xFF5
 12922                           prodh	equ	0xFF4
 12923                           prodl	equ	0xFF3
 12924                           intcon	equ	0xFF2
 12925                           intcon2	equ	0xFF1
 12926                           postinc0	equ	0xFEE
 12927                           plusw0	equ	0xFEB
 12928                           wreg	equ	0xFE8
 12929                           indf1	equ	0xFE7
 12930                           postdec1	equ	0xFE5
 12931                           fsr1h	equ	0xFE2
 12932                           fsr1l	equ	0xFE1
 12933                           indf2	equ	0xFDF
 12934                           postinc2	equ	0xFDE
 12935                           postdec2	equ	0xFDD
 12936                           plusw2	equ	0xFDB
 12937                           fsr2h	equ	0xFDA
 12938                           fsr2l	equ	0xFD9
 12939                           status	equ	0xFD8
 12940                           
 12941 ;; *************** function _FillArray *****************
 12942 ;; Defined at:
 12943 ;;		line 29 in file "SystemCommon.c"
 12944 ;; Parameters:    Size  Location     Type
 12945 ;;  array           2   31[COMRAM] PTR unsigned char 
 12946 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), synthLdTxArray(12), synthLdRxArray(12), 
 12947 ;;  size            2   33[COMRAM] int 
 12948 ;;  value           1   35[COMRAM] unsigned char 
 12949 ;; Auto vars:     Size  Location     Type
 12950 ;;		None
 12951 ;; Return value:  Size  Location     Type
 12952 ;;                  1    wreg      void 
 12953 ;; Registers used:
 12954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12955 ;; Tracked objects:
 12956 ;;		On entry : 0/0
 12957 ;;		On exit  : 0/0
 12958 ;;		Unchanged: 0/0
 12959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12960 ;;      Params:         5       0       0       0       0       0       0
 12961 ;;      Locals:         0       0       0       0       0       0       0
 12962 ;;      Temps:          0       0       0       0       0       0       0
 12963 ;;      Totals:         5       0       0       0       0       0       0
 12964 ;;Total ram usage:        5 bytes
 12965 ;; Hardware stack levels used:    1
 12966 ;; Hardware stack levels required when called:    5
 12967 ;; This function calls:
 12968 ;;		_memset
 12969 ;; This function is called by:
 12970 ;;		_PLLInitialize
 12971 ;;		_SWSPI_Synth_send_bits
 12972 ;; This function uses a non-reentrant model
 12973 ;;
 12974                           
 12975                           	psect	text72
 12976  0042EA                     __ptext72:
 12977                           	opt stack 0
 12978  0042EA                     _FillArray:
 12979                           	opt stack 20
 12980                           
 12981                           ;SystemCommon.c: 31: memset(array, value, size);
 12982                           
 12983                           ;incstack = 0
 12984  0042EA  C020  F018         	movff	FillArray@array,memset@p1
 12985  0042EE  C021  F019         	movff	FillArray@array+1,memset@p1+1
 12986  0042F2  C024  F01A         	movff	FillArray@value,memset@c
 12987  0042F6  6A1B               	clrf	memset@c+1,c
 12988  0042F8  C022  F01C         	movff	FillArray@size,memset@n
 12989  0042FC  C023  F01D         	movff	FillArray@size+1,memset@n+1
 12990  004300  EC6E  F020         	call	_memset	;wreg free
 12991  004304  0012               	return		;funcret
 12992  004306                     __end_of_FillArray:
 12993                           	opt stack 0
 12994                           tosu	equ	0xFFF
 12995                           tosh	equ	0xFFE
 12996                           tosl	equ	0xFFD
 12997                           pclath	equ	0xFFA
 12998                           tblptru	equ	0xFF8
 12999                           tblptrh	equ	0xFF7
 13000                           tblptrl	equ	0xFF6
 13001                           tablat	equ	0xFF5
 13002                           prodh	equ	0xFF4
 13003                           prodl	equ	0xFF3
 13004                           intcon	equ	0xFF2
 13005                           intcon2	equ	0xFF1
 13006                           postinc0	equ	0xFEE
 13007                           plusw0	equ	0xFEB
 13008                           wreg	equ	0xFE8
 13009                           indf1	equ	0xFE7
 13010                           postdec1	equ	0xFE5
 13011                           fsr1h	equ	0xFE2
 13012                           fsr1l	equ	0xFE1
 13013                           indf2	equ	0xFDF
 13014                           postinc2	equ	0xFDE
 13015                           postdec2	equ	0xFDD
 13016                           plusw2	equ	0xFDB
 13017                           fsr2h	equ	0xFDA
 13018                           fsr2l	equ	0xFD9
 13019                           status	equ	0xFD8
 13020                           
 13021 ;; *************** function _memset *****************
 13022 ;; Defined at:
 13023 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 13024 ;; Parameters:    Size  Location     Type
 13025 ;;  p1              2   23[COMRAM] PTR void 
 13026 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(29), 
 13027 ;;		 -> SynthReadData@eepromDataArray(20), DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
 13028 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 13029 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 13030 ;;  c               2   25[COMRAM] int 
 13031 ;;  n               2   27[COMRAM] unsigned int 
 13032 ;; Auto vars:     Size  Location     Type
 13033 ;;  p               2   29[COMRAM] PTR unsigned char 
 13034 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(29), 
 13035 ;;		 -> SynthReadData@eepromDataArray(20), DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
 13036 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 13037 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 13038 ;; Return value:  Size  Location     Type
 13039 ;;                  2   23[COMRAM] PTR void 
 13040 ;; Registers used:
 13041 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13042 ;; Tracked objects:
 13043 ;;		On entry : 0/0
 13044 ;;		On exit  : 0/0
 13045 ;;		Unchanged: 0/0
 13046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13047 ;;      Params:         6       0       0       0       0       0       0
 13048 ;;      Locals:         2       0       0       0       0       0       0
 13049 ;;      Temps:          0       0       0       0       0       0       0
 13050 ;;      Totals:         8       0       0       0       0       0       0
 13051 ;;Total ram usage:        8 bytes
 13052 ;; Hardware stack levels used:    1
 13053 ;; Hardware stack levels required when called:    4
 13054 ;; This function calls:
 13055 ;;		Nothing
 13056 ;; This function is called by:
 13057 ;;		_ZeroArray
 13058 ;;		_FillArray
 13059 ;; This function uses a non-reentrant model
 13060 ;;
 13061                           
 13062                           	psect	text73
 13063  0040DC                     __ptext73:
 13064                           	opt stack 0
 13065  0040DC                     _memset:
 13066                           	opt stack 24
 13067                           
 13068                           ;incstack = 0
 13069  0040DC  C018  F01E         	movff	memset@p1,memset@p
 13070  0040E0  C019  F01F         	movff	memset@p1+1,memset@p+1
 13071  0040E4  D008               	goto	l2029
 13072  0040E6                     l7302:
 13073  0040E6  C01E  FFD9         	movff	memset@p,fsr2l
 13074  0040EA  C01F  FFDA         	movff	memset@p+1,fsr2h
 13075  0040EE  C01A  FFDF         	movff	memset@c,indf2
 13076  0040F2  4A1E               	infsnz	memset@p,f,c
 13077  0040F4  2A1F               	incf	memset@p+1,f,c
 13078  0040F6                     l2029:
 13079  0040F6  061C               	decf	memset@n,f,c
 13080  0040F8  A0D8               	btfss	status,0,c
 13081  0040FA  061D               	decf	memset@n+1,f,c
 13082  0040FC  281C               	incf	memset@n,w,c
 13083  0040FE  E1F3               	bnz	l7302
 13084  004100  281D               	incf	memset@n+1,w,c
 13085  004102  B4D8               	btfsc	status,2,c
 13086  004104  0012               	return	
 13087  004106  D7EF               	goto	l2030
 13088  004108                     __end_of_memset:
 13089                           	opt stack 0
 13090                           tosu	equ	0xFFF
 13091                           tosh	equ	0xFFE
 13092                           tosl	equ	0xFFD
 13093                           pclath	equ	0xFFA
 13094                           tblptru	equ	0xFF8
 13095                           tblptrh	equ	0xFF7
 13096                           tblptrl	equ	0xFF6
 13097                           tablat	equ	0xFF5
 13098                           prodh	equ	0xFF4
 13099                           prodl	equ	0xFF3
 13100                           intcon	equ	0xFF2
 13101                           intcon2	equ	0xFF1
 13102                           postinc0	equ	0xFEE
 13103                           plusw0	equ	0xFEB
 13104                           wreg	equ	0xFE8
 13105                           indf1	equ	0xFE7
 13106                           postdec1	equ	0xFE5
 13107                           fsr1h	equ	0xFE2
 13108                           fsr1l	equ	0xFE1
 13109                           indf2	equ	0xFDF
 13110                           postinc2	equ	0xFDE
 13111                           postdec2	equ	0xFDD
 13112                           plusw2	equ	0xFDB
 13113                           fsr2h	equ	0xFDA
 13114                           fsr2l	equ	0xFD9
 13115                           status	equ	0xFD8
 13116                           
 13117 ;; *************** function _SWSPI_DAC_send_bits *****************
 13118 ;; Defined at:
 13119 ;;		line 43 in file "SwSpiApp.c"
 13120 ;; Parameters:    Size  Location     Type
 13121 ;;  phrType         1    wreg     enum E1
 13122 ;;  data            1   25[COMRAM] unsigned char 
 13123 ;; Auto vars:     Size  Location     Type
 13124 ;;  phrType         1   27[COMRAM] enum E1
 13125 ;;  count           1   26[COMRAM] unsigned char 
 13126 ;; Return value:  Size  Location     Type
 13127 ;;                  1    wreg      void 
 13128 ;; Registers used:
 13129 ;;		wreg, status,2, status,0, cstack
 13130 ;; Tracked objects:
 13131 ;;		On entry : 0/0
 13132 ;;		On exit  : 0/0
 13133 ;;		Unchanged: 0/0
 13134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13135 ;;      Params:         1       0       0       0       0       0       0
 13136 ;;      Locals:         2       0       0       0       0       0       0
 13137 ;;      Temps:          0       0       0       0       0       0       0
 13138 ;;      Totals:         3       0       0       0       0       0       0
 13139 ;;Total ram usage:        3 bytes
 13140 ;; Hardware stack levels used:    1
 13141 ;; Hardware stack levels required when called:    5
 13142 ;; This function calls:
 13143 ;;		_SwSpi_Clk_Pin
 13144 ;;		_SwSpi_Data_Pin
 13145 ;; This function is called by:
 13146 ;;		_SWSPI_send_word
 13147 ;; This function uses a non-reentrant model
 13148 ;;
 13149                           
 13150                           	psect	text74
 13151  0039B4                     __ptext74:
 13152                           	opt stack 0
 13153  0039B4                     _SWSPI_DAC_send_bits:
 13154                           	opt stack 21
 13155                           
 13156                           ;incstack = 0
 13157                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 13158  0039B4  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 13159                           
 13160                           ;SwSpiApp.c: 45: uint8_t count;
 13161                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 13162  0039B6  0E08               	movlw	8
 13163  0039B8  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 13164  0039BA  D01A               	goto	l647
 13165  0039BC                     
 13166                           ;SwSpiApp.c: 47: {
 13167                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 13168  0039BC  0E01               	movlw	1
 13169  0039BE  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13170  0039C0  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13171  0039C2  EC31  F01D         	call	_SwSpi_Clk_Pin
 13172                           
 13173                           ;SwSpiApp.c: 50: if (data & 0X80)
 13174  0039C6  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 13175  0039C8  D006               	goto	l649
 13176                           
 13177                           ;SwSpiApp.c: 51: {
 13178                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 13179  0039CA  0E01               	movlw	1
 13180  0039CC  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13181  0039CE  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13182  0039D0  EC06  F01D         	call	_SwSpi_Data_Pin
 13183                           
 13184                           ;SwSpiApp.c: 54: }
 13185  0039D4  D005               	goto	l650
 13186  0039D6                     l649:
 13187                           
 13188                           ;SwSpiApp.c: 55: else
 13189                           ;SwSpiApp.c: 56: {
 13190                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 13191  0039D6  0E00               	movlw	0
 13192  0039D8  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13193  0039DA  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13194  0039DC  EC06  F01D         	call	_SwSpi_Data_Pin
 13195  0039E0                     l650:
 13196                           
 13197                           ;SwSpiApp.c: 58: }
 13198                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 13199  0039E0  0E00               	movlw	0
 13200  0039E2  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13201  0039E4  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13202  0039E6  EC31  F01D         	call	_SwSpi_Clk_Pin
 13203  0039EA  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 13204  0039EC  90D8               	bcf	status,0,c
 13205  0039EE  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 13206  0039F0                     l647:
 13207  0039F0  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 13208  0039F2  A4D8               	btfss	status,2,c
 13209  0039F4  D7E3               	goto	l648
 13210                           
 13211                           ;SwSpiApp.c: 61: }
 13212                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 13213  0039F6  0E00               	movlw	0
 13214  0039F8  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13215  0039FA  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13216  0039FC  EC06  F01D         	call	_SwSpi_Data_Pin
 13217                           
 13218                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 13219  003A00  0E00               	movlw	0
 13220  003A02  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13221  003A04  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13222  003A06  EC31  F01D         	call	_SwSpi_Clk_Pin
 13223  003A0A  0012               	return		;funcret
 13224  003A0C                     __end_of_SWSPI_DAC_send_bits:
 13225                           	opt stack 0
 13226                           tosu	equ	0xFFF
 13227                           tosh	equ	0xFFE
 13228                           tosl	equ	0xFFD
 13229                           pclath	equ	0xFFA
 13230                           tblptru	equ	0xFF8
 13231                           tblptrh	equ	0xFF7
 13232                           tblptrl	equ	0xFF6
 13233                           tablat	equ	0xFF5
 13234                           prodh	equ	0xFF4
 13235                           prodl	equ	0xFF3
 13236                           intcon	equ	0xFF2
 13237                           intcon2	equ	0xFF1
 13238                           postinc0	equ	0xFEE
 13239                           plusw0	equ	0xFEB
 13240                           wreg	equ	0xFE8
 13241                           indf1	equ	0xFE7
 13242                           postdec1	equ	0xFE5
 13243                           fsr1h	equ	0xFE2
 13244                           fsr1l	equ	0xFE1
 13245                           indf2	equ	0xFDF
 13246                           postinc2	equ	0xFDE
 13247                           postdec2	equ	0xFDD
 13248                           plusw2	equ	0xFDB
 13249                           fsr2h	equ	0xFDA
 13250                           fsr2l	equ	0xFD9
 13251                           status	equ	0xFD8
 13252                           
 13253 ;; *************** function _SwSpi_Data_Pin *****************
 13254 ;; Defined at:
 13255 ;;		line 103 in file "SwSpiApp.c"
 13256 ;; Parameters:    Size  Location     Type
 13257 ;;  phrType         1    wreg     enum E1
 13258 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13259 ;; Auto vars:     Size  Location     Type
 13260 ;;  phrType         1   24[COMRAM] enum E1
 13261 ;; Return value:  Size  Location     Type
 13262 ;;                  1    wreg      void 
 13263 ;; Registers used:
 13264 ;;		wreg, status,2, status,0
 13265 ;; Tracked objects:
 13266 ;;		On entry : 0/0
 13267 ;;		On exit  : 0/0
 13268 ;;		Unchanged: 0/0
 13269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13270 ;;      Params:         1       0       0       0       0       0       0
 13271 ;;      Locals:         1       0       0       0       0       0       0
 13272 ;;      Temps:          0       0       0       0       0       0       0
 13273 ;;      Totals:         2       0       0       0       0       0       0
 13274 ;;Total ram usage:        2 bytes
 13275 ;; Hardware stack levels used:    1
 13276 ;; Hardware stack levels required when called:    4
 13277 ;; This function calls:
 13278 ;;		Nothing
 13279 ;; This function is called by:
 13280 ;;		_SWSPI_DAC_send_bits
 13281 ;;		_SWSPI_Synth_send_bits
 13282 ;; This function uses a non-reentrant model
 13283 ;;
 13284                           
 13285                           	psect	text75
 13286  003A0C                     __ptext75:
 13287                           	opt stack 0
 13288  003A0C                     _SwSpi_Data_Pin:
 13289                           	opt stack 21
 13290                           
 13291                           ;incstack = 0
 13292                           ;SwSpi_Data_Pin@phrType stored from wreg
 13293  003A0C  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 13294                           
 13295                           ;SwSpiApp.c: 105: switch(phrType)
 13296  003A0E  D01E               	goto	l662
 13297  003A10                     
 13298                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 13299  003A10  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13300  003A12  A4D8               	btfss	status,2,c
 13301  003A14  D002               	goto	l664
 13302                           
 13303                           ;SwSpiApp.c: 109: {
 13304                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 13305  003A16  808C               	bsf	3980,0,c	;volatile
 13306                           
 13307                           ;SwSpiApp.c: 111: }
 13308  003A18  0012               	return	
 13309  003A1A                     l664:
 13310                           
 13311                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 13312  003A1A  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13313  003A1C  A4D8               	btfss	status,2,c
 13314  003A1E  0012               	return	
 13315                           
 13316                           ;SwSpiApp.c: 113: {
 13317                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 13318  003A20  908C               	bcf	3980,0,c	;volatile
 13319                           
 13320                           ;SwSpiApp.c: 115: }
 13321                           ;SwSpiApp.c: 116: break;
 13322  003A22  0012               	return	
 13323  003A24                     
 13324                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 13325  003A24  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13326  003A26  A4D8               	btfss	status,2,c
 13327  003A28  D002               	goto	l673
 13328                           
 13329                           ;SwSpiApp.c: 120: {
 13330                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 13331  003A2A  8A8B               	bsf	3979,5,c	;volatile
 13332                           
 13333                           ;SwSpiApp.c: 122: }
 13334  003A2C  0012               	return	
 13335  003A2E                     l673:
 13336                           
 13337                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 13338  003A2E  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13339  003A30  A4D8               	btfss	status,2,c
 13340  003A32  0012               	return	
 13341                           
 13342                           ;SwSpiApp.c: 124: {
 13343                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 13344  003A34  9A8B               	bcf	3979,5,c	;volatile
 13345                           
 13346                           ;SwSpiApp.c: 126: }
 13347                           ;SwSpiApp.c: 127: break;
 13348  003A36  0012               	return	
 13349  003A38                     
 13350                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 13351  003A38  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13352  003A3A  A4D8               	btfss	status,2,c
 13353  003A3C  D002               	goto	l681
 13354                           
 13355                           ;SwSpiApp.c: 131: {
 13356                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 13357  003A3E  8889               	bsf	3977,4,c	;volatile
 13358                           
 13359                           ;SwSpiApp.c: 133: }
 13360  003A40  0012               	return	
 13361  003A42                     l681:
 13362                           
 13363                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 13364  003A42  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13365  003A44  A4D8               	btfss	status,2,c
 13366  003A46  0012               	return	
 13367                           
 13368                           ;SwSpiApp.c: 135: {
 13369                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 13370  003A48  9889               	bcf	3977,4,c	;volatile
 13371                           
 13372                           ;SwSpiApp.c: 139: }
 13373                           
 13374                           ;SwSpiApp.c: 137: }
 13375                           ;SwSpiApp.c: 138: break;
 13376  003A4A  0012               	return	
 13377  003A4C                     l662:
 13378  003A4C  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 13379                           
 13380                           ; Switch size 1, requested type "space"
 13381                           ; Number of cases is 3, Range of values is 0 to 2
 13382                           ; switch strategies available:
 13383                           ; Name         Instructions Cycles
 13384                           ; simple_byte           10     6 (average)
 13385                           ;	Chosen strategy is simple_byte
 13386  003A4E  0A00               	xorlw	0	; case 0
 13387  003A50  B4D8               	btfsc	status,2,c
 13388  003A52  D7DE               	goto	l663
 13389  003A54  0A01               	xorlw	1	; case 1
 13390  003A56  B4D8               	btfsc	status,2,c
 13391  003A58  D7E5               	goto	l672
 13392  003A5A  0A03               	xorlw	3	; case 2
 13393  003A5C  A4D8               	btfss	status,2,c
 13394  003A5E  0012               	return	
 13395  003A60  D7EB               	goto	l680
 13396  003A62                     __end_of_SwSpi_Data_Pin:
 13397                           	opt stack 0
 13398                           tosu	equ	0xFFF
 13399                           tosh	equ	0xFFE
 13400                           tosl	equ	0xFFD
 13401                           pclath	equ	0xFFA
 13402                           tblptru	equ	0xFF8
 13403                           tblptrh	equ	0xFF7
 13404                           tblptrl	equ	0xFF6
 13405                           tablat	equ	0xFF5
 13406                           prodh	equ	0xFF4
 13407                           prodl	equ	0xFF3
 13408                           intcon	equ	0xFF2
 13409                           intcon2	equ	0xFF1
 13410                           postinc0	equ	0xFEE
 13411                           plusw0	equ	0xFEB
 13412                           wreg	equ	0xFE8
 13413                           indf1	equ	0xFE7
 13414                           postdec1	equ	0xFE5
 13415                           fsr1h	equ	0xFE2
 13416                           fsr1l	equ	0xFE1
 13417                           indf2	equ	0xFDF
 13418                           postinc2	equ	0xFDE
 13419                           postdec2	equ	0xFDD
 13420                           plusw2	equ	0xFDB
 13421                           fsr2h	equ	0xFDA
 13422                           fsr2l	equ	0xFD9
 13423                           status	equ	0xFD8
 13424                           
 13425 ;; *************** function _SwSpi_Clk_Pin *****************
 13426 ;; Defined at:
 13427 ;;		line 142 in file "SwSpiApp.c"
 13428 ;; Parameters:    Size  Location     Type
 13429 ;;  phrType         1    wreg     enum E1
 13430 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13431 ;; Auto vars:     Size  Location     Type
 13432 ;;  phrType         1   24[COMRAM] enum E1
 13433 ;; Return value:  Size  Location     Type
 13434 ;;                  1    wreg      void 
 13435 ;; Registers used:
 13436 ;;		wreg, status,2, status,0
 13437 ;; Tracked objects:
 13438 ;;		On entry : 0/0
 13439 ;;		On exit  : 0/0
 13440 ;;		Unchanged: 0/0
 13441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13442 ;;      Params:         1       0       0       0       0       0       0
 13443 ;;      Locals:         1       0       0       0       0       0       0
 13444 ;;      Temps:          0       0       0       0       0       0       0
 13445 ;;      Totals:         2       0       0       0       0       0       0
 13446 ;;Total ram usage:        2 bytes
 13447 ;; Hardware stack levels used:    1
 13448 ;; Hardware stack levels required when called:    4
 13449 ;; This function calls:
 13450 ;;		Nothing
 13451 ;; This function is called by:
 13452 ;;		_SWSPI_DAC_send_bits
 13453 ;;		_SWSPI_Synth_send_bits
 13454 ;;		_SwSpi_Synth_Toggle_Clock
 13455 ;; This function uses a non-reentrant model
 13456 ;;
 13457                           
 13458                           	psect	text76
 13459  003A62                     __ptext76:
 13460                           	opt stack 0
 13461  003A62                     _SwSpi_Clk_Pin:
 13462                           	opt stack 21
 13463                           
 13464                           ;incstack = 0
 13465                           ;SwSpi_Clk_Pin@phrType stored from wreg
 13466  003A62  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 13467                           
 13468                           ;SwSpiApp.c: 144: switch(phrType)
 13469  003A64  D01E               	goto	l691
 13470  003A66                     
 13471                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 13472  003A66  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13473  003A68  A4D8               	btfss	status,2,c
 13474  003A6A  D002               	goto	l693
 13475                           
 13476                           ;SwSpiApp.c: 148: {
 13477                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 13478  003A6C  868B               	bsf	3979,3,c	;volatile
 13479                           
 13480                           ;SwSpiApp.c: 150: }
 13481  003A6E  0012               	return	
 13482  003A70                     l693:
 13483                           
 13484                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 13485  003A70  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13486  003A72  A4D8               	btfss	status,2,c
 13487  003A74  0012               	return	
 13488                           
 13489                           ;SwSpiApp.c: 152: {
 13490                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 13491  003A76  968B               	bcf	3979,3,c	;volatile
 13492                           
 13493                           ;SwSpiApp.c: 154: }
 13494                           ;SwSpiApp.c: 155: break;
 13495  003A78  0012               	return	
 13496  003A7A                     
 13497                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 13498  003A7A  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13499  003A7C  A4D8               	btfss	status,2,c
 13500  003A7E  D002               	goto	l702
 13501                           
 13502                           ;SwSpiApp.c: 159: {
 13503                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 13504  003A80  888B               	bsf	3979,4,c	;volatile
 13505                           
 13506                           ;SwSpiApp.c: 161: }
 13507  003A82  0012               	return	
 13508  003A84                     l702:
 13509                           
 13510                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 13511  003A84  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13512  003A86  A4D8               	btfss	status,2,c
 13513  003A88  0012               	return	
 13514                           
 13515                           ;SwSpiApp.c: 163: {
 13516                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 13517  003A8A  988B               	bcf	3979,4,c	;volatile
 13518                           
 13519                           ;SwSpiApp.c: 165: }
 13520                           ;SwSpiApp.c: 167: break;
 13521  003A8C  0012               	return	
 13522  003A8E                     
 13523                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 13524  003A8E  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13525  003A90  A4D8               	btfss	status,2,c
 13526  003A92  D002               	goto	l710
 13527                           
 13528                           ;SwSpiApp.c: 171: {
 13529                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 13530  003A94  8689               	bsf	3977,3,c	;volatile
 13531                           
 13532                           ;SwSpiApp.c: 173: }
 13533  003A96  0012               	return	
 13534  003A98                     l710:
 13535                           
 13536                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 13537  003A98  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13538  003A9A  A4D8               	btfss	status,2,c
 13539  003A9C  0012               	return	
 13540                           
 13541                           ;SwSpiApp.c: 175: {
 13542                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 13543  003A9E  9689               	bcf	3977,3,c	;volatile
 13544                           
 13545                           ;SwSpiApp.c: 179: }
 13546                           
 13547                           ;SwSpiApp.c: 177: }
 13548                           ;SwSpiApp.c: 178: break;
 13549  003AA0  0012               	return	
 13550  003AA2                     l691:
 13551  003AA2  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 13552                           
 13553                           ; Switch size 1, requested type "space"
 13554                           ; Number of cases is 3, Range of values is 0 to 2
 13555                           ; switch strategies available:
 13556                           ; Name         Instructions Cycles
 13557                           ; simple_byte           10     6 (average)
 13558                           ;	Chosen strategy is simple_byte
 13559  003AA4  0A00               	xorlw	0	; case 0
 13560  003AA6  B4D8               	btfsc	status,2,c
 13561  003AA8  D7DE               	goto	l692
 13562  003AAA  0A01               	xorlw	1	; case 1
 13563  003AAC  B4D8               	btfsc	status,2,c
 13564  003AAE  D7E5               	goto	l701
 13565  003AB0  0A03               	xorlw	3	; case 2
 13566  003AB2  A4D8               	btfss	status,2,c
 13567  003AB4  0012               	return	
 13568  003AB6  D7EB               	goto	l709
 13569  003AB8                     __end_of_SwSpi_Clk_Pin:
 13570                           	opt stack 0
 13571                           tosu	equ	0xFFF
 13572                           tosh	equ	0xFFE
 13573                           tosl	equ	0xFFD
 13574                           pclath	equ	0xFFA
 13575                           tblptru	equ	0xFF8
 13576                           tblptrh	equ	0xFF7
 13577                           tblptrl	equ	0xFF6
 13578                           tablat	equ	0xFF5
 13579                           prodh	equ	0xFF4
 13580                           prodl	equ	0xFF3
 13581                           intcon	equ	0xFF2
 13582                           intcon2	equ	0xFF1
 13583                           postinc0	equ	0xFEE
 13584                           plusw0	equ	0xFEB
 13585                           wreg	equ	0xFE8
 13586                           indf1	equ	0xFE7
 13587                           postdec1	equ	0xFE5
 13588                           fsr1h	equ	0xFE2
 13589                           fsr1l	equ	0xFE1
 13590                           indf2	equ	0xFDF
 13591                           postinc2	equ	0xFDE
 13592                           postdec2	equ	0xFDD
 13593                           plusw2	equ	0xFDB
 13594                           fsr2h	equ	0xFDA
 13595                           fsr2l	equ	0xFD9
 13596                           status	equ	0xFD8
 13597                           
 13598 ;; *************** function _ReadIntFromEeprom *****************
 13599 ;; Defined at:
 13600 ;;		line 131 in file "SystemCommon.c"
 13601 ;; Parameters:    Size  Location     Type
 13602 ;;  address         1    wreg     unsigned char 
 13603 ;;  numOfByes       2   81[BANK0 ] int 
 13604 ;; Auto vars:     Size  Location     Type
 13605 ;;  address         1   98[BANK0 ] unsigned char 
 13606 ;;  base            4   88[BANK0 ] unsigned long 
 13607 ;;  idx             1  103[BANK0 ] unsigned char 
 13608 ;;  retVal          4   99[BANK0 ] unsigned long 
 13609 ;; Return value:  Size  Location     Type
 13610 ;;                  4   81[BANK0 ] unsigned long 
 13611 ;; Registers used:
 13612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13613 ;; Tracked objects:
 13614 ;;		On entry : 0/0
 13615 ;;		On exit  : 0/0
 13616 ;;		Unchanged: 0/0
 13617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13618 ;;      Params:         0       4       0       0       0       0       0
 13619 ;;      Locals:         0      16       0       0       0       0       0
 13620 ;;      Temps:          0       3       0       0       0       0       0
 13621 ;;      Totals:         0      23       0       0       0       0       0
 13622 ;;Total ram usage:       23 bytes
 13623 ;; Hardware stack levels used:    1
 13624 ;; Hardware stack levels required when called:    9
 13625 ;; This function calls:
 13626 ;;		_EepromRead
 13627 ;;		___awtoft
 13628 ;;		___fttol
 13629 ;;		___lmul
 13630 ;;		_pow
 13631 ;; This function is called by:
 13632 ;;		_DacInit
 13633 ;;		_DacReadValue
 13634 ;;		_InitSynth
 13635 ;;		_SynthReadData
 13636 ;; This function uses a non-reentrant model
 13637 ;;
 13638                           
 13639                           	psect	text77
 13640  0020E0                     __ptext77:
 13641                           	opt stack 0
 13642  0020E0                     _ReadIntFromEeprom:
 13643                           	opt stack 18
 13644                           
 13645                           ;incstack = 0
 13646                           ;ReadIntFromEeprom@address stored from wreg
 13647  0020E0  0100               	movlb	0	; () banked
 13648  0020E2  6FC2               	movwf	ReadIntFromEeprom@address& (0+255),b
 13649                           
 13650                           ;SystemCommon.c: 133: uint32_t retVal = 0x00;
 13651  0020E4  0E00               	movlw	0
 13652  0020E6  0100               	movlb	0	; () banked
 13653  0020E8  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13654  0020EA  0E00               	movlw	0
 13655  0020EC  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13656  0020EE  0E00               	movlw	0
 13657  0020F0  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13658  0020F2  0E00               	movlw	0
 13659  0020F4  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13660                           
 13661                           ; BSR set to: 0
 13662                           ;SystemCommon.c: 134: address -= numOfByes;
 13663  0020F6  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13664  0020F8  5FC2               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 13665                           
 13666                           ; BSR set to: 0
 13667                           ;SystemCommon.c: 136: for(uint8_t idx = 0; idx < numOfByes; idx++)
 13668  0020FA  0E00               	movlw	0
 13669  0020FC  6FC7               	movwf	ReadIntFromEeprom@idx& (0+255),b
 13670  0020FE  D06D               	goto	l1445
 13671  002100                     
 13672                           ; BSR set to: 0
 13673                           ;SystemCommon.c: 137: {
 13674                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13675                           
 13676                           ; BSR set to: 0
 13677  002100  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13678  002102  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13679  002104  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13680  002106  0E01               	movlw	1
 13681  002108  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13682  00210A  0E00               	movlw	0
 13683  00210C  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13684  00210E  1FB5               	comf	??_ReadIntFromEeprom& (0+255),f,b
 13685  002110  1FB6               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13686  002112  4BB5               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 13687  002114  2BB6               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13688  002116  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13689  002118  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13690  00211A  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13691  00211C  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13692  00211E  90D8               	bcf	status,0,c
 13693  002120  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13694  002122  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13695  002124  90D8               	bcf	status,0,c
 13696  002126  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13697  002128  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13698  00212A  90D8               	bcf	status,0,c
 13699  00212C  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13700  00212E  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13701  002130  C0B5  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 13702  002134  C0B6  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 13703  002138  EC53  F01F         	call	___awtoft	;wreg free
 13704  00213C  C020  F0BC         	movff	?___awtoft,_ReadIntFromEeprom$3600
 13705  002140  C021  F0BD         	movff	?___awtoft+1,_ReadIntFromEeprom$3600+1
 13706  002144  C022  F0BE         	movff	?___awtoft+2,_ReadIntFromEeprom$3600+2
 13707                           
 13708                           ;SystemCommon.c: 137: {
 13709                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13710  002148  C0BC  F0A3         	movff	_ReadIntFromEeprom$3600,pow@y
 13711  00214C  C0BD  F0A4         	movff	_ReadIntFromEeprom$3600+1,pow@y+1
 13712  002150  C0BE  F0A5         	movff	_ReadIntFromEeprom$3600+2,pow@y+2
 13713  002154  0E00               	movlw	0
 13714  002156  0100               	movlb	0	; () banked
 13715  002158  6FA0               	movwf	pow@x& (0+255),b
 13716  00215A  0E00               	movlw	0
 13717  00215C  6FA1               	movwf	(pow@x+1)& (0+255),b
 13718  00215E  0E40               	movlw	64
 13719  002160  6FA2               	movwf	(pow@x+2)& (0+255),b
 13720  002162  EC5D  F00E         	call	_pow	;wreg free
 13721  002166  C0A0  F0BF         	movff	?_pow,_ReadIntFromEeprom$3601
 13722  00216A  C0A1  F0C0         	movff	?_pow+1,_ReadIntFromEeprom$3601+1
 13723  00216E  C0A2  F0C1         	movff	?_pow+2,_ReadIntFromEeprom$3601+2
 13724                           
 13725                           ;SystemCommon.c: 137: {
 13726                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13727  002172  C0BF  F078         	movff	_ReadIntFromEeprom$3601,___fttol@f1
 13728  002176  C0C0  F079         	movff	_ReadIntFromEeprom$3601+1,___fttol@f1+1
 13729  00217A  C0C1  F07A         	movff	_ReadIntFromEeprom$3601+2,___fttol@f1+2
 13730  00217E  EC0B  F012         	call	___fttol	;wreg free
 13731  002182  C078  F0B8         	movff	?___fttol,ReadIntFromEeprom@base
 13732  002186  C079  F0B9         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 13733  00218A  C07A  F0BA         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 13734  00218E  C07B  F0BB         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 13735                           
 13736                           ;SystemCommon.c: 139: retVal = retVal | EepromRead(address + idx) * base;
 13737  002192  0100               	movlb	0	; () banked
 13738  002194  51C2               	movf	ReadIntFromEeprom@address& (0+255),w,b
 13739  002196  25C7               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 13740  002198  EC25  F022         	call	_EepromRead
 13741  00219C  0100               	movlb	0	; () banked
 13742  00219E  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13743  0021A0  51B5               	movf	??_ReadIntFromEeprom& (0+255),w,b
 13744  0021A2  6E1A               	movwf	___lmul@multiplier,c
 13745  0021A4  6A1B               	clrf	___lmul@multiplier+1,c
 13746  0021A6  6A1C               	clrf	___lmul@multiplier+2,c
 13747  0021A8  6A1D               	clrf	___lmul@multiplier+3,c
 13748  0021AA  C0B8  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 13749  0021AE  C0B9  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 13750  0021B2  C0BA  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 13751  0021B6  C0BB  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 13752  0021BA  EC5C  F01D         	call	___lmul	;wreg free
 13753  0021BE  0100               	movlb	0	; () banked
 13754  0021C0  51C3               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 13755  0021C2  101A               	iorwf	?___lmul,w,c
 13756  0021C4  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13757  0021C6  51C4               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 13758  0021C8  101B               	iorwf	?___lmul+1,w,c
 13759  0021CA  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13760  0021CC  51C5               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 13761  0021CE  101C               	iorwf	?___lmul+2,w,c
 13762  0021D0  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13763  0021D2  51C6               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 13764  0021D4  101D               	iorwf	?___lmul+3,w,c
 13765  0021D6  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13766                           
 13767                           ; BSR set to: 0
 13768  0021D8  2BC7               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 13769  0021DA                     l1445:
 13770                           
 13771                           ; BSR set to: 0
 13772                           
 13773                           ; BSR set to: 0
 13774  0021DA  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13775  0021DC  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13776  0021DE  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13777  0021E0  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13778  0021E2  5DB5               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 13779  0021E4  51B6               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 13780  0021E6  0A80               	xorlw	128
 13781  0021E8  6FB7               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 13782  0021EA  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13783  0021EC  0A80               	xorlw	128
 13784  0021EE  59B7               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 13785  0021F0  A0D8               	btfss	status,0,c
 13786  0021F2  D786               	goto	l1446
 13787                           
 13788                           ; BSR set to: 0
 13789                           ;SystemCommon.c: 140: }
 13790                           ;SystemCommon.c: 141: return retVal;
 13791  0021F4  C0C3  F0B1         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 13792  0021F8  C0C4  F0B2         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 13793  0021FC  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 13794  002200  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 13795                           
 13796                           ; BSR set to: 0
 13797  002204  0012               	return		;funcret
 13798  002206                     __end_of_ReadIntFromEeprom:
 13799                           	opt stack 0
 13800                           tosu	equ	0xFFF
 13801                           tosh	equ	0xFFE
 13802                           tosl	equ	0xFFD
 13803                           pclath	equ	0xFFA
 13804                           tblptru	equ	0xFF8
 13805                           tblptrh	equ	0xFF7
 13806                           tblptrl	equ	0xFF6
 13807                           tablat	equ	0xFF5
 13808                           prodh	equ	0xFF4
 13809                           prodl	equ	0xFF3
 13810                           intcon	equ	0xFF2
 13811                           intcon2	equ	0xFF1
 13812                           postinc0	equ	0xFEE
 13813                           plusw0	equ	0xFEB
 13814                           wreg	equ	0xFE8
 13815                           indf1	equ	0xFE7
 13816                           postdec1	equ	0xFE5
 13817                           fsr1h	equ	0xFE2
 13818                           fsr1l	equ	0xFE1
 13819                           indf2	equ	0xFDF
 13820                           postinc2	equ	0xFDE
 13821                           postdec2	equ	0xFDD
 13822                           plusw2	equ	0xFDB
 13823                           fsr2h	equ	0xFDA
 13824                           fsr2l	equ	0xFD9
 13825                           status	equ	0xFD8
 13826                           
 13827 ;; *************** function ___lmul *****************
 13828 ;; Defined at:
 13829 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13830 ;; Parameters:    Size  Location     Type
 13831 ;;  multiplier      4   25[COMRAM] unsigned long 
 13832 ;;  multiplicand    4   29[COMRAM] unsigned long 
 13833 ;; Auto vars:     Size  Location     Type
 13834 ;;  product         4   33[COMRAM] unsigned long 
 13835 ;; Return value:  Size  Location     Type
 13836 ;;                  4   25[COMRAM] unsigned long 
 13837 ;; Registers used:
 13838 ;;		wreg, status,2, status,0
 13839 ;; Tracked objects:
 13840 ;;		On entry : 0/0
 13841 ;;		On exit  : 0/0
 13842 ;;		Unchanged: 0/0
 13843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13844 ;;      Params:         8       0       0       0       0       0       0
 13845 ;;      Locals:         4       0       0       0       0       0       0
 13846 ;;      Temps:          0       0       0       0       0       0       0
 13847 ;;      Totals:        12       0       0       0       0       0       0
 13848 ;;Total ram usage:       12 bytes
 13849 ;; Hardware stack levels used:    1
 13850 ;; Hardware stack levels required when called:    4
 13851 ;; This function calls:
 13852 ;;		Nothing
 13853 ;; This function is called by:
 13854 ;;		_ReadIntFromEeprom
 13855 ;;		_strtol
 13856 ;; This function uses a non-reentrant model
 13857 ;;
 13858                           
 13859                           	psect	text78
 13860  003AB8                     __ptext78:
 13861                           	opt stack 0
 13862  003AB8                     ___lmul:
 13863                           	opt stack 21
 13864                           
 13865                           ; BSR set to: 0
 13866                           ;incstack = 0
 13867  003AB8  0E00               	movlw	0
 13868  003ABA  6E22               	movwf	___lmul@product,c
 13869  003ABC  0E00               	movlw	0
 13870  003ABE  6E23               	movwf	___lmul@product+1,c
 13871  003AC0  0E00               	movlw	0
 13872  003AC2  6E24               	movwf	___lmul@product+2,c
 13873  003AC4  0E00               	movlw	0
 13874  003AC6  6E25               	movwf	___lmul@product+3,c
 13875  003AC8  A01A               	btfss	___lmul@multiplier,0,c
 13876  003ACA  D008               	goto	l1614
 13877  003ACC  501E               	movf	___lmul@multiplicand,w,c
 13878  003ACE  2622               	addwf	___lmul@product,f,c
 13879  003AD0  501F               	movf	___lmul@multiplicand+1,w,c
 13880  003AD2  2223               	addwfc	___lmul@product+1,f,c
 13881  003AD4  5020               	movf	___lmul@multiplicand+2,w,c
 13882  003AD6  2224               	addwfc	___lmul@product+2,f,c
 13883  003AD8  5021               	movf	___lmul@multiplicand+3,w,c
 13884  003ADA  2225               	addwfc	___lmul@product+3,f,c
 13885  003ADC                     l1614:
 13886  003ADC  90D8               	bcf	status,0,c
 13887  003ADE  361E               	rlcf	___lmul@multiplicand,f,c
 13888  003AE0  361F               	rlcf	___lmul@multiplicand+1,f,c
 13889  003AE2  3620               	rlcf	___lmul@multiplicand+2,f,c
 13890  003AE4  3621               	rlcf	___lmul@multiplicand+3,f,c
 13891  003AE6  90D8               	bcf	status,0,c
 13892  003AE8  321D               	rrcf	___lmul@multiplier+3,f,c
 13893  003AEA  321C               	rrcf	___lmul@multiplier+2,f,c
 13894  003AEC  321B               	rrcf	___lmul@multiplier+1,f,c
 13895  003AEE  321A               	rrcf	___lmul@multiplier,f,c
 13896  003AF0  501A               	movf	___lmul@multiplier,w,c
 13897  003AF2  101B               	iorwf	___lmul@multiplier+1,w,c
 13898  003AF4  101C               	iorwf	___lmul@multiplier+2,w,c
 13899  003AF6  101D               	iorwf	___lmul@multiplier+3,w,c
 13900  003AF8  A4D8               	btfss	status,2,c
 13901  003AFA  D7E6               	goto	l1613
 13902  003AFC  C022  F01A         	movff	___lmul@product,?___lmul
 13903  003B00  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 13904  003B04  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 13905  003B08  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 13906  003B0C  0012               	return		;funcret
 13907  003B0E                     __end_of___lmul:
 13908                           	opt stack 0
 13909                           tosu	equ	0xFFF
 13910                           tosh	equ	0xFFE
 13911                           tosl	equ	0xFFD
 13912                           pclath	equ	0xFFA
 13913                           tblptru	equ	0xFF8
 13914                           tblptrh	equ	0xFF7
 13915                           tblptrl	equ	0xFF6
 13916                           tablat	equ	0xFF5
 13917                           prodh	equ	0xFF4
 13918                           prodl	equ	0xFF3
 13919                           intcon	equ	0xFF2
 13920                           intcon2	equ	0xFF1
 13921                           postinc0	equ	0xFEE
 13922                           plusw0	equ	0xFEB
 13923                           wreg	equ	0xFE8
 13924                           indf1	equ	0xFE7
 13925                           postdec1	equ	0xFE5
 13926                           fsr1h	equ	0xFE2
 13927                           fsr1l	equ	0xFE1
 13928                           indf2	equ	0xFDF
 13929                           postinc2	equ	0xFDE
 13930                           postdec2	equ	0xFDD
 13931                           plusw2	equ	0xFDB
 13932                           fsr2h	equ	0xFDA
 13933                           fsr2l	equ	0xFD9
 13934                           status	equ	0xFD8
 13935                           
 13936 ;; *************** function _EepromRead *****************
 13937 ;; Defined at:
 13938 ;;		line 175 in file "FlashApp.c"
 13939 ;; Parameters:    Size  Location     Type
 13940 ;;  address         1    wreg     unsigned char 
 13941 ;; Auto vars:     Size  Location     Type
 13942 ;;  address         1   24[COMRAM] unsigned char 
 13943 ;; Return value:  Size  Location     Type
 13944 ;;                  1    wreg      unsigned char 
 13945 ;; Registers used:
 13946 ;;		wreg, status,2, cstack
 13947 ;; Tracked objects:
 13948 ;;		On entry : 0/0
 13949 ;;		On exit  : 0/0
 13950 ;;		Unchanged: 0/0
 13951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13952 ;;      Params:         0       0       0       0       0       0       0
 13953 ;;      Locals:         1       0       0       0       0       0       0
 13954 ;;      Temps:          0       0       0       0       0       0       0
 13955 ;;      Totals:         1       0       0       0       0       0       0
 13956 ;;Total ram usage:        1 bytes
 13957 ;; Hardware stack levels used:    1
 13958 ;; Hardware stack levels required when called:    5
 13959 ;; This function calls:
 13960 ;;		_DATAEE_ReadByte
 13961 ;; This function is called by:
 13962 ;;		_ReadIntFromEeprom
 13963 ;; This function uses a non-reentrant model
 13964 ;;
 13965                           
 13966                           	psect	text79
 13967  00444A                     __ptext79:
 13968                           	opt stack 0
 13969  00444A                     _EepromRead:
 13970                           	opt stack 21
 13971                           
 13972                           ;incstack = 0
 13973                           ;EepromRead@address stored from wreg
 13974  00444A  6E19               	movwf	EepromRead@address,c
 13975                           
 13976                           ;FlashApp.c: 177: return DATAEE_ReadByte(address);
 13977  00444C  5019               	movf	EepromRead@address,w,c
 13978  00444E  ECBC  F021         	call	_DATAEE_ReadByte
 13979  004452  0012               	return	
 13980  004454                     __end_of_EepromRead:
 13981                           	opt stack 0
 13982                           tosu	equ	0xFFF
 13983                           tosh	equ	0xFFE
 13984                           tosl	equ	0xFFD
 13985                           pclath	equ	0xFFA
 13986                           tblptru	equ	0xFF8
 13987                           tblptrh	equ	0xFF7
 13988                           tblptrl	equ	0xFF6
 13989                           tablat	equ	0xFF5
 13990                           prodh	equ	0xFF4
 13991                           prodl	equ	0xFF3
 13992                           intcon	equ	0xFF2
 13993                           intcon2	equ	0xFF1
 13994                           postinc0	equ	0xFEE
 13995                           plusw0	equ	0xFEB
 13996                           wreg	equ	0xFE8
 13997                           indf1	equ	0xFE7
 13998                           postdec1	equ	0xFE5
 13999                           fsr1h	equ	0xFE2
 14000                           fsr1l	equ	0xFE1
 14001                           indf2	equ	0xFDF
 14002                           postinc2	equ	0xFDE
 14003                           postdec2	equ	0xFDD
 14004                           plusw2	equ	0xFDB
 14005                           fsr2h	equ	0xFDA
 14006                           fsr2l	equ	0xFD9
 14007                           status	equ	0xFD8
 14008                           
 14009 ;; *************** function _DATAEE_ReadByte *****************
 14010 ;; Defined at:
 14011 ;;		line 194 in file "mcc_generated_files/memory.c"
 14012 ;; Parameters:    Size  Location     Type
 14013 ;;  bAdd            1    wreg     unsigned char 
 14014 ;; Auto vars:     Size  Location     Type
 14015 ;;  bAdd            1   23[COMRAM] unsigned char 
 14016 ;; Return value:  Size  Location     Type
 14017 ;;                  1    wreg      unsigned char 
 14018 ;; Registers used:
 14019 ;;		wreg, status,2
 14020 ;; Tracked objects:
 14021 ;;		On entry : 0/0
 14022 ;;		On exit  : 0/0
 14023 ;;		Unchanged: 0/0
 14024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14025 ;;      Params:         0       0       0       0       0       0       0
 14026 ;;      Locals:         1       0       0       0       0       0       0
 14027 ;;      Temps:          0       0       0       0       0       0       0
 14028 ;;      Totals:         1       0       0       0       0       0       0
 14029 ;;Total ram usage:        1 bytes
 14030 ;; Hardware stack levels used:    1
 14031 ;; Hardware stack levels required when called:    4
 14032 ;; This function calls:
 14033 ;;		Nothing
 14034 ;; This function is called by:
 14035 ;;		_EepromRead
 14036 ;; This function uses a non-reentrant model
 14037 ;;
 14038                           
 14039                           	psect	text80
 14040  004378                     __ptext80:
 14041                           	opt stack 0
 14042  004378                     _DATAEE_ReadByte:
 14043                           	opt stack 21
 14044                           
 14045                           ;incstack = 0
 14046                           ;DATAEE_ReadByte@bAdd stored from wreg
 14047  004378  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 14048                           
 14049                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 14050  00437A  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 14051                           
 14052                           ;memory.c: 198: EECON1bits.CFGS = 0;
 14053  00437E  9CA6               	bcf	4006,6,c	;volsfr
 14054                           
 14055                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 14056  004380  9EA6               	bcf	4006,7,c	;volsfr
 14057                           
 14058                           ;memory.c: 200: EECON1bits.RD = 1;
 14059  004382  80A6               	bsf	4006,0,c	;volsfr
 14060                           
 14061                           ;memory.c: 201: __nop();
 14062  004384  F000               	nop	
 14063                           
 14064                           ;memory.c: 202: __nop();
 14065  004386  F000               	nop	
 14066                           
 14067                           ;memory.c: 204: return (EEDATA);
 14068  004388  50A8               	movf	4008,w,c	;volatile
 14069  00438A  0012               	return	
 14070  00438C                     __end_of_DATAEE_ReadByte:
 14071                           	opt stack 0
 14072                           tosu	equ	0xFFF
 14073                           tosh	equ	0xFFE
 14074                           tosl	equ	0xFFD
 14075                           pclath	equ	0xFFA
 14076                           tblptru	equ	0xFF8
 14077                           tblptrh	equ	0xFF7
 14078                           tblptrl	equ	0xFF6
 14079                           tablat	equ	0xFF5
 14080                           prodh	equ	0xFF4
 14081                           prodl	equ	0xFF3
 14082                           intcon	equ	0xFF2
 14083                           intcon2	equ	0xFF1
 14084                           postinc0	equ	0xFEE
 14085                           plusw0	equ	0xFEB
 14086                           wreg	equ	0xFE8
 14087                           indf1	equ	0xFE7
 14088                           postdec1	equ	0xFE5
 14089                           fsr1h	equ	0xFE2
 14090                           fsr1l	equ	0xFE1
 14091                           indf2	equ	0xFDF
 14092                           postinc2	equ	0xFDE
 14093                           postdec2	equ	0xFDD
 14094                           plusw2	equ	0xFDB
 14095                           fsr2h	equ	0xFDA
 14096                           fsr2l	equ	0xFD9
 14097                           status	equ	0xFD8
 14098                           
 14099 ;; *************** function _ClearMcuRunTime *****************
 14100 ;; Defined at:
 14101 ;;		line 63 in file "SystemStatus.c"
 14102 ;; Parameters:    Size  Location     Type
 14103 ;;		None
 14104 ;; Auto vars:     Size  Location     Type
 14105 ;;		None
 14106 ;; Return value:  Size  Location     Type
 14107 ;;                  1    wreg      void 
 14108 ;; Registers used:
 14109 ;;		wreg, status,2
 14110 ;; Tracked objects:
 14111 ;;		On entry : 0/0
 14112 ;;		On exit  : 0/0
 14113 ;;		Unchanged: 0/0
 14114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14115 ;;      Params:         0       0       0       0       0       0       0
 14116 ;;      Locals:         0       0       0       0       0       0       0
 14117 ;;      Temps:          0       0       0       0       0       0       0
 14118 ;;      Totals:         0       0       0       0       0       0       0
 14119 ;;Total ram usage:        0 bytes
 14120 ;; Hardware stack levels used:    1
 14121 ;; Hardware stack levels required when called:    4
 14122 ;; This function calls:
 14123 ;;		Nothing
 14124 ;; This function is called by:
 14125 ;;		_InitSystemApplicationManagers
 14126 ;; This function uses a non-reentrant model
 14127 ;;
 14128                           
 14129                           	psect	text81
 14130  00438C                     __ptext81:
 14131                           	opt stack 0
 14132  00438C                     _ClearMcuRunTime:
 14133                           	opt stack 25
 14134                           
 14135                           ;SystemStatus.c: 65: mcuRunTimeIn5SecTicks = 0;
 14136                           
 14137                           ;incstack = 0
 14138  00438C  0E00               	movlw	0
 14139  00438E  0101               	movlb	1	; () banked
 14140  004390  6F28               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 14141  004392  0E00               	movlw	0
 14142  004394  6F29               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 14143  004396  0E00               	movlw	0
 14144  004398  6F2A               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 14145  00439A  0E00               	movlw	0
 14146  00439C  6F2B               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 14147                           
 14148                           ; BSR set to: 1
 14149  00439E  0012               	return		;funcret
 14150  0043A0                     __end_of_ClearMcuRunTime:
 14151                           	opt stack 0
 14152                           tosu	equ	0xFFF
 14153                           tosh	equ	0xFFE
 14154                           tosl	equ	0xFFD
 14155                           pclath	equ	0xFFA
 14156                           tblptru	equ	0xFF8
 14157                           tblptrh	equ	0xFF7
 14158                           tblptrl	equ	0xFF6
 14159                           tablat	equ	0xFF5
 14160                           prodh	equ	0xFF4
 14161                           prodl	equ	0xFF3
 14162                           intcon	equ	0xFF2
 14163                           intcon2	equ	0xFF1
 14164                           postinc0	equ	0xFEE
 14165                           plusw0	equ	0xFEB
 14166                           wreg	equ	0xFE8
 14167                           indf1	equ	0xFE7
 14168                           postdec1	equ	0xFE5
 14169                           fsr1h	equ	0xFE2
 14170                           fsr1l	equ	0xFE1
 14171                           indf2	equ	0xFDF
 14172                           postinc2	equ	0xFDE
 14173                           postdec2	equ	0xFDD
 14174                           plusw2	equ	0xFDB
 14175                           fsr2h	equ	0xFDA
 14176                           fsr2l	equ	0xFD9
 14177                           status	equ	0xFD8
 14178                           
 14179 ;; *************** function _CheckFlashPrecentage *****************
 14180 ;; Defined at:
 14181 ;;		line 165 in file "FlashApp.c"
 14182 ;; Parameters:    Size  Location     Type
 14183 ;;		None
 14184 ;; Auto vars:     Size  Location     Type
 14185 ;;  precentage      3   28[BANK0 ] void 
 14186 ;; Return value:  Size  Location     Type
 14187 ;;                  1    wreg      unsigned char 
 14188 ;; Registers used:
 14189 ;;		wreg, status,2, status,0, cstack
 14190 ;; Tracked objects:
 14191 ;;		On entry : 0/0
 14192 ;;		On exit  : 0/0
 14193 ;;		Unchanged: 0/0
 14194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14195 ;;      Params:         0       0       0       0       0       0       0
 14196 ;;      Locals:         0       3       0       0       0       0       0
 14197 ;;      Temps:          0       4       0       0       0       0       0
 14198 ;;      Totals:         0       7       0       0       0       0       0
 14199 ;;Total ram usage:        7 bytes
 14200 ;; Hardware stack levels used:    1
 14201 ;; Hardware stack levels required when called:    6
 14202 ;; This function calls:
 14203 ;;		___ftdiv
 14204 ;;		___ftge
 14205 ;;		___ftmul
 14206 ;;		___lltoft
 14207 ;; This function is called by:
 14208 ;;		_main
 14209 ;; This function uses a non-reentrant model
 14210 ;;
 14211                           
 14212                           	psect	text82
 14213  002E76                     __ptext82:
 14214                           	opt stack 0
 14215  002E76                     _CheckFlashPrecentage:
 14216                           	opt stack 24
 14217                           
 14218                           ;FlashApp.c: 167: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 14219                           
 14220                           ; BSR set to: 1
 14221                           ;incstack = 0
 14222  002E76  0EE0               	movlw	224
 14223  002E78  6E2C               	movwf	___ftdiv@f2,c
 14224  002E7A  0EFF               	movlw	255
 14225  002E7C  6E2D               	movwf	___ftdiv@f2+1,c
 14226  002E7E  0E46               	movlw	70
 14227  002E80  6E2E               	movwf	___ftdiv@f2+2,c
 14228  002E82  C03E  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 14229  002E86  C03F  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 14230  002E8A  C040  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 14231  002E8E  C041  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 14232  002E92  0100               	movlb	0	; () banked
 14233  002E94  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 14234  002E96  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14235  002E98  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14236  002E9A  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14237  002E9C  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 14238  002E9E  0E00               	movlw	0
 14239  002EA0  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14240  002EA2  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14241  002EA4  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14242  002EA6  0EF0               	movlw	240
 14243  002EA8  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 14244  002EAA  6E20               	movwf	___lltoft@c,c
 14245  002EAC  0E7F               	movlw	127
 14246  002EAE  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 14247  002EB0  6E21               	movwf	___lltoft@c+1,c
 14248  002EB2  0E00               	movlw	0
 14249  002EB4  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 14250  002EB6  6E22               	movwf	___lltoft@c+2,c
 14251  002EB8  0E00               	movlw	0
 14252  002EBA  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 14253  002EBC  6E23               	movwf	___lltoft@c+3,c
 14254  002EBE  EC80  F01C         	call	___lltoft	;wreg free
 14255  002EC2  C020  F029         	movff	?___lltoft,___ftdiv@f1
 14256  002EC6  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 14257  002ECA  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 14258  002ECE  EC02  F013         	call	___ftdiv	;wreg free
 14259  002ED2  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14260  002ED6  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14261  002EDA  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14262  002EDE  0E00               	movlw	0
 14263  002EE0  0100               	movlb	0	; () banked
 14264  002EE2  6F6C               	movwf	___ftmul@f2& (0+255),b
 14265  002EE4  0EC8               	movlw	200
 14266  002EE6  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14267  002EE8  0E42               	movlw	66
 14268  002EEA  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14269  002EEC  EC87  F012         	call	___ftmul	;wreg free
 14270  002EF0  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 14271  002EF4  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 14272  002EF8  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 14273                           
 14274                           ;FlashApp.c: 168: return (precentage > 75) ? 1 : 0;
 14275  002EFC  0E00               	movlw	0
 14276  002EFE  6E18               	movwf	___ftge@ff1,c
 14277  002F00  0E96               	movlw	150
 14278  002F02  6E19               	movwf	___ftge@ff1+1,c
 14279  002F04  0E42               	movlw	66
 14280  002F06  6E1A               	movwf	___ftge@ff1+2,c
 14281  002F08  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 14282  002F0C  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 14283  002F10  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 14284  002F14  EC2B  F019         	call	___ftge	;wreg free
 14285  002F18  B0D8               	btfsc	status,0,c
 14286  002F1A  D002               	goto	u9000
 14287  002F1C  0E01               	movlw	1
 14288  002F1E  0012               	return	
 14289  002F20                     u9000:
 14290  002F20  0E00               	movlw	0
 14291  002F22  0012               	return	
 14292  002F24                     __end_of_CheckFlashPrecentage:
 14293                           	opt stack 0
 14294                           tosu	equ	0xFFF
 14295                           tosh	equ	0xFFE
 14296                           tosl	equ	0xFFD
 14297                           pclath	equ	0xFFA
 14298                           tblptru	equ	0xFF8
 14299                           tblptrh	equ	0xFF7
 14300                           tblptrl	equ	0xFF6
 14301                           tablat	equ	0xFF5
 14302                           prodh	equ	0xFF4
 14303                           prodl	equ	0xFF3
 14304                           intcon	equ	0xFF2
 14305                           intcon2	equ	0xFF1
 14306                           postinc0	equ	0xFEE
 14307                           plusw0	equ	0xFEB
 14308                           wreg	equ	0xFE8
 14309                           indf1	equ	0xFE7
 14310                           postdec1	equ	0xFE5
 14311                           fsr1h	equ	0xFE2
 14312                           fsr1l	equ	0xFE1
 14313                           indf2	equ	0xFDF
 14314                           postinc2	equ	0xFDE
 14315                           postdec2	equ	0xFDD
 14316                           plusw2	equ	0xFDB
 14317                           fsr2h	equ	0xFDA
 14318                           fsr2l	equ	0xFD9
 14319                           status	equ	0xFD8
 14320                           
 14321 ;; *************** function _BlinkOkLeds *****************
 14322 ;; Defined at:
 14323 ;;		line 24 in file "LedsApp.c"
 14324 ;; Parameters:    Size  Location     Type
 14325 ;;  state           1    wreg     enum E7595
 14326 ;; Auto vars:     Size  Location     Type
 14327 ;;  state           1   26[COMRAM] enum E7595
 14328 ;;  idx             2   27[COMRAM] int 
 14329 ;; Return value:  Size  Location     Type
 14330 ;;                  1    wreg      void 
 14331 ;; Registers used:
 14332 ;;		wreg, status,2, status,0
 14333 ;; Tracked objects:
 14334 ;;		On entry : 0/0
 14335 ;;		On exit  : 0/0
 14336 ;;		Unchanged: 0/0
 14337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14338 ;;      Params:         0       0       0       0       0       0       0
 14339 ;;      Locals:         3       0       0       0       0       0       0
 14340 ;;      Temps:          3       0       0       0       0       0       0
 14341 ;;      Totals:         6       0       0       0       0       0       0
 14342 ;;Total ram usage:        6 bytes
 14343 ;; Hardware stack levels used:    1
 14344 ;; Hardware stack levels required when called:    4
 14345 ;; This function calls:
 14346 ;;		Nothing
 14347 ;; This function is called by:
 14348 ;;		_main
 14349 ;; This function uses a non-reentrant model
 14350 ;;
 14351                           
 14352                           	psect	text83
 14353  003846                     __ptext83:
 14354                           	opt stack 0
 14355  003846                     _BlinkOkLeds:
 14356                           	opt stack 26
 14357                           
 14358                           ;incstack = 0
 14359                           ;BlinkOkLeds@state stored from wreg
 14360  003846  6E1B               	movwf	BlinkOkLeds@state,c
 14361                           
 14362                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 14363  003848  0E00               	movlw	0
 14364  00384A  6E1D               	movwf	BlinkOkLeds@idx+1,c
 14365  00384C  0E00               	movlw	0
 14366  00384E  6E1C               	movwf	BlinkOkLeds@idx,c
 14367  003850                     l6638:
 14368  003850  501B               	movf	BlinkOkLeds@state,w,c
 14369  003852  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14370  003854  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 14371  003856  5018               	movf	??_BlinkOkLeds,w,c
 14372  003858  5C1C               	subwf	BlinkOkLeds@idx,w,c
 14373  00385A  501D               	movf	BlinkOkLeds@idx+1,w,c
 14374  00385C  0A80               	xorlw	128
 14375  00385E  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 14376  003860  5019               	movf	??_BlinkOkLeds+1,w,c
 14377  003862  0A80               	xorlw	128
 14378  003864  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 14379  003866  B0D8               	btfsc	status,0,c
 14380  003868  0012               	return	
 14381                           
 14382                           ;LedsApp.c: 27: {
 14383                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 14384  00386A  908B               	bcf	3979,0,c	;volatile
 14385                           
 14386                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 14387  00386C  0E02               	movlw	2
 14388  00386E  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14389  003870  0E04               	movlw	4
 14390  003872  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14391  003874  0EBA               	movlw	186
 14392  003876                     u9217:
 14393  003876  2EE8               	decfsz	wreg,f,c
 14394  003878  D7FE               	bra	u9217
 14395  00387A  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14396  00387C  D7FC               	bra	u9217
 14397  00387E  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14398  003880  D7FA               	bra	u9217
 14399  003882  D000               	nop2	
 14400                           
 14401                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 14402  003884  808B               	bsf	3979,0,c	;volatile
 14403                           
 14404                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 14405  003886  0E02               	movlw	2
 14406  003888  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14407  00388A  0E04               	movlw	4
 14408  00388C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14409  00388E  0EBA               	movlw	186
 14410  003890                     u9227:
 14411  003890  2EE8               	decfsz	wreg,f,c
 14412  003892  D7FE               	bra	u9227
 14413  003894  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14414  003896  D7FC               	bra	u9227
 14415  003898  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14416  00389A  D7FA               	bra	u9227
 14417  00389C  D000               	nop2	
 14418  00389E  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 14419  0038A0  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 14420  0038A2  D7D6               	goto	l6638
 14421  0038A4                     __end_of_BlinkOkLeds:
 14422                           	opt stack 0
 14423                           tosu	equ	0xFFF
 14424                           tosh	equ	0xFFE
 14425                           tosl	equ	0xFFD
 14426                           pclath	equ	0xFFA
 14427                           tblptru	equ	0xFF8
 14428                           tblptrh	equ	0xFF7
 14429                           tblptrl	equ	0xFF6
 14430                           tablat	equ	0xFF5
 14431                           prodh	equ	0xFF4
 14432                           prodl	equ	0xFF3
 14433                           intcon	equ	0xFF2
 14434                           intcon2	equ	0xFF1
 14435                           postinc0	equ	0xFEE
 14436                           plusw0	equ	0xFEB
 14437                           wreg	equ	0xFE8
 14438                           indf1	equ	0xFE7
 14439                           postdec1	equ	0xFE5
 14440                           fsr1h	equ	0xFE2
 14441                           fsr1l	equ	0xFE1
 14442                           indf2	equ	0xFDF
 14443                           postinc2	equ	0xFDE
 14444                           postdec2	equ	0xFDD
 14445                           plusw2	equ	0xFDB
 14446                           fsr2h	equ	0xFDA
 14447                           fsr2l	equ	0xFD9
 14448                           status	equ	0xFD8
 14449                           
 14450 ;; *************** function _AdcConvert *****************
 14451 ;; Defined at:
 14452 ;;		line 43 in file "AdcApp.c"
 14453 ;; Parameters:    Size  Location     Type
 14454 ;;		None
 14455 ;; Auto vars:     Size  Location     Type
 14456 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 14457 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 14458 ;;  adcRes          2   91[BANK0 ] unsigned int 
 14459 ;;  ldTxSate        2   89[BANK0 ] unsigned int 
 14460 ;;  ldRxSate        2   87[BANK0 ] unsigned int 
 14461 ;;  idx             1   96[BANK0 ] unsigned char 
 14462 ;; Return value:  Size  Location     Type
 14463 ;;                  1    wreg      void 
 14464 ;; Registers used:
 14465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14466 ;; Tracked objects:
 14467 ;;		On entry : 0/0
 14468 ;;		On exit  : 0/0
 14469 ;;		Unchanged: 0/0
 14470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14471 ;;      Params:         0       0       0       0       0       0       0
 14472 ;;      Locals:         0      14       0       0       0       0       0
 14473 ;;      Temps:          0       2       0       0       0       0       0
 14474 ;;      Totals:         0      16       0       0       0       0       0
 14475 ;;Total ram usage:       16 bytes
 14476 ;; Hardware stack levels used:    1
 14477 ;; Hardware stack levels required when called:    9
 14478 ;; This function calls:
 14479 ;;		_ADC_GetConversion
 14480 ;;		_FlashSampleWrite
 14481 ;;		_GetUint16FromBitArray
 14482 ;;		___ftdiv
 14483 ;;		___ftmul
 14484 ;;		___fttol
 14485 ;;		___lwtoft
 14486 ;;		_pow
 14487 ;; This function is called by:
 14488 ;;		_main
 14489 ;; This function uses a non-reentrant model
 14490 ;;
 14491                           
 14492                           	psect	text84
 14493  000FBC                     __ptext84:
 14494                           	opt stack 0
 14495  000FBC                     _AdcConvert:
 14496                           	opt stack 21
 14497                           
 14498                           ;AdcApp.c: 48: uint16_t adcRes = 0;
 14499                           
 14500                           ;incstack = 0
 14501  000FBC  0E00               	movlw	0
 14502  000FBE  0100               	movlb	0	; () banked
 14503  000FC0  6FBC               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 14504  000FC2  0E00               	movlw	0
 14505  000FC4  6FBB               	movwf	AdcConvert@adcRes& (0+255),b
 14506                           
 14507                           ;AdcApp.c: 49: uint8_t idx = 0;
 14508  000FC6  0E00               	movlw	0
 14509  000FC8  6FC0               	movwf	AdcConvert@idx& (0+255),b
 14510                           
 14511                           ;AdcApp.c: 50: uint16_t ldRxSate = 0, ldTxSate = 0;
 14512  000FCA  0E00               	movlw	0
 14513  000FCC  6FB8               	movwf	(AdcConvert@ldRxSate+1)& (0+255),b
 14514  000FCE  0E00               	movlw	0
 14515  000FD0  6FB7               	movwf	AdcConvert@ldRxSate& (0+255),b
 14516  000FD2  0E00               	movlw	0
 14517  000FD4  6FBA               	movwf	(AdcConvert@ldTxSate+1)& (0+255),b
 14518  000FD6  0E00               	movlw	0
 14519  000FD8  6FB9               	movwf	AdcConvert@ldTxSate& (0+255),b
 14520                           
 14521                           ;AdcApp.c: 51: if (adcSampleMode == CIRCULAR)
 14522  000FDA  503D               	movf	_adcSampleMode,w,c
 14523  000FDC  A4D8               	btfss	status,2,c
 14524  000FDE  D0A3               	goto	l126
 14525                           
 14526                           ; BSR set to: 0
 14527                           ;AdcApp.c: 52: {
 14528                           ;AdcApp.c: 53: for(idx = 0; idx < (9); idx++)
 14529  000FE0  0E00               	movlw	0
 14530  000FE2  6FC0               	movwf	AdcConvert@idx& (0+255),b
 14531  000FE4                     l8738:
 14532                           
 14533                           ; BSR set to: 0
 14534  000FE4  0E08               	movlw	8
 14535  000FE6  65C0               	cpfsgt	AdcConvert@idx& (0+255),b
 14536  000FE8  D001               	goto	l127
 14537  000FEA  D06D               	goto	u8860
 14538  000FEC                     l127:
 14539                           
 14540                           ; BSR set to: 0
 14541                           ;AdcApp.c: 54: {
 14542                           ;AdcApp.c: 55: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 14543                           
 14544                           ; BSR set to: 0
 14545  000FEC  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14546  000FEE  0D01               	mullw	1
 14547  000FF0  0E42               	movlw	low _channelArr
 14548  000FF2  24F3               	addwf	prodl,w,c
 14549  000FF4  6EF6               	movwf	tblptrl,c
 14550  000FF6  0E06               	movlw	high _channelArr
 14551  000FF8  20F4               	addwfc	prodh,w,c
 14552  000FFA  6EF7               	movwf	tblptrh,c
 14553  000FFC                     	if	0	;There are less than 3 active tblptr bytes
 14554  000FFC                     	endif
 14555  000FFC  0008               	tblrd		*
 14556  000FFE  50F5               	movf	tablat,w,c
 14557  001000  EC3F  F020         	call	_ADC_GetConversion
 14558  001004  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 14559  001008  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 14560                           
 14561                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14562  00100C  0E00               	movlw	0
 14563  00100E  0100               	movlb	0	; () banked
 14564  001010  6FA3               	movwf	pow@y& (0+255),b
 14565  001012  0E20               	movlw	32
 14566  001014  6FA4               	movwf	(pow@y+1)& (0+255),b
 14567  001016  0E41               	movlw	65
 14568  001018  6FA5               	movwf	(pow@y+2)& (0+255),b
 14569  00101A  0E00               	movlw	0
 14570  00101C  6FA0               	movwf	pow@x& (0+255),b
 14571  00101E  0E00               	movlw	0
 14572  001020  6FA1               	movwf	(pow@x+1)& (0+255),b
 14573  001022  0E40               	movlw	64
 14574  001024  6FA2               	movwf	(pow@x+2)& (0+255),b
 14575  001026  EC5D  F00E         	call	_pow	;wreg free
 14576  00102A  C0A0  F0BD         	movff	?_pow,_AdcConvert$3599
 14577  00102E  C0A1  F0BE         	movff	?_pow+1,_AdcConvert$3599+1
 14578  001032  C0A2  F0BF         	movff	?_pow+2,_AdcConvert$3599+2
 14579                           
 14580                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14581  001036  0EC0               	movlw	192
 14582  001038  0100               	movlb	0	; () banked
 14583  00103A  6F6C               	movwf	___ftmul@f2& (0+255),b
 14584  00103C  0E50               	movlw	80
 14585  00103E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14586  001040  0E45               	movlw	69
 14587  001042  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14588  001044  C0BD  F02C         	movff	_AdcConvert$3599,___ftdiv@f2
 14589  001048  C0BE  F02D         	movff	_AdcConvert$3599+1,___ftdiv@f2+1
 14590  00104C  C0BF  F02E         	movff	_AdcConvert$3599+2,___ftdiv@f2+2
 14591  001050  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 14592  001054  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 14593  001058  ECF6  F020         	call	___lwtoft	;wreg free
 14594  00105C  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14595  001060  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14596  001064  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14597  001068  EC02  F013         	call	___ftdiv	;wreg free
 14598  00106C  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14599  001070  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14600  001074  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14601  001078  EC87  F012         	call	___ftmul	;wreg free
 14602  00107C  C069  F078         	movff	?___ftmul,___fttol@f1
 14603  001080  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14604  001084  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14605  001088  EC0B  F012         	call	___fttol	;wreg free
 14606  00108C  C078  F0BB         	movff	?___fttol,AdcConvert@adcRes
 14607  001090  C079  F0BC         	movff	?___fttol+1,AdcConvert@adcRes+1
 14608                           
 14609                           ;AdcApp.c: 57: FlashSampleWrite(adcRes, idx + 1);
 14610  001094  C0BB  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 14611  001098  C0BC  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 14612  00109C  0100               	movlb	0	; () banked
 14613  00109E  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14614  0010A0  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14615  0010A2  EC89  F011         	call	_FlashSampleWrite	;wreg free
 14616                           
 14617                           ;AdcApp.c: 58: _delay((unsigned long)((250)*(8000000/4000.0)));
 14618  0010A6  0E03               	movlw	3
 14619  0010A8  0100               	movlb	0	; () banked
 14620  0010AA  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 14621  0010AC  0E8A               	movlw	138
 14622  0010AE  6FB1               	movwf	??_AdcConvert& (0+255),b
 14623  0010B0  0E55               	movlw	85
 14624  0010B2                     u9237:
 14625  0010B2  2EE8               	decfsz	wreg,f,c
 14626  0010B4  D7FE               	bra	u9237
 14627  0010B6  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 14628  0010B8  D7FC               	bra	u9237
 14629  0010BA  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 14630  0010BC  D7FA               	bra	u9237
 14631  0010BE  D000               	nop2	
 14632  0010C0  0100               	movlb	0	; () banked
 14633  0010C2  2BC0               	incf	AdcConvert@idx& (0+255),f,b
 14634  0010C4  D78F               	goto	l8738
 14635  0010C6                     u8860:
 14636                           
 14637                           ; BSR set to: 0
 14638                           ;AdcApp.c: 59: }
 14639                           ;AdcApp.c: 62: ldRxSate = GetUint16FromBitArray(synthLdRxArray, 12);
 14640                           
 14641                           ; BSR set to: 0
 14642  0010C6  0EB0               	movlw	low _synthLdRxArray
 14643  0010C8  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14644  0010CA  0E01               	movlw	high _synthLdRxArray
 14645  0010CC  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14646  0010CE  0E00               	movlw	0
 14647  0010D0  6E1B               	movwf	GetUint16FromBitArray@numOfBits+1,c
 14648  0010D2  0E0C               	movlw	12
 14649  0010D4  6E1A               	movwf	GetUint16FromBitArray@numOfBits,c
 14650  0010D6  EC5B  F01B         	call	_GetUint16FromBitArray	;wreg free
 14651  0010DA  C018  F0B7         	movff	?_GetUint16FromBitArray,AdcConvert@ldRxSate
 14652  0010DE  C019  F0B8         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldRxSate+1
 14653                           
 14654                           ;AdcApp.c: 63: FlashSampleWrite(ldRxSate, idx + 1);
 14655  0010E2  C0B7  F02D         	movff	AdcConvert@ldRxSate,FlashSampleWrite@sampleData
 14656  0010E6  C0B8  F02E         	movff	AdcConvert@ldRxSate+1,FlashSampleWrite@sampleData+1
 14657  0010EA  0100               	movlb	0	; () banked
 14658  0010EC  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14659  0010EE  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14660  0010F0  EC89  F011         	call	_FlashSampleWrite	;wreg free
 14661                           
 14662                           ;AdcApp.c: 64: ldTxSate = GetUint16FromBitArray(synthLdTxArray, 12);
 14663  0010F4  0EA4               	movlw	low _synthLdTxArray
 14664  0010F6  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14665  0010F8  0E01               	movlw	high _synthLdTxArray
 14666  0010FA  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14667  0010FC  0E00               	movlw	0
 14668  0010FE  6E1B               	movwf	GetUint16FromBitArray@numOfBits+1,c
 14669  001100  0E0C               	movlw	12
 14670  001102  6E1A               	movwf	GetUint16FromBitArray@numOfBits,c
 14671  001104  EC5B  F01B         	call	_GetUint16FromBitArray	;wreg free
 14672  001108  C018  F0B9         	movff	?_GetUint16FromBitArray,AdcConvert@ldTxSate
 14673  00110C  C019  F0BA         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldTxSate+1
 14674                           
 14675                           ;AdcApp.c: 65: FlashSampleWrite(ldTxSate, idx + 2);
 14676  001110  C0B9  F02D         	movff	AdcConvert@ldTxSate,FlashSampleWrite@sampleData
 14677  001114  C0BA  F02E         	movff	AdcConvert@ldTxSate+1,FlashSampleWrite@sampleData+1
 14678  001118  0100               	movlb	0	; () banked
 14679  00111A  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14680  00111C  0F02               	addlw	2
 14681  00111E  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14682  001120  EC89  F011         	call	_FlashSampleWrite	;wreg free
 14683                           
 14684                           ;AdcApp.c: 67: }
 14685  001124  0012               	return	
 14686  001126                     l126:
 14687                           
 14688                           ;AdcApp.c: 68: else if (adcSampleMode == SINGLE_CHANNEL)
 14689  001126  043D               	decf	_adcSampleMode,w,c
 14690  001128  A4D8               	btfss	status,2,c
 14691  00112A  0012               	return	
 14692                           
 14693                           ;AdcApp.c: 69: {
 14694                           ;AdcApp.c: 70: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 14695  00112C  0100               	movlb	0	; () banked
 14696  00112E  51F6               	movf	_channel& (0+255),w,b
 14697  001130  0D01               	mullw	1
 14698  001132  0E42               	movlw	low _channelArr
 14699  001134  24F3               	addwf	prodl,w,c
 14700  001136  6EF6               	movwf	tblptrl,c
 14701  001138  0E06               	movlw	high _channelArr
 14702  00113A  20F4               	addwfc	prodh,w,c
 14703  00113C  6EF7               	movwf	tblptrh,c
 14704  00113E                     	if	0	;There are less than 3 active tblptr bytes
 14705  00113E                     	endif
 14706  00113E  0008               	tblrd		*
 14707  001140  50F5               	movf	tablat,w,c
 14708  001142  EC3F  F020         	call	_ADC_GetConversion
 14709  001146  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_350
 14710  00114A  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_350+1
 14711                           
 14712                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14713  00114E  0E00               	movlw	0
 14714  001150  0100               	movlb	0	; () banked
 14715  001152  6FA3               	movwf	pow@y& (0+255),b
 14716  001154  0E20               	movlw	32
 14717  001156  6FA4               	movwf	(pow@y+1)& (0+255),b
 14718  001158  0E41               	movlw	65
 14719  00115A  6FA5               	movwf	(pow@y+2)& (0+255),b
 14720  00115C  0E00               	movlw	0
 14721  00115E  6FA0               	movwf	pow@x& (0+255),b
 14722  001160  0E00               	movlw	0
 14723  001162  6FA1               	movwf	(pow@x+1)& (0+255),b
 14724  001164  0E40               	movlw	64
 14725  001166  6FA2               	movwf	(pow@x+2)& (0+255),b
 14726  001168  EC5D  F00E         	call	_pow	;wreg free
 14727  00116C  C0A0  F0BD         	movff	?_pow,_AdcConvert$3599
 14728  001170  C0A1  F0BE         	movff	?_pow+1,_AdcConvert$3599+1
 14729  001174  C0A2  F0BF         	movff	?_pow+2,_AdcConvert$3599+2
 14730                           
 14731                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14732  001178  0EC0               	movlw	192
 14733  00117A  0100               	movlb	0	; () banked
 14734  00117C  6F6C               	movwf	___ftmul@f2& (0+255),b
 14735  00117E  0E50               	movlw	80
 14736  001180  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14737  001182  0E45               	movlw	69
 14738  001184  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14739  001186  C0BD  F02C         	movff	_AdcConvert$3599,___ftdiv@f2
 14740  00118A  C0BE  F02D         	movff	_AdcConvert$3599+1,___ftdiv@f2+1
 14741  00118E  C0BF  F02E         	movff	_AdcConvert$3599+2,___ftdiv@f2+2
 14742  001192  C0B5  F020         	movff	AdcConvert@_adcResult_350,___lwtoft@c
 14743  001196  C0B6  F021         	movff	AdcConvert@_adcResult_350+1,___lwtoft@c+1
 14744  00119A  ECF6  F020         	call	___lwtoft	;wreg free
 14745  00119E  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14746  0011A2  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14747  0011A6  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14748  0011AA  EC02  F013         	call	___ftdiv	;wreg free
 14749  0011AE  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14750  0011B2  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14751  0011B6  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14752  0011BA  EC87  F012         	call	___ftmul	;wreg free
 14753  0011BE  C069  F078         	movff	?___ftmul,___fttol@f1
 14754  0011C2  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14755  0011C6  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14756  0011CA  EC0B  F012         	call	___fttol	;wreg free
 14757  0011CE  C078  F0BB         	movff	?___fttol,AdcConvert@adcRes
 14758  0011D2  C079  F0BC         	movff	?___fttol+1,AdcConvert@adcRes+1
 14759  0011D6  0012               	return	
 14760  0011D8                     __end_of_AdcConvert:
 14761                           	opt stack 0
 14762                           tosu	equ	0xFFF
 14763                           tosh	equ	0xFFE
 14764                           tosl	equ	0xFFD
 14765                           pclath	equ	0xFFA
 14766                           tblptru	equ	0xFF8
 14767                           tblptrh	equ	0xFF7
 14768                           tblptrl	equ	0xFF6
 14769                           tablat	equ	0xFF5
 14770                           prodh	equ	0xFF4
 14771                           prodl	equ	0xFF3
 14772                           intcon	equ	0xFF2
 14773                           intcon2	equ	0xFF1
 14774                           postinc0	equ	0xFEE
 14775                           plusw0	equ	0xFEB
 14776                           wreg	equ	0xFE8
 14777                           indf1	equ	0xFE7
 14778                           postdec1	equ	0xFE5
 14779                           fsr1h	equ	0xFE2
 14780                           fsr1l	equ	0xFE1
 14781                           indf2	equ	0xFDF
 14782                           postinc2	equ	0xFDE
 14783                           postdec2	equ	0xFDD
 14784                           plusw2	equ	0xFDB
 14785                           fsr2h	equ	0xFDA
 14786                           fsr2l	equ	0xFD9
 14787                           status	equ	0xFD8
 14788                           
 14789 ;; *************** function _pow *****************
 14790 ;; Defined at:
 14791 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 14792 ;; Parameters:    Size  Location     Type
 14793 ;;  x               3   64[BANK0 ] void 
 14794 ;;  y               3   67[BANK0 ] void 
 14795 ;; Auto vars:     Size  Location     Type
 14796 ;;  yi              4   77[BANK0 ] unsigned long 
 14797 ;;  sign            1   76[BANK0 ] unsigned char 
 14798 ;; Return value:  Size  Location     Type
 14799 ;;                  3   64[BANK0 ] unsigned char 
 14800 ;; Registers used:
 14801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14802 ;; Tracked objects:
 14803 ;;		On entry : 0/0
 14804 ;;		On exit  : 0/0
 14805 ;;		Unchanged: 0/0
 14806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14807 ;;      Params:         0       6       0       0       0       0       0
 14808 ;;      Locals:         0      11       0       0       0       0       0
 14809 ;;      Temps:          0       0       0       0       0       0       0
 14810 ;;      Totals:         0      17       0       0       0       0       0
 14811 ;;Total ram usage:       17 bytes
 14812 ;; Hardware stack levels used:    1
 14813 ;; Hardware stack levels required when called:    8
 14814 ;; This function calls:
 14815 ;;		___ftge
 14816 ;;		___ftmul
 14817 ;;		___ftneg
 14818 ;;		___fttol
 14819 ;;		___lltoft
 14820 ;;		_exp
 14821 ;;		_log
 14822 ;; This function is called by:
 14823 ;;		_AdcConvert
 14824 ;;		_ReadIntFromEeprom
 14825 ;; This function uses a non-reentrant model
 14826 ;;
 14827                           
 14828                           	psect	text85
 14829  001CBA                     __ptext85:
 14830                           	opt stack 0
 14831  001CBA                     _pow:
 14832                           	opt stack 18
 14833                           
 14834                           ;incstack = 0
 14835  001CBA  0E00               	movlw	0
 14836  001CBC  0100               	movlb	0	; () banked
 14837  001CBE  6FAC               	movwf	pow@sign& (0+255),b
 14838                           
 14839                           ; BSR set to: 0
 14840  001CC0  51A0               	movf	pow@x& (0+255),w,b
 14841  001CC2  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 14842  001CC4  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 14843  001CC6  A4D8               	btfss	status,2,c
 14844  001CC8  D01D               	goto	l2041
 14845                           
 14846                           ; BSR set to: 0
 14847  001CCA  0E00               	movlw	0
 14848  001CCC  6E18               	movwf	___ftge@ff1,c
 14849  001CCE  0E00               	movlw	0
 14850  001CD0  6E19               	movwf	___ftge@ff1+1,c
 14851  001CD2  0E00               	movlw	0
 14852  001CD4  6E1A               	movwf	___ftge@ff1+2,c
 14853  001CD6  C0A3  F01B         	movff	pow@y,___ftge@ff2
 14854  001CDA  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 14855  001CDE  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 14856  001CE2  EC2B  F019         	call	___ftge	;wreg free
 14857  001CE6  A0D8               	btfss	status,0,c
 14858  001CE8  D005               	goto	l2042
 14859  001CEA  0E00               	movlw	0
 14860  001CEC  0101               	movlb	1	; () banked
 14861  001CEE  6F35               	movwf	(_errno+1)& (0+255),b
 14862  001CF0  0E21               	movlw	33
 14863  001CF2  6F34               	movwf	_errno& (0+255),b
 14864  001CF4                     l2042:
 14865  001CF4  0E00               	movlw	0
 14866  001CF6  0100               	movlb	0	; () banked
 14867  001CF8  6FA0               	movwf	?_pow& (0+255),b
 14868  001CFA  0E00               	movlw	0
 14869  001CFC  6FA1               	movwf	(?_pow+1)& (0+255),b
 14870  001CFE  0E00               	movlw	0
 14871  001D00  6FA2               	movwf	(?_pow+2)& (0+255),b
 14872                           
 14873                           ; BSR set to: 0
 14874  001D02  0012               	return	
 14875  001D04                     l2041:
 14876                           
 14877                           ; BSR set to: 0
 14878                           
 14879                           ; BSR set to: 0
 14880  001D04  51A3               	movf	pow@y& (0+255),w,b
 14881  001D06  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 14882  001D08  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 14883  001D0A  A4D8               	btfss	status,2,c
 14884  001D0C  D007               	goto	l2044
 14885                           
 14886                           ; BSR set to: 0
 14887  001D0E  0E00               	movlw	0
 14888  001D10  6FA0               	movwf	?_pow& (0+255),b
 14889  001D12  0E80               	movlw	128
 14890  001D14  6FA1               	movwf	(?_pow+1)& (0+255),b
 14891  001D16  0E3F               	movlw	63
 14892  001D18  6FA2               	movwf	(?_pow+2)& (0+255),b
 14893                           
 14894                           ; BSR set to: 0
 14895  001D1A  0012               	return	
 14896  001D1C                     l2044:
 14897                           
 14898                           ; BSR set to: 0
 14899                           
 14900                           ; BSR set to: 0
 14901  001D1C  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 14902  001D1E  D043               	goto	l2045
 14903                           
 14904                           ; BSR set to: 0
 14905  001D20  C0A3  F078         	movff	pow@y,___fttol@f1
 14906  001D24  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 14907  001D28  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 14908  001D2C  EC0B  F012         	call	___fttol	;wreg free
 14909  001D30  C078  F0AD         	movff	?___fttol,pow@yi
 14910  001D34  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 14911  001D38  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 14912  001D3C  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 14913  001D40  C0AD  F020         	movff	pow@yi,___lltoft@c
 14914  001D44  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 14915  001D48  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 14916  001D4C  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 14917  001D50  EC80  F01C         	call	___lltoft	;wreg free
 14918  001D54  0100               	movlb	0	; () banked
 14919  001D56  51A3               	movf	pow@y& (0+255),w,b
 14920  001D58  1820               	xorwf	?___lltoft,w,c
 14921  001D5A  E107               	bnz	u7450
 14922  001D5C  51A4               	movf	(pow@y+1)& (0+255),w,b
 14923  001D5E  1821               	xorwf	?___lltoft+1,w,c
 14924  001D60  E104               	bnz	u7450
 14925  001D62  51A5               	movf	(pow@y+2)& (0+255),w,b
 14926  001D64  1822               	xorwf	?___lltoft+2,w,c
 14927  001D66  B4D8               	btfsc	status,2,c
 14928  001D68  D00D               	goto	l2046
 14929  001D6A                     u7450:
 14930                           
 14931                           ; BSR set to: 0
 14932  001D6A  0E00               	movlw	0
 14933  001D6C  0101               	movlb	1	; () banked
 14934  001D6E  6F35               	movwf	(_errno+1)& (0+255),b
 14935  001D70  0E21               	movlw	33
 14936  001D72  6F34               	movwf	_errno& (0+255),b
 14937  001D74  0E00               	movlw	0
 14938  001D76  0100               	movlb	0	; () banked
 14939  001D78  6FA0               	movwf	?_pow& (0+255),b
 14940  001D7A  0E00               	movlw	0
 14941  001D7C  6FA1               	movwf	(?_pow+1)& (0+255),b
 14942  001D7E  0E00               	movlw	0
 14943  001D80  6FA2               	movwf	(?_pow+2)& (0+255),b
 14944                           
 14945                           ; BSR set to: 0
 14946  001D82  0012               	return	
 14947  001D84                     l2046:
 14948                           
 14949                           ; BSR set to: 0
 14950                           
 14951                           ; BSR set to: 0
 14952  001D84  51AD               	movf	pow@yi& (0+255),w,b
 14953  001D86  0B01               	andlw	1
 14954  001D88  6FAC               	movwf	pow@sign& (0+255),b
 14955                           
 14956                           ; BSR set to: 0
 14957  001D8A  C0A0  F018         	movff	pow@x,___ftneg@f1
 14958  001D8E  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14959  001D92  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14960  001D96  ECE4  F020         	call	___ftneg	;wreg free
 14961  001D9A  C018  F0A0         	movff	?___ftneg,pow@x
 14962  001D9E  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 14963  001DA2  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 14964  001DA6                     l2045:
 14965  001DA6  C0A0  F08E         	movff	pow@x,log@x
 14966  001DAA  C0A1  F08F         	movff	pow@x+1,log@x+1
 14967  001DAE  C0A2  F090         	movff	pow@x+2,log@x+2
 14968  001DB2  ECDB  F00F         	call	_log	;wreg free
 14969  001DB6  C08E  F0A6         	movff	?_log,_pow$3602
 14970  001DBA  C08F  F0A7         	movff	?_log+1,_pow$3602+1
 14971  001DBE  C090  F0A8         	movff	?_log+2,_pow$3602+2
 14972  001DC2  C0A6  F069         	movff	_pow$3602,___ftmul@f1
 14973  001DC6  C0A7  F06A         	movff	_pow$3602+1,___ftmul@f1+1
 14974  001DCA  C0A8  F06B         	movff	_pow$3602+2,___ftmul@f1+2
 14975  001DCE  C0A3  F06C         	movff	pow@y,___ftmul@f2
 14976  001DD2  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 14977  001DD6  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 14978  001DDA  EC87  F012         	call	___ftmul	;wreg free
 14979  001DDE  C069  F0A9         	movff	?___ftmul,_pow$3603
 14980  001DE2  C06A  F0AA         	movff	?___ftmul+1,_pow$3603+1
 14981  001DE6  C06B  F0AB         	movff	?___ftmul+2,_pow$3603+2
 14982  001DEA  C0A9  F097         	movff	_pow$3603,exp@x
 14983  001DEE  C0AA  F098         	movff	_pow$3603+1,exp@x+1
 14984  001DF2  C0AB  F099         	movff	_pow$3603+2,exp@x+2
 14985  001DF6  ECE8  F009         	call	_exp	;wreg free
 14986  001DFA  C097  F0A0         	movff	?_exp,pow@x
 14987  001DFE  C098  F0A1         	movff	?_exp+1,pow@x+1
 14988  001E02  C099  F0A2         	movff	?_exp+2,pow@x+2
 14989  001E06  0100               	movlb	0	; () banked
 14990  001E08  51AC               	movf	pow@sign& (0+255),w,b
 14991  001E0A  B4D8               	btfsc	status,2,c
 14992  001E0C  D00F               	goto	l2047
 14993                           
 14994                           ; BSR set to: 0
 14995  001E0E  C0A0  F018         	movff	pow@x,___ftneg@f1
 14996  001E12  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14997  001E16  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14998  001E1A  ECE4  F020         	call	___ftneg	;wreg free
 14999  001E1E  C018  F0A0         	movff	?___ftneg,?_pow
 15000  001E22  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 15001  001E26  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 15002  001E2A  0012               	return	
 15003  001E2C                     l2047:
 15004                           
 15005                           ; BSR set to: 0
 15006  001E2C  C0A0  F0A0         	movff	pow@x,?_pow
 15007  001E30  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 15008  001E34  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 15009  001E38  0012               	return		;funcret
 15010  001E3A                     __end_of_pow:
 15011                           	opt stack 0
 15012                           tosu	equ	0xFFF
 15013                           tosh	equ	0xFFE
 15014                           tosl	equ	0xFFD
 15015                           pclath	equ	0xFFA
 15016                           tblptru	equ	0xFF8
 15017                           tblptrh	equ	0xFF7
 15018                           tblptrl	equ	0xFF6
 15019                           tablat	equ	0xFF5
 15020                           prodh	equ	0xFF4
 15021                           prodl	equ	0xFF3
 15022                           intcon	equ	0xFF2
 15023                           intcon2	equ	0xFF1
 15024                           postinc0	equ	0xFEE
 15025                           plusw0	equ	0xFEB
 15026                           wreg	equ	0xFE8
 15027                           indf1	equ	0xFE7
 15028                           postdec1	equ	0xFE5
 15029                           fsr1h	equ	0xFE2
 15030                           fsr1l	equ	0xFE1
 15031                           indf2	equ	0xFDF
 15032                           postinc2	equ	0xFDE
 15033                           postdec2	equ	0xFDD
 15034                           plusw2	equ	0xFDB
 15035                           fsr2h	equ	0xFDA
 15036                           fsr2l	equ	0xFD9
 15037                           status	equ	0xFD8
 15038                           
 15039 ;; *************** function _log *****************
 15040 ;; Defined at:
 15041 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 15042 ;; Parameters:    Size  Location     Type
 15043 ;;  x               3   46[BANK0 ] unsigned char 
 15044 ;; Auto vars:     Size  Location     Type
 15045 ;;  exponent        2   49[BANK0 ] int 
 15046 ;; Return value:  Size  Location     Type
 15047 ;;                  3   46[BANK0 ] int 
 15048 ;; Registers used:
 15049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15050 ;; Tracked objects:
 15051 ;;		On entry : 0/0
 15052 ;;		On exit  : 0/0
 15053 ;;		Unchanged: 0/0
 15054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15055 ;;      Params:         0       3       0       0       0       0       0
 15056 ;;      Locals:         0       2       0       0       0       0       0
 15057 ;;      Temps:          0       0       0       0       0       0       0
 15058 ;;      Totals:         0       5       0       0       0       0       0
 15059 ;;Total ram usage:        5 bytes
 15060 ;; Hardware stack levels used:    1
 15061 ;; Hardware stack levels required when called:    7
 15062 ;; This function calls:
 15063 ;;		___awtoft
 15064 ;;		___ftadd
 15065 ;;		___ftmul
 15066 ;;		_eval_poly
 15067 ;;		_frexp
 15068 ;; This function is called by:
 15069 ;;		_pow
 15070 ;; This function uses a non-reentrant model
 15071 ;;
 15072                           
 15073                           	psect	text86
 15074  001FB6                     __ptext86:
 15075                           	opt stack 0
 15076  001FB6                     _log:
 15077                           	opt stack 18
 15078                           
 15079                           ;incstack = 0
 15080  001FB6  0100               	movlb	0	; () banked
 15081  001FB8  AF90               	btfss	(log@x+2)& (0+255),7,b
 15082  001FBA  D00D               	goto	l2303
 15083                           
 15084                           ; BSR set to: 0
 15085  001FBC  0E00               	movlw	0
 15086  001FBE  0101               	movlb	1	; () banked
 15087  001FC0  6F35               	movwf	(_errno+1)& (0+255),b
 15088  001FC2  0E21               	movlw	33
 15089  001FC4  6F34               	movwf	_errno& (0+255),b
 15090  001FC6  0E00               	movlw	0
 15091  001FC8  0100               	movlb	0	; () banked
 15092  001FCA  6F8E               	movwf	?_log& (0+255),b
 15093  001FCC  0E00               	movlw	0
 15094  001FCE  6F8F               	movwf	(?_log+1)& (0+255),b
 15095  001FD0  0E00               	movlw	0
 15096  001FD2  6F90               	movwf	(?_log+2)& (0+255),b
 15097                           
 15098                           ; BSR set to: 0
 15099  001FD4  0012               	return	
 15100  001FD6                     l2303:
 15101                           
 15102                           ; BSR set to: 0
 15103                           
 15104                           ; BSR set to: 0
 15105  001FD6  518E               	movf	log@x& (0+255),w,b
 15106  001FD8  118F               	iorwf	(log@x+1)& (0+255),w,b
 15107  001FDA  1190               	iorwf	(log@x+2)& (0+255),w,b
 15108  001FDC  A4D8               	btfss	status,2,c
 15109  001FDE  D00D               	goto	l2305
 15110                           
 15111                           ; BSR set to: 0
 15112  001FE0  0E00               	movlw	0
 15113  001FE2  0101               	movlb	1	; () banked
 15114  001FE4  6F35               	movwf	(_errno+1)& (0+255),b
 15115  001FE6  0E22               	movlw	34
 15116  001FE8  6F34               	movwf	_errno& (0+255),b
 15117  001FEA  0E00               	movlw	0
 15118  001FEC  0100               	movlb	0	; () banked
 15119  001FEE  6F8E               	movwf	?_log& (0+255),b
 15120  001FF0  0E00               	movlw	0
 15121  001FF2  6F8F               	movwf	(?_log+1)& (0+255),b
 15122  001FF4  0E00               	movlw	0
 15123  001FF6  6F90               	movwf	(?_log+2)& (0+255),b
 15124                           
 15125                           ; BSR set to: 0
 15126  001FF8  0012               	return	
 15127  001FFA                     l2305:
 15128                           
 15129                           ; BSR set to: 0
 15130                           
 15131                           ; BSR set to: 0
 15132  001FFA  0E00               	movlw	0
 15133  001FFC  6F6C               	movwf	___ftmul@f2& (0+255),b
 15134  001FFE  0E00               	movlw	0
 15135  002000  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15136  002002  0E40               	movlw	64
 15137  002004  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15138  002006  0E91               	movlw	low log@exponent
 15139  002008  6E1B               	movwf	frexp@eptr,c
 15140  00200A  0E00               	movlw	high log@exponent
 15141  00200C  6E1C               	movwf	frexp@eptr+1,c
 15142  00200E  C08E  F018         	movff	log@x,frexp@value
 15143  002012  C08F  F019         	movff	log@x+1,frexp@value+1
 15144  002016  C090  F01A         	movff	log@x+2,frexp@value+2
 15145  00201A  ECE3  F018         	call	_frexp	;wreg free
 15146  00201E  C018  F069         	movff	?_frexp,___ftmul@f1
 15147  002022  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 15148  002026  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 15149  00202A  EC87  F012         	call	___ftmul	;wreg free
 15150  00202E  C069  F078         	movff	?___ftmul,___ftadd@f1
 15151  002032  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15152  002036  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15153  00203A  0E00               	movlw	0
 15154  00203C  0100               	movlb	0	; () banked
 15155  00203E  6F7B               	movwf	___ftadd@f2& (0+255),b
 15156  002040  0E80               	movlw	128
 15157  002042  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 15158  002044  0EBF               	movlw	191
 15159  002046  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 15160  002048  ECBF  F00C         	call	___ftadd	;wreg free
 15161  00204C  C078  F08E         	movff	?___ftadd,log@x
 15162  002050  C079  F08F         	movff	?___ftadd+1,log@x+1
 15163  002054  C07A  F090         	movff	?___ftadd+2,log@x+2
 15164  002058  0100               	movlb	0	; () banked
 15165  00205A  0791               	decf	log@exponent& (0+255),f,b
 15166  00205C  A0D8               	btfss	status,0,c
 15167  00205E  0792               	decf	(log@exponent+1)& (0+255),f,b
 15168                           
 15169                           ; BSR set to: 0
 15170  002060  C08E  F084         	movff	log@x,eval_poly@x
 15171  002064  C08F  F085         	movff	log@x+1,eval_poly@x+1
 15172  002068  C090  F086         	movff	log@x+2,eval_poly@x+2
 15173  00206C  0E75               	movlw	low log@coeff
 15174  00206E  6F87               	movwf	eval_poly@d& (0+255),b
 15175  002070  0E06               	movlw	high log@coeff
 15176  002072  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15177  002074  0E00               	movlw	0
 15178  002076  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15179  002078  0E08               	movlw	8
 15180  00207A  6F89               	movwf	eval_poly@n& (0+255),b
 15181  00207C  ECA8  F015         	call	_eval_poly	;wreg free
 15182  002080  C084  F08E         	movff	?_eval_poly,log@x
 15183  002084  C085  F08F         	movff	?_eval_poly+1,log@x+1
 15184  002088  C086  F090         	movff	?_eval_poly+2,log@x+2
 15185  00208C  0E72               	movlw	114
 15186  00208E  0100               	movlb	0	; () banked
 15187  002090  6F6C               	movwf	___ftmul@f2& (0+255),b
 15188  002092  0E31               	movlw	49
 15189  002094  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15190  002096  0E3F               	movlw	63
 15191  002098  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15192  00209A  C091  F020         	movff	log@exponent,___awtoft@c
 15193  00209E  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 15194  0020A2  EC53  F01F         	call	___awtoft	;wreg free
 15195  0020A6  C020  F069         	movff	?___awtoft,___ftmul@f1
 15196  0020AA  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 15197  0020AE  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 15198  0020B2  EC87  F012         	call	___ftmul	;wreg free
 15199  0020B6  C069  F078         	movff	?___ftmul,___ftadd@f1
 15200  0020BA  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15201  0020BE  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15202  0020C2  C08E  F07B         	movff	log@x,___ftadd@f2
 15203  0020C6  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 15204  0020CA  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 15205  0020CE  ECBF  F00C         	call	___ftadd	;wreg free
 15206  0020D2  C078  F08E         	movff	?___ftadd,?_log
 15207  0020D6  C079  F08F         	movff	?___ftadd+1,?_log+1
 15208  0020DA  C07A  F090         	movff	?___ftadd+2,?_log+2
 15209  0020DE  0012               	return	
 15210  0020E0                     __end_of_log:
 15211                           	opt stack 0
 15212                           tosu	equ	0xFFF
 15213                           tosh	equ	0xFFE
 15214                           tosl	equ	0xFFD
 15215                           pclath	equ	0xFFA
 15216                           tblptru	equ	0xFF8
 15217                           tblptrh	equ	0xFF7
 15218                           tblptrl	equ	0xFF6
 15219                           tablat	equ	0xFF5
 15220                           prodh	equ	0xFF4
 15221                           prodl	equ	0xFF3
 15222                           intcon	equ	0xFF2
 15223                           intcon2	equ	0xFF1
 15224                           postinc0	equ	0xFEE
 15225                           plusw0	equ	0xFEB
 15226                           wreg	equ	0xFE8
 15227                           indf1	equ	0xFE7
 15228                           postdec1	equ	0xFE5
 15229                           fsr1h	equ	0xFE2
 15230                           fsr1l	equ	0xFE1
 15231                           indf2	equ	0xFDF
 15232                           postinc2	equ	0xFDE
 15233                           postdec2	equ	0xFDD
 15234                           plusw2	equ	0xFDB
 15235                           fsr2h	equ	0xFDA
 15236                           fsr2l	equ	0xFD9
 15237                           status	equ	0xFD8
 15238                           
 15239 ;; *************** function _exp *****************
 15240 ;; Defined at:
 15241 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 15242 ;; Parameters:    Size  Location     Type
 15243 ;;  x               3   55[BANK0 ] int 
 15244 ;; Auto vars:     Size  Location     Type
 15245 ;;  exponent        2   61[BANK0 ] int 
 15246 ;;  sign            1   63[BANK0 ] unsigned char 
 15247 ;; Return value:  Size  Location     Type
 15248 ;;                  3   55[BANK0 ] unsigned char 
 15249 ;; Registers used:
 15250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15251 ;; Tracked objects:
 15252 ;;		On entry : 0/0
 15253 ;;		On exit  : 0/0
 15254 ;;		Unchanged: 0/0
 15255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15256 ;;      Params:         0       3       0       0       0       0       0
 15257 ;;      Locals:         0       6       0       0       0       0       0
 15258 ;;      Temps:          0       0       0       0       0       0       0
 15259 ;;      Totals:         0       9       0       0       0       0       0
 15260 ;;Total ram usage:        9 bytes
 15261 ;; Hardware stack levels used:    1
 15262 ;; Hardware stack levels required when called:    7
 15263 ;; This function calls:
 15264 ;;		___awtoft
 15265 ;;		___ftdiv
 15266 ;;		___ftge
 15267 ;;		___ftmul
 15268 ;;		___ftneg
 15269 ;;		___ftsub
 15270 ;;		___fttol
 15271 ;;		_eval_poly
 15272 ;;		_floor
 15273 ;;		_ldexp
 15274 ;; This function is called by:
 15275 ;;		_pow
 15276 ;; This function uses a non-reentrant model
 15277 ;;
 15278                           
 15279                           	psect	text87
 15280  0013D0                     __ptext87:
 15281                           	opt stack 0
 15282  0013D0                     _exp:
 15283                           	opt stack 18
 15284                           
 15285                           ;incstack = 0
 15286  0013D0  0100               	movlb	0	; () banked
 15287  0013D2  5197               	movf	exp@x& (0+255),w,b
 15288  0013D4  1198               	iorwf	(exp@x+1)& (0+255),w,b
 15289  0013D6  1199               	iorwf	(exp@x+2)& (0+255),w,b
 15290  0013D8  A4D8               	btfss	status,2,c
 15291  0013DA  D007               	goto	l2239
 15292                           
 15293                           ; BSR set to: 0
 15294  0013DC  0E00               	movlw	0
 15295  0013DE  6F97               	movwf	?_exp& (0+255),b
 15296  0013E0  0E80               	movlw	128
 15297  0013E2  6F98               	movwf	(?_exp+1)& (0+255),b
 15298  0013E4  0E3F               	movlw	63
 15299  0013E6  6F99               	movwf	(?_exp+2)& (0+255),b
 15300                           
 15301                           ; BSR set to: 0
 15302  0013E8  0012               	return	
 15303  0013EA                     l2239:
 15304                           
 15305                           ; BSR set to: 0
 15306                           
 15307                           ; BSR set to: 0
 15308  0013EA  0E72               	movlw	114
 15309  0013EC  6E18               	movwf	___ftge@ff1,c
 15310  0013EE  0E31               	movlw	49
 15311  0013F0  6E19               	movwf	___ftge@ff1+1,c
 15312  0013F2  0E44               	movlw	68
 15313  0013F4  6E1A               	movwf	___ftge@ff1+2,c
 15314  0013F6  C097  F01B         	movff	exp@x,___ftge@ff2
 15315  0013FA  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 15316  0013FE  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 15317  001402  EC2B  F019         	call	___ftge	;wreg free
 15318  001406  B0D8               	btfsc	status,0,c
 15319  001408  D00D               	goto	l2241
 15320  00140A  0E00               	movlw	0
 15321  00140C  0101               	movlb	1	; () banked
 15322  00140E  6F35               	movwf	(_errno+1)& (0+255),b
 15323  001410  0E22               	movlw	34
 15324  001412  6F34               	movwf	_errno& (0+255),b
 15325  001414  0EFF               	movlw	255
 15326  001416  0100               	movlb	0	; () banked
 15327  001418  6F97               	movwf	?_exp& (0+255),b
 15328  00141A  0E7F               	movlw	127
 15329  00141C  6F98               	movwf	(?_exp+1)& (0+255),b
 15330  00141E  0E7F               	movlw	127
 15331  001420  6F99               	movwf	(?_exp+2)& (0+255),b
 15332                           
 15333                           ; BSR set to: 0
 15334  001422  0012               	return	
 15335  001424                     l2241:
 15336                           
 15337                           ; BSR set to: 0
 15338  001424  C097  F018         	movff	exp@x,___ftge@ff1
 15339  001428  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 15340  00142C  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 15341  001430  0E49               	movlw	73
 15342  001432  6E1B               	movwf	___ftge@ff2,c
 15343  001434  0E3A               	movlw	58
 15344  001436  6E1C               	movwf	___ftge@ff2+1,c
 15345  001438  0EC4               	movlw	196
 15346  00143A  6E1D               	movwf	___ftge@ff2+2,c
 15347  00143C  EC2B  F019         	call	___ftge	;wreg free
 15348  001440  B0D8               	btfsc	status,0,c
 15349  001442  D00D               	goto	l2242
 15350  001444  0E00               	movlw	0
 15351  001446  0101               	movlb	1	; () banked
 15352  001448  6F35               	movwf	(_errno+1)& (0+255),b
 15353  00144A  0E22               	movlw	34
 15354  00144C  6F34               	movwf	_errno& (0+255),b
 15355  00144E  0E00               	movlw	0
 15356  001450  0100               	movlb	0	; () banked
 15357  001452  6F97               	movwf	?_exp& (0+255),b
 15358  001454  0E00               	movlw	0
 15359  001456  6F98               	movwf	(?_exp+1)& (0+255),b
 15360  001458  0E00               	movlw	0
 15361  00145A  6F99               	movwf	(?_exp+2)& (0+255),b
 15362                           
 15363                           ; BSR set to: 0
 15364  00145C  0012               	return	
 15365  00145E                     l2242:
 15366                           
 15367                           ; BSR set to: 0
 15368  00145E  0100               	movlb	0	; () banked
 15369  001460  AF99               	btfss	(exp@x+2)& (0+255),7,b
 15370  001462  D002               	goto	u7340
 15371  001464  0E01               	movlw	1
 15372  001466  D001               	goto	u7350
 15373  001468                     u7340:
 15374  001468  0E00               	movlw	0
 15375  00146A                     u7350:
 15376  00146A  6F9F               	movwf	exp@sign& (0+255),b
 15377                           
 15378                           ; BSR set to: 0
 15379  00146C  519F               	movf	exp@sign& (0+255),w,b
 15380  00146E  B4D8               	btfsc	status,2,c
 15381  001470  D00E               	goto	l2243
 15382                           
 15383                           ; BSR set to: 0
 15384  001472  C097  F018         	movff	exp@x,___ftneg@f1
 15385  001476  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 15386  00147A  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 15387  00147E  ECE4  F020         	call	___ftneg	;wreg free
 15388  001482  C018  F097         	movff	?___ftneg,exp@x
 15389  001486  C019  F098         	movff	?___ftneg+1,exp@x+1
 15390  00148A  C01A  F099         	movff	?___ftneg+2,exp@x+2
 15391  00148E                     l2243:
 15392  00148E  C097  F069         	movff	exp@x,___ftmul@f1
 15393  001492  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 15394  001496  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 15395  00149A  0EAA               	movlw	170
 15396  00149C  0100               	movlb	0	; () banked
 15397  00149E  6F6C               	movwf	___ftmul@f2& (0+255),b
 15398  0014A0  0EB8               	movlw	184
 15399  0014A2  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15400  0014A4  0E3F               	movlw	63
 15401  0014A6  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15402  0014A8  EC87  F012         	call	___ftmul	;wreg free
 15403  0014AC  C069  F097         	movff	?___ftmul,exp@x
 15404  0014B0  C06A  F098         	movff	?___ftmul+1,exp@x+1
 15405  0014B4  C06B  F099         	movff	?___ftmul+2,exp@x+2
 15406  0014B8  C097  F08F         	movff	exp@x,floor@x
 15407  0014BC  C098  F090         	movff	exp@x+1,floor@x+1
 15408  0014C0  C099  F091         	movff	exp@x+2,floor@x+2
 15409  0014C4  ECCC  F014         	call	_floor	;wreg free
 15410  0014C8  C08F  F09A         	movff	?_floor,_exp$3604
 15411  0014CC  C090  F09B         	movff	?_floor+1,_exp$3604+1
 15412  0014D0  C091  F09C         	movff	?_floor+2,_exp$3604+2
 15413  0014D4  C09A  F078         	movff	_exp$3604,___fttol@f1
 15414  0014D8  C09B  F079         	movff	_exp$3604+1,___fttol@f1+1
 15415  0014DC  C09C  F07A         	movff	_exp$3604+2,___fttol@f1+2
 15416  0014E0  EC0B  F012         	call	___fttol	;wreg free
 15417  0014E4  C078  F09D         	movff	?___fttol,exp@exponent
 15418  0014E8  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 15419  0014EC  C097  F084         	movff	exp@x,___ftsub@f1
 15420  0014F0  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 15421  0014F4  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 15422  0014F8  C09D  F020         	movff	exp@exponent,___awtoft@c
 15423  0014FC  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 15424  001500  EC53  F01F         	call	___awtoft	;wreg free
 15425  001504  C020  F087         	movff	?___awtoft,___ftsub@f2
 15426  001508  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 15427  00150C  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 15428  001510  EC44  F01E         	call	___ftsub	;wreg free
 15429  001514  C084  F097         	movff	?___ftsub,exp@x
 15430  001518  C085  F098         	movff	?___ftsub+1,exp@x+1
 15431  00151C  C086  F099         	movff	?___ftsub+2,exp@x+2
 15432  001520  C097  F084         	movff	exp@x,eval_poly@x
 15433  001524  C098  F085         	movff	exp@x+1,eval_poly@x+1
 15434  001528  C099  F086         	movff	exp@x+2,eval_poly@x+2
 15435  00152C  0E57               	movlw	low exp@coeff
 15436  00152E  0100               	movlb	0	; () banked
 15437  001530  6F87               	movwf	eval_poly@d& (0+255),b
 15438  001532  0E06               	movlw	high exp@coeff
 15439  001534  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15440  001536  0E00               	movlw	0
 15441  001538  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15442  00153A  0E09               	movlw	9
 15443  00153C  6F89               	movwf	eval_poly@n& (0+255),b
 15444  00153E  ECA8  F015         	call	_eval_poly	;wreg free
 15445  001542  C084  F08E         	movff	?_eval_poly,ldexp@value
 15446  001546  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 15447  00154A  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 15448  00154E  C09D  F091         	movff	exp@exponent,ldexp@newexp
 15449  001552  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 15450  001556  EC13  F016         	call	_ldexp	;wreg free
 15451  00155A  C08E  F097         	movff	?_ldexp,exp@x
 15452  00155E  C08F  F098         	movff	?_ldexp+1,exp@x+1
 15453  001562  C090  F099         	movff	?_ldexp+2,exp@x+2
 15454  001566  0100               	movlb	0	; () banked
 15455  001568  519F               	movf	exp@sign& (0+255),w,b
 15456  00156A  B4D8               	btfsc	status,2,c
 15457  00156C  D025               	goto	l2244
 15458                           
 15459                           ; BSR set to: 0
 15460  00156E  2997               	incf	exp@x& (0+255),w,b
 15461  001570  E10E               	bnz	l7604
 15462  001572  0E7F               	movlw	127
 15463  001574  1998               	xorwf	(exp@x+1)& (0+255),w,b
 15464  001576  E10B               	bnz	l7604
 15465  001578  0E7F               	movlw	127
 15466  00157A  1999               	xorwf	(exp@x+2)& (0+255),w,b
 15467  00157C  A4D8               	btfss	status,2,c
 15468  00157E  D007               	goto	l2245
 15469                           
 15470                           ; BSR set to: 0
 15471  001580  0E00               	movlw	0
 15472  001582  6F97               	movwf	?_exp& (0+255),b
 15473  001584  0E00               	movlw	0
 15474  001586  6F98               	movwf	(?_exp+1)& (0+255),b
 15475  001588  0E00               	movlw	0
 15476  00158A  6F99               	movwf	(?_exp+2)& (0+255),b
 15477                           
 15478                           ; BSR set to: 0
 15479  00158C  0012               	return	
 15480  00158E                     l2245:
 15481  00158E                     l7604:
 15482                           
 15483                           ; BSR set to: 0
 15484  00158E  0E00               	movlw	0
 15485  001590  6E29               	movwf	___ftdiv@f1,c
 15486  001592  0E80               	movlw	128
 15487  001594  6E2A               	movwf	___ftdiv@f1+1,c
 15488  001596  0E3F               	movlw	63
 15489  001598  6E2B               	movwf	___ftdiv@f1+2,c
 15490  00159A  C097  F02C         	movff	exp@x,___ftdiv@f2
 15491  00159E  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 15492  0015A2  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 15493  0015A6  EC02  F013         	call	___ftdiv	;wreg free
 15494  0015AA  C029  F097         	movff	?___ftdiv,?_exp
 15495  0015AE  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 15496  0015B2  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 15497  0015B6  0012               	return	
 15498  0015B8                     l2244:
 15499                           
 15500                           ; BSR set to: 0
 15501  0015B8  C097  F097         	movff	exp@x,?_exp
 15502  0015BC  C098  F098         	movff	exp@x+1,?_exp+1
 15503  0015C0  C099  F099         	movff	exp@x+2,?_exp+2
 15504  0015C4  0012               	return		;funcret
 15505  0015C6                     __end_of_exp:
 15506                           	opt stack 0
 15507                           tosu	equ	0xFFF
 15508                           tosh	equ	0xFFE
 15509                           tosl	equ	0xFFD
 15510                           pclath	equ	0xFFA
 15511                           tblptru	equ	0xFF8
 15512                           tblptrh	equ	0xFF7
 15513                           tblptrl	equ	0xFF6
 15514                           tablat	equ	0xFF5
 15515                           prodh	equ	0xFF4
 15516                           prodl	equ	0xFF3
 15517                           intcon	equ	0xFF2
 15518                           intcon2	equ	0xFF1
 15519                           postinc0	equ	0xFEE
 15520                           plusw0	equ	0xFEB
 15521                           wreg	equ	0xFE8
 15522                           indf1	equ	0xFE7
 15523                           postdec1	equ	0xFE5
 15524                           fsr1h	equ	0xFE2
 15525                           fsr1l	equ	0xFE1
 15526                           indf2	equ	0xFDF
 15527                           postinc2	equ	0xFDE
 15528                           postdec2	equ	0xFDD
 15529                           plusw2	equ	0xFDB
 15530                           fsr2h	equ	0xFDA
 15531                           fsr2l	equ	0xFD9
 15532                           status	equ	0xFD8
 15533                           
 15534 ;; *************** function _ldexp *****************
 15535 ;; Defined at:
 15536 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15537 ;; Parameters:    Size  Location     Type
 15538 ;;  value           3   46[BANK0 ] unsigned char 
 15539 ;;  newexp          2   49[BANK0 ] int 
 15540 ;; Auto vars:     Size  Location     Type
 15541 ;;		None
 15542 ;; Return value:  Size  Location     Type
 15543 ;;                  3   46[BANK0 ] int 
 15544 ;; Registers used:
 15545 ;;		wreg, status,2, status,0
 15546 ;; Tracked objects:
 15547 ;;		On entry : 0/0
 15548 ;;		On exit  : 0/0
 15549 ;;		Unchanged: 0/0
 15550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15551 ;;      Params:         0       5       0       0       0       0       0
 15552 ;;      Locals:         0       0       0       0       0       0       0
 15553 ;;      Temps:          0       2       0       0       0       0       0
 15554 ;;      Totals:         0       7       0       0       0       0       0
 15555 ;;Total ram usage:        7 bytes
 15556 ;; Hardware stack levels used:    1
 15557 ;; Hardware stack levels required when called:    4
 15558 ;; This function calls:
 15559 ;;		Nothing
 15560 ;; This function is called by:
 15561 ;;		_exp
 15562 ;; This function uses a non-reentrant model
 15563 ;;
 15564                           
 15565                           	psect	text88
 15566  002C26                     __ptext88:
 15567                           	opt stack 0
 15568  002C26                     _ldexp:
 15569                           	opt stack 20
 15570                           
 15571                           ;incstack = 0
 15572  002C26  0100               	movlb	0	; () banked
 15573  002C28  518E               	movf	ldexp@value& (0+255),w,b
 15574  002C2A  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 15575  002C2C  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 15576  002C2E  A4D8               	btfss	status,2,c
 15577  002C30  D007               	goto	l2263
 15578                           
 15579                           ; BSR set to: 0
 15580  002C32  0E00               	movlw	0
 15581  002C34  6F8E               	movwf	?_ldexp& (0+255),b
 15582  002C36  0E00               	movlw	0
 15583  002C38  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15584  002C3A  0E00               	movlw	0
 15585  002C3C  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15586                           
 15587                           ; BSR set to: 0
 15588  002C3E  0012               	return	
 15589  002C40                     l2263:
 15590                           
 15591                           ; BSR set to: 0
 15592                           
 15593                           ; BSR set to: 0
 15594  002C40  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15595  002C42  0B7F               	andlw	127
 15596  002C44  6F93               	movwf	??_ldexp& (0+255),b
 15597  002C46  6B94               	clrf	(??_ldexp+1)& (0+255),b
 15598  002C48  90D8               	bcf	status,0,c
 15599  002C4A  3793               	rlcf	??_ldexp& (0+255),f,b
 15600  002C4C  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 15601  002C4E  5193               	movf	??_ldexp& (0+255),w,b
 15602  002C50  2791               	addwf	ldexp@newexp& (0+255),f,b
 15603  002C52  5194               	movf	(??_ldexp+1)& (0+255),w,b
 15604  002C54  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15605  002C56  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 15606  002C58  D003               	goto	u7080
 15607  002C5A  6B93               	clrf	??_ldexp& (0+255),b
 15608  002C5C  2B93               	incf	??_ldexp& (0+255),f,b
 15609  002C5E  D002               	goto	u7088
 15610  002C60                     u7080:
 15611  002C60  0100               	movlb	0	; () banked
 15612  002C62  6B93               	clrf	??_ldexp& (0+255),b
 15613  002C64                     u7088:
 15614  002C64  5193               	movf	??_ldexp& (0+255),w,b
 15615  002C66  2791               	addwf	ldexp@newexp& (0+255),f,b
 15616  002C68  0E00               	movlw	0
 15617  002C6A  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15618  002C6C  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 15619  002C6E  D00D               	goto	l2265
 15620                           
 15621                           ; BSR set to: 0
 15622  002C70  0E00               	movlw	0
 15623  002C72  0101               	movlb	1	; () banked
 15624  002C74  6F35               	movwf	(_errno+1)& (0+255),b
 15625  002C76  0E22               	movlw	34
 15626  002C78  6F34               	movwf	_errno& (0+255),b
 15627  002C7A  0E00               	movlw	0
 15628  002C7C  0100               	movlb	0	; () banked
 15629  002C7E  6F8E               	movwf	?_ldexp& (0+255),b
 15630  002C80  0E00               	movlw	0
 15631  002C82  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15632  002C84  0E00               	movlw	0
 15633  002C86                     L4:
 15634  002C86  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15635                           
 15636                           ; BSR set to: 0
 15637  002C88  0012               	return	
 15638  002C8A                     l2265:
 15639                           
 15640                           ; BSR set to: 0
 15641                           
 15642                           ; BSR set to: 0
 15643  002C8A  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 15644  002C8C  D017               	goto	l2267
 15645  002C8E  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 15646  002C90  A0D8               	btfss	status,0,c
 15647  002C92  D014               	goto	l2267
 15648                           
 15649                           ; BSR set to: 0
 15650  002C94  0E00               	movlw	0
 15651  002C96  0101               	movlb	1	; () banked
 15652  002C98  6F35               	movwf	(_errno+1)& (0+255),b
 15653  002C9A  0E22               	movlw	34
 15654  002C9C  6F34               	movwf	_errno& (0+255),b
 15655                           
 15656                           ; BSR set to: 1
 15657  002C9E  0100               	movlb	0	; () banked
 15658  002CA0  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 15659  002CA2  D006               	goto	l2268
 15660                           
 15661                           ; BSR set to: 0
 15662  002CA4  0EFF               	movlw	255
 15663  002CA6  6F8E               	movwf	?_ldexp& (0+255),b
 15664  002CA8  0E7F               	movlw	127
 15665  002CAA  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15666  002CAC  0EFF               	movlw	255
 15667  002CAE  D7EB               	goto	L4
 15668  002CB0                     l2268:
 15669                           
 15670                           ; BSR set to: 0
 15671                           
 15672                           ; BSR set to: 0
 15673  002CB0  0EFF               	movlw	255
 15674  002CB2  6F8E               	movwf	?_ldexp& (0+255),b
 15675  002CB4  0E7F               	movlw	127
 15676  002CB6  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15677  002CB8  0E7F               	movlw	127
 15678  002CBA  D7E5               	goto	L4
 15679  002CBC                     l2267:
 15680                           
 15681                           ; BSR set to: 0
 15682                           
 15683                           ; BSR set to: 0
 15684  002CBC  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 15685  002CBE  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 15686  002CC0  6F94               	movwf	(??_ldexp+1)& (0+255),b
 15687  002CC2  3191               	rrcf	ldexp@newexp& (0+255),w,b
 15688  002CC4  6F93               	movwf	??_ldexp& (0+255),b
 15689  002CC6  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15690  002CC8  1993               	xorwf	??_ldexp& (0+255),w,b
 15691  002CCA  0B80               	andlw	-128
 15692  002CCC  1993               	xorwf	??_ldexp& (0+255),w,b
 15693  002CCE  6F90               	movwf	(ldexp@value+2)& (0+255),b
 15694  002CD0  C091  F093         	movff	ldexp@newexp,??_ldexp
 15695  002CD4  0E01               	movlw	1
 15696  002CD6  1793               	andwf	??_ldexp& (0+255),f,b
 15697  002CD8  3393               	rrcf	??_ldexp& (0+255),f,b
 15698  002CDA  3393               	rrcf	??_ldexp& (0+255),f,b
 15699  002CDC  518F               	movf	(ldexp@value+1)& (0+255),w,b
 15700  002CDE  1993               	xorwf	??_ldexp& (0+255),w,b
 15701  002CE0  0B7F               	andlw	-129
 15702  002CE2  1993               	xorwf	??_ldexp& (0+255),w,b
 15703  002CE4  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 15704                           
 15705                           ; BSR set to: 0
 15706                           
 15707                           ; BSR set to: 0
 15708                           
 15709                           ; BSR set to: 0
 15710  002CE6  C08E  F08E         	movff	ldexp@value,?_ldexp
 15711  002CEA  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 15712  002CEE  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 15713  002CF2  0012               	return	
 15714  002CF4                     __end_of_ldexp:
 15715                           	opt stack 0
 15716                           tosu	equ	0xFFF
 15717                           tosh	equ	0xFFE
 15718                           tosl	equ	0xFFD
 15719                           pclath	equ	0xFFA
 15720                           tblptru	equ	0xFF8
 15721                           tblptrh	equ	0xFF7
 15722                           tblptrl	equ	0xFF6
 15723                           tablat	equ	0xFF5
 15724                           prodh	equ	0xFF4
 15725                           prodl	equ	0xFF3
 15726                           intcon	equ	0xFF2
 15727                           intcon2	equ	0xFF1
 15728                           postinc0	equ	0xFEE
 15729                           plusw0	equ	0xFEB
 15730                           wreg	equ	0xFE8
 15731                           indf1	equ	0xFE7
 15732                           postdec1	equ	0xFE5
 15733                           fsr1h	equ	0xFE2
 15734                           fsr1l	equ	0xFE1
 15735                           indf2	equ	0xFDF
 15736                           postinc2	equ	0xFDE
 15737                           postdec2	equ	0xFDD
 15738                           plusw2	equ	0xFDB
 15739                           fsr2h	equ	0xFDA
 15740                           fsr2l	equ	0xFD9
 15741                           status	equ	0xFD8
 15742                           
 15743 ;; *************** function _floor *****************
 15744 ;; Defined at:
 15745 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 15746 ;; Parameters:    Size  Location     Type
 15747 ;;  x               3   47[BANK0 ] int 
 15748 ;; Auto vars:     Size  Location     Type
 15749 ;;  i               3   50[BANK0 ] int 
 15750 ;;  expon           2   53[BANK0 ] int 
 15751 ;; Return value:  Size  Location     Type
 15752 ;;                  3   47[BANK0 ] int 
 15753 ;; Registers used:
 15754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15755 ;; Tracked objects:
 15756 ;;		On entry : 0/0
 15757 ;;		On exit  : 0/0
 15758 ;;		Unchanged: 0/0
 15759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15760 ;;      Params:         0       3       0       0       0       0       0
 15761 ;;      Locals:         0       5       0       0       0       0       0
 15762 ;;      Temps:          0       0       0       0       0       0       0
 15763 ;;      Totals:         0       8       0       0       0       0       0
 15764 ;;Total ram usage:        8 bytes
 15765 ;; Hardware stack levels used:    1
 15766 ;; Hardware stack levels required when called:    6
 15767 ;; This function calls:
 15768 ;;		___altoft
 15769 ;;		___ftadd
 15770 ;;		___ftge
 15771 ;;		___fttol
 15772 ;;		_frexp
 15773 ;; This function is called by:
 15774 ;;		_exp
 15775 ;; This function uses a non-reentrant model
 15776 ;;
 15777                           
 15778                           	psect	text89
 15779  002998                     __ptext89:
 15780                           	opt stack 0
 15781  002998                     _floor:
 15782                           	opt stack 18
 15783                           
 15784                           ; BSR set to: 0
 15785                           ;incstack = 0
 15786  002998  C08F  F018         	movff	floor@x,frexp@value
 15787  00299C  C090  F019         	movff	floor@x+1,frexp@value+1
 15788  0029A0  C091  F01A         	movff	floor@x+2,frexp@value+2
 15789  0029A4  0E95               	movlw	low floor@expon
 15790  0029A6  6E1B               	movwf	frexp@eptr,c
 15791  0029A8  0E00               	movlw	high floor@expon
 15792  0029AA  6E1C               	movwf	frexp@eptr+1,c
 15793  0029AC  ECE3  F018         	call	_frexp	;wreg free
 15794  0029B0  0100               	movlb	0	; () banked
 15795  0029B2  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 15796  0029B4  D010               	goto	l2250
 15797                           
 15798                           ; BSR set to: 0
 15799  0029B6  AF91               	btfss	(floor@x+2)& (0+255),7,b
 15800  0029B8  D007               	goto	l2251
 15801                           
 15802                           ; BSR set to: 0
 15803  0029BA  0E00               	movlw	0
 15804  0029BC  6F8F               	movwf	?_floor& (0+255),b
 15805  0029BE  0E80               	movlw	128
 15806  0029C0  6F90               	movwf	(?_floor+1)& (0+255),b
 15807  0029C2  0EBF               	movlw	191
 15808  0029C4  6F91               	movwf	(?_floor+2)& (0+255),b
 15809                           
 15810                           ; BSR set to: 0
 15811  0029C6  0012               	return	
 15812  0029C8                     l2251:
 15813                           
 15814                           ; BSR set to: 0
 15815                           
 15816                           ; BSR set to: 0
 15817  0029C8  0E00               	movlw	0
 15818  0029CA  6F8F               	movwf	?_floor& (0+255),b
 15819  0029CC  0E00               	movlw	0
 15820  0029CE  6F90               	movwf	(?_floor+1)& (0+255),b
 15821  0029D0  0E00               	movlw	0
 15822  0029D2  6F91               	movwf	(?_floor+2)& (0+255),b
 15823                           
 15824                           ; BSR set to: 0
 15825  0029D4  0012               	return	
 15826  0029D6                     l2250:
 15827                           
 15828                           ; BSR set to: 0
 15829                           
 15830                           ; BSR set to: 0
 15831  0029D6  5196               	movf	(floor@expon+1)& (0+255),w,b
 15832  0029D8  E104               	bnz	u7040
 15833  0029DA  0E15               	movlw	21
 15834  0029DC  5D95               	subwf	floor@expon& (0+255),w,b
 15835  0029DE  A0D8               	btfss	status,0,c
 15836  0029E0  D007               	goto	l2253
 15837  0029E2                     u7040:
 15838                           
 15839                           ; BSR set to: 0
 15840  0029E2  C08F  F08F         	movff	floor@x,?_floor
 15841  0029E6  C090  F090         	movff	floor@x+1,?_floor+1
 15842  0029EA  C091  F091         	movff	floor@x+2,?_floor+2
 15843  0029EE  0012               	return	
 15844  0029F0                     l2253:
 15845                           
 15846                           ; BSR set to: 0
 15847                           
 15848                           ; BSR set to: 0
 15849  0029F0  C08F  F078         	movff	floor@x,___fttol@f1
 15850  0029F4  C090  F079         	movff	floor@x+1,___fttol@f1+1
 15851  0029F8  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 15852  0029FC  EC0B  F012         	call	___fttol	;wreg free
 15853  002A00  C078  F087         	movff	?___fttol,___altoft@c
 15854  002A04  C079  F088         	movff	?___fttol+1,___altoft@c+1
 15855  002A08  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 15856  002A0C  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 15857  002A10  EC77  F01A         	call	___altoft	;wreg free
 15858  002A14  C087  F092         	movff	?___altoft,floor@i
 15859  002A18  C088  F093         	movff	?___altoft+1,floor@i+1
 15860  002A1C  C089  F094         	movff	?___altoft+2,floor@i+2
 15861  002A20  C08F  F018         	movff	floor@x,___ftge@ff1
 15862  002A24  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 15863  002A28  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 15864  002A2C  C092  F01B         	movff	floor@i,___ftge@ff2
 15865  002A30  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 15866  002A34  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 15867  002A38  EC2B  F019         	call	___ftge	;wreg free
 15868  002A3C  B0D8               	btfsc	status,0,c
 15869  002A3E  D016               	goto	l2254
 15870  002A40  C092  F078         	movff	floor@i,___ftadd@f1
 15871  002A44  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 15872  002A48  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 15873  002A4C  0E00               	movlw	0
 15874  002A4E  0100               	movlb	0	; () banked
 15875  002A50  6F7B               	movwf	___ftadd@f2& (0+255),b
 15876  002A52  0E80               	movlw	128
 15877  002A54  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 15878  002A56  0EBF               	movlw	191
 15879  002A58  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 15880  002A5A  ECBF  F00C         	call	___ftadd	;wreg free
 15881  002A5E  C078  F08F         	movff	?___ftadd,?_floor
 15882  002A62  C079  F090         	movff	?___ftadd+1,?_floor+1
 15883  002A66  C07A  F091         	movff	?___ftadd+2,?_floor+2
 15884  002A6A  0012               	return	
 15885  002A6C                     l2254:
 15886  002A6C  C092  F08F         	movff	floor@i,?_floor
 15887  002A70  C093  F090         	movff	floor@i+1,?_floor+1
 15888  002A74  C094  F091         	movff	floor@i+2,?_floor+2
 15889  002A78  0012               	return		;funcret
 15890  002A7A                     __end_of_floor:
 15891                           	opt stack 0
 15892                           tosu	equ	0xFFF
 15893                           tosh	equ	0xFFE
 15894                           tosl	equ	0xFFD
 15895                           pclath	equ	0xFFA
 15896                           tblptru	equ	0xFF8
 15897                           tblptrh	equ	0xFF7
 15898                           tblptrl	equ	0xFF6
 15899                           tablat	equ	0xFF5
 15900                           prodh	equ	0xFF4
 15901                           prodl	equ	0xFF3
 15902                           intcon	equ	0xFF2
 15903                           intcon2	equ	0xFF1
 15904                           postinc0	equ	0xFEE
 15905                           plusw0	equ	0xFEB
 15906                           wreg	equ	0xFE8
 15907                           indf1	equ	0xFE7
 15908                           postdec1	equ	0xFE5
 15909                           fsr1h	equ	0xFE2
 15910                           fsr1l	equ	0xFE1
 15911                           indf2	equ	0xFDF
 15912                           postinc2	equ	0xFDE
 15913                           postdec2	equ	0xFDD
 15914                           plusw2	equ	0xFDB
 15915                           fsr2h	equ	0xFDA
 15916                           fsr2l	equ	0xFD9
 15917                           status	equ	0xFD8
 15918                           
 15919 ;; *************** function _frexp *****************
 15920 ;; Defined at:
 15921 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15922 ;; Parameters:    Size  Location     Type
 15923 ;;  value           3   23[COMRAM] int 
 15924 ;;  eptr            2   26[COMRAM] PTR int 
 15925 ;;		 -> log@exponent(2), floor@expon(2), 
 15926 ;; Auto vars:     Size  Location     Type
 15927 ;;		None
 15928 ;; Return value:  Size  Location     Type
 15929 ;;                  3   23[COMRAM] PTR int 
 15930 ;; Registers used:
 15931 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15932 ;; Tracked objects:
 15933 ;;		On entry : 0/0
 15934 ;;		On exit  : 0/0
 15935 ;;		Unchanged: 0/0
 15936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15937 ;;      Params:         5       0       0       0       0       0       0
 15938 ;;      Locals:         0       0       0       0       0       0       0
 15939 ;;      Temps:          2       0       0       0       0       0       0
 15940 ;;      Totals:         7       0       0       0       0       0       0
 15941 ;;Total ram usage:        7 bytes
 15942 ;; Hardware stack levels used:    1
 15943 ;; Hardware stack levels required when called:    4
 15944 ;; This function calls:
 15945 ;;		Nothing
 15946 ;; This function is called by:
 15947 ;;		_floor
 15948 ;;		_log
 15949 ;; This function uses a non-reentrant model
 15950 ;;
 15951                           
 15952                           	psect	text90
 15953  0031C6                     __ptext90:
 15954                           	opt stack 0
 15955  0031C6                     _frexp:
 15956                           	opt stack 20
 15957                           
 15958                           ;incstack = 0
 15959  0031C6  5018               	movf	frexp@value,w,c
 15960  0031C8  1019               	iorwf	frexp@value+1,w,c
 15961  0031CA  101A               	iorwf	frexp@value+2,w,c
 15962  0031CC  A4D8               	btfss	status,2,c
 15963  0031CE  D00F               	goto	l2259
 15964  0031D0  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15965  0031D4  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15966  0031D8  0E00               	movlw	0
 15967  0031DA  6EDE               	movwf	postinc2,c
 15968  0031DC  0E00               	movlw	0
 15969  0031DE  6EDD               	movwf	postdec2,c
 15970  0031E0  0E00               	movlw	0
 15971  0031E2  6E18               	movwf	?_frexp,c
 15972  0031E4  0E00               	movlw	0
 15973  0031E6  6E19               	movwf	?_frexp+1,c
 15974  0031E8  0E00               	movlw	0
 15975  0031EA  6E1A               	movwf	?_frexp+2,c
 15976  0031EC  0012               	return	
 15977  0031EE                     l2259:
 15978  0031EE  501A               	movf	frexp@value+2,w,c
 15979  0031F0  0B7F               	andlw	127
 15980  0031F2  6E1D               	movwf	??_frexp& (0+255),c
 15981  0031F4  6A1E               	clrf	(??_frexp+1)& (0+255),c
 15982  0031F6  90D8               	bcf	status,0,c
 15983  0031F8  361D               	rlcf	??_frexp,f,c
 15984  0031FA  361E               	rlcf	??_frexp+1,f,c
 15985  0031FC  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15986  003200  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15987  003204  C01D  FFDE         	movff	??_frexp,postinc2
 15988  003208  C01E  FFDD         	movff	??_frexp+1,postdec2
 15989  00320C  AE19               	btfss	frexp@value+1,7,c
 15990  00320E  D003               	goto	u6920
 15991  003210  6A1D               	clrf	??_frexp& (0+255),c
 15992  003212  2A1D               	incf	??_frexp& (0+255),f,c
 15993  003214  D001               	goto	u6928
 15994  003216                     u6920:
 15995  003216  6A1D               	clrf	??_frexp& (0+255),c
 15996  003218                     u6928:
 15997  003218  501D               	movf	??_frexp,w,c
 15998  00321A  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15999  00321E  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 16000  003222  12DE               	iorwf	postinc2,f,c
 16001  003224  0E00               	movlw	0
 16002  003226  12DD               	iorwf	postdec2,f,c
 16003  003228  C01B  FFD9         	movff	frexp@eptr,fsr2l
 16004  00322C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 16005  003230  0E82               	movlw	130
 16006  003232  26DE               	addwf	postinc2,f,c
 16007  003234  0EFF               	movlw	255
 16008  003236  22DD               	addwfc	postdec2,f,c
 16009  003238  801A               	bsf	frexp@value+2,0,c
 16010  00323A  821A               	bsf	frexp@value+2,1,c
 16011  00323C  841A               	bsf	frexp@value+2,2,c
 16012  00323E  861A               	bsf	frexp@value+2,3,c
 16013  003240  881A               	bsf	frexp@value+2,4,c
 16014  003242  8A1A               	bsf	frexp@value+2,5,c
 16015  003244  9C1A               	bcf	frexp@value+2,6,c
 16016  003246  9E19               	bcf	frexp@value+1,7,c
 16017  003248  C018  F018         	movff	frexp@value,?_frexp
 16018  00324C  C019  F019         	movff	frexp@value+1,?_frexp+1
 16019  003250  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 16020  003254  0012               	return	
 16021  003256                     __end_of_frexp:
 16022                           	opt stack 0
 16023                           tosu	equ	0xFFF
 16024                           tosh	equ	0xFFE
 16025                           tosl	equ	0xFFD
 16026                           pclath	equ	0xFFA
 16027                           tblptru	equ	0xFF8
 16028                           tblptrh	equ	0xFF7
 16029                           tblptrl	equ	0xFF6
 16030                           tablat	equ	0xFF5
 16031                           prodh	equ	0xFF4
 16032                           prodl	equ	0xFF3
 16033                           intcon	equ	0xFF2
 16034                           intcon2	equ	0xFF1
 16035                           postinc0	equ	0xFEE
 16036                           plusw0	equ	0xFEB
 16037                           wreg	equ	0xFE8
 16038                           indf1	equ	0xFE7
 16039                           postdec1	equ	0xFE5
 16040                           fsr1h	equ	0xFE2
 16041                           fsr1l	equ	0xFE1
 16042                           indf2	equ	0xFDF
 16043                           postinc2	equ	0xFDE
 16044                           postdec2	equ	0xFDD
 16045                           plusw2	equ	0xFDB
 16046                           fsr2h	equ	0xFDA
 16047                           fsr2l	equ	0xFD9
 16048                           status	equ	0xFD8
 16049                           
 16050 ;; *************** function ___fttol *****************
 16051 ;; Defined at:
 16052 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 16053 ;; Parameters:    Size  Location     Type
 16054 ;;  f1              3   24[BANK0 ] float 
 16055 ;; Auto vars:     Size  Location     Type
 16056 ;;  lval            4   34[BANK0 ] unsigned long 
 16057 ;;  exp1            1   38[BANK0 ] unsigned char 
 16058 ;;  sign1           1   33[BANK0 ] unsigned char 
 16059 ;; Return value:  Size  Location     Type
 16060 ;;                  4   24[BANK0 ] long 
 16061 ;; Registers used:
 16062 ;;		wreg, status,2, status,0
 16063 ;; Tracked objects:
 16064 ;;		On entry : 0/0
 16065 ;;		On exit  : 0/0
 16066 ;;		Unchanged: 0/0
 16067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16068 ;;      Params:         0       4       0       0       0       0       0
 16069 ;;      Locals:         0       6       0       0       0       0       0
 16070 ;;      Temps:          0       5       0       0       0       0       0
 16071 ;;      Totals:         0      15       0       0       0       0       0
 16072 ;;Total ram usage:       15 bytes
 16073 ;; Hardware stack levels used:    1
 16074 ;; Hardware stack levels required when called:    4
 16075 ;; This function calls:
 16076 ;;		Nothing
 16077 ;; This function is called by:
 16078 ;;		_AdcConvert
 16079 ;;		_ReadIntFromEeprom
 16080 ;;		_pow
 16081 ;;		_exp
 16082 ;;		_floor
 16083 ;; This function uses a non-reentrant model
 16084 ;;
 16085                           
 16086                           	psect	text91
 16087  002416                     __ptext91:
 16088                           	opt stack 0
 16089  002416                     ___fttol:
 16090                           	opt stack 19
 16091                           
 16092                           ;incstack = 0
 16093  002416  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 16094  00241A  0100               	movlb	0	; () banked
 16095  00241C  6B7D               	clrf	(??___fttol+1)& (0+255),b
 16096  00241E  6B7E               	clrf	(??___fttol+2)& (0+255),b
 16097  002420  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 16098  002422  377C               	rlcf	??___fttol& (0+255),f,b
 16099  002424  E301               	bnc	u6831
 16100  002426  817D               	bsf	(??___fttol+1)& (0+255),0,b
 16101  002428                     u6831:
 16102  002428  517C               	movf	??___fttol& (0+255),w,b
 16103  00242A  6F86               	movwf	___fttol@exp1& (0+255),b
 16104  00242C  5186               	movf	___fttol@exp1& (0+255),w,b
 16105  00242E  A4D8               	btfss	status,2,c
 16106  002430  D009               	goto	l1916
 16107                           
 16108                           ; BSR set to: 0
 16109  002432  0E00               	movlw	0
 16110  002434  6F78               	movwf	?___fttol& (0+255),b
 16111  002436  0E00               	movlw	0
 16112  002438  6F79               	movwf	(?___fttol+1)& (0+255),b
 16113  00243A  0E00               	movlw	0
 16114  00243C  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16115  00243E  0E00               	movlw	0
 16116  002440  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16117                           
 16118                           ; BSR set to: 0
 16119  002442  0012               	return	
 16120  002444                     l1916:
 16121                           
 16122                           ; BSR set to: 0
 16123                           
 16124                           ; BSR set to: 0
 16125  002444  0E17               	movlw	23
 16126  002446  6F7C               	movwf	??___fttol& (0+255),b
 16127  002448  C078  F07D         	movff	___fttol@f1,??___fttol+1
 16128  00244C  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 16129  002450  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 16130  002454  297C               	incf	??___fttol& (0+255),w,b
 16131  002456  6F80               	movwf	(??___fttol+4)& (0+255),b
 16132  002458  D004               	goto	u6850
 16133  00245A                     u6855:
 16134  00245A  90D8               	bcf	status,0,c
 16135  00245C  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 16136  00245E  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 16137  002460  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 16138  002462                     u6850:
 16139  002462  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 16140  002464  D7FA               	goto	u6855
 16141  002466  0100               	movlb	0	; () banked
 16142  002468  517D               	movf	(??___fttol+1)& (0+255),w,b
 16143  00246A  6F81               	movwf	___fttol@sign1& (0+255),b
 16144                           
 16145                           ; BSR set to: 0
 16146  00246C  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 16147                           
 16148                           ; BSR set to: 0
 16149  00246E  0EFF               	movlw	255
 16150  002470  1778               	andwf	___fttol@f1& (0+255),f,b
 16151  002472  0EFF               	movlw	255
 16152  002474  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 16153  002476  0E00               	movlw	0
 16154  002478  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 16155                           
 16156                           ; BSR set to: 0
 16157  00247A  5178               	movf	___fttol@f1& (0+255),w,b
 16158  00247C  6F82               	movwf	___fttol@lval& (0+255),b
 16159  00247E  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 16160  002480  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 16161  002482  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 16162  002484  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 16163  002486  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 16164                           
 16165                           ; BSR set to: 0
 16166  002488  0E8E               	movlw	142
 16167  00248A  5F86               	subwf	___fttol@exp1& (0+255),f,b
 16168                           
 16169                           ; BSR set to: 0
 16170  00248C  AF86               	btfss	___fttol@exp1& (0+255),7,b
 16171  00248E  D016               	goto	l1918
 16172                           
 16173                           ; BSR set to: 0
 16174  002490  5186               	movf	___fttol@exp1& (0+255),w,b
 16175  002492  0A80               	xorlw	128
 16176  002494  0F8F               	addlw	143
 16177  002496  B0D8               	btfsc	status,0,c
 16178  002498  D009               	goto	l1919
 16179                           
 16180                           ; BSR set to: 0
 16181  00249A  0E00               	movlw	0
 16182  00249C  6F78               	movwf	?___fttol& (0+255),b
 16183  00249E  0E00               	movlw	0
 16184  0024A0  6F79               	movwf	(?___fttol+1)& (0+255),b
 16185  0024A2  0E00               	movlw	0
 16186  0024A4  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16187  0024A6  0E00               	movlw	0
 16188  0024A8  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16189                           
 16190                           ; BSR set to: 0
 16191  0024AA  0012               	return	
 16192  0024AC                     l1919:
 16193                           
 16194                           ; BSR set to: 0
 16195                           
 16196                           ; BSR set to: 0
 16197                           
 16198                           ; BSR set to: 0
 16199  0024AC  90D8               	bcf	status,0,c
 16200  0024AE  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 16201  0024B0  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 16202  0024B2  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 16203  0024B4  3382               	rrcf	___fttol@lval& (0+255),f,b
 16204                           
 16205                           ; BSR set to: 0
 16206  0024B6  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 16207  0024B8  D7F9               	goto	l1919
 16208                           
 16209                           ; BSR set to: 0
 16210  0024BA  D015               	goto	u6890
 16211  0024BC                     l1918:
 16212                           
 16213                           ; BSR set to: 0
 16214                           
 16215                           ; BSR set to: 0
 16216  0024BC  0E17               	movlw	23
 16217  0024BE  6586               	cpfsgt	___fttol@exp1& (0+255),b
 16218  0024C0  D00F               	goto	l1924
 16219                           
 16220                           ; BSR set to: 0
 16221  0024C2  0E00               	movlw	0
 16222  0024C4  6F78               	movwf	?___fttol& (0+255),b
 16223  0024C6  0E00               	movlw	0
 16224  0024C8  6F79               	movwf	(?___fttol+1)& (0+255),b
 16225  0024CA  0E00               	movlw	0
 16226  0024CC  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16227  0024CE  0E00               	movlw	0
 16228  0024D0  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16229                           
 16230                           ; BSR set to: 0
 16231  0024D2  0012               	return	
 16232  0024D4                     
 16233                           ; BSR set to: 0
 16234                           
 16235                           ; BSR set to: 0
 16236  0024D4  90D8               	bcf	status,0,c
 16237  0024D6  3782               	rlcf	___fttol@lval& (0+255),f,b
 16238  0024D8  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 16239  0024DA  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 16240  0024DC  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 16241  0024DE  0786               	decf	___fttol@exp1& (0+255),f,b
 16242  0024E0                     l1924:
 16243                           
 16244                           ; BSR set to: 0
 16245                           
 16246                           ; BSR set to: 0
 16247  0024E0  5186               	movf	___fttol@exp1& (0+255),w,b
 16248  0024E2  A4D8               	btfss	status,2,c
 16249  0024E4  D7F7               	goto	l1925
 16250  0024E6                     u6890:
 16251                           
 16252                           ; BSR set to: 0
 16253                           
 16254                           ; BSR set to: 0
 16255                           
 16256                           ; BSR set to: 0
 16257  0024E6  5181               	movf	___fttol@sign1& (0+255),w,b
 16258  0024E8  B4D8               	btfsc	status,2,c
 16259  0024EA  D008               	goto	l1927
 16260                           
 16261                           ; BSR set to: 0
 16262  0024EC  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 16263  0024EE  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 16264  0024F0  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 16265  0024F2  6D82               	negf	___fttol@lval& (0+255),b
 16266  0024F4  0E00               	movlw	0
 16267  0024F6  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 16268  0024F8  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 16269  0024FA  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 16270  0024FC                     l1927:
 16271                           
 16272                           ; BSR set to: 0
 16273                           
 16274                           ; BSR set to: 0
 16275  0024FC  C082  F078         	movff	___fttol@lval,?___fttol
 16276  002500  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 16277  002504  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 16278  002508  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 16279  00250C  0012               	return	
 16280  00250E                     __end_of___fttol:
 16281                           	opt stack 0
 16282                           tosu	equ	0xFFF
 16283                           tosh	equ	0xFFE
 16284                           tosl	equ	0xFFD
 16285                           pclath	equ	0xFFA
 16286                           tblptru	equ	0xFF8
 16287                           tblptrh	equ	0xFF7
 16288                           tblptrl	equ	0xFF6
 16289                           tablat	equ	0xFF5
 16290                           prodh	equ	0xFF4
 16291                           prodl	equ	0xFF3
 16292                           intcon	equ	0xFF2
 16293                           intcon2	equ	0xFF1
 16294                           postinc0	equ	0xFEE
 16295                           plusw0	equ	0xFEB
 16296                           wreg	equ	0xFE8
 16297                           indf1	equ	0xFE7
 16298                           postdec1	equ	0xFE5
 16299                           fsr1h	equ	0xFE2
 16300                           fsr1l	equ	0xFE1
 16301                           indf2	equ	0xFDF
 16302                           postinc2	equ	0xFDE
 16303                           postdec2	equ	0xFDD
 16304                           plusw2	equ	0xFDB
 16305                           fsr2h	equ	0xFDA
 16306                           fsr2l	equ	0xFD9
 16307                           status	equ	0xFD8
 16308                           
 16309 ;; *************** function ___ftge *****************
 16310 ;; Defined at:
 16311 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 16312 ;; Parameters:    Size  Location     Type
 16313 ;;  ff1             3   23[COMRAM] float 
 16314 ;;  ff2             3   26[COMRAM] float 
 16315 ;; Auto vars:     Size  Location     Type
 16316 ;;		None
 16317 ;; Return value:  Size  Location     Type
 16318 ;;		None               void
 16319 ;; Registers used:
 16320 ;;		wreg, status,2, status,0
 16321 ;; Tracked objects:
 16322 ;;		On entry : 0/0
 16323 ;;		On exit  : 0/0
 16324 ;;		Unchanged: 0/0
 16325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16326 ;;      Params:         6       0       0       0       0       0       0
 16327 ;;      Locals:         0       0       0       0       0       0       0
 16328 ;;      Temps:          3       0       0       0       0       0       0
 16329 ;;      Totals:         9       0       0       0       0       0       0
 16330 ;;Total ram usage:        9 bytes
 16331 ;; Hardware stack levels used:    1
 16332 ;; Hardware stack levels required when called:    4
 16333 ;; This function calls:
 16334 ;;		Nothing
 16335 ;; This function is called by:
 16336 ;;		_CheckFlashPrecentage
 16337 ;;		_pow
 16338 ;;		_exp
 16339 ;;		_floor
 16340 ;; This function uses a non-reentrant model
 16341 ;;
 16342                           
 16343                           	psect	text92
 16344  003256                     __ptext92:
 16345                           	opt stack 0
 16346  003256                     ___ftge:
 16347                           	opt stack 19
 16348                           
 16349                           ; BSR set to: 0
 16350                           ;incstack = 0
 16351  003256  AE1A               	btfss	___ftge@ff1+2,7,c
 16352  003258  D016               	goto	l1888
 16353  00325A  C018  F01E         	movff	___ftge@ff1,??___ftge
 16354  00325E  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 16355  003262  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 16356  003266  1E1E               	comf	??___ftge,f,c
 16357  003268  1E1F               	comf	??___ftge+1,f,c
 16358  00326A  1E20               	comf	??___ftge+2,f,c
 16359  00326C  2A1E               	incf	??___ftge,f,c
 16360  00326E  0E00               	movlw	0
 16361  003270  221F               	addwfc	??___ftge+1,f,c
 16362  003272  2220               	addwfc	??___ftge+2,f,c
 16363  003274  0E00               	movlw	0
 16364  003276  241E               	addwf	??___ftge,w,c
 16365  003278  6E18               	movwf	___ftge@ff1,c
 16366  00327A  0E00               	movlw	0
 16367  00327C  201F               	addwfc	??___ftge+1,w,c
 16368  00327E  6E19               	movwf	___ftge@ff1+1,c
 16369  003280  0E80               	movlw	128
 16370  003282  2020               	addwfc	??___ftge+2,w,c
 16371  003284  6E1A               	movwf	___ftge@ff1+2,c
 16372  003286                     l1888:
 16373  003286  AE1D               	btfss	___ftge@ff2+2,7,c
 16374  003288  D016               	goto	l1889
 16375  00328A  C01B  F01E         	movff	___ftge@ff2,??___ftge
 16376  00328E  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 16377  003292  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 16378  003296  1E1E               	comf	??___ftge,f,c
 16379  003298  1E1F               	comf	??___ftge+1,f,c
 16380  00329A  1E20               	comf	??___ftge+2,f,c
 16381  00329C  2A1E               	incf	??___ftge,f,c
 16382  00329E  0E00               	movlw	0
 16383  0032A0  221F               	addwfc	??___ftge+1,f,c
 16384  0032A2  2220               	addwfc	??___ftge+2,f,c
 16385  0032A4  0E00               	movlw	0
 16386  0032A6  241E               	addwf	??___ftge,w,c
 16387  0032A8  6E1B               	movwf	___ftge@ff2,c
 16388  0032AA  0E00               	movlw	0
 16389  0032AC  201F               	addwfc	??___ftge+1,w,c
 16390  0032AE  6E1C               	movwf	___ftge@ff2+1,c
 16391  0032B0  0E80               	movlw	128
 16392  0032B2  2020               	addwfc	??___ftge+2,w,c
 16393  0032B4  6E1D               	movwf	___ftge@ff2+2,c
 16394  0032B6                     l1889:
 16395  0032B6  0E00               	movlw	0
 16396  0032B8  1A18               	xorwf	___ftge@ff1,f,c
 16397  0032BA  0E00               	movlw	0
 16398  0032BC  1A19               	xorwf	___ftge@ff1+1,f,c
 16399  0032BE  0E80               	movlw	128
 16400  0032C0  1A1A               	xorwf	___ftge@ff1+2,f,c
 16401  0032C2  0E00               	movlw	0
 16402  0032C4  1A1B               	xorwf	___ftge@ff2,f,c
 16403  0032C6  0E00               	movlw	0
 16404  0032C8  1A1C               	xorwf	___ftge@ff2+1,f,c
 16405  0032CA  0E80               	movlw	128
 16406  0032CC  1A1D               	xorwf	___ftge@ff2+2,f,c
 16407  0032CE  501B               	movf	___ftge@ff2,w,c
 16408  0032D0  5C18               	subwf	___ftge@ff1,w,c
 16409  0032D2  501C               	movf	___ftge@ff2+1,w,c
 16410  0032D4  5819               	subwfb	___ftge@ff1+1,w,c
 16411  0032D6  501D               	movf	___ftge@ff2+2,w,c
 16412  0032D8  581A               	subwfb	___ftge@ff1+2,w,c
 16413  0032DA  B0D8               	btfsc	status,0,c
 16414  0032DC  D002               	goto	l7036
 16415  0032DE  90D8               	bcf	status,0,c
 16416  0032E0  0012               	return	
 16417  0032E2                     l7036:
 16418  0032E2  80D8               	bsf	status,0,c
 16419  0032E4  0012               	return	
 16420  0032E6                     __end_of___ftge:
 16421                           	opt stack 0
 16422                           tosu	equ	0xFFF
 16423                           tosh	equ	0xFFE
 16424                           tosl	equ	0xFFD
 16425                           pclath	equ	0xFFA
 16426                           tblptru	equ	0xFF8
 16427                           tblptrh	equ	0xFF7
 16428                           tblptrl	equ	0xFF6
 16429                           tablat	equ	0xFF5
 16430                           prodh	equ	0xFF4
 16431                           prodl	equ	0xFF3
 16432                           intcon	equ	0xFF2
 16433                           intcon2	equ	0xFF1
 16434                           postinc0	equ	0xFEE
 16435                           plusw0	equ	0xFEB
 16436                           wreg	equ	0xFE8
 16437                           indf1	equ	0xFE7
 16438                           postdec1	equ	0xFE5
 16439                           fsr1h	equ	0xFE2
 16440                           fsr1l	equ	0xFE1
 16441                           indf2	equ	0xFDF
 16442                           postinc2	equ	0xFDE
 16443                           postdec2	equ	0xFDD
 16444                           plusw2	equ	0xFDB
 16445                           fsr2h	equ	0xFDA
 16446                           fsr2l	equ	0xFD9
 16447                           status	equ	0xFD8
 16448                           
 16449 ;; *************** function ___altoft *****************
 16450 ;; Defined at:
 16451 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 16452 ;; Parameters:    Size  Location     Type
 16453 ;;  c               4   39[BANK0 ] long 
 16454 ;; Auto vars:     Size  Location     Type
 16455 ;;  sign            1   47[COMRAM] unsigned char 
 16456 ;;  exp             1   46[COMRAM] unsigned char 
 16457 ;; Return value:  Size  Location     Type
 16458 ;;                  3   39[BANK0 ] float 
 16459 ;; Registers used:
 16460 ;;		wreg, status,2, status,0, cstack
 16461 ;; Tracked objects:
 16462 ;;		On entry : 0/0
 16463 ;;		On exit  : 0/0
 16464 ;;		Unchanged: 0/0
 16465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16466 ;;      Params:         0       4       0       0       0       0       0
 16467 ;;      Locals:         2       0       0       0       0       0       0
 16468 ;;      Temps:          0       4       0       0       0       0       0
 16469 ;;      Totals:         2       8       0       0       0       0       0
 16470 ;;Total ram usage:       10 bytes
 16471 ;; Hardware stack levels used:    1
 16472 ;; Hardware stack levels required when called:    5
 16473 ;; This function calls:
 16474 ;;		___ftpack
 16475 ;; This function is called by:
 16476 ;;		_floor
 16477 ;; This function uses a non-reentrant model
 16478 ;;
 16479                           
 16480                           	psect	text93
 16481  0034EE                     __ptext93:
 16482                           	opt stack 0
 16483  0034EE                     ___altoft:
 16484                           	opt stack 18
 16485                           
 16486                           ;incstack = 0
 16487  0034EE  0E00               	movlw	0
 16488  0034F0  6E30               	movwf	___altoft@sign,c
 16489  0034F2  0E8E               	movlw	142
 16490  0034F4  6E2F               	movwf	___altoft@exp,c
 16491  0034F6  0100               	movlb	0	; () banked
 16492  0034F8  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 16493  0034FA  D011               	goto	l1686
 16494                           
 16495                           ; BSR set to: 0
 16496  0034FC  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 16497  0034FE  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 16498  003500  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 16499  003502  6D87               	negf	___altoft@c& (0+255),b
 16500  003504  0E00               	movlw	0
 16501  003506  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 16502  003508  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 16503  00350A  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 16504                           
 16505                           ; BSR set to: 0
 16506  00350C  0E01               	movlw	1
 16507  00350E  6E30               	movwf	___altoft@sign,c
 16508                           
 16509                           ; BSR set to: 0
 16510  003510  D006               	goto	l1686
 16511  003512                     
 16512                           ; BSR set to: 0
 16513                           
 16514                           ; BSR set to: 0
 16515  003512  90D8               	bcf	status,0,c
 16516  003514  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 16517  003516  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 16518  003518  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 16519  00351A  3387               	rrcf	___altoft@c& (0+255),f,b
 16520  00351C  2A2F               	incf	___altoft@exp,f,c
 16521  00351E                     l1686:
 16522                           
 16523                           ; BSR set to: 0
 16524                           
 16525                           ; BSR set to: 0
 16526  00351E  0E00               	movlw	0
 16527  003520  1587               	andwf	___altoft@c& (0+255),w,b
 16528  003522  6F8B               	movwf	??___altoft& (0+255),b
 16529  003524  0E00               	movlw	0
 16530  003526  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 16531  003528  6F8C               	movwf	(??___altoft+1)& (0+255),b
 16532  00352A  0E00               	movlw	0
 16533  00352C  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 16534  00352E  6F8D               	movwf	(??___altoft+2)& (0+255),b
 16535  003530  0EFF               	movlw	255
 16536  003532  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 16537  003534  6F8E               	movwf	(??___altoft+3)& (0+255),b
 16538  003536  518B               	movf	??___altoft& (0+255),w,b
 16539  003538  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 16540  00353A  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 16541  00353C  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 16542  00353E  A4D8               	btfss	status,2,c
 16543  003540  D7E8               	goto	l1687
 16544                           
 16545                           ; BSR set to: 0
 16546                           
 16547                           ; BSR set to: 0
 16548  003542  C087  F018         	movff	___altoft@c,___ftpack@arg
 16549  003546  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 16550  00354A  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 16551  00354E  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 16552  003552  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 16553  003556  EC92  F017         	call	___ftpack	;wreg free
 16554  00355A  C018  F087         	movff	?___ftpack,?___altoft
 16555  00355E  C019  F088         	movff	?___ftpack+1,?___altoft+1
 16556  003562  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 16557  003566  0012               	return	
 16558  003568                     __end_of___altoft:
 16559                           	opt stack 0
 16560                           tosu	equ	0xFFF
 16561                           tosh	equ	0xFFE
 16562                           tosl	equ	0xFFD
 16563                           pclath	equ	0xFFA
 16564                           tblptru	equ	0xFF8
 16565                           tblptrh	equ	0xFF7
 16566                           tblptrl	equ	0xFF6
 16567                           tablat	equ	0xFF5
 16568                           prodh	equ	0xFF4
 16569                           prodl	equ	0xFF3
 16570                           intcon	equ	0xFF2
 16571                           intcon2	equ	0xFF1
 16572                           postinc0	equ	0xFEE
 16573                           plusw0	equ	0xFEB
 16574                           wreg	equ	0xFE8
 16575                           indf1	equ	0xFE7
 16576                           postdec1	equ	0xFE5
 16577                           fsr1h	equ	0xFE2
 16578                           fsr1l	equ	0xFE1
 16579                           indf2	equ	0xFDF
 16580                           postinc2	equ	0xFDE
 16581                           postdec2	equ	0xFDD
 16582                           plusw2	equ	0xFDB
 16583                           fsr2h	equ	0xFDA
 16584                           fsr2l	equ	0xFD9
 16585                           status	equ	0xFD8
 16586                           
 16587 ;; *************** function _eval_poly *****************
 16588 ;; Defined at:
 16589 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 16590 ;; Parameters:    Size  Location     Type
 16591 ;;  x               3   36[BANK0 ] float 
 16592 ;;  d               2   39[BANK0 ] PTR const 
 16593 ;;		 -> log@coeff(27), exp@coeff(30), 
 16594 ;;  n               2   41[BANK0 ] int 
 16595 ;; Auto vars:     Size  Location     Type
 16596 ;;  res             3   43[BANK0 ] int 
 16597 ;; Return value:  Size  Location     Type
 16598 ;;                  3   36[BANK0 ] int 
 16599 ;; Registers used:
 16600 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16601 ;; Tracked objects:
 16602 ;;		On entry : 0/0
 16603 ;;		On exit  : 0/0
 16604 ;;		Unchanged: 0/0
 16605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16606 ;;      Params:         0       7       0       0       0       0       0
 16607 ;;      Locals:         0       3       0       0       0       0       0
 16608 ;;      Temps:          2       0       0       0       0       0       0
 16609 ;;      Totals:         2      10       0       0       0       0       0
 16610 ;;Total ram usage:       12 bytes
 16611 ;; Hardware stack levels used:    1
 16612 ;; Hardware stack levels required when called:    6
 16613 ;; This function calls:
 16614 ;;		___ftadd
 16615 ;;		___ftmul
 16616 ;;		___wmul
 16617 ;; This function is called by:
 16618 ;;		_exp
 16619 ;;		_log
 16620 ;; This function uses a non-reentrant model
 16621 ;;
 16622                           
 16623                           	psect	text94
 16624  002B50                     __ptext94:
 16625                           	opt stack 0
 16626  002B50                     _eval_poly:
 16627                           	opt stack 18
 16628                           
 16629                           ;incstack = 0
 16630  002B50  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16631  002B54  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16632  002B58  0E00               	movlw	0
 16633  002B5A  6E1B               	movwf	___wmul@multiplicand+1,c
 16634  002B5C  0E03               	movlw	3
 16635  002B5E  6E1A               	movwf	___wmul@multiplicand,c
 16636  002B60  ECBF  F020         	call	___wmul	;wreg free
 16637  002B64  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16638  002B68  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16639  002B6C  5018               	movf	?___wmul,w,c
 16640  002B6E  262F               	addwf	??_eval_poly,f,c
 16641  002B70  5019               	movf	?___wmul+1,w,c
 16642  002B72  2230               	addwfc	??_eval_poly+1,f,c
 16643  002B74  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16644  002B78  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16645  002B7C                     	if	0	;tblptru may be non-zero
 16646  002B7C                     	endif
 16647  002B7C                     	if	0	;tblptru may be non-zero
 16648  002B7C                     	endif
 16649  002B7C  0009               	tblrd		*+
 16650  002B7E  CFF5 F08B          	movff	tablat,eval_poly@res
 16651  002B82  0009               	tblrd		*+
 16652  002B84  CFF5 F08C          	movff	tablat,eval_poly@res+1
 16653  002B88  000A               	tblrd		*-
 16654  002B8A  CFF5 F08D          	movff	tablat,eval_poly@res+2
 16655  002B8E  D03F               	goto	l2311
 16656  002B90  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 16657  002B94  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 16658  002B98  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 16659  002B9C  C084  F069         	movff	eval_poly@x,___ftmul@f1
 16660  002BA0  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 16661  002BA4  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 16662  002BA8  EC87  F012         	call	___ftmul	;wreg free
 16663  002BAC  C069  F078         	movff	?___ftmul,___ftadd@f1
 16664  002BB0  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 16665  002BB4  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 16666  002BB8  0E00               	movlw	0
 16667  002BBA  6E1B               	movwf	___wmul@multiplicand+1,c
 16668  002BBC  0E03               	movlw	3
 16669  002BBE  6E1A               	movwf	___wmul@multiplicand,c
 16670  002BC0  0100               	movlb	0	; () banked
 16671  002BC2  0789               	decf	eval_poly@n& (0+255),f,b
 16672  002BC4  A0D8               	btfss	status,0,c
 16673  002BC6  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 16674  002BC8  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16675  002BCC  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16676  002BD0  ECBF  F020         	call	___wmul	;wreg free
 16677  002BD4  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16678  002BD8  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16679  002BDC  5018               	movf	?___wmul,w,c
 16680  002BDE  262F               	addwf	??_eval_poly,f,c
 16681  002BE0  5019               	movf	?___wmul+1,w,c
 16682  002BE2  2230               	addwfc	??_eval_poly+1,f,c
 16683  002BE4  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16684  002BE8  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16685  002BEC                     	if	0	;tblptru may be non-zero
 16686  002BEC                     	endif
 16687  002BEC                     	if	0	;tblptru may be non-zero
 16688  002BEC                     	endif
 16689  002BEC  0009               	tblrd		*+
 16690  002BEE  CFF5 F07B          	movff	tablat,___ftadd@f2
 16691  002BF2  0009               	tblrd		*+
 16692  002BF4  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 16693  002BF8  000A               	tblrd		*-
 16694  002BFA  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 16695  002BFE  ECBF  F00C         	call	___ftadd	;wreg free
 16696  002C02  C078  F08B         	movff	?___ftadd,eval_poly@res
 16697  002C06  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 16698  002C0A  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 16699  002C0E                     l2311:
 16700  002C0E  0100               	movlb	0	; () banked
 16701  002C10  5189               	movf	eval_poly@n& (0+255),w,b
 16702  002C12  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 16703  002C14  A4D8               	btfss	status,2,c
 16704  002C16  D7BC               	goto	l2312
 16705                           
 16706                           ; BSR set to: 0
 16707  002C18  C08B  F084         	movff	eval_poly@res,?_eval_poly
 16708  002C1C  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 16709  002C20  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 16710                           
 16711                           ; BSR set to: 0
 16712  002C24  0012               	return		;funcret
 16713  002C26                     __end_of_eval_poly:
 16714                           	opt stack 0
 16715                           tosu	equ	0xFFF
 16716                           tosh	equ	0xFFE
 16717                           tosl	equ	0xFFD
 16718                           pclath	equ	0xFFA
 16719                           tblptru	equ	0xFF8
 16720                           tblptrh	equ	0xFF7
 16721                           tblptrl	equ	0xFF6
 16722                           tablat	equ	0xFF5
 16723                           prodh	equ	0xFF4
 16724                           prodl	equ	0xFF3
 16725                           intcon	equ	0xFF2
 16726                           intcon2	equ	0xFF1
 16727                           postinc0	equ	0xFEE
 16728                           plusw0	equ	0xFEB
 16729                           wreg	equ	0xFE8
 16730                           indf1	equ	0xFE7
 16731                           postdec1	equ	0xFE5
 16732                           fsr1h	equ	0xFE2
 16733                           fsr1l	equ	0xFE1
 16734                           indf2	equ	0xFDF
 16735                           postinc2	equ	0xFDE
 16736                           postdec2	equ	0xFDD
 16737                           plusw2	equ	0xFDB
 16738                           fsr2h	equ	0xFDA
 16739                           fsr2l	equ	0xFD9
 16740                           status	equ	0xFD8
 16741                           
 16742 ;; *************** function ___wmul *****************
 16743 ;; Defined at:
 16744 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16745 ;; Parameters:    Size  Location     Type
 16746 ;;  multiplier      2   23[COMRAM] unsigned int 
 16747 ;;  multiplicand    2   25[COMRAM] unsigned int 
 16748 ;; Auto vars:     Size  Location     Type
 16749 ;;  product         2   27[COMRAM] unsigned int 
 16750 ;; Return value:  Size  Location     Type
 16751 ;;                  2   23[COMRAM] unsigned int 
 16752 ;; Registers used:
 16753 ;;		wreg, status,2, status,0, prodl, prodh
 16754 ;; Tracked objects:
 16755 ;;		On entry : 0/0
 16756 ;;		On exit  : 0/0
 16757 ;;		Unchanged: 0/0
 16758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16759 ;;      Params:         4       0       0       0       0       0       0
 16760 ;;      Locals:         2       0       0       0       0       0       0
 16761 ;;      Temps:          0       0       0       0       0       0       0
 16762 ;;      Totals:         6       0       0       0       0       0       0
 16763 ;;Total ram usage:        6 bytes
 16764 ;; Hardware stack levels used:    1
 16765 ;; Hardware stack levels required when called:    4
 16766 ;; This function calls:
 16767 ;;		Nothing
 16768 ;; This function is called by:
 16769 ;;		_GetMcuFwVersion
 16770 ;;		_eval_poly
 16771 ;; This function uses a non-reentrant model
 16772 ;;
 16773                           
 16774                           	psect	text95
 16775  00417E                     __ptext95:
 16776                           	opt stack 0
 16777  00417E                     ___wmul:
 16778                           	opt stack 19
 16779                           
 16780                           ; BSR set to: 0
 16781                           ;incstack = 0
 16782  00417E  5018               	movf	___wmul@multiplier,w,c
 16783  004180  021A               	mulwf	___wmul@multiplicand,c
 16784  004182  CFF3 F01C          	movff	prodl,___wmul@product
 16785  004186  CFF4 F01D          	movff	prodh,___wmul@product+1
 16786  00418A  5018               	movf	___wmul@multiplier,w,c
 16787  00418C  021B               	mulwf	___wmul@multiplicand+1,c
 16788  00418E  50F3               	movf	prodl,w,c
 16789  004190  261D               	addwf	___wmul@product+1,f,c
 16790  004192  5019               	movf	___wmul@multiplier+1,w,c
 16791  004194  021A               	mulwf	___wmul@multiplicand,c
 16792  004196  50F3               	movf	prodl,w,c
 16793  004198  261D               	addwf	___wmul@product+1,f,c
 16794  00419A  C01C  F018         	movff	___wmul@product,?___wmul
 16795  00419E  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 16796  0041A2  0012               	return	
 16797  0041A4                     __end_of___wmul:
 16798                           	opt stack 0
 16799                           tosu	equ	0xFFF
 16800                           tosh	equ	0xFFE
 16801                           tosl	equ	0xFFD
 16802                           pclath	equ	0xFFA
 16803                           tblptru	equ	0xFF8
 16804                           tblptrh	equ	0xFF7
 16805                           tblptrl	equ	0xFF6
 16806                           tablat	equ	0xFF5
 16807                           prodh	equ	0xFF4
 16808                           prodl	equ	0xFF3
 16809                           intcon	equ	0xFF2
 16810                           intcon2	equ	0xFF1
 16811                           postinc0	equ	0xFEE
 16812                           plusw0	equ	0xFEB
 16813                           wreg	equ	0xFE8
 16814                           indf1	equ	0xFE7
 16815                           postdec1	equ	0xFE5
 16816                           fsr1h	equ	0xFE2
 16817                           fsr1l	equ	0xFE1
 16818                           indf2	equ	0xFDF
 16819                           postinc2	equ	0xFDE
 16820                           postdec2	equ	0xFDD
 16821                           plusw2	equ	0xFDB
 16822                           fsr2h	equ	0xFDA
 16823                           fsr2l	equ	0xFD9
 16824                           status	equ	0xFD8
 16825                           
 16826 ;; *************** function ___ftmul *****************
 16827 ;; Defined at:
 16828 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 16829 ;; Parameters:    Size  Location     Type
 16830 ;;  f1              3    9[BANK0 ] float 
 16831 ;;  f2              3   12[BANK0 ] float 
 16832 ;; Auto vars:     Size  Location     Type
 16833 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 16834 ;;  sign            1   23[BANK0 ] unsigned char 
 16835 ;;  cntr            1   22[BANK0 ] unsigned char 
 16836 ;;  exp             1   18[BANK0 ] unsigned char 
 16837 ;; Return value:  Size  Location     Type
 16838 ;;                  3    9[BANK0 ] float 
 16839 ;; Registers used:
 16840 ;;		wreg, status,2, status,0, cstack
 16841 ;; Tracked objects:
 16842 ;;		On entry : 0/0
 16843 ;;		On exit  : 0/0
 16844 ;;		Unchanged: 0/0
 16845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16846 ;;      Params:         0       6       0       0       0       0       0
 16847 ;;      Locals:         0       6       0       0       0       0       0
 16848 ;;      Temps:          0       3       0       0       0       0       0
 16849 ;;      Totals:         0      15       0       0       0       0       0
 16850 ;;Total ram usage:       15 bytes
 16851 ;; Hardware stack levels used:    1
 16852 ;; Hardware stack levels required when called:    5
 16853 ;; This function calls:
 16854 ;;		___ftpack
 16855 ;; This function is called by:
 16856 ;;		_AdcConvert
 16857 ;;		_CheckFlashPrecentage
 16858 ;;		_pow
 16859 ;;		_exp
 16860 ;;		_log
 16861 ;;		_eval_poly
 16862 ;; This function uses a non-reentrant model
 16863 ;;
 16864                           
 16865                           	psect	text96
 16866  00250E                     __ptext96:
 16867                           	opt stack 0
 16868  00250E                     ___ftmul:
 16869                           	opt stack 18
 16870                           
 16871                           ;incstack = 0
 16872  00250E  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 16873  002512  0100               	movlb	0	; () banked
 16874  002514  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16875  002516  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16876  002518  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 16877  00251A  376F               	rlcf	??___ftmul& (0+255),f,b
 16878  00251C  E301               	bnc	u6741
 16879  00251E  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16880  002520                     u6741:
 16881  002520  516F               	movf	??___ftmul& (0+255),w,b
 16882  002522  6F72               	movwf	___ftmul@exp& (0+255),b
 16883  002524  5172               	movf	___ftmul@exp& (0+255),w,b
 16884  002526  A4D8               	btfss	status,2,c
 16885  002528  D007               	goto	l1895
 16886                           
 16887                           ; BSR set to: 0
 16888  00252A  0E00               	movlw	0
 16889  00252C  6F69               	movwf	?___ftmul& (0+255),b
 16890  00252E  0E00               	movlw	0
 16891  002530  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16892  002532  0E00               	movlw	0
 16893  002534  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16894                           
 16895                           ; BSR set to: 0
 16896  002536  0012               	return	
 16897  002538                     l1895:
 16898                           
 16899                           ; BSR set to: 0
 16900                           
 16901                           ; BSR set to: 0
 16902  002538  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 16903  00253C  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16904  00253E  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16905  002540  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 16906  002542  376F               	rlcf	??___ftmul& (0+255),f,b
 16907  002544  E301               	bnc	u6761
 16908  002546  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16909  002548                     u6761:
 16910  002548  516F               	movf	??___ftmul& (0+255),w,b
 16911  00254A  6F77               	movwf	___ftmul@sign& (0+255),b
 16912  00254C  5177               	movf	___ftmul@sign& (0+255),w,b
 16913  00254E  A4D8               	btfss	status,2,c
 16914  002550  D007               	goto	l1897
 16915                           
 16916                           ; BSR set to: 0
 16917  002552  0E00               	movlw	0
 16918  002554  6F69               	movwf	?___ftmul& (0+255),b
 16919  002556  0E00               	movlw	0
 16920  002558  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16921  00255A  0E00               	movlw	0
 16922  00255C  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16923                           
 16924                           ; BSR set to: 0
 16925  00255E  0012               	return	
 16926  002560                     l1897:
 16927                           
 16928                           ; BSR set to: 0
 16929                           
 16930                           ; BSR set to: 0
 16931  002560  5177               	movf	___ftmul@sign& (0+255),w,b
 16932  002562  0F7B               	addlw	123
 16933  002564  2772               	addwf	___ftmul@exp& (0+255),f,b
 16934                           
 16935                           ; BSR set to: 0
 16936  002566  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 16937  00256A  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16938  00256C  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 16939  00256E  0E80               	movlw	128
 16940  002570  1777               	andwf	___ftmul@sign& (0+255),f,b
 16941                           
 16942                           ; BSR set to: 0
 16943  002572  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 16944                           
 16945                           ; BSR set to: 0
 16946  002574  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 16947                           
 16948                           ; BSR set to: 0
 16949  002576  0EFF               	movlw	255
 16950  002578  176C               	andwf	___ftmul@f2& (0+255),f,b
 16951  00257A  0EFF               	movlw	255
 16952  00257C  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 16953  00257E  0E00               	movlw	0
 16954  002580  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 16955                           
 16956                           ; BSR set to: 0
 16957  002582  0E00               	movlw	0
 16958  002584  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 16959  002586  0E00               	movlw	0
 16960  002588  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 16961  00258A  0E00               	movlw	0
 16962  00258C  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 16963                           
 16964                           ; BSR set to: 0
 16965  00258E  0E07               	movlw	7
 16966  002590  6F76               	movwf	___ftmul@cntr& (0+255),b
 16967  002592                     
 16968                           ; BSR set to: 0
 16969                           
 16970                           ; BSR set to: 0
 16971  002592  A169               	btfss	___ftmul@f1& (0+255),0,b
 16972  002594  D006               	goto	l1899
 16973                           
 16974                           ; BSR set to: 0
 16975  002596  516C               	movf	___ftmul@f2& (0+255),w,b
 16976  002598  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 16977  00259A  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 16978  00259C  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 16979  00259E  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16980  0025A0  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 16981  0025A2                     l1899:
 16982                           
 16983                           ; BSR set to: 0
 16984                           
 16985                           ; BSR set to: 0
 16986  0025A2  90D8               	bcf	status,0,c
 16987  0025A4  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 16988  0025A6  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 16989  0025A8  3369               	rrcf	___ftmul@f1& (0+255),f,b
 16990  0025AA  90D8               	bcf	status,0,c
 16991  0025AC  376C               	rlcf	___ftmul@f2& (0+255),f,b
 16992  0025AE  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 16993  0025B0  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 16994                           
 16995                           ; BSR set to: 0
 16996  0025B2  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 16997  0025B4  D7EE               	goto	l1898
 16998                           
 16999                           ; BSR set to: 0
 17000                           
 17001                           ; BSR set to: 0
 17002  0025B6  0E09               	movlw	9
 17003  0025B8  6F76               	movwf	___ftmul@cntr& (0+255),b
 17004  0025BA                     
 17005                           ; BSR set to: 0
 17006                           
 17007                           ; BSR set to: 0
 17008  0025BA  A169               	btfss	___ftmul@f1& (0+255),0,b
 17009  0025BC  D006               	goto	l1902
 17010                           
 17011                           ; BSR set to: 0
 17012  0025BE  516C               	movf	___ftmul@f2& (0+255),w,b
 17013  0025C0  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 17014  0025C2  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 17015  0025C4  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 17016  0025C6  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 17017  0025C8  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 17018  0025CA                     l1902:
 17019                           
 17020                           ; BSR set to: 0
 17021                           
 17022                           ; BSR set to: 0
 17023  0025CA  90D8               	bcf	status,0,c
 17024  0025CC  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 17025  0025CE  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 17026  0025D0  3369               	rrcf	___ftmul@f1& (0+255),f,b
 17027  0025D2  90D8               	bcf	status,0,c
 17028  0025D4  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 17029  0025D6  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 17030  0025D8  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 17031                           
 17032                           ; BSR set to: 0
 17033  0025DA  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 17034  0025DC  D7EE               	goto	l1901
 17035                           
 17036                           ; BSR set to: 0
 17037                           
 17038                           ; BSR set to: 0
 17039  0025DE  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 17040  0025E2  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 17041  0025E6  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 17042  0025EA  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 17043  0025EE  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 17044  0025F2  EC92  F017         	call	___ftpack	;wreg free
 17045  0025F6  C018  F069         	movff	?___ftpack,?___ftmul
 17046  0025FA  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 17047  0025FE  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 17048  002602  0012               	return	
 17049  002604                     __end_of___ftmul:
 17050                           	opt stack 0
 17051                           tosu	equ	0xFFF
 17052                           tosh	equ	0xFFE
 17053                           tosl	equ	0xFFD
 17054                           pclath	equ	0xFFA
 17055                           tblptru	equ	0xFF8
 17056                           tblptrh	equ	0xFF7
 17057                           tblptrl	equ	0xFF6
 17058                           tablat	equ	0xFF5
 17059                           prodh	equ	0xFF4
 17060                           prodl	equ	0xFF3
 17061                           intcon	equ	0xFF2
 17062                           intcon2	equ	0xFF1
 17063                           postinc0	equ	0xFEE
 17064                           plusw0	equ	0xFEB
 17065                           wreg	equ	0xFE8
 17066                           indf1	equ	0xFE7
 17067                           postdec1	equ	0xFE5
 17068                           fsr1h	equ	0xFE2
 17069                           fsr1l	equ	0xFE1
 17070                           indf2	equ	0xFDF
 17071                           postinc2	equ	0xFDE
 17072                           postdec2	equ	0xFDD
 17073                           plusw2	equ	0xFDB
 17074                           fsr2h	equ	0xFDA
 17075                           fsr2l	equ	0xFD9
 17076                           status	equ	0xFD8
 17077                           
 17078 ;; *************** function ___ftsub *****************
 17079 ;; Defined at:
 17080 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 17081 ;; Parameters:    Size  Location     Type
 17082 ;;  f1              3   36[BANK0 ] float 
 17083 ;;  f2              3   39[BANK0 ] float 
 17084 ;; Auto vars:     Size  Location     Type
 17085 ;;		None
 17086 ;; Return value:  Size  Location     Type
 17087 ;;                  3   36[BANK0 ] float 
 17088 ;; Registers used:
 17089 ;;		wreg, status,2, status,0, cstack
 17090 ;; Tracked objects:
 17091 ;;		On entry : 0/0
 17092 ;;		On exit  : 0/0
 17093 ;;		Unchanged: 0/0
 17094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17095 ;;      Params:         0       6       0       0       0       0       0
 17096 ;;      Locals:         0       0       0       0       0       0       0
 17097 ;;      Temps:          0       0       0       0       0       0       0
 17098 ;;      Totals:         0       6       0       0       0       0       0
 17099 ;;Total ram usage:        6 bytes
 17100 ;; Hardware stack levels used:    1
 17101 ;; Hardware stack levels required when called:    6
 17102 ;; This function calls:
 17103 ;;		___ftadd
 17104 ;; This function is called by:
 17105 ;;		_exp
 17106 ;; This function uses a non-reentrant model
 17107 ;;
 17108                           
 17109                           	psect	text97
 17110  003C88                     __ptext97:
 17111                           	opt stack 0
 17112  003C88                     ___ftsub:
 17113                           	opt stack 18
 17114                           
 17115                           ;incstack = 0
 17116  003C88  0100               	movlb	0	; () banked
 17117  003C8A  5187               	movf	___ftsub@f2& (0+255),w,b
 17118  003C8C  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 17119  003C8E  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 17120  003C90  B4D8               	btfsc	status,2,c
 17121  003C92  D006               	goto	l1912
 17122                           
 17123                           ; BSR set to: 0
 17124  003C94  0E00               	movlw	0
 17125  003C96  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 17126  003C98  0E00               	movlw	0
 17127  003C9A  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 17128  003C9C  0E80               	movlw	128
 17129  003C9E  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 17130  003CA0                     l1912:
 17131                           
 17132                           ; BSR set to: 0
 17133                           
 17134                           ; BSR set to: 0
 17135  003CA0  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 17136  003CA4  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 17137  003CA8  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 17138  003CAC  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 17139  003CB0  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 17140  003CB4  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 17141  003CB8  ECBF  F00C         	call	___ftadd	;wreg free
 17142  003CBC  C078  F084         	movff	?___ftadd,?___ftsub
 17143  003CC0  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 17144  003CC4  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 17145  003CC8  0012               	return	
 17146  003CCA                     __end_of___ftsub:
 17147                           	opt stack 0
 17148                           tosu	equ	0xFFF
 17149                           tosh	equ	0xFFE
 17150                           tosl	equ	0xFFD
 17151                           pclath	equ	0xFFA
 17152                           tblptru	equ	0xFF8
 17153                           tblptrh	equ	0xFF7
 17154                           tblptrl	equ	0xFF6
 17155                           tablat	equ	0xFF5
 17156                           prodh	equ	0xFF4
 17157                           prodl	equ	0xFF3
 17158                           intcon	equ	0xFF2
 17159                           intcon2	equ	0xFF1
 17160                           postinc0	equ	0xFEE
 17161                           plusw0	equ	0xFEB
 17162                           wreg	equ	0xFE8
 17163                           indf1	equ	0xFE7
 17164                           postdec1	equ	0xFE5
 17165                           fsr1h	equ	0xFE2
 17166                           fsr1l	equ	0xFE1
 17167                           indf2	equ	0xFDF
 17168                           postinc2	equ	0xFDE
 17169                           postdec2	equ	0xFDD
 17170                           plusw2	equ	0xFDB
 17171                           fsr2h	equ	0xFDA
 17172                           fsr2l	equ	0xFD9
 17173                           status	equ	0xFD8
 17174                           
 17175 ;; *************** function ___ftadd *****************
 17176 ;; Defined at:
 17177 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 17178 ;; Parameters:    Size  Location     Type
 17179 ;;  f1              3   24[BANK0 ] float 
 17180 ;;  f2              3   27[BANK0 ] float 
 17181 ;; Auto vars:     Size  Location     Type
 17182 ;;  exp1            1   35[BANK0 ] unsigned char 
 17183 ;;  exp2            1   34[BANK0 ] unsigned char 
 17184 ;;  sign            1   33[BANK0 ] unsigned char 
 17185 ;; Return value:  Size  Location     Type
 17186 ;;                  3   24[BANK0 ] float 
 17187 ;; Registers used:
 17188 ;;		wreg, status,2, status,0, cstack
 17189 ;; Tracked objects:
 17190 ;;		On entry : 0/0
 17191 ;;		On exit  : 0/0
 17192 ;;		Unchanged: 0/0
 17193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17194 ;;      Params:         0       6       0       0       0       0       0
 17195 ;;      Locals:         0       3       0       0       0       0       0
 17196 ;;      Temps:          0       3       0       0       0       0       0
 17197 ;;      Totals:         0      12       0       0       0       0       0
 17198 ;;Total ram usage:       12 bytes
 17199 ;; Hardware stack levels used:    1
 17200 ;; Hardware stack levels required when called:    5
 17201 ;; This function calls:
 17202 ;;		___ftpack
 17203 ;; This function is called by:
 17204 ;;		___ftsub
 17205 ;;		_floor
 17206 ;;		_log
 17207 ;;		_eval_poly
 17208 ;; This function uses a non-reentrant model
 17209 ;;
 17210                           
 17211                           	psect	text98
 17212  00197E                     __ptext98:
 17213                           	opt stack 0
 17214  00197E                     ___ftadd:
 17215                           	opt stack 18
 17216                           
 17217                           ;incstack = 0
 17218  00197E  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 17219  001982  0100               	movlb	0	; () banked
 17220  001984  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17221  001986  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17222  001988  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 17223  00198A  377E               	rlcf	??___ftadd& (0+255),f,b
 17224  00198C  E301               	bnc	u6531
 17225  00198E  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17226  001990                     u6531:
 17227  001990  517E               	movf	??___ftadd& (0+255),w,b
 17228  001992  6F83               	movwf	___ftadd@exp1& (0+255),b
 17229  001994  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 17230  001998  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17231  00199A  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17232  00199C  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 17233  00199E  377E               	rlcf	??___ftadd& (0+255),f,b
 17234  0019A0  E301               	bnc	u6541
 17235  0019A2  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17236  0019A4                     u6541:
 17237  0019A4  517E               	movf	??___ftadd& (0+255),w,b
 17238  0019A6  6F82               	movwf	___ftadd@exp2& (0+255),b
 17239                           
 17240                           ; BSR set to: 0
 17241  0019A8  5183               	movf	___ftadd@exp1& (0+255),w,b
 17242  0019AA  B4D8               	btfsc	status,2,c
 17243  0019AC  D00B               	goto	u6570
 17244                           
 17245                           ; BSR set to: 0
 17246  0019AE  5182               	movf	___ftadd@exp2& (0+255),w,b
 17247  0019B0  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17248  0019B2  B0D8               	btfsc	status,0,c
 17249  0019B4  D00E               	goto	l1847
 17250                           
 17251                           ; BSR set to: 0
 17252  0019B6  5183               	movf	___ftadd@exp1& (0+255),w,b
 17253  0019B8  0800               	sublw	0
 17254  0019BA  2582               	addwf	___ftadd@exp2& (0+255),w,b
 17255  0019BC  6F7E               	movwf	??___ftadd& (0+255),b
 17256  0019BE  0E18               	movlw	24
 17257  0019C0  657E               	cpfsgt	??___ftadd& (0+255),b
 17258  0019C2  D007               	goto	l1847
 17259  0019C4                     u6570:
 17260                           
 17261                           ; BSR set to: 0
 17262  0019C4  C07B  F078         	movff	___ftadd@f2,?___ftadd
 17263  0019C8  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 17264  0019CC  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 17265  0019D0  0012               	return	
 17266  0019D2                     l1847:
 17267                           
 17268                           ; BSR set to: 0
 17269                           
 17270                           ; BSR set to: 0
 17271  0019D2  5182               	movf	___ftadd@exp2& (0+255),w,b
 17272  0019D4  B4D8               	btfsc	status,2,c
 17273  0019D6  D00B               	goto	u6600
 17274                           
 17275                           ; BSR set to: 0
 17276  0019D8  5183               	movf	___ftadd@exp1& (0+255),w,b
 17277  0019DA  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17278  0019DC  B0D8               	btfsc	status,0,c
 17279  0019DE  D00E               	goto	l1851
 17280                           
 17281                           ; BSR set to: 0
 17282  0019E0  5182               	movf	___ftadd@exp2& (0+255),w,b
 17283  0019E2  0800               	sublw	0
 17284  0019E4  2583               	addwf	___ftadd@exp1& (0+255),w,b
 17285  0019E6  6F7E               	movwf	??___ftadd& (0+255),b
 17286  0019E8  0E18               	movlw	24
 17287  0019EA  657E               	cpfsgt	??___ftadd& (0+255),b
 17288  0019EC  D007               	goto	l1851
 17289  0019EE                     u6600:
 17290                           
 17291                           ; BSR set to: 0
 17292  0019EE  C078  F078         	movff	___ftadd@f1,?___ftadd
 17293  0019F2  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 17294  0019F6  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 17295  0019FA  0012               	return	
 17296  0019FC                     l1851:
 17297                           
 17298                           ; BSR set to: 0
 17299                           
 17300                           ; BSR set to: 0
 17301  0019FC  0E06               	movlw	6
 17302  0019FE  6F81               	movwf	___ftadd@sign& (0+255),b
 17303                           
 17304                           ; BSR set to: 0
 17305  001A00  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 17306                           
 17307                           ; BSR set to: 0
 17308  001A02  8F81               	bsf	___ftadd@sign& (0+255),7,b
 17309                           
 17310                           ; BSR set to: 0
 17311                           
 17312                           ; BSR set to: 0
 17313  001A04  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 17314                           
 17315                           ; BSR set to: 0
 17316  001A06  8D81               	bsf	___ftadd@sign& (0+255),6,b
 17317                           
 17318                           ; BSR set to: 0
 17319  001A08  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 17320                           
 17321                           ; BSR set to: 0
 17322  001A0A  0EFF               	movlw	255
 17323  001A0C  1778               	andwf	___ftadd@f1& (0+255),f,b
 17324  001A0E  0EFF               	movlw	255
 17325  001A10  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 17326  001A12  0E00               	movlw	0
 17327  001A14  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 17328  001A16  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 17329                           
 17330                           ; BSR set to: 0
 17331  001A18  0EFF               	movlw	255
 17332  001A1A  177B               	andwf	___ftadd@f2& (0+255),f,b
 17333  001A1C  0EFF               	movlw	255
 17334  001A1E  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 17335  001A20  0E00               	movlw	0
 17336  001A22  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 17337                           
 17338                           ; BSR set to: 0
 17339  001A24  5182               	movf	___ftadd@exp2& (0+255),w,b
 17340  001A26  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17341  001A28  B0D8               	btfsc	status,0,c
 17342  001A2A  D01B               	goto	l1856
 17343  001A2C                     u6630:
 17344                           
 17345                           ; BSR set to: 0
 17346                           
 17347                           ; BSR set to: 0
 17348  001A2C  90D8               	bcf	status,0,c
 17349  001A2E  377B               	rlcf	___ftadd@f2& (0+255),f,b
 17350  001A30  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 17351  001A32  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 17352  001A34  0782               	decf	___ftadd@exp2& (0+255),f,b
 17353                           
 17354                           ; BSR set to: 0
 17355  001A36  5183               	movf	___ftadd@exp1& (0+255),w,b
 17356  001A38  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17357  001A3A  B4D8               	btfsc	status,2,c
 17358  001A3C  D00D               	goto	l1861
 17359                           
 17360                           ; BSR set to: 0
 17361  001A3E  0781               	decf	___ftadd@sign& (0+255),f,b
 17362  001A40  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17363  001A44  0E07               	movlw	7
 17364  001A46  177E               	andwf	??___ftadd& (0+255),f,b
 17365  001A48  B4D8               	btfsc	status,2,c
 17366  001A4A  D006               	goto	l1861
 17367  001A4C  D7EF               	goto	u6630
 17368  001A4E                     
 17369                           ; BSR set to: 0
 17370                           
 17371                           ; BSR set to: 0
 17372  001A4E  90D8               	bcf	status,0,c
 17373  001A50  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 17374  001A52  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 17375  001A54  3378               	rrcf	___ftadd@f1& (0+255),f,b
 17376  001A56  2B83               	incf	___ftadd@exp1& (0+255),f,b
 17377  001A58                     l1861:
 17378                           
 17379                           ; BSR set to: 0
 17380                           
 17381                           ; BSR set to: 0
 17382  001A58  5182               	movf	___ftadd@exp2& (0+255),w,b
 17383  001A5A  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17384  001A5C  B4D8               	btfsc	status,2,c
 17385  001A5E  D01F               	goto	u6700
 17386  001A60  D7F6               	goto	l1862
 17387  001A62                     l1856:
 17388                           
 17389                           ; BSR set to: 0
 17390                           
 17391                           ; BSR set to: 0
 17392  001A62  5183               	movf	___ftadd@exp1& (0+255),w,b
 17393  001A64  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17394  001A66  B0D8               	btfsc	status,0,c
 17395  001A68  D01A               	goto	u6700
 17396  001A6A                     u6670:
 17397                           
 17398                           ; BSR set to: 0
 17399                           
 17400                           ; BSR set to: 0
 17401  001A6A  90D8               	bcf	status,0,c
 17402  001A6C  3778               	rlcf	___ftadd@f1& (0+255),f,b
 17403  001A6E  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 17404  001A70  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 17405  001A72  0783               	decf	___ftadd@exp1& (0+255),f,b
 17406                           
 17407                           ; BSR set to: 0
 17408  001A74  5183               	movf	___ftadd@exp1& (0+255),w,b
 17409  001A76  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17410  001A78  B4D8               	btfsc	status,2,c
 17411  001A7A  D00D               	goto	l1870
 17412                           
 17413                           ; BSR set to: 0
 17414  001A7C  0781               	decf	___ftadd@sign& (0+255),f,b
 17415  001A7E  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17416  001A82  0E07               	movlw	7
 17417  001A84  177E               	andwf	??___ftadd& (0+255),f,b
 17418  001A86  B4D8               	btfsc	status,2,c
 17419  001A88  D006               	goto	l1870
 17420  001A8A  D7EF               	goto	u6670
 17421  001A8C                     
 17422                           ; BSR set to: 0
 17423                           
 17424                           ; BSR set to: 0
 17425  001A8C  90D8               	bcf	status,0,c
 17426  001A8E  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 17427  001A90  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 17428  001A92  337B               	rrcf	___ftadd@f2& (0+255),f,b
 17429  001A94  2B82               	incf	___ftadd@exp2& (0+255),f,b
 17430  001A96                     l1870:
 17431                           
 17432                           ; BSR set to: 0
 17433                           
 17434                           ; BSR set to: 0
 17435  001A96  5182               	movf	___ftadd@exp2& (0+255),w,b
 17436  001A98  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17437  001A9A  A4D8               	btfss	status,2,c
 17438  001A9C  D7F7               	goto	l1871
 17439  001A9E                     u6700:
 17440                           
 17441                           ; BSR set to: 0
 17442                           
 17443                           ; BSR set to: 0
 17444                           
 17445                           ; BSR set to: 0
 17446  001A9E  AF81               	btfss	___ftadd@sign& (0+255),7,b
 17447  001AA0  D00C               	goto	l1873
 17448                           
 17449                           ; BSR set to: 0
 17450  001AA2  0EFF               	movlw	255
 17451  001AA4  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 17452  001AA6  0EFF               	movlw	255
 17453  001AA8  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 17454  001AAA  0EFF               	movlw	255
 17455  001AAC  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 17456  001AAE  0E01               	movlw	1
 17457  001AB0  2778               	addwf	___ftadd@f1& (0+255),f,b
 17458  001AB2  0E00               	movlw	0
 17459  001AB4  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 17460  001AB6  0E00               	movlw	0
 17461  001AB8  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 17462  001ABA                     l1873:
 17463                           
 17464                           ; BSR set to: 0
 17465  001ABA  AD81               	btfss	___ftadd@sign& (0+255),6,b
 17466  001ABC  D00C               	goto	l1874
 17467                           
 17468                           ; BSR set to: 0
 17469  001ABE  0EFF               	movlw	255
 17470  001AC0  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17471  001AC2  0EFF               	movlw	255
 17472  001AC4  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17473  001AC6  0EFF               	movlw	255
 17474  001AC8  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17475  001ACA  0E01               	movlw	1
 17476  001ACC  277B               	addwf	___ftadd@f2& (0+255),f,b
 17477  001ACE  0E00               	movlw	0
 17478  001AD0  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17479  001AD2  0E00               	movlw	0
 17480  001AD4  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17481  001AD6                     l1874:
 17482                           
 17483                           ; BSR set to: 0
 17484                           
 17485                           ; BSR set to: 0
 17486  001AD6  0E00               	movlw	0
 17487  001AD8  6F81               	movwf	___ftadd@sign& (0+255),b
 17488                           
 17489                           ; BSR set to: 0
 17490  001ADA  5178               	movf	___ftadd@f1& (0+255),w,b
 17491  001ADC  277B               	addwf	___ftadd@f2& (0+255),f,b
 17492  001ADE  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 17493  001AE0  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17494  001AE2  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 17495  001AE4  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17496                           
 17497                           ; BSR set to: 0
 17498  001AE6  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 17499  001AE8  D00E               	goto	l1875
 17500                           
 17501                           ; BSR set to: 0
 17502  001AEA  0EFF               	movlw	255
 17503  001AEC  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17504  001AEE  0EFF               	movlw	255
 17505  001AF0  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17506  001AF2  0EFF               	movlw	255
 17507  001AF4  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17508  001AF6  0E01               	movlw	1
 17509  001AF8  277B               	addwf	___ftadd@f2& (0+255),f,b
 17510  001AFA  0E00               	movlw	0
 17511  001AFC  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17512  001AFE  0E00               	movlw	0
 17513  001B00  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17514                           
 17515                           ; BSR set to: 0
 17516  001B02  0E01               	movlw	1
 17517  001B04  6F81               	movwf	___ftadd@sign& (0+255),b
 17518  001B06                     l1875:
 17519                           
 17520                           ; BSR set to: 0
 17521                           
 17522                           ; BSR set to: 0
 17523  001B06  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 17524  001B0A  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 17525  001B0E  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 17526  001B12  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 17527  001B16  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 17528  001B1A  EC92  F017         	call	___ftpack	;wreg free
 17529  001B1E  C018  F078         	movff	?___ftpack,?___ftadd
 17530  001B22  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 17531  001B26  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 17532  001B2A  0012               	return	
 17533  001B2C                     __end_of___ftadd:
 17534                           	opt stack 0
 17535                           tosu	equ	0xFFF
 17536                           tosh	equ	0xFFE
 17537                           tosl	equ	0xFFD
 17538                           pclath	equ	0xFFA
 17539                           tblptru	equ	0xFF8
 17540                           tblptrh	equ	0xFF7
 17541                           tblptrl	equ	0xFF6
 17542                           tablat	equ	0xFF5
 17543                           prodh	equ	0xFF4
 17544                           prodl	equ	0xFF3
 17545                           intcon	equ	0xFF2
 17546                           intcon2	equ	0xFF1
 17547                           postinc0	equ	0xFEE
 17548                           plusw0	equ	0xFEB
 17549                           wreg	equ	0xFE8
 17550                           indf1	equ	0xFE7
 17551                           postdec1	equ	0xFE5
 17552                           fsr1h	equ	0xFE2
 17553                           fsr1l	equ	0xFE1
 17554                           indf2	equ	0xFDF
 17555                           postinc2	equ	0xFDE
 17556                           postdec2	equ	0xFDD
 17557                           plusw2	equ	0xFDB
 17558                           fsr2h	equ	0xFDA
 17559                           fsr2l	equ	0xFD9
 17560                           status	equ	0xFD8
 17561                           
 17562 ;; *************** function ___ftneg *****************
 17563 ;; Defined at:
 17564 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 17565 ;; Parameters:    Size  Location     Type
 17566 ;;  f1              3   23[COMRAM] float 
 17567 ;; Auto vars:     Size  Location     Type
 17568 ;;		None
 17569 ;; Return value:  Size  Location     Type
 17570 ;;                  3   23[COMRAM] float 
 17571 ;; Registers used:
 17572 ;;		wreg, status,2, status,0
 17573 ;; Tracked objects:
 17574 ;;		On entry : 0/0
 17575 ;;		On exit  : 0/0
 17576 ;;		Unchanged: 0/0
 17577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17578 ;;      Params:         3       0       0       0       0       0       0
 17579 ;;      Locals:         0       0       0       0       0       0       0
 17580 ;;      Temps:          0       0       0       0       0       0       0
 17581 ;;      Totals:         3       0       0       0       0       0       0
 17582 ;;Total ram usage:        3 bytes
 17583 ;; Hardware stack levels used:    1
 17584 ;; Hardware stack levels required when called:    4
 17585 ;; This function calls:
 17586 ;;		Nothing
 17587 ;; This function is called by:
 17588 ;;		_pow
 17589 ;;		_exp
 17590 ;; This function uses a non-reentrant model
 17591 ;;
 17592                           
 17593                           	psect	text99
 17594  0041C8                     __ptext99:
 17595                           	opt stack 0
 17596  0041C8                     ___ftneg:
 17597                           	opt stack 20
 17598                           
 17599                           ;incstack = 0
 17600  0041C8  5018               	movf	___ftneg@f1,w,c
 17601  0041CA  1019               	iorwf	___ftneg@f1+1,w,c
 17602  0041CC  101A               	iorwf	___ftneg@f1+2,w,c
 17603  0041CE  B4D8               	btfsc	status,2,c
 17604  0041D0  D006               	goto	l1906
 17605  0041D2  0E00               	movlw	0
 17606  0041D4  1A18               	xorwf	___ftneg@f1,f,c
 17607  0041D6  0E00               	movlw	0
 17608  0041D8  1A19               	xorwf	___ftneg@f1+1,f,c
 17609  0041DA  0E80               	movlw	128
 17610  0041DC  1A1A               	xorwf	___ftneg@f1+2,f,c
 17611  0041DE                     l1906:
 17612  0041DE  C018  F018         	movff	___ftneg@f1,?___ftneg
 17613  0041E2  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 17614  0041E6  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 17615  0041EA  0012               	return		;funcret
 17616  0041EC                     __end_of___ftneg:
 17617                           	opt stack 0
 17618                           tosu	equ	0xFFF
 17619                           tosh	equ	0xFFE
 17620                           tosl	equ	0xFFD
 17621                           pclath	equ	0xFFA
 17622                           tblptru	equ	0xFF8
 17623                           tblptrh	equ	0xFF7
 17624                           tblptrl	equ	0xFF6
 17625                           tablat	equ	0xFF5
 17626                           prodh	equ	0xFF4
 17627                           prodl	equ	0xFF3
 17628                           intcon	equ	0xFF2
 17629                           intcon2	equ	0xFF1
 17630                           postinc0	equ	0xFEE
 17631                           plusw0	equ	0xFEB
 17632                           wreg	equ	0xFE8
 17633                           indf1	equ	0xFE7
 17634                           postdec1	equ	0xFE5
 17635                           fsr1h	equ	0xFE2
 17636                           fsr1l	equ	0xFE1
 17637                           indf2	equ	0xFDF
 17638                           postinc2	equ	0xFDE
 17639                           postdec2	equ	0xFDD
 17640                           plusw2	equ	0xFDB
 17641                           fsr2h	equ	0xFDA
 17642                           fsr2l	equ	0xFD9
 17643                           status	equ	0xFD8
 17644                           
 17645 ;; *************** function ___ftdiv *****************
 17646 ;; Defined at:
 17647 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 17648 ;; Parameters:    Size  Location     Type
 17649 ;;  f1              3   40[COMRAM] float 
 17650 ;;  f2              3   43[COMRAM] float 
 17651 ;; Auto vars:     Size  Location     Type
 17652 ;;  f3              3    4[BANK0 ] float 
 17653 ;;  sign            1    8[BANK0 ] unsigned char 
 17654 ;;  exp             1    7[BANK0 ] unsigned char 
 17655 ;;  cntr            1    3[BANK0 ] unsigned char 
 17656 ;; Return value:  Size  Location     Type
 17657 ;;                  3   40[COMRAM] float 
 17658 ;; Registers used:
 17659 ;;		wreg, status,2, status,0, cstack
 17660 ;; Tracked objects:
 17661 ;;		On entry : 0/0
 17662 ;;		On exit  : 0/0
 17663 ;;		Unchanged: 0/0
 17664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17665 ;;      Params:         6       0       0       0       0       0       0
 17666 ;;      Locals:         0       6       0       0       0       0       0
 17667 ;;      Temps:          0       3       0       0       0       0       0
 17668 ;;      Totals:         6       9       0       0       0       0       0
 17669 ;;Total ram usage:       15 bytes
 17670 ;; Hardware stack levels used:    1
 17671 ;; Hardware stack levels required when called:    5
 17672 ;; This function calls:
 17673 ;;		___ftpack
 17674 ;; This function is called by:
 17675 ;;		_AdcConvert
 17676 ;;		_CheckFlashPrecentage
 17677 ;;		_exp
 17678 ;; This function uses a non-reentrant model
 17679 ;;
 17680                           
 17681                           	psect	text100
 17682  002604                     __ptext100:
 17683                           	opt stack 0
 17684  002604                     ___ftdiv:
 17685                           	opt stack 19
 17686                           
 17687                           ;incstack = 0
 17688  002604  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 17689  002608  0100               	movlb	0	; () banked
 17690  00260A  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17691  00260C  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17692  00260E  342A               	rlcf	___ftdiv@f1+1,w,c
 17693  002610  3760               	rlcf	??___ftdiv& (0+255),f,b
 17694  002612  E301               	bnc	u6941
 17695  002614  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17696  002616                     u6941:
 17697  002616  5160               	movf	??___ftdiv& (0+255),w,b
 17698  002618  6F67               	movwf	___ftdiv@exp& (0+255),b
 17699  00261A  5167               	movf	___ftdiv@exp& (0+255),w,b
 17700  00261C  A4D8               	btfss	status,2,c
 17701  00261E  D007               	goto	l1880
 17702                           
 17703                           ; BSR set to: 0
 17704  002620  0E00               	movlw	0
 17705  002622  6E29               	movwf	?___ftdiv,c
 17706  002624  0E00               	movlw	0
 17707  002626  6E2A               	movwf	?___ftdiv+1,c
 17708  002628  0E00               	movlw	0
 17709  00262A  6E2B               	movwf	?___ftdiv+2,c
 17710                           
 17711                           ; BSR set to: 0
 17712  00262C  0012               	return	
 17713  00262E                     l1880:
 17714                           
 17715                           ; BSR set to: 0
 17716                           
 17717                           ; BSR set to: 0
 17718  00262E  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 17719  002632  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17720  002634  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17721  002636  342D               	rlcf	___ftdiv@f2+1,w,c
 17722  002638  3760               	rlcf	??___ftdiv& (0+255),f,b
 17723  00263A  E301               	bnc	u6961
 17724  00263C  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17725  00263E                     u6961:
 17726  00263E  5160               	movf	??___ftdiv& (0+255),w,b
 17727  002640  6F68               	movwf	___ftdiv@sign& (0+255),b
 17728  002642  5168               	movf	___ftdiv@sign& (0+255),w,b
 17729  002644  A4D8               	btfss	status,2,c
 17730  002646  D007               	goto	l1882
 17731                           
 17732                           ; BSR set to: 0
 17733  002648  0E00               	movlw	0
 17734  00264A  6E29               	movwf	?___ftdiv,c
 17735  00264C  0E00               	movlw	0
 17736  00264E  6E2A               	movwf	?___ftdiv+1,c
 17737  002650  0E00               	movlw	0
 17738  002652  6E2B               	movwf	?___ftdiv+2,c
 17739                           
 17740                           ; BSR set to: 0
 17741  002654  0012               	return	
 17742  002656                     l1882:
 17743                           
 17744                           ; BSR set to: 0
 17745                           
 17746                           ; BSR set to: 0
 17747  002656  0E00               	movlw	0
 17748  002658  6F64               	movwf	___ftdiv@f3& (0+255),b
 17749  00265A  0E00               	movlw	0
 17750  00265C  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 17751  00265E  0E00               	movlw	0
 17752  002660  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 17753                           
 17754                           ; BSR set to: 0
 17755  002662  5168               	movf	___ftdiv@sign& (0+255),w,b
 17756  002664  0F89               	addlw	137
 17757  002666  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 17758                           
 17759                           ; BSR set to: 0
 17760  002668  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 17761                           
 17762                           ; BSR set to: 0
 17763  00266C  502E               	movf	___ftdiv@f2+2,w,c
 17764  00266E  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 17765                           
 17766                           ; BSR set to: 0
 17767  002670  0E80               	movlw	128
 17768  002672  1768               	andwf	___ftdiv@sign& (0+255),f,b
 17769                           
 17770                           ; BSR set to: 0
 17771  002674  8E2A               	bsf	___ftdiv@f1+1,7,c
 17772                           
 17773                           ; BSR set to: 0
 17774  002676  0EFF               	movlw	255
 17775  002678  1629               	andwf	___ftdiv@f1,f,c
 17776  00267A  0EFF               	movlw	255
 17777  00267C  162A               	andwf	___ftdiv@f1+1,f,c
 17778  00267E  0E00               	movlw	0
 17779  002680  162B               	andwf	___ftdiv@f1+2,f,c
 17780                           
 17781                           ; BSR set to: 0
 17782  002682  8E2D               	bsf	___ftdiv@f2+1,7,c
 17783                           
 17784                           ; BSR set to: 0
 17785  002684  0EFF               	movlw	255
 17786  002686  162C               	andwf	___ftdiv@f2,f,c
 17787  002688  0EFF               	movlw	255
 17788  00268A  162D               	andwf	___ftdiv@f2+1,f,c
 17789  00268C  0E00               	movlw	0
 17790  00268E  162E               	andwf	___ftdiv@f2+2,f,c
 17791                           
 17792                           ; BSR set to: 0
 17793  002690  0E18               	movlw	24
 17794  002692  6F63               	movwf	___ftdiv@cntr& (0+255),b
 17795  002694                     
 17796                           ; BSR set to: 0
 17797                           
 17798                           ; BSR set to: 0
 17799  002694  90D8               	bcf	status,0,c
 17800  002696  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 17801  002698  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 17802  00269A  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 17803                           
 17804                           ; BSR set to: 0
 17805  00269C  502C               	movf	___ftdiv@f2,w,c
 17806  00269E  5C29               	subwf	___ftdiv@f1,w,c
 17807  0026A0  502D               	movf	___ftdiv@f2+1,w,c
 17808  0026A2  582A               	subwfb	___ftdiv@f1+1,w,c
 17809  0026A4  502E               	movf	___ftdiv@f2+2,w,c
 17810  0026A6  582B               	subwfb	___ftdiv@f1+2,w,c
 17811  0026A8  A0D8               	btfss	status,0,c
 17812  0026AA  D007               	goto	l1884
 17813                           
 17814                           ; BSR set to: 0
 17815  0026AC  502C               	movf	___ftdiv@f2,w,c
 17816  0026AE  5E29               	subwf	___ftdiv@f1,f,c
 17817  0026B0  502D               	movf	___ftdiv@f2+1,w,c
 17818  0026B2  5A2A               	subwfb	___ftdiv@f1+1,f,c
 17819  0026B4  502E               	movf	___ftdiv@f2+2,w,c
 17820  0026B6  5A2B               	subwfb	___ftdiv@f1+2,f,c
 17821                           
 17822                           ; BSR set to: 0
 17823  0026B8  8164               	bsf	___ftdiv@f3& (0+255),0,b
 17824  0026BA                     l1884:
 17825                           
 17826                           ; BSR set to: 0
 17827  0026BA  90D8               	bcf	status,0,c
 17828  0026BC  3629               	rlcf	___ftdiv@f1,f,c
 17829  0026BE  362A               	rlcf	___ftdiv@f1+1,f,c
 17830  0026C0  362B               	rlcf	___ftdiv@f1+2,f,c
 17831                           
 17832                           ; BSR set to: 0
 17833  0026C2  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 17834  0026C4  D7E7               	goto	l1883
 17835                           
 17836                           ; BSR set to: 0
 17837                           
 17838                           ; BSR set to: 0
 17839  0026C6  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 17840  0026CA  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 17841  0026CE  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 17842  0026D2  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 17843  0026D6  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 17844  0026DA  EC92  F017         	call	___ftpack	;wreg free
 17845  0026DE  C018  F029         	movff	?___ftpack,?___ftdiv
 17846  0026E2  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 17847  0026E6  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 17848  0026EA  0012               	return	
 17849  0026EC                     __end_of___ftdiv:
 17850                           	opt stack 0
 17851                           tosu	equ	0xFFF
 17852                           tosh	equ	0xFFE
 17853                           tosl	equ	0xFFD
 17854                           pclath	equ	0xFFA
 17855                           tblptru	equ	0xFF8
 17856                           tblptrh	equ	0xFF7
 17857                           tblptrl	equ	0xFF6
 17858                           tablat	equ	0xFF5
 17859                           prodh	equ	0xFF4
 17860                           prodl	equ	0xFF3
 17861                           intcon	equ	0xFF2
 17862                           intcon2	equ	0xFF1
 17863                           postinc0	equ	0xFEE
 17864                           plusw0	equ	0xFEB
 17865                           wreg	equ	0xFE8
 17866                           indf1	equ	0xFE7
 17867                           postdec1	equ	0xFE5
 17868                           fsr1h	equ	0xFE2
 17869                           fsr1l	equ	0xFE1
 17870                           indf2	equ	0xFDF
 17871                           postinc2	equ	0xFDE
 17872                           postdec2	equ	0xFDD
 17873                           plusw2	equ	0xFDB
 17874                           fsr2h	equ	0xFDA
 17875                           fsr2l	equ	0xFD9
 17876                           status	equ	0xFD8
 17877                           
 17878 ;; *************** function ___awtoft *****************
 17879 ;; Defined at:
 17880 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 17881 ;; Parameters:    Size  Location     Type
 17882 ;;  c               2   31[COMRAM] int 
 17883 ;; Auto vars:     Size  Location     Type
 17884 ;;  sign            1   34[COMRAM] unsigned char 
 17885 ;; Return value:  Size  Location     Type
 17886 ;;                  3   31[COMRAM] float 
 17887 ;; Registers used:
 17888 ;;		wreg, status,2, status,0, cstack
 17889 ;; Tracked objects:
 17890 ;;		On entry : 0/0
 17891 ;;		On exit  : 0/0
 17892 ;;		Unchanged: 0/0
 17893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17894 ;;      Params:         3       0       0       0       0       0       0
 17895 ;;      Locals:         1       0       0       0       0       0       0
 17896 ;;      Temps:          0       0       0       0       0       0       0
 17897 ;;      Totals:         4       0       0       0       0       0       0
 17898 ;;Total ram usage:        4 bytes
 17899 ;; Hardware stack levels used:    1
 17900 ;; Hardware stack levels required when called:    5
 17901 ;; This function calls:
 17902 ;;		___ftpack
 17903 ;; This function is called by:
 17904 ;;		_ReadIntFromEeprom
 17905 ;;		_exp
 17906 ;;		_log
 17907 ;; This function uses a non-reentrant model
 17908 ;;
 17909                           
 17910                           	psect	text101
 17911  003EA6                     __ptext101:
 17912                           	opt stack 0
 17913  003EA6                     ___awtoft:
 17914                           	opt stack 19
 17915                           
 17916                           ;incstack = 0
 17917  003EA6  0E00               	movlw	0
 17918  003EA8  6E23               	movwf	___awtoft@sign,c
 17919  003EAA  AE21               	btfss	___awtoft@c+1,7,c
 17920  003EAC  D006               	goto	l1797
 17921  003EAE  6C20               	negf	___awtoft@c,c
 17922  003EB0  1E21               	comf	___awtoft@c+1,f,c
 17923  003EB2  B0D8               	btfsc	status,0,c
 17924  003EB4  2A21               	incf	___awtoft@c+1,f,c
 17925  003EB6  0E01               	movlw	1
 17926  003EB8  6E23               	movwf	___awtoft@sign,c
 17927  003EBA                     l1797:
 17928  003EBA  C020  F018         	movff	___awtoft@c,___ftpack@arg
 17929  003EBE  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 17930  003EC2  6A1A               	clrf	___ftpack@arg+2,c
 17931  003EC4  0E8E               	movlw	142
 17932  003EC6  6E1B               	movwf	___ftpack@exp,c
 17933  003EC8  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 17934  003ECC  EC92  F017         	call	___ftpack	;wreg free
 17935  003ED0  C018  F020         	movff	?___ftpack,?___awtoft
 17936  003ED4  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 17937  003ED8  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 17938  003EDC  0012               	return	
 17939  003EDE                     __end_of___awtoft:
 17940                           	opt stack 0
 17941                           tosu	equ	0xFFF
 17942                           tosh	equ	0xFFE
 17943                           tosl	equ	0xFFD
 17944                           pclath	equ	0xFFA
 17945                           tblptru	equ	0xFF8
 17946                           tblptrh	equ	0xFF7
 17947                           tblptrl	equ	0xFF6
 17948                           tablat	equ	0xFF5
 17949                           prodh	equ	0xFF4
 17950                           prodl	equ	0xFF3
 17951                           intcon	equ	0xFF2
 17952                           intcon2	equ	0xFF1
 17953                           postinc0	equ	0xFEE
 17954                           plusw0	equ	0xFEB
 17955                           wreg	equ	0xFE8
 17956                           indf1	equ	0xFE7
 17957                           postdec1	equ	0xFE5
 17958                           fsr1h	equ	0xFE2
 17959                           fsr1l	equ	0xFE1
 17960                           indf2	equ	0xFDF
 17961                           postinc2	equ	0xFDE
 17962                           postdec2	equ	0xFDD
 17963                           plusw2	equ	0xFDB
 17964                           fsr2h	equ	0xFDA
 17965                           fsr2l	equ	0xFD9
 17966                           status	equ	0xFD8
 17967                           
 17968 ;; *************** function ___lltoft *****************
 17969 ;; Defined at:
 17970 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 17971 ;; Parameters:    Size  Location     Type
 17972 ;;  c               4   31[COMRAM] unsigned long 
 17973 ;; Auto vars:     Size  Location     Type
 17974 ;;  exp             1   39[COMRAM] unsigned char 
 17975 ;; Return value:  Size  Location     Type
 17976 ;;                  3   31[COMRAM] float 
 17977 ;; Registers used:
 17978 ;;		wreg, status,2, status,0, cstack
 17979 ;; Tracked objects:
 17980 ;;		On entry : 0/0
 17981 ;;		On exit  : 0/0
 17982 ;;		Unchanged: 0/0
 17983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17984 ;;      Params:         4       0       0       0       0       0       0
 17985 ;;      Locals:         1       0       0       0       0       0       0
 17986 ;;      Temps:          4       0       0       0       0       0       0
 17987 ;;      Totals:         9       0       0       0       0       0       0
 17988 ;;Total ram usage:        9 bytes
 17989 ;; Hardware stack levels used:    1
 17990 ;; Hardware stack levels required when called:    5
 17991 ;; This function calls:
 17992 ;;		___ftpack
 17993 ;; This function is called by:
 17994 ;;		_CheckFlashPrecentage
 17995 ;;		_pow
 17996 ;; This function uses a non-reentrant model
 17997 ;;
 17998                           
 17999                           	psect	text102
 18000  003900                     __ptext102:
 18001                           	opt stack 0
 18002  003900                     ___lltoft:
 18003                           	opt stack 20
 18004                           
 18005                           ;incstack = 0
 18006  003900  0E8E               	movlw	142
 18007  003902  6E28               	movwf	___lltoft@exp,c
 18008  003904  D006               	goto	l1973
 18009  003906  90D8               	bcf	status,0,c
 18010  003908  3223               	rrcf	___lltoft@c+3,f,c
 18011  00390A  3222               	rrcf	___lltoft@c+2,f,c
 18012  00390C  3221               	rrcf	___lltoft@c+1,f,c
 18013  00390E  3220               	rrcf	___lltoft@c,f,c
 18014  003910  2A28               	incf	___lltoft@exp,f,c
 18015  003912                     l1973:
 18016  003912  0E00               	movlw	0
 18017  003914  1420               	andwf	___lltoft@c,w,c
 18018  003916  6E24               	movwf	??___lltoft& (0+255),c
 18019  003918  0E00               	movlw	0
 18020  00391A  1421               	andwf	___lltoft@c+1,w,c
 18021  00391C  6E25               	movwf	(??___lltoft+1)& (0+255),c
 18022  00391E  0E00               	movlw	0
 18023  003920  1422               	andwf	___lltoft@c+2,w,c
 18024  003922  6E26               	movwf	(??___lltoft+2)& (0+255),c
 18025  003924  0EFF               	movlw	255
 18026  003926  1423               	andwf	___lltoft@c+3,w,c
 18027  003928  6E27               	movwf	(??___lltoft+3)& (0+255),c
 18028  00392A  5024               	movf	??___lltoft,w,c
 18029  00392C  1025               	iorwf	??___lltoft+1,w,c
 18030  00392E  1026               	iorwf	??___lltoft+2,w,c
 18031  003930  1027               	iorwf	??___lltoft+3,w,c
 18032  003932  A4D8               	btfss	status,2,c
 18033  003934  D7E8               	goto	l1974
 18034  003936  C020  F018         	movff	___lltoft@c,___ftpack@arg
 18035  00393A  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 18036  00393E  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 18037  003942  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 18038  003946  0E00               	movlw	0
 18039  003948  6E1C               	movwf	___ftpack@sign,c
 18040  00394A  EC92  F017         	call	___ftpack	;wreg free
 18041  00394E  C018  F020         	movff	?___ftpack,?___lltoft
 18042  003952  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 18043  003956  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 18044  00395A  0012               	return	
 18045  00395C                     __end_of___lltoft:
 18046                           	opt stack 0
 18047                           tosu	equ	0xFFF
 18048                           tosh	equ	0xFFE
 18049                           tosl	equ	0xFFD
 18050                           pclath	equ	0xFFA
 18051                           tblptru	equ	0xFF8
 18052                           tblptrh	equ	0xFF7
 18053                           tblptrl	equ	0xFF6
 18054                           tablat	equ	0xFF5
 18055                           prodh	equ	0xFF4
 18056                           prodl	equ	0xFF3
 18057                           intcon	equ	0xFF2
 18058                           intcon2	equ	0xFF1
 18059                           postinc0	equ	0xFEE
 18060                           plusw0	equ	0xFEB
 18061                           wreg	equ	0xFE8
 18062                           indf1	equ	0xFE7
 18063                           postdec1	equ	0xFE5
 18064                           fsr1h	equ	0xFE2
 18065                           fsr1l	equ	0xFE1
 18066                           indf2	equ	0xFDF
 18067                           postinc2	equ	0xFDE
 18068                           postdec2	equ	0xFDD
 18069                           plusw2	equ	0xFDB
 18070                           fsr2h	equ	0xFDA
 18071                           fsr2l	equ	0xFD9
 18072                           status	equ	0xFD8
 18073                           
 18074 ;; *************** function ___lwtoft *****************
 18075 ;; Defined at:
 18076 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 18077 ;; Parameters:    Size  Location     Type
 18078 ;;  c               2   31[COMRAM] unsigned int 
 18079 ;; Auto vars:     Size  Location     Type
 18080 ;;		None
 18081 ;; Return value:  Size  Location     Type
 18082 ;;                  3   31[COMRAM] float 
 18083 ;; Registers used:
 18084 ;;		wreg, status,2, status,0, cstack
 18085 ;; Tracked objects:
 18086 ;;		On entry : 0/0
 18087 ;;		On exit  : 0/0
 18088 ;;		Unchanged: 0/0
 18089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18090 ;;      Params:         3       0       0       0       0       0       0
 18091 ;;      Locals:         0       0       0       0       0       0       0
 18092 ;;      Temps:          0       0       0       0       0       0       0
 18093 ;;      Totals:         3       0       0       0       0       0       0
 18094 ;;Total ram usage:        3 bytes
 18095 ;; Hardware stack levels used:    1
 18096 ;; Hardware stack levels required when called:    5
 18097 ;; This function calls:
 18098 ;;		___ftpack
 18099 ;; This function is called by:
 18100 ;;		_AdcConvert
 18101 ;; This function uses a non-reentrant model
 18102 ;;
 18103                           
 18104                           	psect	text103
 18105  0041EC                     __ptext103:
 18106                           	opt stack 0
 18107  0041EC                     ___lwtoft:
 18108                           	opt stack 24
 18109                           
 18110                           ;incstack = 0
 18111  0041EC  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 18112  0041F0  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 18113  0041F4  6A1A               	clrf	___ftpack@arg+2,c
 18114  0041F6  0E8E               	movlw	142
 18115  0041F8  6E1B               	movwf	___ftpack@exp,c
 18116  0041FA  0E00               	movlw	0
 18117  0041FC  6E1C               	movwf	___ftpack@sign,c
 18118  0041FE  EC92  F017         	call	___ftpack	;wreg free
 18119  004202  C018  F020         	movff	?___ftpack,?___lwtoft
 18120  004206  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 18121  00420A  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 18122  00420E  0012               	return	
 18123  004210                     __end_of___lwtoft:
 18124                           	opt stack 0
 18125                           tosu	equ	0xFFF
 18126                           tosh	equ	0xFFE
 18127                           tosl	equ	0xFFD
 18128                           pclath	equ	0xFFA
 18129                           tblptru	equ	0xFF8
 18130                           tblptrh	equ	0xFF7
 18131                           tblptrl	equ	0xFF6
 18132                           tablat	equ	0xFF5
 18133                           prodh	equ	0xFF4
 18134                           prodl	equ	0xFF3
 18135                           intcon	equ	0xFF2
 18136                           intcon2	equ	0xFF1
 18137                           postinc0	equ	0xFEE
 18138                           plusw0	equ	0xFEB
 18139                           wreg	equ	0xFE8
 18140                           indf1	equ	0xFE7
 18141                           postdec1	equ	0xFE5
 18142                           fsr1h	equ	0xFE2
 18143                           fsr1l	equ	0xFE1
 18144                           indf2	equ	0xFDF
 18145                           postinc2	equ	0xFDE
 18146                           postdec2	equ	0xFDD
 18147                           plusw2	equ	0xFDB
 18148                           fsr2h	equ	0xFDA
 18149                           fsr2l	equ	0xFD9
 18150                           status	equ	0xFD8
 18151                           
 18152 ;; *************** function ___ftpack *****************
 18153 ;; Defined at:
 18154 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 18155 ;; Parameters:    Size  Location     Type
 18156 ;;  arg             3   23[COMRAM] unsigned um
 18157 ;;  exp             1   26[COMRAM] unsigned char 
 18158 ;;  sign            1   27[COMRAM] unsigned char 
 18159 ;; Auto vars:     Size  Location     Type
 18160 ;;		None
 18161 ;; Return value:  Size  Location     Type
 18162 ;;                  3   23[COMRAM] float 
 18163 ;; Registers used:
 18164 ;;		wreg, status,2, status,0
 18165 ;; Tracked objects:
 18166 ;;		On entry : 0/0
 18167 ;;		On exit  : 0/0
 18168 ;;		Unchanged: 0/0
 18169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18170 ;;      Params:         5       0       0       0       0       0       0
 18171 ;;      Locals:         0       0       0       0       0       0       0
 18172 ;;      Temps:          3       0       0       0       0       0       0
 18173 ;;      Totals:         8       0       0       0       0       0       0
 18174 ;;Total ram usage:        8 bytes
 18175 ;; Hardware stack levels used:    1
 18176 ;; Hardware stack levels required when called:    4
 18177 ;; This function calls:
 18178 ;;		Nothing
 18179 ;; This function is called by:
 18180 ;;		___altoft
 18181 ;;		___awtoft
 18182 ;;		___ftadd
 18183 ;;		___ftdiv
 18184 ;;		___ftmul
 18185 ;;		___lltoft
 18186 ;;		___lwtoft
 18187 ;; This function uses a non-reentrant model
 18188 ;;
 18189                           
 18190                           	psect	text104
 18191  002F24                     __ptext104:
 18192                           	opt stack 0
 18193  002F24                     ___ftpack:
 18194                           	opt stack 18
 18195                           
 18196                           ;incstack = 0
 18197  002F24  501B               	movf	___ftpack@exp,w,c
 18198  002F26  B4D8               	btfsc	status,2,c
 18199  002F28  D005               	goto	u6440
 18200  002F2A  5018               	movf	___ftpack@arg,w,c
 18201  002F2C  1019               	iorwf	___ftpack@arg+1,w,c
 18202  002F2E  101A               	iorwf	___ftpack@arg+2,w,c
 18203  002F30  A4D8               	btfss	status,2,c
 18204  002F32  D00C               	goto	l1816
 18205  002F34                     u6440:
 18206  002F34  0E00               	movlw	0
 18207  002F36  6E18               	movwf	?___ftpack,c
 18208  002F38  0E00               	movlw	0
 18209  002F3A  6E19               	movwf	?___ftpack+1,c
 18210  002F3C  0E00               	movlw	0
 18211  002F3E  6E1A               	movwf	?___ftpack+2,c
 18212  002F40  0012               	return	
 18213  002F42  2A1B               	incf	___ftpack@exp,f,c
 18214  002F44  90D8               	bcf	status,0,c
 18215  002F46  321A               	rrcf	___ftpack@arg+2,f,c
 18216  002F48  3219               	rrcf	___ftpack@arg+1,f,c
 18217  002F4A  3218               	rrcf	___ftpack@arg,f,c
 18218  002F4C                     l1816:
 18219  002F4C  0E00               	movlw	0
 18220  002F4E  1418               	andwf	___ftpack@arg,w,c
 18221  002F50  6E1D               	movwf	??___ftpack& (0+255),c
 18222  002F52  0E00               	movlw	0
 18223  002F54  1419               	andwf	___ftpack@arg+1,w,c
 18224  002F56  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18225  002F58  0EFE               	movlw	254
 18226  002F5A  141A               	andwf	___ftpack@arg+2,w,c
 18227  002F5C  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18228  002F5E  501D               	movf	??___ftpack,w,c
 18229  002F60  101E               	iorwf	??___ftpack+1,w,c
 18230  002F62  101F               	iorwf	??___ftpack+2,w,c
 18231  002F64  B4D8               	btfsc	status,2,c
 18232  002F66  D00C               	goto	l1819
 18233  002F68  D7EC               	goto	l1817
 18234  002F6A  2A1B               	incf	___ftpack@exp,f,c
 18235  002F6C  0E01               	movlw	1
 18236  002F6E  2618               	addwf	___ftpack@arg,f,c
 18237  002F70  0E00               	movlw	0
 18238  002F72  2219               	addwfc	___ftpack@arg+1,f,c
 18239  002F74  0E00               	movlw	0
 18240  002F76  221A               	addwfc	___ftpack@arg+2,f,c
 18241  002F78  90D8               	bcf	status,0,c
 18242  002F7A  321A               	rrcf	___ftpack@arg+2,f,c
 18243  002F7C  3219               	rrcf	___ftpack@arg+1,f,c
 18244  002F7E  3218               	rrcf	___ftpack@arg,f,c
 18245  002F80                     l1819:
 18246  002F80  0E00               	movlw	0
 18247  002F82  1418               	andwf	___ftpack@arg,w,c
 18248  002F84  6E1D               	movwf	??___ftpack& (0+255),c
 18249  002F86  0E00               	movlw	0
 18250  002F88  1419               	andwf	___ftpack@arg+1,w,c
 18251  002F8A  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18252  002F8C  0EFF               	movlw	255
 18253  002F8E  141A               	andwf	___ftpack@arg+2,w,c
 18254  002F90  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18255  002F92  501D               	movf	??___ftpack,w,c
 18256  002F94  101E               	iorwf	??___ftpack+1,w,c
 18257  002F96  101F               	iorwf	??___ftpack+2,w,c
 18258  002F98  B4D8               	btfsc	status,2,c
 18259  002F9A  D006               	goto	l1822
 18260  002F9C  D7E6               	goto	l1820
 18261  002F9E  061B               	decf	___ftpack@exp,f,c
 18262  002FA0  90D8               	bcf	status,0,c
 18263  002FA2  3618               	rlcf	___ftpack@arg,f,c
 18264  002FA4  3619               	rlcf	___ftpack@arg+1,f,c
 18265  002FA6  361A               	rlcf	___ftpack@arg+2,f,c
 18266  002FA8                     l1822:
 18267  002FA8  BE19               	btfsc	___ftpack@arg+1,7,c
 18268  002FAA  D003               	goto	u6480
 18269  002FAC  0E02               	movlw	2
 18270  002FAE  601B               	cpfslt	___ftpack@exp,c
 18271  002FB0  D7F6               	goto	l1823
 18272  002FB2                     u6480:
 18273  002FB2  A01B               	btfss	___ftpack@exp,0,c
 18274  002FB4  9E19               	bcf	___ftpack@arg+1,7,c
 18275  002FB6  90D8               	bcf	status,0,c
 18276  002FB8  321B               	rrcf	___ftpack@exp,f,c
 18277  002FBA  501B               	movf	___ftpack@exp,w,c
 18278  002FBC  121A               	iorwf	___ftpack@arg+2,f,c
 18279  002FBE  501C               	movf	___ftpack@sign,w,c
 18280  002FC0  A4D8               	btfss	status,2,c
 18281  002FC2  8E1A               	bsf	___ftpack@arg+2,7,c
 18282  002FC4  C018  F018         	movff	___ftpack@arg,?___ftpack
 18283  002FC8  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 18284  002FCC  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 18285  002FD0  0012               	return	
 18286  002FD2                     __end_of___ftpack:
 18287                           	opt stack 0
 18288                           tosu	equ	0xFFF
 18289                           tosh	equ	0xFFE
 18290                           tosl	equ	0xFFD
 18291                           pclath	equ	0xFFA
 18292                           tblptru	equ	0xFF8
 18293                           tblptrh	equ	0xFF7
 18294                           tblptrl	equ	0xFF6
 18295                           tablat	equ	0xFF5
 18296                           prodh	equ	0xFF4
 18297                           prodl	equ	0xFF3
 18298                           intcon	equ	0xFF2
 18299                           intcon2	equ	0xFF1
 18300                           postinc0	equ	0xFEE
 18301                           plusw0	equ	0xFEB
 18302                           wreg	equ	0xFE8
 18303                           indf1	equ	0xFE7
 18304                           postdec1	equ	0xFE5
 18305                           fsr1h	equ	0xFE2
 18306                           fsr1l	equ	0xFE1
 18307                           indf2	equ	0xFDF
 18308                           postinc2	equ	0xFDE
 18309                           postdec2	equ	0xFDD
 18310                           plusw2	equ	0xFDB
 18311                           fsr2h	equ	0xFDA
 18312                           fsr2l	equ	0xFD9
 18313                           status	equ	0xFD8
 18314                           
 18315 ;; *************** function _GetUint16FromBitArray *****************
 18316 ;; Defined at:
 18317 ;;		line 34 in file "SystemCommon.c"
 18318 ;; Parameters:    Size  Location     Type
 18319 ;;  bitarray        2   23[COMRAM] PTR unsigned char 
 18320 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 18321 ;;  numOfBits       2   25[COMRAM] int 
 18322 ;; Auto vars:     Size  Location     Type
 18323 ;;  i               2   32[COMRAM] int 
 18324 ;;  res             2   30[COMRAM] unsigned int 
 18325 ;; Return value:  Size  Location     Type
 18326 ;;                  2   23[COMRAM] unsigned int 
 18327 ;; Registers used:
 18328 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18329 ;; Tracked objects:
 18330 ;;		On entry : 0/0
 18331 ;;		On exit  : 0/0
 18332 ;;		Unchanged: 0/0
 18333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18334 ;;      Params:         4       0       0       0       0       0       0
 18335 ;;      Locals:         4       0       0       0       0       0       0
 18336 ;;      Temps:          3       0       0       0       0       0       0
 18337 ;;      Totals:        11       0       0       0       0       0       0
 18338 ;;Total ram usage:       11 bytes
 18339 ;; Hardware stack levels used:    1
 18340 ;; Hardware stack levels required when called:    4
 18341 ;; This function calls:
 18342 ;;		Nothing
 18343 ;; This function is called by:
 18344 ;;		_AdcConvert
 18345 ;; This function uses a non-reentrant model
 18346 ;;
 18347                           
 18348                           	psect	text105
 18349  0036B6                     __ptext105:
 18350                           	opt stack 0
 18351  0036B6                     _GetUint16FromBitArray:
 18352                           	opt stack 25
 18353                           
 18354                           ;SystemCommon.c: 36: uint16_t res = 0;
 18355                           
 18356                           ;incstack = 0
 18357  0036B6  0E00               	movlw	0
 18358  0036B8  6E20               	movwf	GetUint16FromBitArray@res+1,c
 18359  0036BA  0E00               	movlw	0
 18360  0036BC  6E1F               	movwf	GetUint16FromBitArray@res,c
 18361                           
 18362                           ;SystemCommon.c: 37: for (int i = 0 ; i < numOfBits ; i++)
 18363  0036BE  0E00               	movlw	0
 18364  0036C0  6E22               	movwf	GetUint16FromBitArray@i+1,c
 18365  0036C2  0E00               	movlw	0
 18366  0036C4  6E21               	movwf	GetUint16FromBitArray@i,c
 18367  0036C6  D01C               	goto	l1406
 18368  0036C8                     
 18369                           ;SystemCommon.c: 38: {
 18370                           ;SystemCommon.c: 39: if (bitarray[i])
 18371  0036C8  5021               	movf	GetUint16FromBitArray@i,w,c
 18372  0036CA  2418               	addwf	GetUint16FromBitArray@bitarray,w,c
 18373  0036CC  6ED9               	movwf	fsr2l,c
 18374  0036CE  5022               	movf	GetUint16FromBitArray@i+1,w,c
 18375  0036D0  2019               	addwfc	GetUint16FromBitArray@bitarray+1,w,c
 18376  0036D2  6EDA               	movwf	fsr2h,c
 18377  0036D4  50DF               	movf	indf2,w,c
 18378  0036D6  B4D8               	btfsc	status,2,c
 18379  0036D8  D011               	goto	l1408
 18380                           
 18381                           ;SystemCommon.c: 40: {
 18382                           ;SystemCommon.c: 41: res |= (uint16_t)(1 << i);
 18383  0036DA  C021  F01C         	movff	GetUint16FromBitArray@i,??_GetUint16FromBitArray
 18384  0036DE  0E01               	movlw	1
 18385  0036E0  6E1D               	movwf	(??_GetUint16FromBitArray+1)& (0+255),c
 18386  0036E2  0E00               	movlw	0
 18387  0036E4  6E1E               	movwf	(??_GetUint16FromBitArray+2)& (0+255),c
 18388  0036E6  2A1C               	incf	??_GetUint16FromBitArray,f,c
 18389  0036E8  D003               	goto	u5644
 18390  0036EA                     u5645:
 18391  0036EA  90D8               	bcf	status,0,c
 18392  0036EC  361D               	rlcf	??_GetUint16FromBitArray+1,f,c
 18393  0036EE  361E               	rlcf	??_GetUint16FromBitArray+2,f,c
 18394  0036F0                     u5644:
 18395  0036F0  2E1C               	decfsz	??_GetUint16FromBitArray,f,c
 18396  0036F2  D7FB               	goto	u5645
 18397  0036F4  501D               	movf	??_GetUint16FromBitArray+1,w,c
 18398  0036F6  121F               	iorwf	GetUint16FromBitArray@res,f,c
 18399  0036F8  501E               	movf	??_GetUint16FromBitArray+2,w,c
 18400  0036FA  1220               	iorwf	GetUint16FromBitArray@res+1,f,c
 18401  0036FC                     l1408:
 18402  0036FC  4A21               	infsnz	GetUint16FromBitArray@i,f,c
 18403  0036FE  2A22               	incf	GetUint16FromBitArray@i+1,f,c
 18404  003700                     l1406:
 18405  003700  501A               	movf	GetUint16FromBitArray@numOfBits,w,c
 18406  003702  5C21               	subwf	GetUint16FromBitArray@i,w,c
 18407  003704  5022               	movf	GetUint16FromBitArray@i+1,w,c
 18408  003706  0A80               	xorlw	128
 18409  003708  6E1C               	movwf	??_GetUint16FromBitArray& (0+255),c
 18410  00370A  501B               	movf	GetUint16FromBitArray@numOfBits+1,w,c
 18411  00370C  0A80               	xorlw	128
 18412  00370E  581C               	subwfb	??_GetUint16FromBitArray& (0+255),w,c
 18413  003710  A0D8               	btfss	status,0,c
 18414  003712  D7DA               	goto	l1407
 18415                           
 18416                           ;SystemCommon.c: 42: }
 18417                           ;SystemCommon.c: 43: }
 18418                           ;SystemCommon.c: 44: return res;
 18419  003714  C01F  F018         	movff	GetUint16FromBitArray@res,?_GetUint16FromBitArray
 18420  003718  C020  F019         	movff	GetUint16FromBitArray@res+1,?_GetUint16FromBitArray+1
 18421  00371C  0012               	return		;funcret
 18422  00371E                     __end_of_GetUint16FromBitArray:
 18423                           	opt stack 0
 18424                           tosu	equ	0xFFF
 18425                           tosh	equ	0xFFE
 18426                           tosl	equ	0xFFD
 18427                           pclath	equ	0xFFA
 18428                           tblptru	equ	0xFF8
 18429                           tblptrh	equ	0xFF7
 18430                           tblptrl	equ	0xFF6
 18431                           tablat	equ	0xFF5
 18432                           prodh	equ	0xFF4
 18433                           prodl	equ	0xFF3
 18434                           intcon	equ	0xFF2
 18435                           intcon2	equ	0xFF1
 18436                           postinc0	equ	0xFEE
 18437                           plusw0	equ	0xFEB
 18438                           wreg	equ	0xFE8
 18439                           indf1	equ	0xFE7
 18440                           postdec1	equ	0xFE5
 18441                           fsr1h	equ	0xFE2
 18442                           fsr1l	equ	0xFE1
 18443                           indf2	equ	0xFDF
 18444                           postinc2	equ	0xFDE
 18445                           postdec2	equ	0xFDD
 18446                           plusw2	equ	0xFDB
 18447                           fsr2h	equ	0xFDA
 18448                           fsr2l	equ	0xFD9
 18449                           status	equ	0xFD8
 18450                           
 18451 ;; *************** function _FlashSampleWrite *****************
 18452 ;; Defined at:
 18453 ;;		line 29 in file "FlashApp.c"
 18454 ;; Parameters:    Size  Location     Type
 18455 ;;  sampleData      2   44[COMRAM] unsigned int 
 18456 ;;  channelNum      1   46[COMRAM] unsigned char 
 18457 ;; Auto vars:     Size  Location     Type
 18458 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 18459 ;; Return value:  Size  Location     Type
 18460 ;;                  1    wreg      void 
 18461 ;; Registers used:
 18462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18463 ;; Tracked objects:
 18464 ;;		On entry : 0/0
 18465 ;;		On exit  : 0/0
 18466 ;;		Unchanged: 0/0
 18467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18468 ;;      Params:         3       0       0       0       0       0       0
 18469 ;;      Locals:         0       2       0       0       0       0       0
 18470 ;;      Temps:          0       2       0       0       0       0       0
 18471 ;;      Totals:         3       4       0       0       0       0       0
 18472 ;;Total ram usage:        7 bytes
 18473 ;; Hardware stack levels used:    1
 18474 ;; Hardware stack levels required when called:    6
 18475 ;; This function calls:
 18476 ;;		_FLASH_IsWriteDone
 18477 ;;		_FLASH_WriteBlock
 18478 ;; This function is called by:
 18479 ;;		_AdcConvert
 18480 ;; This function uses a non-reentrant model
 18481 ;;
 18482                           
 18483                           	psect	text106
 18484  002312                     __ptext106:
 18485                           	opt stack 0
 18486  002312                     _FlashSampleWrite:
 18487                           	opt stack 23
 18488                           
 18489                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 18490                           
 18491                           ;incstack = 0
 18492  002312  502F               	movf	FlashSampleWrite@channelNum,w,c
 18493  002314  0100               	movlb	0	; () banked
 18494  002316  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 18495  002318  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 18496  00231A  0E0C               	movlw	12
 18497  00231C                     u8755:
 18498  00231C  90D8               	bcf	status,0,c
 18499  00231E  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18500  002320  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18501  002322  2EE8               	decfsz	wreg,f,c
 18502  002324  D7FB               	goto	u8755
 18503  002326  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 18504  00232A  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 18505                           
 18506                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 18507  00232E  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 18508  002330  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 18509  002332  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 18510  002334  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 18511                           
 18512                           ; BSR set to: 0
 18513                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 18514  002336  90D8               	bcf	status,0,c
 18515  002338  0101               	movlb	1	; () banked
 18516  00233A  3536               	rlcf	_sampleCount& (0+255),w,b
 18517  00233C  6ED9               	movwf	fsr2l,c
 18518  00233E  3537               	rlcf	(_sampleCount+1)& (0+255),w,b
 18519  002340  6EDA               	movwf	fsr2h,c
 18520  002342  0E3C               	movlw	low _sampleArray
 18521  002344  26D9               	addwf	fsr2l,f,c
 18522  002346  0E01               	movlw	high _sampleArray
 18523  002348  22DA               	addwfc	fsr2h,f,c
 18524  00234A  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 18525  00234E  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 18526                           
 18527                           ; BSR set to: 1
 18528                           ;FlashApp.c: 35: sampleCount ++;
 18529  002352  4B36               	infsnz	_sampleCount& (0+255),f,b
 18530  002354  2B37               	incf	(_sampleCount+1)& (0+255),f,b
 18531                           
 18532                           ; BSR set to: 1
 18533                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 18534  002356  C136  F060         	movff	_sampleCount,??_FlashSampleWrite
 18535  00235A  C137  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 18536  00235E  90D8               	bcf	status,0,c
 18537  002360  0100               	movlb	0	; () banked
 18538  002362  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18539  002364  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18540  002366  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 18541  002368  E104               	bnz	u8760
 18542  00236A  0E40               	movlw	64
 18543  00236C  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 18544  00236E  A0D8               	btfss	status,0,c
 18545  002370  0012               	return	
 18546  002372                     u8760:
 18547                           
 18548                           ; BSR set to: 0
 18549  002372  ECFE  F021         	call	_FLASH_IsWriteDone	;wreg free
 18550  002376  0900               	iorlw	0
 18551  002378  B4D8               	btfsc	status,2,c
 18552  00237A  0012               	return	
 18553                           
 18554                           ;FlashApp.c: 38: {
 18555                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 18556  00237C  C03E  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 18557  002380  C03F  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 18558  002384  C040  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 18559  002388  C041  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 18560  00238C  0E3C               	movlw	low _sampleArray
 18561  00238E  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 18562  002390  0E01               	movlw	high _sampleArray
 18563  002392  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 18564  002394  ECDD  F016         	call	_FLASH_WriteBlock	;wreg free
 18565                           
 18566                           ;FlashApp.c: 40: writeAddress += (64);
 18567  002398  0E40               	movlw	64
 18568  00239A  263E               	addwf	_writeAddress,f,c
 18569  00239C  0E00               	movlw	0
 18570  00239E  223F               	addwfc	_writeAddress+1,f,c
 18571  0023A0  2240               	addwfc	_writeAddress+2,f,c
 18572  0023A2  2241               	addwfc	_writeAddress+3,f,c
 18573                           
 18574                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 18575  0023A4  5041               	movf	_writeAddress+3,w,c
 18576  0023A6  1040               	iorwf	_writeAddress+2,w,c
 18577  0023A8  E106               	bnz	u8780
 18578  0023AA  0EF0               	movlw	240
 18579  0023AC  5C3E               	subwf	_writeAddress,w,c
 18580  0023AE  0E7F               	movlw	127
 18581  0023B0  583F               	subwfb	_writeAddress+1,w,c
 18582  0023B2  A0D8               	btfss	status,0,c
 18583  0023B4  D01A               	goto	l319
 18584  0023B6                     u8780:
 18585                           
 18586                           ;FlashApp.c: 42: {
 18587                           ;FlashApp.c: 43: writeAddress = 0x4580;
 18588  0023B6  0E80               	movlw	128
 18589  0023B8  6E3E               	movwf	_writeAddress,c
 18590  0023BA  0E45               	movlw	69
 18591  0023BC  6E3F               	movwf	_writeAddress+1,c
 18592  0023BE  0E00               	movlw	0
 18593  0023C0  6E40               	movwf	_writeAddress+2,c
 18594  0023C2  0E00               	movlw	0
 18595  0023C4  6E41               	movwf	_writeAddress+3,c
 18596                           
 18597                           ;FlashApp.c: 44: isReWriteDone = 1;
 18598  0023C6  0E01               	movlw	1
 18599  0023C8  0101               	movlb	1	; () banked
 18600  0023CA  6F3A               	movwf	_isReWriteDone& (0+255),b
 18601                           
 18602                           ; BSR set to: 1
 18603                           ;FlashApp.c: 45: if (readAddress == 0x4580)
 18604  0023CC  0E80               	movlw	128
 18605  0023CE  19C8               	xorwf	_readAddress& (0+255),w,b
 18606  0023D0  E10C               	bnz	l318
 18607  0023D2  0E45               	movlw	69
 18608  0023D4  19C9               	xorwf	(_readAddress+1)& (0+255),w,b
 18609  0023D6  11CA               	iorwf	(_readAddress+2)& (0+255),w,b
 18610  0023D8  11CB               	iorwf	(_readAddress+3)& (0+255),w,b
 18611  0023DA  A4D8               	btfss	status,2,c
 18612  0023DC  D006               	goto	l319
 18613                           
 18614                           ; BSR set to: 1
 18615                           ;FlashApp.c: 46: {
 18616                           ;FlashApp.c: 47: readAddress += (64);
 18617  0023DE  0E40               	movlw	64
 18618  0023E0  27C8               	addwf	_readAddress& (0+255),f,b
 18619  0023E2  0E00               	movlw	0
 18620  0023E4  23C9               	addwfc	(_readAddress+1)& (0+255),f,b
 18621  0023E6  23CA               	addwfc	(_readAddress+2)& (0+255),f,b
 18622  0023E8  23CB               	addwfc	(_readAddress+3)& (0+255),f,b
 18623  0023EA                     l319:
 18624  0023EA                     l318:
 18625                           
 18626                           ;FlashApp.c: 48: }
 18627                           ;FlashApp.c: 49: }
 18628                           ;FlashApp.c: 52: if (numOfValidateSamples < ((0x4580-0x7FF0)/(64)))
 18629  0023EA  0E17               	movlw	23
 18630  0023EC  0101               	movlb	1	; () banked
 18631  0023EE  5D30               	subwf	_numOfValidateSamples& (0+255),w,b
 18632  0023F0  0EFF               	movlw	255
 18633  0023F2  5931               	subwfb	(_numOfValidateSamples+1)& (0+255),w,b
 18634  0023F4  0EFF               	movlw	255
 18635  0023F6  5932               	subwfb	(_numOfValidateSamples+2)& (0+255),w,b
 18636  0023F8  0EFF               	movlw	255
 18637  0023FA  5933               	subwfb	(_numOfValidateSamples+3)& (0+255),w,b
 18638  0023FC  B0D8               	btfsc	status,0,c
 18639  0023FE  D006               	goto	l320
 18640                           
 18641                           ; BSR set to: 1
 18642                           ;FlashApp.c: 53: {
 18643                           ;FlashApp.c: 54: numOfValidateSamples++;
 18644  002400  0E01               	movlw	1
 18645  002402  2730               	addwf	_numOfValidateSamples& (0+255),f,b
 18646  002404  0E00               	movlw	0
 18647  002406  2331               	addwfc	(_numOfValidateSamples+1)& (0+255),f,b
 18648  002408  2332               	addwfc	(_numOfValidateSamples+2)& (0+255),f,b
 18649  00240A  2333               	addwfc	(_numOfValidateSamples+3)& (0+255),f,b
 18650  00240C                     l320:
 18651                           
 18652                           ; BSR set to: 1
 18653                           ;FlashApp.c: 55: }
 18654                           ;FlashApp.c: 56: sampleCount = 0;
 18655                           
 18656                           ; BSR set to: 1
 18657  00240C  0E00               	movlw	0
 18658  00240E  6F37               	movwf	(_sampleCount+1)& (0+255),b
 18659  002410  0E00               	movlw	0
 18660  002412  6F36               	movwf	_sampleCount& (0+255),b
 18661  002414  0012               	return	
 18662  002416                     __end_of_FlashSampleWrite:
 18663                           	opt stack 0
 18664                           tosu	equ	0xFFF
 18665                           tosh	equ	0xFFE
 18666                           tosl	equ	0xFFD
 18667                           pclath	equ	0xFFA
 18668                           tblptru	equ	0xFF8
 18669                           tblptrh	equ	0xFF7
 18670                           tblptrl	equ	0xFF6
 18671                           tablat	equ	0xFF5
 18672                           prodh	equ	0xFF4
 18673                           prodl	equ	0xFF3
 18674                           intcon	equ	0xFF2
 18675                           intcon2	equ	0xFF1
 18676                           postinc0	equ	0xFEE
 18677                           plusw0	equ	0xFEB
 18678                           wreg	equ	0xFE8
 18679                           indf1	equ	0xFE7
 18680                           postdec1	equ	0xFE5
 18681                           fsr1h	equ	0xFE2
 18682                           fsr1l	equ	0xFE1
 18683                           indf2	equ	0xFDF
 18684                           postinc2	equ	0xFDE
 18685                           postdec2	equ	0xFDD
 18686                           plusw2	equ	0xFDB
 18687                           fsr2h	equ	0xFDA
 18688                           fsr2l	equ	0xFD9
 18689                           status	equ	0xFD8
 18690                           
 18691 ;; *************** function _FLASH_WriteBlock *****************
 18692 ;; Defined at:
 18693 ;;		line 93 in file "mcc_generated_files/memory.c"
 18694 ;; Parameters:    Size  Location     Type
 18695 ;;  writeAddr       4   28[COMRAM] unsigned long 
 18696 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 18697 ;;		 -> sampleArray(64), 
 18698 ;; Auto vars:     Size  Location     Type
 18699 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 18700 ;;  i               1   43[COMRAM] unsigned char 
 18701 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 18702 ;; Return value:  Size  Location     Type
 18703 ;;                  1    wreg      char 
 18704 ;; Registers used:
 18705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18706 ;; Tracked objects:
 18707 ;;		On entry : 0/0
 18708 ;;		On exit  : 0/0
 18709 ;;		Unchanged: 0/0
 18710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18711 ;;      Params:         6       0       0       0       0       0       0
 18712 ;;      Locals:         6       0       0       0       0       0       0
 18713 ;;      Temps:          4       0       0       0       0       0       0
 18714 ;;      Totals:        16       0       0       0       0       0       0
 18715 ;;Total ram usage:       16 bytes
 18716 ;; Hardware stack levels used:    1
 18717 ;; Hardware stack levels required when called:    5
 18718 ;; This function calls:
 18719 ;;		_FLASH_EraseBlock
 18720 ;; This function is called by:
 18721 ;;		_FlashSampleWrite
 18722 ;;		_FLASH_WriteByte
 18723 ;; This function uses a non-reentrant model
 18724 ;;
 18725                           
 18726                           	psect	text107
 18727  002DBA                     __ptext107:
 18728                           	opt stack 0
 18729  002DBA                     _FLASH_WriteBlock:
 18730                           	opt stack 23
 18731                           
 18732                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 18733                           
 18734                           ;incstack = 0
 18735  002DBA  0EC0               	movlw	192
 18736  002DBC  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 18737  002DBE  0E7F               	movlw	127
 18738  002DC0  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 18739  002DC2  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 18740  002DC6  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 18741  002DCA  5023               	movf	??_FLASH_WriteBlock,w,c
 18742  002DCC  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 18743  002DCE  5024               	movf	??_FLASH_WriteBlock+1,w,c
 18744  002DD0  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 18745  002DD2  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 18746  002DD6  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 18747  002DDA  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 18748  002DDC  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 18749                           
 18750                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 18751  002DDE  0E00               	movlw	0
 18752  002DE0  BEF2               	btfsc	intcon,7,c	;volatile
 18753  002DE2  0E01               	movlw	1
 18754  002DE4  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 18755                           
 18756                           ;memory.c: 97: uint8_t i;
 18757                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 18758  002DE6  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 18759  002DE8  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 18760  002DEA  E144               	bnz	l1050
 18761  002DEC  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 18762  002DEE  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 18763  002DF0  E141               	bnz	l1050
 18764  002DF2  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 18765  002DF4  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 18766  002DF6  E13E               	bnz	l1050
 18767  002DF8  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 18768  002DFA  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 18769  002DFC  A4D8               	btfss	status,2,c
 18770  002DFE  0012               	return	
 18771                           
 18772                           ;memory.c: 103: }
 18773                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 18774                           
 18775                           ;memory.c: 101: {
 18776                           ;memory.c: 102: return -1;
 18777                           ;	Return value of _FLASH_WriteBlock is never used
 18778  002E00  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 18779  002E04  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 18780  002E08  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 18781  002E0C  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 18782  002E10  ECF5  F01F         	call	_FLASH_EraseBlock	;wreg free
 18783                           
 18784                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 18785  002E14  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 18786                           
 18787                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 18788  002E18  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 18789                           
 18790                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 18791  002E1C  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 18792                           
 18793                           ;memory.c: 114: for (i=0; i<(64); i++)
 18794  002E20  0E00               	movlw	0
 18795  002E22  6E2C               	movwf	FLASH_WriteBlock@i,c
 18796  002E24                     l8246:
 18797  002E24  0E3F               	movlw	63
 18798  002E26  642C               	cpfsgt	FLASH_WriteBlock@i,c
 18799  002E28  D001               	goto	l1051
 18800  002E2A  D013               	goto	u8340
 18801  002E2C                     l1051:
 18802                           
 18803                           ;memory.c: 115: {
 18804                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 18805  002E2C  502C               	movf	FLASH_WriteBlock@i,w,c
 18806  002E2E  0D01               	mullw	1
 18807  002E30  50F3               	movf	prodl,w,c
 18808  002E32  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 18809  002E34  6ED9               	movwf	fsr2l,c
 18810  002E36  50F4               	movf	prodh,w,c
 18811  002E38  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 18812  002E3A  6EDA               	movwf	fsr2h,c
 18813  002E3C  50DF               	movf	indf2,w,c
 18814  002E3E  6EF5               	movwf	tablat,c	;volatile
 18815                           
 18816                           ;memory.c: 118: if (i == ((64)-1))
 18817  002E40  0E3F               	movlw	63
 18818  002E42  182C               	xorwf	FLASH_WriteBlock@i,w,c
 18819  002E44  A4D8               	btfss	status,2,c
 18820  002E46  D002               	goto	l1053
 18821  002E48  000C               	tblwt		*	;# 
 18822                           
 18823                           ;memory.c: 121: }
 18824  002E4A  D001               	goto	l1054
 18825  002E4C                     l1053:
 18826  002E4C  000D               	tblwt		*+	;# 
 18827  002E4E                     l1054:
 18828  002E4E  2A2C               	incf	FLASH_WriteBlock@i,f,c
 18829  002E50  D7E9               	goto	l8246
 18830  002E52                     u8340:
 18831                           
 18832                           ;memory.c: 125: }
 18833                           ;memory.c: 126: }
 18834                           ;memory.c: 128: PIR2bits.EEIF = 1;
 18835  002E52  88A1               	bsf	4001,4,c	;volatile
 18836                           
 18837                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 18838  002E54  8EA6               	bsf	4006,7,c	;volsfr
 18839                           
 18840                           ;memory.c: 130: EECON1bits.CFGS = 0;
 18841  002E56  9CA6               	bcf	4006,6,c	;volsfr
 18842                           
 18843                           ;memory.c: 131: EECON1bits.WREN = 1;
 18844  002E58  84A6               	bsf	4006,2,c	;volsfr
 18845                           
 18846                           ;memory.c: 132: INTCONbits.GIE = 0;
 18847  002E5A  9EF2               	bcf	intcon,7,c	;volatile
 18848                           
 18849                           ;memory.c: 133: EECON2 = 0x55;
 18850  002E5C  0E55               	movlw	85
 18851  002E5E  6EA7               	movwf	4007,c	;volsfr
 18852                           
 18853                           ;memory.c: 134: EECON2 = 0xAA;
 18854  002E60  0EAA               	movlw	170
 18855  002E62  6EA7               	movwf	4007,c	;volsfr
 18856                           
 18857                           ;memory.c: 135: EECON1bits.WR = 1;
 18858  002E64  82A6               	bsf	4006,1,c	;volsfr
 18859                           
 18860                           ;memory.c: 137: EECON1bits.WREN = 0;
 18861  002E66  94A6               	bcf	4006,2,c	;volsfr
 18862                           
 18863                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 18864  002E68  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 18865  002E6A  D002               	bra	u8355
 18866  002E6C  9EF2               	bcf	intcon,7,c	;volatile
 18867  002E6E  D001               	bra	u8356
 18868  002E70                     u8355:
 18869  002E70  8EF2               	bsf	intcon,7,c	;volatile
 18870  002E72                     u8356:
 18871  002E72  0012               	return	
 18872  002E74                     l1050:
 18873  002E74  0012               	return		;funcret
 18874  002E76                     __end_of_FLASH_WriteBlock:
 18875                           	opt stack 0
 18876                           tosu	equ	0xFFF
 18877                           tosh	equ	0xFFE
 18878                           tosl	equ	0xFFD
 18879                           pclath	equ	0xFFA
 18880                           tblptru	equ	0xFF8
 18881                           tblptrh	equ	0xFF7
 18882                           tblptrl	equ	0xFF6
 18883                           tablat	equ	0xFF5
 18884                           prodh	equ	0xFF4
 18885                           prodl	equ	0xFF3
 18886                           intcon	equ	0xFF2
 18887                           intcon2	equ	0xFF1
 18888                           postinc0	equ	0xFEE
 18889                           plusw0	equ	0xFEB
 18890                           wreg	equ	0xFE8
 18891                           indf1	equ	0xFE7
 18892                           postdec1	equ	0xFE5
 18893                           fsr1h	equ	0xFE2
 18894                           fsr1l	equ	0xFE1
 18895                           indf2	equ	0xFDF
 18896                           postinc2	equ	0xFDE
 18897                           postdec2	equ	0xFDD
 18898                           plusw2	equ	0xFDB
 18899                           fsr2h	equ	0xFDA
 18900                           fsr2l	equ	0xFD9
 18901                           status	equ	0xFD8
 18902                           
 18903 ;; *************** function _FLASH_EraseBlock *****************
 18904 ;; Defined at:
 18905 ;;		line 144 in file "mcc_generated_files/memory.c"
 18906 ;; Parameters:    Size  Location     Type
 18907 ;;  baseAddr        4   23[COMRAM] unsigned long 
 18908 ;; Auto vars:     Size  Location     Type
 18909 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 18910 ;; Return value:  Size  Location     Type
 18911 ;;                  1    wreg      void 
 18912 ;; Registers used:
 18913 ;;		wreg, status,2
 18914 ;; Tracked objects:
 18915 ;;		On entry : 0/0
 18916 ;;		On exit  : 0/0
 18917 ;;		Unchanged: 0/0
 18918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18919 ;;      Params:         4       0       0       0       0       0       0
 18920 ;;      Locals:         1       0       0       0       0       0       0
 18921 ;;      Temps:          0       0       0       0       0       0       0
 18922 ;;      Totals:         5       0       0       0       0       0       0
 18923 ;;Total ram usage:        5 bytes
 18924 ;; Hardware stack levels used:    1
 18925 ;; Hardware stack levels required when called:    4
 18926 ;; This function calls:
 18927 ;;		Nothing
 18928 ;; This function is called by:
 18929 ;;		_FLASH_WriteBlock
 18930 ;; This function uses a non-reentrant model
 18931 ;;
 18932                           
 18933                           	psect	text108
 18934  003FEA                     __ptext108:
 18935                           	opt stack 0
 18936  003FEA                     _FLASH_EraseBlock:
 18937                           	opt stack 23
 18938                           
 18939                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 18940                           
 18941                           ;incstack = 0
 18942  003FEA  0E00               	movlw	0
 18943  003FEC  BEF2               	btfsc	intcon,7,c	;volatile
 18944  003FEE  0E01               	movlw	1
 18945  003FF0  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 18946                           
 18947                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 18948  003FF2  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 18949                           
 18950                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 18951  003FF6  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 18952                           
 18953                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 18954  003FFA  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 18955                           
 18956                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 18957  003FFE  8EA6               	bsf	4006,7,c	;volsfr
 18958                           
 18959                           ;memory.c: 153: EECON1bits.CFGS = 0;
 18960  004000  9CA6               	bcf	4006,6,c	;volsfr
 18961                           
 18962                           ;memory.c: 154: EECON1bits.WREN = 1;
 18963  004002  84A6               	bsf	4006,2,c	;volsfr
 18964                           
 18965                           ;memory.c: 155: EECON1bits.FREE = 1;
 18966  004004  88A6               	bsf	4006,4,c	;volsfr
 18967                           
 18968                           ;memory.c: 156: INTCONbits.GIE = 0;
 18969  004006  9EF2               	bcf	intcon,7,c	;volatile
 18970                           
 18971                           ;memory.c: 157: EECON2 = 0x55;
 18972  004008  0E55               	movlw	85
 18973  00400A  6EA7               	movwf	4007,c	;volsfr
 18974                           
 18975                           ;memory.c: 158: EECON2 = 0xAA;
 18976  00400C  0EAA               	movlw	170
 18977  00400E  6EA7               	movwf	4007,c	;volsfr
 18978                           
 18979                           ;memory.c: 159: EECON1bits.WR = 1;
 18980  004010  82A6               	bsf	4006,1,c	;volsfr
 18981                           
 18982                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 18983  004012  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 18984  004014  D002               	bra	u8215
 18985  004016  9EF2               	bcf	intcon,7,c	;volatile
 18986  004018  D001               	bra	u8216
 18987  00401A                     u8215:
 18988  00401A  8EF2               	bsf	intcon,7,c	;volatile
 18989  00401C                     u8216:
 18990  00401C  0012               	return		;funcret
 18991  00401E                     __end_of_FLASH_EraseBlock:
 18992                           	opt stack 0
 18993                           tosu	equ	0xFFF
 18994                           tosh	equ	0xFFE
 18995                           tosl	equ	0xFFD
 18996                           pclath	equ	0xFFA
 18997                           tblptru	equ	0xFF8
 18998                           tblptrh	equ	0xFF7
 18999                           tblptrl	equ	0xFF6
 19000                           tablat	equ	0xFF5
 19001                           prodh	equ	0xFF4
 19002                           prodl	equ	0xFF3
 19003                           intcon	equ	0xFF2
 19004                           intcon2	equ	0xFF1
 19005                           postinc0	equ	0xFEE
 19006                           plusw0	equ	0xFEB
 19007                           wreg	equ	0xFE8
 19008                           indf1	equ	0xFE7
 19009                           postdec1	equ	0xFE5
 19010                           fsr1h	equ	0xFE2
 19011                           fsr1l	equ	0xFE1
 19012                           indf2	equ	0xFDF
 19013                           postinc2	equ	0xFDE
 19014                           postdec2	equ	0xFDD
 19015                           plusw2	equ	0xFDB
 19016                           fsr2h	equ	0xFDA
 19017                           fsr2l	equ	0xFD9
 19018                           status	equ	0xFD8
 19019                           
 19020 ;; *************** function _FLASH_IsWriteDone *****************
 19021 ;; Defined at:
 19022 ;;		line 189 in file "mcc_generated_files/memory.c"
 19023 ;; Parameters:    Size  Location     Type
 19024 ;;		None
 19025 ;; Auto vars:     Size  Location     Type
 19026 ;;		None
 19027 ;; Return value:  Size  Location     Type
 19028 ;;                  1    wreg      unsigned char 
 19029 ;; Registers used:
 19030 ;;		wreg
 19031 ;; Tracked objects:
 19032 ;;		On entry : 0/0
 19033 ;;		On exit  : 0/0
 19034 ;;		Unchanged: 0/0
 19035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19036 ;;      Params:         0       0       0       0       0       0       0
 19037 ;;      Locals:         0       0       0       0       0       0       0
 19038 ;;      Temps:          0       0       0       0       0       0       0
 19039 ;;      Totals:         0       0       0       0       0       0       0
 19040 ;;Total ram usage:        0 bytes
 19041 ;; Hardware stack levels used:    1
 19042 ;; Hardware stack levels required when called:    4
 19043 ;; This function calls:
 19044 ;;		Nothing
 19045 ;; This function is called by:
 19046 ;;		_FlashSampleWrite
 19047 ;;		_FlashReadUart
 19048 ;; This function uses a non-reentrant model
 19049 ;;
 19050                           
 19051                           	psect	text109
 19052  0043FC                     __ptext109:
 19053                           	opt stack 0
 19054  0043FC                     _FLASH_IsWriteDone:
 19055                           	opt stack 23
 19056                           
 19057                           ;memory.c: 191: return (EECON1bits.WR == 0);
 19058                           
 19059                           ;incstack = 0
 19060  0043FC  A2A6               	btfss	4006,1,c	;volsfr
 19061  0043FE  D001               	goto	u8001
 19062  004400  D002               	goto	u8000
 19063  004402                     u8001:
 19064  004402  0E01               	movlw	1
 19065  004404  0012               	return	
 19066  004406                     u8000:
 19067  004406  0E00               	movlw	0
 19068  004408  0012               	return	
 19069  00440A                     __end_of_FLASH_IsWriteDone:
 19070                           	opt stack 0
 19071                           tosu	equ	0xFFF
 19072                           tosh	equ	0xFFE
 19073                           tosl	equ	0xFFD
 19074                           pclath	equ	0xFFA
 19075                           tblptru	equ	0xFF8
 19076                           tblptrh	equ	0xFF7
 19077                           tblptrl	equ	0xFF6
 19078                           tablat	equ	0xFF5
 19079                           prodh	equ	0xFF4
 19080                           prodl	equ	0xFF3
 19081                           intcon	equ	0xFF2
 19082                           intcon2	equ	0xFF1
 19083                           postinc0	equ	0xFEE
 19084                           plusw0	equ	0xFEB
 19085                           wreg	equ	0xFE8
 19086                           indf1	equ	0xFE7
 19087                           postdec1	equ	0xFE5
 19088                           fsr1h	equ	0xFE2
 19089                           fsr1l	equ	0xFE1
 19090                           indf2	equ	0xFDF
 19091                           postinc2	equ	0xFDE
 19092                           postdec2	equ	0xFDD
 19093                           plusw2	equ	0xFDB
 19094                           fsr2h	equ	0xFDA
 19095                           fsr2l	equ	0xFD9
 19096                           status	equ	0xFD8
 19097                           
 19098 ;; *************** function _ADC_GetConversion *****************
 19099 ;; Defined at:
 19100 ;;		line 106 in file "mcc_generated_files/adc.c"
 19101 ;; Parameters:    Size  Location     Type
 19102 ;;  channel         1    wreg     enum E6975
 19103 ;; Auto vars:     Size  Location     Type
 19104 ;;  channel         1   27[COMRAM] enum E6975
 19105 ;; Return value:  Size  Location     Type
 19106 ;;                  2   23[COMRAM] unsigned int 
 19107 ;; Registers used:
 19108 ;;		wreg, status,2, status,0
 19109 ;; Tracked objects:
 19110 ;;		On entry : 0/0
 19111 ;;		On exit  : 0/0
 19112 ;;		Unchanged: 0/0
 19113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19114 ;;      Params:         2       0       0       0       0       0       0
 19115 ;;      Locals:         1       0       0       0       0       0       0
 19116 ;;      Temps:          2       0       0       0       0       0       0
 19117 ;;      Totals:         5       0       0       0       0       0       0
 19118 ;;Total ram usage:        5 bytes
 19119 ;; Hardware stack levels used:    1
 19120 ;; Hardware stack levels required when called:    4
 19121 ;; This function calls:
 19122 ;;		Nothing
 19123 ;; This function is called by:
 19124 ;;		_AdcConvert
 19125 ;; This function uses a non-reentrant model
 19126 ;;
 19127                           
 19128                           	psect	text110
 19129  00407E                     __ptext110:
 19130                           	opt stack 0
 19131  00407E                     _ADC_GetConversion:
 19132                           	opt stack 25
 19133                           
 19134                           ;incstack = 0
 19135                           ;ADC_GetConversion@channel stored from wreg
 19136  00407E  6E1C               	movwf	ADC_GetConversion@channel,c
 19137                           
 19138                           ;adc.c: 109: ADCON0bits.CHS = channel;
 19139  004080  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 19140  004084  461A               	rlncf	??_ADC_GetConversion,f,c
 19141  004086  461A               	rlncf	??_ADC_GetConversion,f,c
 19142  004088  50C2               	movf	4034,w,c	;volatile
 19143  00408A  181A               	xorwf	??_ADC_GetConversion,w,c
 19144  00408C  0B83               	andlw	-125
 19145  00408E  181A               	xorwf	??_ADC_GetConversion,w,c
 19146  004090  6EC2               	movwf	4034,c	;volatile
 19147                           
 19148                           ;adc.c: 112: ADCON0bits.ADON = 1;
 19149  004092  80C2               	bsf	4034,0,c	;volatile
 19150                           
 19151                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 19152  004094  82C2               	bsf	4034,1,c	;volatile
 19153  004096                     
 19154                           ;adc.c: 119: {
 19155  004096  B2C2               	btfsc	4034,1,c	;volatile
 19156  004098  D7FE               	goto	l1167
 19157                           
 19158                           ;adc.c: 120: }
 19159                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 19160  00409A  50C4               	movf	4036,w,c	;volatile
 19161  00409C  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 19162  00409E  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 19163  0040A0  50C3               	movf	4035,w,c	;volatile
 19164  0040A2  241A               	addwf	??_ADC_GetConversion,w,c
 19165  0040A4  6E18               	movwf	?_ADC_GetConversion,c
 19166  0040A6  0E00               	movlw	0
 19167  0040A8  201B               	addwfc	??_ADC_GetConversion+1,w,c
 19168  0040AA  6E19               	movwf	?_ADC_GetConversion+1,c
 19169  0040AC  0012               	return	
 19170  0040AE                     __end_of_ADC_GetConversion:
 19171                           	opt stack 0
 19172                           tosu	equ	0xFFF
 19173                           tosh	equ	0xFFE
 19174                           tosl	equ	0xFFD
 19175                           pclath	equ	0xFFA
 19176                           tblptru	equ	0xFF8
 19177                           tblptrh	equ	0xFF7
 19178                           tblptrl	equ	0xFF6
 19179                           tablat	equ	0xFF5
 19180                           prodh	equ	0xFF4
 19181                           prodl	equ	0xFF3
 19182                           intcon	equ	0xFF2
 19183                           intcon2	equ	0xFF1
 19184                           postinc0	equ	0xFEE
 19185                           plusw0	equ	0xFEB
 19186                           wreg	equ	0xFE8
 19187                           indf1	equ	0xFE7
 19188                           postdec1	equ	0xFE5
 19189                           fsr1h	equ	0xFE2
 19190                           fsr1l	equ	0xFE1
 19191                           indf2	equ	0xFDF
 19192                           postinc2	equ	0xFDE
 19193                           postdec2	equ	0xFDD
 19194                           plusw2	equ	0xFDB
 19195                           fsr2h	equ	0xFDA
 19196                           fsr2l	equ	0xFD9
 19197                           status	equ	0xFD8
 19198                           
 19199 ;; *************** function _INTERRUPT_InterruptManager *****************
 19200 ;; Defined at:
 19201 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 19202 ;; Parameters:    Size  Location     Type
 19203 ;;		None
 19204 ;; Auto vars:     Size  Location     Type
 19205 ;;		None
 19206 ;; Return value:  Size  Location     Type
 19207 ;;                  1    wreg      void 
 19208 ;; Registers used:
 19209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19210 ;; Tracked objects:
 19211 ;;		On entry : 0/0
 19212 ;;		On exit  : 0/0
 19213 ;;		Unchanged: 0/0
 19214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19215 ;;      Params:         0       0       0       0       0       0       0
 19216 ;;      Locals:         0       0       0       0       0       0       0
 19217 ;;      Temps:         18       0       0       0       0       0       0
 19218 ;;      Totals:        18       0       0       0       0       0       0
 19219 ;;Total ram usage:       18 bytes
 19220 ;; Hardware stack levels used:    1
 19221 ;; Hardware stack levels required when called:    3
 19222 ;; This function calls:
 19223 ;;		_EUSART1_Receive_ISR
 19224 ;;		_EUSART1_Transmit_ISR
 19225 ;;		_MEMORY_ISR
 19226 ;;		_PIN_MANAGER_IOC
 19227 ;;		_TMR0_ISR
 19228 ;; This function is called by:
 19229 ;;		Interrupt level 2
 19230 ;; This function uses a non-reentrant model
 19231 ;;
 19232                           
 19233                           	psect	intcode
 19234  000008                     __pintcode:
 19235                           	opt stack 0
 19236  000008                     _INTERRUPT_InterruptManager:
 19237                           	opt stack 17
 19238                           
 19239                           ;incstack = 0
 19240  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19241  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 19242  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 19243  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 19244  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 19245  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 19246  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 19247  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 19248  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 19249  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 19250  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 19251  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 19252  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 19253  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 19254  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 19255  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 19256  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 19257  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 19258  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 19259                           
 19260                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 19261  000052  B6F2               	btfsc	intcon,3,c	;volatile
 19262  000054  A0F2               	btfss	intcon,0,c	;volatile
 19263  000056  D003               	goto	i2l848
 19264                           
 19265                           ;interrupt_manager.c: 61: {
 19266                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 19267  000058  ECE1  F021         	call	_PIN_MANAGER_IOC	;wreg free
 19268                           
 19269                           ;interrupt_manager.c: 63: }
 19270  00005C  D019               	goto	i2l857
 19271  00005E                     i2l848:
 19272                           
 19273                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 19274  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 19275  000060  A4F2               	btfss	intcon,2,c	;volatile
 19276  000062  D003               	goto	i2l850
 19277                           
 19278                           ;interrupt_manager.c: 65: {
 19279                           ;interrupt_manager.c: 66: TMR0_ISR();
 19280  000064  ECE9  F017         	call	_TMR0_ISR	;wreg free
 19281                           
 19282                           ;interrupt_manager.c: 67: }
 19283  000068  D013               	goto	i2l857
 19284  00006A                     i2l850:
 19285                           
 19286                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 19287  00006A  ACF2               	btfss	intcon,6,c	;volatile
 19288  00006C  D011               	goto	i2l857
 19289                           
 19290                           ;interrupt_manager.c: 69: {
 19291                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 19292  00006E  B8A0               	btfsc	4000,4,c	;volatile
 19293  000070  A8A1               	btfss	4001,4,c	;volatile
 19294  000072  D003               	goto	i2l853
 19295                           
 19296                           ;interrupt_manager.c: 71: {
 19297                           ;interrupt_manager.c: 72: MEMORY_ISR();
 19298  000074  EC35  F022         	call	_MEMORY_ISR	;wreg free
 19299                           
 19300                           ;interrupt_manager.c: 73: }
 19301  000078  D00B               	goto	i2l857
 19302  00007A                     i2l853:
 19303                           
 19304                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 19305  00007A  B89D               	btfsc	3997,4,c	;volatile
 19306  00007C  A89E               	btfss	3998,4,c	;volatile
 19307  00007E  D003               	goto	i2l855
 19308                           
 19309                           ;interrupt_manager.c: 75: {
 19310                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 19311  000080  EC6F  F01F         	call	_EUSART1_Transmit_ISR	;wreg free
 19312                           
 19313                           ;interrupt_manager.c: 77: }
 19314  000084  D005               	goto	i2l857
 19315  000086                     i2l855:
 19316                           
 19317                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 19318  000086  BA9D               	btfsc	3997,5,c	;volatile
 19319  000088  AA9E               	btfss	3998,5,c	;volatile
 19320  00008A  D002               	goto	i2l857
 19321                           
 19322                           ;interrupt_manager.c: 79: {
 19323                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 19324  00008C  EC57  F020         	call	_EUSART1_Receive_ISR	;wreg free
 19325  000090                     i2l857:
 19326                           
 19327                           ;interrupt_manager.c: 87: else
 19328                           ;interrupt_manager.c: 88: {
 19329                           
 19330                           ;interrupt_manager.c: 85: }
 19331                           ;interrupt_manager.c: 86: }
 19332                           
 19333                           ;interrupt_manager.c: 82: else
 19334                           ;interrupt_manager.c: 83: {
 19335  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 19336  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 19337  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 19338  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 19339  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 19340  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 19341  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 19342  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 19343  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 19344  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 19345  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 19346  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 19347  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 19348  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 19349  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 19350  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 19351  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 19352  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 19353  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19354  0000DA  0011               	retfie		f
 19355  0000DC                     __end_of_INTERRUPT_InterruptManager:
 19356                           	opt stack 0
 19357                           tosu	equ	0xFFF
 19358                           tosh	equ	0xFFE
 19359                           tosl	equ	0xFFD
 19360                           pclatu	equ	0xFFB
 19361                           pclath	equ	0xFFA
 19362                           tblptru	equ	0xFF8
 19363                           tblptrh	equ	0xFF7
 19364                           tblptrl	equ	0xFF6
 19365                           tablat	equ	0xFF5
 19366                           prodh	equ	0xFF4
 19367                           prodl	equ	0xFF3
 19368                           intcon	equ	0xFF2
 19369                           intcon2	equ	0xFF1
 19370                           postinc0	equ	0xFEE
 19371                           plusw0	equ	0xFEB
 19372                           fsr0h	equ	0xFEA
 19373                           fsr0l	equ	0xFE9
 19374                           wreg	equ	0xFE8
 19375                           indf1	equ	0xFE7
 19376                           postdec1	equ	0xFE5
 19377                           fsr1h	equ	0xFE2
 19378                           fsr1l	equ	0xFE1
 19379                           indf2	equ	0xFDF
 19380                           postinc2	equ	0xFDE
 19381                           postdec2	equ	0xFDD
 19382                           plusw2	equ	0xFDB
 19383                           fsr2h	equ	0xFDA
 19384                           fsr2l	equ	0xFD9
 19385                           status	equ	0xFD8
 19386                           
 19387 ;; *************** function _TMR0_ISR *****************
 19388 ;; Defined at:
 19389 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 19390 ;; Parameters:    Size  Location     Type
 19391 ;;		None
 19392 ;; Auto vars:     Size  Location     Type
 19393 ;;		None
 19394 ;; Return value:  Size  Location     Type
 19395 ;;                  1    wreg      void 
 19396 ;; Registers used:
 19397 ;;		wreg, status,2, status,0, cstack
 19398 ;; Tracked objects:
 19399 ;;		On entry : 0/0
 19400 ;;		On exit  : 0/0
 19401 ;;		Unchanged: 0/0
 19402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19403 ;;      Params:         0       0       0       0       0       0       0
 19404 ;;      Locals:         0       0       0       0       0       0       0
 19405 ;;      Temps:          0       0       0       0       0       0       0
 19406 ;;      Totals:         0       0       0       0       0       0       0
 19407 ;;Total ram usage:        0 bytes
 19408 ;; Hardware stack levels used:    1
 19409 ;; Hardware stack levels required when called:    1
 19410 ;; This function calls:
 19411 ;;		___lwmod
 19412 ;; This function is called by:
 19413 ;;		_INTERRUPT_InterruptManager
 19414 ;; This function uses a non-reentrant model
 19415 ;;
 19416                           
 19417                           	psect	text112
 19418  002FD2                     __ptext112:
 19419                           	opt stack 0
 19420  002FD2                     _TMR0_ISR:
 19421                           	opt stack 18
 19422                           
 19423                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 19424                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 19425                           
 19426                           ;incstack = 0
 19427  002FD2  94F2               	bcf	intcon,2,c	;volatile
 19428                           
 19429                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 19430  002FD4  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 19431  002FD6  6ED7               	movwf	4055,c	;volatile
 19432                           
 19433                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 19434  002FD8  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 19435                           
 19436                           ;tmr0.c: 144: CountCallBack++;
 19437  002FDC  4A31               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 19438  002FDE  2A32               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 19439                           
 19440                           ;tmr0.c: 145: if ((CountCallBack % 250) == 0)
 19441  002FE0  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19442  002FE4  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19443  002FE8  0E00               	movlw	0
 19444  002FEA  6E04               	movwf	___lwmod@divisor+1,c
 19445  002FEC  0EFA               	movlw	250
 19446  002FEE  6E03               	movwf	___lwmod@divisor,c
 19447  002FF0  EC65  F01E         	call	___lwmod	;wreg free
 19448  002FF4  5001               	movf	?___lwmod,w,c
 19449  002FF6  1002               	iorwf	?___lwmod+1,w,c
 19450  002FF8  A4D8               	btfss	status,2,c
 19451  002FFA  D003               	goto	i2l1121
 19452                           
 19453                           ;tmr0.c: 146: {
 19454                           ;tmr0.c: 147: Timer0_SynthLd = 1;
 19455  002FFC  0E01               	movlw	1
 19456  002FFE  0100               	movlb	0	; () banked
 19457  003000  6FFA               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
 19458  003002                     i2l1121:
 19459                           
 19460                           ;tmr0.c: 148: }
 19461                           ;tmr0.c: 149: if ((CountCallBack % 800) == 0)
 19462                           
 19463                           ; BSR set to: 0
 19464  003002  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19465  003006  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19466  00300A  0E03               	movlw	3
 19467  00300C  6E04               	movwf	___lwmod@divisor+1,c
 19468  00300E  0E20               	movlw	32
 19469  003010  6E03               	movwf	___lwmod@divisor,c
 19470  003012  EC65  F01E         	call	___lwmod	;wreg free
 19471  003016  5001               	movf	?___lwmod,w,c
 19472  003018  1002               	iorwf	?___lwmod+1,w,c
 19473  00301A  A4D8               	btfss	status,2,c
 19474  00301C  D003               	goto	i2l1122
 19475                           
 19476                           ;tmr0.c: 150: {
 19477                           ;tmr0.c: 151: Timer0_Sampling = 1;
 19478  00301E  0E01               	movlw	1
 19479  003020  0100               	movlb	0	; () banked
 19480  003022  6FF9               	movwf	_Timer0_Sampling& (0+255),b	;volatile
 19481  003024                     i2l1122:
 19482                           
 19483                           ;tmr0.c: 152: }
 19484                           ;tmr0.c: 153: if ((CountCallBack % 350) == 0)
 19485                           
 19486                           ; BSR set to: 0
 19487  003024  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19488  003028  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19489  00302C  0E01               	movlw	1
 19490  00302E  6E04               	movwf	___lwmod@divisor+1,c
 19491  003030  0E5E               	movlw	94
 19492  003032  6E03               	movwf	___lwmod@divisor,c
 19493  003034  EC65  F01E         	call	___lwmod	;wreg free
 19494  003038  5001               	movf	?___lwmod,w,c
 19495  00303A  1002               	iorwf	?___lwmod+1,w,c
 19496  00303C  A4D8               	btfss	status,2,c
 19497  00303E  D003               	goto	i2l1123
 19498                           
 19499                           ;tmr0.c: 154: {
 19500                           ;tmr0.c: 155: Timer0_KeepAlive = 1;
 19501  003040  0E01               	movlw	1
 19502  003042  0100               	movlb	0	; () banked
 19503  003044  6FF8               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
 19504  003046                     i2l1123:
 19505                           
 19506                           ;tmr0.c: 156: }
 19507                           ;tmr0.c: 157: if ((CountCallBack % 10) == 0)
 19508                           
 19509                           ; BSR set to: 0
 19510  003046  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19511  00304A  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19512  00304E  0E00               	movlw	0
 19513  003050  6E04               	movwf	___lwmod@divisor+1,c
 19514  003052  0E0A               	movlw	10
 19515  003054  6E03               	movwf	___lwmod@divisor,c
 19516  003056  EC65  F01E         	call	___lwmod	;wreg free
 19517  00305A  5001               	movf	?___lwmod,w,c
 19518  00305C  1002               	iorwf	?___lwmod+1,w,c
 19519  00305E  A4D8               	btfss	status,2,c
 19520  003060  D003               	goto	i2l1124
 19521                           
 19522                           ;tmr0.c: 158: {
 19523                           ;tmr0.c: 159: Timer0_OneSec = 1;
 19524  003062  0E01               	movlw	1
 19525  003064  0100               	movlb	0	; () banked
 19526  003066  6FF7               	movwf	_Timer0_OneSec& (0+255),b	;volatile
 19527  003068                     i2l1124:
 19528                           
 19529                           ;tmr0.c: 160: }
 19530                           ;tmr0.c: 161: if(CountCallBack >= 35000)
 19531                           
 19532                           ; BSR set to: 0
 19533  003068  0EB8               	movlw	184
 19534  00306A  5C31               	subwf	TMR0_ISR@CountCallBack,w,c	;volatile
 19535  00306C  0E88               	movlw	136
 19536  00306E  5832               	subwfb	TMR0_ISR@CountCallBack+1,w,c	;volatile
 19537  003070  A0D8               	btfss	status,0,c
 19538  003072  0012               	return	
 19539                           
 19540                           ;tmr0.c: 163: {
 19541                           ;tmr0.c: 165: CountCallBack = 0;
 19542  003074  0E00               	movlw	0
 19543  003076  6E32               	movwf	TMR0_ISR@CountCallBack+1,c	;volatile
 19544  003078  0E00               	movlw	0
 19545  00307A  6E31               	movwf	TMR0_ISR@CountCallBack,c	;volatile
 19546  00307C  0012               	return	
 19547  00307E                     __end_of_TMR0_ISR:
 19548                           	opt stack 0
 19549                           tosu	equ	0xFFF
 19550                           tosh	equ	0xFFE
 19551                           tosl	equ	0xFFD
 19552                           pclatu	equ	0xFFB
 19553                           pclath	equ	0xFFA
 19554                           tblptru	equ	0xFF8
 19555                           tblptrh	equ	0xFF7
 19556                           tblptrl	equ	0xFF6
 19557                           tablat	equ	0xFF5
 19558                           prodh	equ	0xFF4
 19559                           prodl	equ	0xFF3
 19560                           intcon	equ	0xFF2
 19561                           intcon2	equ	0xFF1
 19562                           postinc0	equ	0xFEE
 19563                           plusw0	equ	0xFEB
 19564                           fsr0h	equ	0xFEA
 19565                           fsr0l	equ	0xFE9
 19566                           wreg	equ	0xFE8
 19567                           indf1	equ	0xFE7
 19568                           postdec1	equ	0xFE5
 19569                           fsr1h	equ	0xFE2
 19570                           fsr1l	equ	0xFE1
 19571                           indf2	equ	0xFDF
 19572                           postinc2	equ	0xFDE
 19573                           postdec2	equ	0xFDD
 19574                           plusw2	equ	0xFDB
 19575                           fsr2h	equ	0xFDA
 19576                           fsr2l	equ	0xFD9
 19577                           status	equ	0xFD8
 19578                           
 19579 ;; *************** function ___lwmod *****************
 19580 ;; Defined at:
 19581 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 19582 ;; Parameters:    Size  Location     Type
 19583 ;;  dividend        2    0[COMRAM] unsigned int 
 19584 ;;  divisor         2    2[COMRAM] unsigned int 
 19585 ;; Auto vars:     Size  Location     Type
 19586 ;;  counter         1    4[COMRAM] unsigned char 
 19587 ;; Return value:  Size  Location     Type
 19588 ;;                  2    0[COMRAM] unsigned int 
 19589 ;; Registers used:
 19590 ;;		wreg, status,2, status,0
 19591 ;; Tracked objects:
 19592 ;;		On entry : 0/0
 19593 ;;		On exit  : 0/0
 19594 ;;		Unchanged: 0/0
 19595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19596 ;;      Params:         4       0       0       0       0       0       0
 19597 ;;      Locals:         1       0       0       0       0       0       0
 19598 ;;      Temps:          0       0       0       0       0       0       0
 19599 ;;      Totals:         5       0       0       0       0       0       0
 19600 ;;Total ram usage:        5 bytes
 19601 ;; Hardware stack levels used:    1
 19602 ;; This function calls:
 19603 ;;		Nothing
 19604 ;; This function is called by:
 19605 ;;		_TMR0_ISR
 19606 ;; This function uses a non-reentrant model
 19607 ;;
 19608                           
 19609                           	psect	text113
 19610  003CCA                     __ptext113:
 19611                           	opt stack 0
 19612  003CCA                     ___lwmod:
 19613                           	opt stack 18
 19614                           
 19615                           ;incstack = 0
 19616  003CCA  5003               	movf	___lwmod@divisor,w,c
 19617  003CCC  1004               	iorwf	___lwmod@divisor+1,w,c
 19618  003CCE  B4D8               	btfsc	status,2,c
 19619  003CD0  D018               	goto	i2l2020
 19620  003CD2  0E01               	movlw	1
 19621  003CD4  6E05               	movwf	___lwmod@counter,c
 19622  003CD6  D004               	goto	i2l2015
 19623  003CD8  90D8               	bcf	status,0,c
 19624  003CDA  3603               	rlcf	___lwmod@divisor,f,c
 19625  003CDC  3604               	rlcf	___lwmod@divisor+1,f,c
 19626  003CDE  2A05               	incf	___lwmod@counter,f,c
 19627  003CE0                     i2l2015:
 19628  003CE0  AE04               	btfss	___lwmod@divisor+1,7,c
 19629  003CE2  D7FA               	goto	i2l2016
 19630  003CE4                     i2u582_40:
 19631  003CE4  5003               	movf	___lwmod@divisor,w,c
 19632  003CE6  5C01               	subwf	___lwmod@dividend,w,c
 19633  003CE8  5004               	movf	___lwmod@divisor+1,w,c
 19634  003CEA  5802               	subwfb	___lwmod@dividend+1,w,c
 19635  003CEC  A0D8               	btfss	status,0,c
 19636  003CEE  D004               	goto	i2l2019
 19637  003CF0  5003               	movf	___lwmod@divisor,w,c
 19638  003CF2  5E01               	subwf	___lwmod@dividend,f,c
 19639  003CF4  5004               	movf	___lwmod@divisor+1,w,c
 19640  003CF6  5A02               	subwfb	___lwmod@dividend+1,f,c
 19641  003CF8                     i2l2019:
 19642  003CF8  90D8               	bcf	status,0,c
 19643  003CFA  3204               	rrcf	___lwmod@divisor+1,f,c
 19644  003CFC  3203               	rrcf	___lwmod@divisor,f,c
 19645  003CFE  2E05               	decfsz	___lwmod@counter,f,c
 19646  003D00  D7F1               	goto	i2u582_40
 19647  003D02                     i2l2020:
 19648  003D02  C001  F001         	movff	___lwmod@dividend,?___lwmod
 19649  003D06  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 19650  003D0A  0012               	return		;funcret
 19651  003D0C                     __end_of___lwmod:
 19652                           	opt stack 0
 19653                           tosu	equ	0xFFF
 19654                           tosh	equ	0xFFE
 19655                           tosl	equ	0xFFD
 19656                           pclatu	equ	0xFFB
 19657                           pclath	equ	0xFFA
 19658                           tblptru	equ	0xFF8
 19659                           tblptrh	equ	0xFF7
 19660                           tblptrl	equ	0xFF6
 19661                           tablat	equ	0xFF5
 19662                           prodh	equ	0xFF4
 19663                           prodl	equ	0xFF3
 19664                           intcon	equ	0xFF2
 19665                           intcon2	equ	0xFF1
 19666                           postinc0	equ	0xFEE
 19667                           plusw0	equ	0xFEB
 19668                           fsr0h	equ	0xFEA
 19669                           fsr0l	equ	0xFE9
 19670                           wreg	equ	0xFE8
 19671                           indf1	equ	0xFE7
 19672                           postdec1	equ	0xFE5
 19673                           fsr1h	equ	0xFE2
 19674                           fsr1l	equ	0xFE1
 19675                           indf2	equ	0xFDF
 19676                           postinc2	equ	0xFDE
 19677                           postdec2	equ	0xFDD
 19678                           plusw2	equ	0xFDB
 19679                           fsr2h	equ	0xFDA
 19680                           fsr2l	equ	0xFD9
 19681                           status	equ	0xFD8
 19682                           
 19683 ;; *************** function _PIN_MANAGER_IOC *****************
 19684 ;; Defined at:
 19685 ;;		line 108 in file "mcc_generated_files/pin_manager.c"
 19686 ;; Parameters:    Size  Location     Type
 19687 ;;		None
 19688 ;; Auto vars:     Size  Location     Type
 19689 ;;		None
 19690 ;; Return value:  Size  Location     Type
 19691 ;;                  1    wreg      void 
 19692 ;; Registers used:
 19693 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19694 ;; Tracked objects:
 19695 ;;		On entry : 0/0
 19696 ;;		On exit  : 0/0
 19697 ;;		Unchanged: 0/0
 19698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19699 ;;      Params:         0       0       0       0       0       0       0
 19700 ;;      Locals:         0       0       0       0       0       0       0
 19701 ;;      Temps:          0       0       0       0       0       0       0
 19702 ;;      Totals:         0       0       0       0       0       0       0
 19703 ;;Total ram usage:        0 bytes
 19704 ;; Hardware stack levels used:    1
 19705 ;; Hardware stack levels required when called:    2
 19706 ;; This function calls:
 19707 ;;		_IOCB4_ISR
 19708 ;;		_IOCB5_ISR
 19709 ;; This function is called by:
 19710 ;;		_INTERRUPT_InterruptManager
 19711 ;; This function uses a non-reentrant model
 19712 ;;
 19713                           
 19714                           	psect	text114
 19715  0043C2                     __ptext114:
 19716                           	opt stack 0
 19717  0043C2                     _PIN_MANAGER_IOC:
 19718                           	opt stack 17
 19719                           
 19720                           ;pin_manager.c: 111: if(IOCBbits.IOCB4 == 1)
 19721                           
 19722                           ;incstack = 0
 19723  0043C2  B862               	btfsc	3938,4,c	;volatile
 19724                           
 19725                           ;pin_manager.c: 112: {
 19726                           ;pin_manager.c: 113: IOCB4_ISR();
 19727  0043C4  EC19  F021         	call	_IOCB4_ISR	;wreg free
 19728                           
 19729                           ;pin_manager.c: 114: }
 19730                           ;pin_manager.c: 116: if(IOCBbits.IOCB5 == 1)
 19731  0043C8  BA62               	btfsc	3938,5,c	;volatile
 19732                           
 19733                           ;pin_manager.c: 117: {
 19734                           ;pin_manager.c: 118: IOCB5_ISR();
 19735  0043CA  EC08  F021         	call	_IOCB5_ISR	;wreg free
 19736                           
 19737                           ;pin_manager.c: 119: }
 19738                           ;pin_manager.c: 122: INTCONbits.RBIF = 0;
 19739  0043CE  90F2               	bcf	intcon,0,c	;volatile
 19740  0043D0  0012               	return		;funcret
 19741  0043D2                     __end_of_PIN_MANAGER_IOC:
 19742                           	opt stack 0
 19743                           tosu	equ	0xFFF
 19744                           tosh	equ	0xFFE
 19745                           tosl	equ	0xFFD
 19746                           pclatu	equ	0xFFB
 19747                           pclath	equ	0xFFA
 19748                           tblptru	equ	0xFF8
 19749                           tblptrh	equ	0xFF7
 19750                           tblptrl	equ	0xFF6
 19751                           tablat	equ	0xFF5
 19752                           prodh	equ	0xFF4
 19753                           prodl	equ	0xFF3
 19754                           intcon	equ	0xFF2
 19755                           intcon2	equ	0xFF1
 19756                           postinc0	equ	0xFEE
 19757                           plusw0	equ	0xFEB
 19758                           fsr0h	equ	0xFEA
 19759                           fsr0l	equ	0xFE9
 19760                           wreg	equ	0xFE8
 19761                           indf1	equ	0xFE7
 19762                           postdec1	equ	0xFE5
 19763                           fsr1h	equ	0xFE2
 19764                           fsr1l	equ	0xFE1
 19765                           indf2	equ	0xFDF
 19766                           postinc2	equ	0xFDE
 19767                           postdec2	equ	0xFDD
 19768                           plusw2	equ	0xFDB
 19769                           fsr2h	equ	0xFDA
 19770                           fsr2l	equ	0xFD9
 19771                           status	equ	0xFD8
 19772                           
 19773 ;; *************** function _IOCB5_ISR *****************
 19774 ;; Defined at:
 19775 ;;		line 158 in file "mcc_generated_files/pin_manager.c"
 19776 ;; Parameters:    Size  Location     Type
 19777 ;;		None
 19778 ;; Auto vars:     Size  Location     Type
 19779 ;;		None
 19780 ;; Return value:  Size  Location     Type
 19781 ;;                  1    wreg      void 
 19782 ;; Registers used:
 19783 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19784 ;; Tracked objects:
 19785 ;;		On entry : 0/0
 19786 ;;		On exit  : 0/0
 19787 ;;		Unchanged: 0/0
 19788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19789 ;;      Params:         0       0       0       0       0       0       0
 19790 ;;      Locals:         0       0       0       0       0       0       0
 19791 ;;      Temps:          0       0       0       0       0       0       0
 19792 ;;      Totals:         0       0       0       0       0       0       0
 19793 ;;Total ram usage:        0 bytes
 19794 ;; Hardware stack levels used:    1
 19795 ;; Hardware stack levels required when called:    1
 19796 ;; This function calls:
 19797 ;;		Absolute function
 19798 ;;		_IOCB5_DefaultInterruptHandler
 19799 ;; This function is called by:
 19800 ;;		_PIN_MANAGER_IOC
 19801 ;; This function uses a non-reentrant model
 19802 ;;
 19803                           
 19804                           	psect	text115
 19805  004210                     __ptext115:
 19806                           	opt stack 0
 19807  004210                     _IOCB5_ISR:
 19808                           	opt stack 17
 19809                           
 19810                           ;pin_manager.c: 163: if(IOCB5_InterruptHandler)
 19811                           
 19812                           ;incstack = 0
 19813  004210  0101               	movlb	1	; () banked
 19814  004212  51CE               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19815  004214  11CF               	iorwf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19816  004216  B4D8               	btfsc	status,2,c
 19817  004218  0012               	return	
 19818                           
 19819                           ; BSR set to: 1
 19820                           ;pin_manager.c: 164: {
 19821                           ;pin_manager.c: 165: IOCB5_InterruptHandler();
 19822  00421A  D801               	call	i2u574_48
 19823  00421C  0012               	return	
 19824  00421E                     i2u574_48:
 19825  00421E  0005               	push	
 19826  004220  6EFA               	movwf	pclath,c
 19827  004222  51CE               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19828  004224  6EFD               	movwf	tosl,c
 19829  004226  51CF               	movf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19830  004228  6EFE               	movwf	tosh,c
 19831  00422A  50F8               	movf	tblptru,w,c
 19832  00422C  6EFF               	movwf	tosu,c
 19833  00422E  50FA               	movf	pclath,w,c
 19834  004230  0012               	return		;indir
 19835  004232                     __end_of_IOCB5_ISR:
 19836                           	opt stack 0
 19837                           tosu	equ	0xFFF
 19838                           tosh	equ	0xFFE
 19839                           tosl	equ	0xFFD
 19840                           pclatu	equ	0xFFB
 19841                           pclath	equ	0xFFA
 19842                           tblptru	equ	0xFF8
 19843                           tblptrh	equ	0xFF7
 19844                           tblptrl	equ	0xFF6
 19845                           tablat	equ	0xFF5
 19846                           prodh	equ	0xFF4
 19847                           prodl	equ	0xFF3
 19848                           intcon	equ	0xFF2
 19849                           intcon2	equ	0xFF1
 19850                           postinc0	equ	0xFEE
 19851                           plusw0	equ	0xFEB
 19852                           fsr0h	equ	0xFEA
 19853                           fsr0l	equ	0xFE9
 19854                           wreg	equ	0xFE8
 19855                           indf1	equ	0xFE7
 19856                           postdec1	equ	0xFE5
 19857                           fsr1h	equ	0xFE2
 19858                           fsr1l	equ	0xFE1
 19859                           indf2	equ	0xFDF
 19860                           postinc2	equ	0xFDE
 19861                           postdec2	equ	0xFDD
 19862                           plusw2	equ	0xFDB
 19863                           fsr2h	equ	0xFDA
 19864                           fsr2l	equ	0xFD9
 19865                           status	equ	0xFD8
 19866                           
 19867 ;; *************** function _IOCB5_DefaultInterruptHandler *****************
 19868 ;; Defined at:
 19869 ;;		line 179 in file "mcc_generated_files/pin_manager.c"
 19870 ;; Parameters:    Size  Location     Type
 19871 ;;		None
 19872 ;; Auto vars:     Size  Location     Type
 19873 ;;		None
 19874 ;; Return value:  Size  Location     Type
 19875 ;;                  1    wreg      void 
 19876 ;; Registers used:
 19877 ;;		None
 19878 ;; Tracked objects:
 19879 ;;		On entry : 0/0
 19880 ;;		On exit  : 0/0
 19881 ;;		Unchanged: 0/0
 19882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19883 ;;      Params:         0       0       0       0       0       0       0
 19884 ;;      Locals:         0       0       0       0       0       0       0
 19885 ;;      Temps:          0       0       0       0       0       0       0
 19886 ;;      Totals:         0       0       0       0       0       0       0
 19887 ;;Total ram usage:        0 bytes
 19888 ;; Hardware stack levels used:    1
 19889 ;; This function calls:
 19890 ;;		Nothing
 19891 ;; This function is called by:
 19892 ;;		_PIN_MANAGER_Initialize
 19893 ;;		_IOCB5_ISR
 19894 ;; This function uses a non-reentrant model
 19895 ;;
 19896                           
 19897                           	psect	text116
 19898  00446E                     __ptext116:
 19899                           	opt stack 0
 19900  00446E                     _IOCB5_DefaultInterruptHandler:
 19901                           	opt stack 17
 19902                           
 19903                           ;incstack = 0
 19904  00446E  0012               	return		;funcret
 19905  004470                     __end_of_IOCB5_DefaultInterruptHandler:
 19906                           	opt stack 0
 19907                           tosu	equ	0xFFF
 19908                           tosh	equ	0xFFE
 19909                           tosl	equ	0xFFD
 19910                           pclatu	equ	0xFFB
 19911                           pclath	equ	0xFFA
 19912                           tblptru	equ	0xFF8
 19913                           tblptrh	equ	0xFF7
 19914                           tblptrl	equ	0xFF6
 19915                           tablat	equ	0xFF5
 19916                           prodh	equ	0xFF4
 19917                           prodl	equ	0xFF3
 19918                           intcon	equ	0xFF2
 19919                           intcon2	equ	0xFF1
 19920                           postinc0	equ	0xFEE
 19921                           plusw0	equ	0xFEB
 19922                           fsr0h	equ	0xFEA
 19923                           fsr0l	equ	0xFE9
 19924                           wreg	equ	0xFE8
 19925                           indf1	equ	0xFE7
 19926                           postdec1	equ	0xFE5
 19927                           fsr1h	equ	0xFE2
 19928                           fsr1l	equ	0xFE1
 19929                           indf2	equ	0xFDF
 19930                           postinc2	equ	0xFDE
 19931                           postdec2	equ	0xFDD
 19932                           plusw2	equ	0xFDB
 19933                           fsr2h	equ	0xFDA
 19934                           fsr2l	equ	0xFD9
 19935                           status	equ	0xFD8
 19936                           
 19937 ;; *************** function _IOCB4_ISR *****************
 19938 ;; Defined at:
 19939 ;;		line 129 in file "mcc_generated_files/pin_manager.c"
 19940 ;; Parameters:    Size  Location     Type
 19941 ;;		None
 19942 ;; Auto vars:     Size  Location     Type
 19943 ;;		None
 19944 ;; Return value:  Size  Location     Type
 19945 ;;                  1    wreg      void 
 19946 ;; Registers used:
 19947 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19948 ;; Tracked objects:
 19949 ;;		On entry : 0/0
 19950 ;;		On exit  : 0/0
 19951 ;;		Unchanged: 0/0
 19952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19953 ;;      Params:         0       0       0       0       0       0       0
 19954 ;;      Locals:         0       0       0       0       0       0       0
 19955 ;;      Temps:          0       0       0       0       0       0       0
 19956 ;;      Totals:         0       0       0       0       0       0       0
 19957 ;;Total ram usage:        0 bytes
 19958 ;; Hardware stack levels used:    1
 19959 ;; Hardware stack levels required when called:    1
 19960 ;; This function calls:
 19961 ;;		Absolute function
 19962 ;;		_IOCB4_DefaultInterruptHandler
 19963 ;; This function is called by:
 19964 ;;		_PIN_MANAGER_IOC
 19965 ;; This function uses a non-reentrant model
 19966 ;;
 19967                           
 19968                           	psect	text117
 19969  004232                     __ptext117:
 19970                           	opt stack 0
 19971  004232                     _IOCB4_ISR:
 19972                           	opt stack 17
 19973                           
 19974                           ;pin_manager.c: 134: if(IOCB4_InterruptHandler)
 19975                           
 19976                           ;incstack = 0
 19977  004232  0101               	movlb	1	; () banked
 19978  004234  51D0               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19979  004236  11D1               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19980  004238  B4D8               	btfsc	status,2,c
 19981  00423A  0012               	return	
 19982                           
 19983                           ; BSR set to: 1
 19984                           ;pin_manager.c: 135: {
 19985                           ;pin_manager.c: 136: IOCB4_InterruptHandler();
 19986  00423C  D801               	call	i2u572_48
 19987  00423E  0012               	return	
 19988  004240                     i2u572_48:
 19989  004240  0005               	push	
 19990  004242  6EFA               	movwf	pclath,c
 19991  004244  51D0               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19992  004246  6EFD               	movwf	tosl,c
 19993  004248  51D1               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19994  00424A  6EFE               	movwf	tosh,c
 19995  00424C  50F8               	movf	tblptru,w,c
 19996  00424E  6EFF               	movwf	tosu,c
 19997  004250  50FA               	movf	pclath,w,c
 19998  004252  0012               	return		;indir
 19999  004254                     __end_of_IOCB4_ISR:
 20000                           	opt stack 0
 20001                           tosu	equ	0xFFF
 20002                           tosh	equ	0xFFE
 20003                           tosl	equ	0xFFD
 20004                           pclatu	equ	0xFFB
 20005                           pclath	equ	0xFFA
 20006                           tblptru	equ	0xFF8
 20007                           tblptrh	equ	0xFF7
 20008                           tblptrl	equ	0xFF6
 20009                           tablat	equ	0xFF5
 20010                           prodh	equ	0xFF4
 20011                           prodl	equ	0xFF3
 20012                           intcon	equ	0xFF2
 20013                           intcon2	equ	0xFF1
 20014                           postinc0	equ	0xFEE
 20015                           plusw0	equ	0xFEB
 20016                           fsr0h	equ	0xFEA
 20017                           fsr0l	equ	0xFE9
 20018                           wreg	equ	0xFE8
 20019                           indf1	equ	0xFE7
 20020                           postdec1	equ	0xFE5
 20021                           fsr1h	equ	0xFE2
 20022                           fsr1l	equ	0xFE1
 20023                           indf2	equ	0xFDF
 20024                           postinc2	equ	0xFDE
 20025                           postdec2	equ	0xFDD
 20026                           plusw2	equ	0xFDB
 20027                           fsr2h	equ	0xFDA
 20028                           fsr2l	equ	0xFD9
 20029                           status	equ	0xFD8
 20030                           
 20031 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 20032 ;; Defined at:
 20033 ;;		line 150 in file "mcc_generated_files/pin_manager.c"
 20034 ;; Parameters:    Size  Location     Type
 20035 ;;		None
 20036 ;; Auto vars:     Size  Location     Type
 20037 ;;		None
 20038 ;; Return value:  Size  Location     Type
 20039 ;;                  1    wreg      void 
 20040 ;; Registers used:
 20041 ;;		None
 20042 ;; Tracked objects:
 20043 ;;		On entry : 0/0
 20044 ;;		On exit  : 0/0
 20045 ;;		Unchanged: 0/0
 20046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20047 ;;      Params:         0       0       0       0       0       0       0
 20048 ;;      Locals:         0       0       0       0       0       0       0
 20049 ;;      Temps:          0       0       0       0       0       0       0
 20050 ;;      Totals:         0       0       0       0       0       0       0
 20051 ;;Total ram usage:        0 bytes
 20052 ;; Hardware stack levels used:    1
 20053 ;; This function calls:
 20054 ;;		Nothing
 20055 ;; This function is called by:
 20056 ;;		_PIN_MANAGER_Initialize
 20057 ;;		_IOCB4_ISR
 20058 ;; This function uses a non-reentrant model
 20059 ;;
 20060                           
 20061                           	psect	text118
 20062  004470                     __ptext118:
 20063                           	opt stack 0
 20064  004470                     _IOCB4_DefaultInterruptHandler:
 20065                           	opt stack 17
 20066                           
 20067                           ;incstack = 0
 20068  004470  0012               	return		;funcret
 20069  004472                     __end_of_IOCB4_DefaultInterruptHandler:
 20070                           	opt stack 0
 20071                           tosu	equ	0xFFF
 20072                           tosh	equ	0xFFE
 20073                           tosl	equ	0xFFD
 20074                           pclatu	equ	0xFFB
 20075                           pclath	equ	0xFFA
 20076                           tblptru	equ	0xFF8
 20077                           tblptrh	equ	0xFF7
 20078                           tblptrl	equ	0xFF6
 20079                           tablat	equ	0xFF5
 20080                           prodh	equ	0xFF4
 20081                           prodl	equ	0xFF3
 20082                           intcon	equ	0xFF2
 20083                           intcon2	equ	0xFF1
 20084                           postinc0	equ	0xFEE
 20085                           plusw0	equ	0xFEB
 20086                           fsr0h	equ	0xFEA
 20087                           fsr0l	equ	0xFE9
 20088                           wreg	equ	0xFE8
 20089                           indf1	equ	0xFE7
 20090                           postdec1	equ	0xFE5
 20091                           fsr1h	equ	0xFE2
 20092                           fsr1l	equ	0xFE1
 20093                           indf2	equ	0xFDF
 20094                           postinc2	equ	0xFDE
 20095                           postdec2	equ	0xFDD
 20096                           plusw2	equ	0xFDB
 20097                           fsr2h	equ	0xFDA
 20098                           fsr2l	equ	0xFD9
 20099                           status	equ	0xFD8
 20100                           
 20101 ;; *************** function _MEMORY_ISR *****************
 20102 ;; Defined at:
 20103 ;;		line 206 in file "mcc_generated_files/memory.c"
 20104 ;; Parameters:    Size  Location     Type
 20105 ;;		None
 20106 ;; Auto vars:     Size  Location     Type
 20107 ;;		None
 20108 ;; Return value:  Size  Location     Type
 20109 ;;                  1    wreg      void 
 20110 ;; Registers used:
 20111 ;;		None
 20112 ;; Tracked objects:
 20113 ;;		On entry : 0/0
 20114 ;;		On exit  : 0/0
 20115 ;;		Unchanged: 0/0
 20116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20117 ;;      Params:         0       0       0       0       0       0       0
 20118 ;;      Locals:         0       0       0       0       0       0       0
 20119 ;;      Temps:          0       0       0       0       0       0       0
 20120 ;;      Totals:         0       0       0       0       0       0       0
 20121 ;;Total ram usage:        0 bytes
 20122 ;; Hardware stack levels used:    1
 20123 ;; This function calls:
 20124 ;;		Nothing
 20125 ;; This function is called by:
 20126 ;;		_INTERRUPT_InterruptManager
 20127 ;; This function uses a non-reentrant model
 20128 ;;
 20129                           
 20130                           	psect	text119
 20131  00446A                     __ptext119:
 20132                           	opt stack 0
 20133  00446A                     _MEMORY_ISR:
 20134                           	opt stack 19
 20135                           
 20136                           ;memory.c: 209: PIR2bits.EEIF = 0;
 20137                           
 20138                           ;incstack = 0
 20139  00446A  98A1               	bcf	4001,4,c	;volatile
 20140  00446C  0012               	return		;funcret
 20141  00446E                     __end_of_MEMORY_ISR:
 20142                           	opt stack 0
 20143                           tosu	equ	0xFFF
 20144                           tosh	equ	0xFFE
 20145                           tosl	equ	0xFFD
 20146                           pclatu	equ	0xFFB
 20147                           pclath	equ	0xFFA
 20148                           tblptru	equ	0xFF8
 20149                           tblptrh	equ	0xFF7
 20150                           tblptrl	equ	0xFF6
 20151                           tablat	equ	0xFF5
 20152                           prodh	equ	0xFF4
 20153                           prodl	equ	0xFF3
 20154                           intcon	equ	0xFF2
 20155                           intcon2	equ	0xFF1
 20156                           postinc0	equ	0xFEE
 20157                           plusw0	equ	0xFEB
 20158                           fsr0h	equ	0xFEA
 20159                           fsr0l	equ	0xFE9
 20160                           wreg	equ	0xFE8
 20161                           indf1	equ	0xFE7
 20162                           postdec1	equ	0xFE5
 20163                           fsr1h	equ	0xFE2
 20164                           fsr1l	equ	0xFE1
 20165                           indf2	equ	0xFDF
 20166                           postinc2	equ	0xFDE
 20167                           postdec2	equ	0xFDD
 20168                           plusw2	equ	0xFDB
 20169                           fsr2h	equ	0xFDA
 20170                           fsr2l	equ	0xFD9
 20171                           status	equ	0xFD8
 20172                           
 20173 ;; *************** function _EUSART1_Transmit_ISR *****************
 20174 ;; Defined at:
 20175 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 20176 ;; Parameters:    Size  Location     Type
 20177 ;;		None
 20178 ;; Auto vars:     Size  Location     Type
 20179 ;;		None
 20180 ;; Return value:  Size  Location     Type
 20181 ;;                  1    wreg      void 
 20182 ;; Registers used:
 20183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20184 ;; Tracked objects:
 20185 ;;		On entry : 0/0
 20186 ;;		On exit  : 0/0
 20187 ;;		Unchanged: 0/0
 20188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20189 ;;      Params:         0       0       0       0       0       0       0
 20190 ;;      Locals:         0       0       0       0       0       0       0
 20191 ;;      Temps:          0       0       0       0       0       0       0
 20192 ;;      Totals:         0       0       0       0       0       0       0
 20193 ;;Total ram usage:        0 bytes
 20194 ;; Hardware stack levels used:    1
 20195 ;; This function calls:
 20196 ;;		Nothing
 20197 ;; This function is called by:
 20198 ;;		_INTERRUPT_InterruptManager
 20199 ;; This function uses a non-reentrant model
 20200 ;;
 20201                           
 20202                           	psect	text120
 20203  003EDE                     __ptext120:
 20204                           	opt stack 0
 20205  003EDE                     _EUSART1_Transmit_ISR:
 20206                           	opt stack 19
 20207                           
 20208                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 20209                           
 20210                           ;incstack = 0
 20211  003EDE  0E46               	movlw	70
 20212  003EE0  0101               	movlb	1	; () banked
 20213  003EE2  61D2               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 20214  003EE4  D012               	goto	i2l919
 20215                           
 20216                           ; BSR set to: 1
 20217                           ;eusart1.c: 186: {
 20218                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 20219  003EE6  5035               	movf	_eusart1TxTail,w,c	;volatile
 20220  003EE8  0D01               	mullw	1
 20221  003EEA  0E00               	movlw	low _eusart1TxBuffer
 20222  003EEC  24F3               	addwf	prodl,w,c
 20223  003EEE  6ED9               	movwf	fsr2l,c
 20224  003EF0  0E02               	movlw	high _eusart1TxBuffer
 20225  003EF2  20F4               	addwfc	prodh,w,c
 20226  003EF4  6EDA               	movwf	fsr2h,c
 20227  003EF6  50DF               	movf	indf2,w,c
 20228  003EF8  6EAD               	movwf	4013,c	;volatile
 20229                           
 20230                           ; BSR set to: 1
 20231  003EFA  2A35               	incf	_eusart1TxTail,f,c	;volatile
 20232                           
 20233                           ; BSR set to: 1
 20234                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 20235  003EFC  0E45               	movlw	69
 20236  003EFE  6435               	cpfsgt	_eusart1TxTail,c	;volatile
 20237  003F00  D002               	goto	i2l920
 20238                           
 20239                           ; BSR set to: 1
 20240                           ;eusart1.c: 189: {
 20241                           ;eusart1.c: 190: eusart1TxTail = 0;
 20242  003F02  0E00               	movlw	0
 20243  003F04  6E35               	movwf	_eusart1TxTail,c	;volatile
 20244  003F06                     i2l920:
 20245                           
 20246                           ; BSR set to: 1
 20247                           ;eusart1.c: 191: }
 20248                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 20249                           
 20250                           ; BSR set to: 1
 20251  003F06  2BD2               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 20252                           
 20253                           ;eusart1.c: 193: }
 20254  003F08  0012               	return	
 20255  003F0A                     i2l919:
 20256                           
 20257                           ; BSR set to: 1
 20258                           ;eusart1.c: 194: else
 20259                           ;eusart1.c: 195: {
 20260                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 20261  003F0A  989D               	bcf	3997,4,c	;volatile
 20262                           
 20263                           ; BSR set to: 1
 20264                           ;eusart1.c: 197: eusart1TxTail = 0;
 20265  003F0C  0E00               	movlw	0
 20266  003F0E  6E35               	movwf	_eusart1TxTail,c	;volatile
 20267                           
 20268                           ;eusart1.c: 198: eusart1TxHead = 0;
 20269  003F10  0E00               	movlw	0
 20270  003F12  6E36               	movwf	_eusart1TxHead,c	;volatile
 20271  003F14  0012               	return	
 20272  003F16                     __end_of_EUSART1_Transmit_ISR:
 20273                           	opt stack 0
 20274                           tosu	equ	0xFFF
 20275                           tosh	equ	0xFFE
 20276                           tosl	equ	0xFFD
 20277                           pclatu	equ	0xFFB
 20278                           pclath	equ	0xFFA
 20279                           tblptru	equ	0xFF8
 20280                           tblptrh	equ	0xFF7
 20281                           tblptrl	equ	0xFF6
 20282                           tablat	equ	0xFF5
 20283                           prodh	equ	0xFF4
 20284                           prodl	equ	0xFF3
 20285                           intcon	equ	0xFF2
 20286                           intcon2	equ	0xFF1
 20287                           postinc0	equ	0xFEE
 20288                           plusw0	equ	0xFEB
 20289                           fsr0h	equ	0xFEA
 20290                           fsr0l	equ	0xFE9
 20291                           wreg	equ	0xFE8
 20292                           indf1	equ	0xFE7
 20293                           postdec1	equ	0xFE5
 20294                           fsr1h	equ	0xFE2
 20295                           fsr1l	equ	0xFE1
 20296                           indf2	equ	0xFDF
 20297                           postinc2	equ	0xFDE
 20298                           postdec2	equ	0xFDD
 20299                           plusw2	equ	0xFDB
 20300                           fsr2h	equ	0xFDA
 20301                           fsr2l	equ	0xFD9
 20302                           status	equ	0xFD8
 20303                           
 20304 ;; *************** function _EUSART1_Receive_ISR *****************
 20305 ;; Defined at:
 20306 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 20307 ;; Parameters:    Size  Location     Type
 20308 ;;		None
 20309 ;; Auto vars:     Size  Location     Type
 20310 ;;		None
 20311 ;; Return value:  Size  Location     Type
 20312 ;;                  1    wreg      void 
 20313 ;; Registers used:
 20314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20315 ;; Tracked objects:
 20316 ;;		On entry : 0/0
 20317 ;;		On exit  : 0/0
 20318 ;;		Unchanged: 0/0
 20319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20320 ;;      Params:         0       0       0       0       0       0       0
 20321 ;;      Locals:         0       0       0       0       0       0       0
 20322 ;;      Temps:          0       0       0       0       0       0       0
 20323 ;;      Totals:         0       0       0       0       0       0       0
 20324 ;;Total ram usage:        0 bytes
 20325 ;; Hardware stack levels used:    1
 20326 ;; This function calls:
 20327 ;;		Nothing
 20328 ;; This function is called by:
 20329 ;;		_INTERRUPT_InterruptManager
 20330 ;; This function uses a non-reentrant model
 20331 ;;
 20332                           
 20333                           	psect	text121
 20334  0040AE                     __ptext121:
 20335                           	opt stack 0
 20336  0040AE                     _EUSART1_Receive_ISR:
 20337                           	opt stack 19
 20338                           
 20339                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 20340                           
 20341                           ; BSR set to: 1
 20342                           ;incstack = 0
 20343  0040AE  A2AB               	btfss	4011,1,c	;volatile
 20344  0040B0  D002               	goto	i2l925
 20345                           
 20346                           ;eusart1.c: 206: {
 20347                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 20348  0040B2  98AB               	bcf	4011,4,c	;volatile
 20349                           
 20350                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 20351  0040B4  88AB               	bsf	4011,4,c	;volatile
 20352  0040B6                     i2l925:
 20353                           
 20354                           ;eusart1.c: 210: }
 20355                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 20356  0040B6  5034               	movf	_eusart1RxHead,w,c	;volatile
 20357  0040B8  0D01               	mullw	1
 20358  0040BA  0E00               	movlw	low _eusart1RxBuffer
 20359  0040BC  24F3               	addwf	prodl,w,c
 20360  0040BE  6ED9               	movwf	fsr2l,c
 20361  0040C0  0E01               	movlw	high _eusart1RxBuffer
 20362  0040C2  20F4               	addwfc	prodh,w,c
 20363  0040C4  6EDA               	movwf	fsr2h,c
 20364  0040C6  CFAE FFDF          	movff	4014,indf2	;volatile
 20365  0040CA  2A34               	incf	_eusart1RxHead,f,c	;volatile
 20366                           
 20367                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 20368  0040CC  0E27               	movlw	39
 20369  0040CE  6434               	cpfsgt	_eusart1RxHead,c	;volatile
 20370  0040D0  D002               	goto	i2l926
 20371                           
 20372                           ;eusart1.c: 217: {
 20373                           ;eusart1.c: 218: eusart1RxHead = 0;
 20374  0040D2  0E00               	movlw	0
 20375  0040D4  6E34               	movwf	_eusart1RxHead,c	;volatile
 20376  0040D6                     i2l926:
 20377                           
 20378                           ;eusart1.c: 219: }
 20379                           ;eusart1.c: 220: eusart1RxCount++;
 20380  0040D6  0100               	movlb	0	; () banked
 20381  0040D8  2BF5               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 20382                           
 20383                           ; BSR set to: 0
 20384  0040DA  0012               	return		;funcret
 20385  0040DC                     __end_of_EUSART1_Receive_ISR:
 20386                           	opt stack 0
 20387                           tosu	equ	0xFFF
 20388                           tosh	equ	0xFFE
 20389                           tosl	equ	0xFFD
 20390                           pclatu	equ	0xFFB
 20391                           pclath	equ	0xFFA
 20392                           tblptru	equ	0xFF8
 20393                           tblptrh	equ	0xFF7
 20394                           tblptrl	equ	0xFF6
 20395                           tablat	equ	0xFF5
 20396                           prodh	equ	0xFF4
 20397                           prodl	equ	0xFF3
 20398                           intcon	equ	0xFF2
 20399                           intcon2	equ	0xFF1
 20400                           postinc0	equ	0xFEE
 20401                           plusw0	equ	0xFEB
 20402                           fsr0h	equ	0xFEA
 20403                           fsr0l	equ	0xFE9
 20404                           wreg	equ	0xFE8
 20405                           indf1	equ	0xFE7
 20406                           postdec1	equ	0xFE5
 20407                           fsr1h	equ	0xFE2
 20408                           fsr1l	equ	0xFE1
 20409                           indf2	equ	0xFDF
 20410                           postinc2	equ	0xFDE
 20411                           postdec2	equ	0xFDD
 20412                           plusw2	equ	0xFDB
 20413                           fsr2h	equ	0xFDA
 20414                           fsr2l	equ	0xFD9
 20415                           status	equ	0xFD8
 20416                           tosu	equ	0xFFF
 20417                           tosh	equ	0xFFE
 20418                           tosl	equ	0xFFD
 20419                           pclatu	equ	0xFFB
 20420                           pclath	equ	0xFFA
 20421                           tblptru	equ	0xFF8
 20422                           tblptrh	equ	0xFF7
 20423                           tblptrl	equ	0xFF6
 20424                           tablat	equ	0xFF5
 20425                           prodh	equ	0xFF4
 20426                           prodl	equ	0xFF3
 20427                           intcon	equ	0xFF2
 20428                           intcon2	equ	0xFF1
 20429                           postinc0	equ	0xFEE
 20430                           plusw0	equ	0xFEB
 20431                           fsr0h	equ	0xFEA
 20432                           fsr0l	equ	0xFE9
 20433                           wreg	equ	0xFE8
 20434                           indf1	equ	0xFE7
 20435                           postdec1	equ	0xFE5
 20436                           fsr1h	equ	0xFE2
 20437                           fsr1l	equ	0xFE1
 20438                           indf2	equ	0xFDF
 20439                           postinc2	equ	0xFDE
 20440                           postdec2	equ	0xFDD
 20441                           plusw2	equ	0xFDB
 20442                           fsr2h	equ	0xFDA
 20443                           fsr2l	equ	0xFD9
 20444                           status	equ	0xFD8
 20445                           
 20446                           	psect	text122
 20447  000000                     __ptext122:
 20448                           	opt stack 0
 20449                           tosu	equ	0xFFF
 20450                           tosh	equ	0xFFE
 20451                           tosl	equ	0xFFD
 20452                           pclatu	equ	0xFFB
 20453                           pclath	equ	0xFFA
 20454                           tblptru	equ	0xFF8
 20455                           tblptrh	equ	0xFF7
 20456                           tblptrl	equ	0xFF6
 20457                           tablat	equ	0xFF5
 20458                           prodh	equ	0xFF4
 20459                           prodl	equ	0xFF3
 20460                           intcon	equ	0xFF2
 20461                           intcon2	equ	0xFF1
 20462                           postinc0	equ	0xFEE
 20463                           plusw0	equ	0xFEB
 20464                           fsr0h	equ	0xFEA
 20465                           fsr0l	equ	0xFE9
 20466                           wreg	equ	0xFE8
 20467                           indf1	equ	0xFE7
 20468                           postdec1	equ	0xFE5
 20469                           fsr1h	equ	0xFE2
 20470                           fsr1l	equ	0xFE1
 20471                           indf2	equ	0xFDF
 20472                           postinc2	equ	0xFDE
 20473                           postdec2	equ	0xFDD
 20474                           plusw2	equ	0xFDB
 20475                           fsr2h	equ	0xFDA
 20476                           fsr2l	equ	0xFD9
 20477                           status	equ	0xFD8
 20478                           
 20479                           	psect	rparam
 20480  0000                     tosu	equ	0xFFF
 20481                           tosh	equ	0xFFE
 20482                           tosl	equ	0xFFD
 20483                           pclatu	equ	0xFFB
 20484                           pclath	equ	0xFFA
 20485                           tblptru	equ	0xFF8
 20486                           tblptrh	equ	0xFF7
 20487                           tblptrl	equ	0xFF6
 20488                           tablat	equ	0xFF5
 20489                           prodh	equ	0xFF4
 20490                           prodl	equ	0xFF3
 20491                           intcon	equ	0xFF2
 20492                           intcon2	equ	0xFF1
 20493                           postinc0	equ	0xFEE
 20494                           plusw0	equ	0xFEB
 20495                           fsr0h	equ	0xFEA
 20496                           fsr0l	equ	0xFE9
 20497                           wreg	equ	0xFE8
 20498                           indf1	equ	0xFE7
 20499                           postdec1	equ	0xFE5
 20500                           fsr1h	equ	0xFE2
 20501                           fsr1l	equ	0xFE1
 20502                           indf2	equ	0xFDF
 20503                           postinc2	equ	0xFDE
 20504                           postdec2	equ	0xFDD
 20505                           plusw2	equ	0xFDB
 20506                           fsr2h	equ	0xFDA
 20507                           fsr2l	equ	0xFD9
 20508                           status	equ	0xFD8
 20509                           
 20510                           	psect	temp
 20511  000048                     btemp:
 20512                           	opt stack 0
 20513  000048                     	ds	1
 20514  0000                     int$flags	set	btemp
 20515  0000                     wtemp6	set	btemp+1
 20516                           tosu	equ	0xFFF
 20517                           tosh	equ	0xFFE
 20518                           tosl	equ	0xFFD
 20519                           pclatu	equ	0xFFB
 20520                           pclath	equ	0xFFA
 20521                           tblptru	equ	0xFF8
 20522                           tblptrh	equ	0xFF7
 20523                           tblptrl	equ	0xFF6
 20524                           tablat	equ	0xFF5
 20525                           prodh	equ	0xFF4
 20526                           prodl	equ	0xFF3
 20527                           intcon	equ	0xFF2
 20528                           intcon2	equ	0xFF1
 20529                           postinc0	equ	0xFEE
 20530                           plusw0	equ	0xFEB
 20531                           fsr0h	equ	0xFEA
 20532                           fsr0l	equ	0xFE9
 20533                           wreg	equ	0xFE8
 20534                           indf1	equ	0xFE7
 20535                           postdec1	equ	0xFE5
 20536                           fsr1h	equ	0xFE2
 20537                           fsr1l	equ	0xFE1
 20538                           indf2	equ	0xFDF
 20539                           postinc2	equ	0xFDE
 20540                           postdec2	equ	0xFDD
 20541                           plusw2	equ	0xFDB
 20542                           fsr2h	equ	0xFDA
 20543                           fsr2l	equ	0xFD9
 20544                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    143
    Data        24
    BSS         282
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    144     155
    BANK1           256      0     211
    BANK2           256     55     125
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartMessage$3606	PTR FTN()void  size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetIntFromUartData@dataRegArr(BANK0[10]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[29]), 
		 -> SynthReadData@eepromDataArray(BANK2[20]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[29]), 
		 -> SynthReadData@eepromDataArray(BANK2[20]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    GetUint16FromBitArray@bitarray	PTR unsigned char  size(2) Largest target is 12
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    FillArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[29]), 
		 -> SynthReadData@eepromDataArray(BANK2[20]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SynthReadData@TxMsg(BANK2[29]), SynthReadData@eepromDataArray(BANK2[20]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK2[29]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK1[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 64
		 -> sampleArray(BANK1[64]), 

    IOCB5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB5_DefaultInterruptHandler(), 

    IOCB5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB5_DefaultInterruptHandler(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB4_DefaultInterruptHandler(), 

    UpdateSynthFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacReadValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    FlashReadUart@data	PTR unsigned char  size(2) Largest target is 0

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK2[29]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB5_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_FillArray
    _FillArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_readUartMessage
    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateSynthFreq->_SWSPI_send_word
    _SynthReadData->_ReadIntFromEeprom
    _SetSynthOper->_InitSynth
    _GroupFlashMemory->_FlashReadUart
    _FlashReadUart->_GetIntFromUartData
    _DacSetValue->_SWSPI_send_word
    _GetIntFromUartData->_strtol
    _DacReadValue->_ReadIntFromEeprom
    _SynthLdDetect->_InitSynth
    _PLLInitialize->_InitSynth
    _InitSynth->_ReadIntFromEeprom
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _GroupSynthesizers->_SynthReadData

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  944208
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                      _SynthLdDetect
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  471941
                                            137 BANK0      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2899
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2  254469
                                            134 BANK0      3     1      2
                       _SetSynthOper
                      _SynthReadData
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateSynthFreq                                     11     9      2   29835
                                             42 BANK0     11     9      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       57    55      2  104580
                                            104 BANK0      2     0      2
                                              0 BANK2     55    55      0
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _SetSynthOper                                         1     1      0  119899
                                            111 BANK0      1     1      0
                          _InitSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                4     1      3   13626
                                            134 BANK0      3     1      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4498
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     33    33      0    9097
                                             35 COMRAM     7     7      0
                                              0 BANK0     26    26      0
                   _WriteUartMessage
                          _ZeroArray
                             ___wmul
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     3     1      2   39925
                                            134 BANK0      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       95    93      2   21465
                                             39 BANK0     95    93      2
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                 _GetIntFromUartData
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     370
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    7960
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0   10438
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2  133336
                                            134 BANK0      3     1      2
                       _DacReadValue
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                         15    13      2   29330
                                             42 BANK0     15    13      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  33    25      8    6841
                                              6 BANK0     33    25      8
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2723
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _DacReadValue                                        18    16      2  103848
                                            104 BANK0     18    16      2
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   15177
                                            134 BANK0      3     1      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    7607
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2    7753
                                            134 BANK0      3     1      2
                     _SetChannelMode
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    7691
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SynthLdDetect                                        0     0      0  112743
                     _BlinkErrorLeds
                          _InitSynth
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     904
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0     294
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     294
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0     196
          _IOCB4_SetInterruptHandler
          _IOCB5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCB5_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _IOCB4_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    7539
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1610
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2899
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1452
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  223959
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0  113329
                          _FillArray
                          _InitSynth
 ---------------------------------------------------------------------------------
 (4) _InitSynth                                            7     7      0  111749
                                            104 BANK0      7     7      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  110630
                                            104 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    4319
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     338
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     186
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5   10380
                                             40 COMRAM     5     0      5
                                             38 BANK0      4     4      0
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1595
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    4135
                                             36 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                          _FillArray
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (6) _FillArray                                            5     0      5    1580
                                             31 COMRAM     5     0      5
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _ReadIntFromEeprom                                   23    19      4   95674
                                             81 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (5) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          16    16      0  105300
                                             81 BANK0     16    16      0
                  _ADC_GetConversion
                   _FlashSampleWrite
              _GetUint16FromBitArray
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (5) _pow                                                 17    11      6   88933
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (6) _log                                                  5     2      3   28922
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _exp                                                  9     6      3   47974
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (7) _ldexp                                                7     2      5     539
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (7) _floor                                                8     5      3   11854
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     911
                                             24 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           12     5      7   13735
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    2322
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3    3476
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _GetUint16FromBitArray                               11     7      4     440
                                             23 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6     992
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                         18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (13) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCB4_ISR
                          _IOCB5_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCB5_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _IOCB4_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _GetUint16FromBitArray
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _FillArray
         _memset
       _InitSynth
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
         _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCB4_SetInterruptHandler
         _IOCB5_SetInterruptHandler
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _SynthLdDetect
     _BlinkErrorLeds
     _InitSynth
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
       _SwSpi_Set_CE_Pin
     ___awmod
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacReadValue
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         ___wmul
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
     _GroupSynthesizers *
       _SetSynthOper
         _InitSynth
           _ReadIntFromEeprom
             _EepromRead
               _DATAEE_ReadByte
             ___awtoft
               ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _pow
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _FillArray
                 _memset
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _StoreIntInEeprom
             _EepromWrite
               _DATAEE_WriteByte
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _UpdateSynthFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
     _IOCB4_ISR
       Absolute function(Fake) *
       _IOCB4_DefaultInterruptHandler *
     _IOCB5_ISR
       Absolute function(Fake) *
       _IOCB5_DefaultInterruptHandler *
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100     37      7D      10       48.8%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      D3       8       82.4%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     90      9B       6       96.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     232       3        0.0%
DATA                 0      0     232       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 29 11:09:02 2018

              __size_of_SendSystemStartAck 000C                          ??_GetMcuFwVersion 0024  
               __end_of_keepAliveSignalLed 4338                               ___altoft@exp 002F  
                 _eusart1TxBufferRemaining 01D2                         readUartMessage@idx 00ED  
                 GetIntFromUartData@idxCon 0084                            _GroupControlMcu 401E  
              __end_of_keepAliveSignalUart 4416                              ___altoft@sign 0030  
               __size_of_FLASH_IsWriteDone 000E                                         l60 3664  
                 GetIntFromUartData@recVal 007B                   GetIntFromUartData@retVal 007C  
                      __end_of_BlinkOkLeds 38A4                            _SWSPI_send_word 307E  
                      ___wmul@multiplicand 001A         __size_of_IOCB4_SetInterruptHandler 000A  
                          _timer0ReloadVal 0046                 ?_IOCB4_SetInterruptHandler 0018  
                             __CFG_CP0$OFF 000000                               __CFG_CP1$OFF 000000  
                             __CFG_CP2$OFF 000000                               __CFG_CP3$OFF 000000  
                             ___ftadd@exp1 0083                               ___ftadd@exp2 0082  
                             ___ftadd@sign 0081                                ?_MEMORY_ISR 0001  
                                      l122 4072                                        l202 1774  
                                      l211 160A                                        l203 15CE  
                                      l221 16C2                                        l213 1622  
                                      l126 1126                                        l222 1686  
                                      l206 15DA                                        l127 0FEC  
                                      l215 163A                                        l207 1604  
                                      l320 240C                                        l224 16E2  
                                      l217 1658                                        l234 3F36  
                                      l330 1284                                        l226 171A  
                                      l411 297C                                        l235 3F20  
                                      l331 13BA                                        l219 165E  
                                      l412 2992                                        l332 12A6  
                                      l228 1722                                        l333 12C2  
                                      l318 23EA                                        l334 12D2  
                                      l326 1228                                        l319 23EA  
                                      l335 1310                                        l512 0E94  
                                      l328 1274                                        l513 0E76  
                                      l507 0D78                                        l419 2850  
                                      l523 1BCC                                        l540 34A6  
                                      l524 1B92                                        l701 3A7A  
                                      l509 0F82                                        l517 0F64  
                                      l533 1CAA                                        l710 3A98  
                                      l702 3A84                                        l550 0C90  
                                      l519 0FB6                                        l543 34D6  
                                      l551 0C9E                                        l544 34E2  
                                      l528 1C42                                        l641 3124  
                                      l553 0CAA                                        l529 1C32  
                                      l650 39E0                                        l730 3D94  
                                      l562 2ABA                                        l538 34B2  
                                      l563 2A92                                        l539 349A  
                                      l564 2A98                                        l900 3C14  
                                      l556 0D0E                                        l548 0BA8  
                                      l709 3A8E                                        l637 30C2  
                                      l662 3A4C                                        l750 3DC6  
                                      l566 2B26                                        l902 3C3A  
                                      l663 3A10                                        l647 39F0  
                                      l655 2D4C                                        l751 3DD0  
                                      l567 2AFA                                        l680 3A38  
                                      l672 3A24                                        l664 3A1A  
                                      l648 39BC                                        l760 3DE4  
                                      l728 3DB2                                        l568 2B00  
                                      l681 3A42                                        l673 3A2E  
                                      l649 39D6                                        l657 2D7A  
                                      l729 3D8A                                        l913 3D5E  
                                      l658 2D86                                        l770 42DA  
                                      l738 3D9E                                        l914 3D82  
                                      l691 3AA2                                        l771 42D2  
                                      l739 3DA8                                        l915 3D80  
                                      l692 3A66                                        l693 3A70  
                                      l749 3DEE                                        l775 42D6  
                                      l759 3DDA                               __CFG_CPB$OFF 000000  
                             __CFG_CPD$OFF 000000                       readUartMessage@chRec 00EF  
                        ??_Make32bitsArray 001E                                 _SYNTH_REGS 0601  
                                      _exp 13D0                                        _log 1FB6  
                                      _pow 1CBA                               ___awmod@sign 001D  
                                      prod 000FF3                                        tosl 000FFD  
                                      wreg 000FE8             ?_InitSystemApplicationManagers 0001  
                             __CFG_LVP$OFF 000000                 __end_of_FlashReadCondition 2312  
                           InitSynth@cType 00CC                               ___ftdiv@cntr 0063  
                       __size_of_IOCB4_ISR 0022                         __size_of_IOCB5_ISR 0022  
                             ___ftdiv@sign 0068                                       l1050 2E74  
                                     l1051 2E2C                                       l1300 41B6  
                                     l1053 2E4C                                       l1061 3F70  
                                     l1301 41AA                                       l1054 2E4E  
                                     l2030 40E6                                       l1303 41B0  
                                     l2200 196C                                       l1320 32FC  
                                     l2041 1D04                                       l1321 330C  
                                     l2042 1CF4                                       l1322 3314  
                                     l1330 3E04                                       l1315 333C  
                                     l1323 331C                                       l2044 1D1C  
                                     l2204 4374                                       l1324 332C  
                                     l1308 4268                                       l1332 3E0A  
                                     l2045 1DA6                                       l2029 40F6  
                                     l1413 1E8A                                       l1309 425A  
                                     l1333 3E10                                       l1341 3F96  
                                     l1406 3700                                       l2046 1D84  
                                     l1430 38E0                                       l1510 08E6  
                                     l1167 4096                                       l1407 36C8  
                                     l2311 2C0E                                       l2303 1FD6  
                                     l2047 1E2C                                       l1415 1EAA  
                                     l1319 32EC                                       l1408 36FC  
                                     l2312 2B90                                       l1424 38E4  
                                     l1440 3E74                                       l1504 083E  
                                     l1520 2726                                       l2241 1424  
                                     l2305 1FFA                                       l1425 38A6  
                                     l1417 1F20                                       l1329 3E1E  
                                     l2250 29D6                                       l2242 145E  
                                     l1434 3974                                       l1506 086C  
                                     l1290 4030                                       l1338 3FA4  
                                     l2251 29C8                                       l2243 148E  
                                     l1427 38AA                                       l1291 4024  
                                     l1339 3F88                                       l2244 15B8  
                                     l1436 39B2                                       l1428 38AE  
                                     l2180 17E8                                       l1508 08B8  
                                     l2253 29F0                                       l2245 158E  
                                     l1613 3AC8                                       l1445 21DA  
                                     l1429 38B2                                       l1293 402A  
                                     l2254 2A6C                                       l1614 3ADC  
                                     l1446 2100                                       l2190 1864  
                                     l2182 1800                                       l2263 2C40  
                                     l2239 13EA                                       l1439 3E9E  
                                     l2191 1874                                       l2184 1854  
                                     l2265 2C8A                                       l2281 428A  
                                     l2193 188E                                       l1394 3BE0  
                                     l2259 31EE                                       l2267 2CBC  
                                     l1395 3BC4                                       l2291 42A8  
                                     l1820 2F6A                                       l2268 2CB0  
                                     l2276 4150                                       l2196 18A0  
                                     l1901 25BA                                       l2197 190C  
                                     l1822 2FA8                                       l1902 25CA  
                                     l2286 4176                                       l1590 357A  
                                     l1823 2F9E                                       l2199 1930  
                                     l1591 3592                                       l1816 2F4C  
                                     l1912 3CA0                                       l1817 2F42  
                                     l1593 35B8                                       l1906 41DE  
                                     l1594 35AC                                       l1819 2F80  
                                     l1851 19FC                                       l1924 24E0  
                                     l1916 2444                                       l1596 35CA  
                                     l1861 1A58                                       l1925 24D4  
                                     l1870 1A96                                       l1862 1A4E  
                                     l1686 351E                                       l1918 24BC  
                                     l1790 3634                                       l1782 35F0  
                                     l1871 1A8C                                       l1847 19D2  
                                     l1687 3512                                       l1927 24FC  
                                     l1919 24AC                                       l1791 3642  
                                     l1783 35FC                                       l1880 262E  
                                     l1856 1A62                                       l1952 33A0  
                                     l1873 1ABA                                       l1785 3612  
                                     l1953 3394                                       l1882 2656  
                                     l1874 1AD6                                       l1962 373C  
                                     l1786 360A                                       l1883 2694  
                                     l1875 1B06                                       l1963 3730  
                                     l1884 26BA                                       l1956 33D4  
                                     l1973 3912                                       l1797 3EBA  
                                     l1789 362A                                       l1957 33E2  
                                     l1974 3906                                       l1966 3764  
                                     l1895 2538                                       l1967 3772  
                                     l1888 3286                                       l1897 2560  
                                     l1889 32B6                                       l1898 2592  
                                     l1899 25A2                                       l7036 32E2  
                                     l7302 40E6                                       l8202 3654  
                                     l8034 1E82                                       l8116 0E76  
                                     ?_exp 0097                                       ?_log 008E  
                                     l7520 3964                                       l8128 0F64  
                                     l6376 37F2                                       l8216 36AA  
                                     l8056 1F10                                       l8074 1F74  
                                     l7604 158E                                       l8308 1300  
                                     l8246 2E24                                       l6638 3850  
                                     l8318 1370                                       l8502 0C96  
                                     l8088 0D70                                       l8602 27A2  
                                     l7732 2D44                                       l7660 3D4C  
                                     l8508 0CA2                                       l7902 30EE  
                                     l8382 2840                                       l8392 2886  
                                     l8650 297C                                       l8638 28BA  
                                     l8590 2716                                       l8738 0FE4  
                                     ?_pow 00A0                                       l7898 30E0  
                                     STR_1 0690                                       STR_2 0690  
                                     STR_3 0690                                       STR_4 0690  
                                     STR_5 0690                                       STR_6 0690  
                                     STR_7 0690                                       STR_8 0690  
                                     STR_9 0690                         EepromWrite@address 001C  
                                     _LATA 000F89                                       _LATB 000F8A  
                                     _LATC 000F8B                                       _LATD 000F8C  
                                     _LATE 000F8D                                       u8000 4406  
                                     u7040 29E2                                       u8001 4402  
                                     u7135 3F7E                                       u6440 2F34  
                                     u6600 19EE                                       u7080 2C60  
                                     u9000 2F20                                       u7136 3F80  
                                     u8040 1EC4                                       u6531 1990  
                                     u5644 36F0                                       u6700 1A9E  
                                     u7340 1468                                       u7500 38D8  
                                     u5645 36EA                                       u6541 19A4  
                                     u6630 1A2C                                       u7350 146A  
                                     u8150 0DAC                                       u8070 1F74  
                                     u8230 33A4                                       u8215 401A  
                                     u8216 401C                                       u6480 2FB2  
                                     u7088 2C64                                       u7505 38CE  
                                     u8081 1FAC                                       u6570 19C4  
                                     u7450 1D6A                                       u8340 2E52  
                                     u8260 3740                                       u5780 3616  
                                     u5860 432A                                       u8420 1370  
                                     u6741 2520                                       u6670 1A6A  
                                     u6831 2428                                       u9207 2D9A  
                                     u6920 3216                                       u7640 4172  
                                     u6761 2548                                       u9217 3876  
                                     u8441 313C                                       u9137 13A8  
                                     u8361 11F6                                       u6850 2462  
                                     u7570 2D98                                       u8290 36AA  
                                     u8450 317E                                       u8610 34C4  
                                     u8355 2E70                                       u9227 3890  
                                     u9147 366C                                       u8356 2E72  
                                     u7660 4142                                       u7900 182A  
                                     u8620 34C6                                       u6941 2616  
                                     u9237 10B2                                       u9157 367C  
                                     u5878 432C                                       u8470 2886  
                                     u6855 245A                                       u9167 368C  
                                     u8455 3172                                       u6928 3218  
                                     u7760 3092                                       u7920 183A  
                                     u6961 263E                                       u9177 369C  
                                     u8481 1B44                                       u6890 24E6  
                                     u8570 3488                                       u9187 3818  
                                     u8740 27A2                                       u8580 348A  
                                     u9197 3832                                       u7790 311E  
                                     u7870 17F0                                       u8760 2372  
                                     u8680 0CFE                                       u8690 0D02  
                                     u8755 231C                                       u8780 23B6  
                                     u8860 10C6                                       u8998 174E  
                                     u8999 176C                   ??_SwSpi_Set_Synth_Le_Pin 0019  
                                     _WPUB 000F61                              _EUSART1_Write 3D4A  
                                     _crc8 3BB2                    ??_InitAdcApplicationMgr 0018  
                                     _data 013B                                       _main 3568  
                             ___ftpack@arg 0018                              ?_EUSART1_Read 0001  
                             ___ftpack@exp 001B                            _TMR0_StartTimer 4466  
                          __end_of_DacInit 2998                                       fsr0h 000FEA  
                                     fsr1h 000FE2                                       fsr2h 000FDA  
                                     fsr0l 000FE9                                       indf1 000FE7  
                                     indf2 000FDF                                       fsr1l 000FE1  
                                     fsr2l 000FD9                                       btemp 0048  
                            __CFG_BORV$190 000000                                       exp@x 0097  
                                     log@x 008E                          ?_FLASH_WriteBlock 001D  
                         ?_ClearMcuRunTime 0001                                       pow@x 00A0  
                                     pow@y 00A3                                       prodh 000FF4  
                                     prodl 000FF3                  GroupStatusAndVersion@data 00E6  
            __size_of_CheckFlashPrecentage 00AE                                       start 00DC  
                            __CFG_IESO$OFF 000000                          DacReadValue@TxMsg 00D1  
                      __end_of_EepromWrite 43FC                         ??_FLASH_WriteBlock 0023  
                            _adcSampleMode 003D                               ___ftmul@cntr 0076  
                             ___param_bank 000000                               ___ftmul@sign 0077  
                           _BlinkErrorLeds 37E8                               ___fttol@exp1 0086  
                __size_of_DATAEE_WriteByte 0036                                      ??_exp 0031  
                                    ??_log 0031                               ___fttol@lval 0082  
                                    ??_pow 0031                    __end_of_TMR0_Initialize 3FEA  
                   _ReadIntFromEeprom$3600 00BC                     _ReadIntFromEeprom$3601 00BF  
           __size_of_OSCILLATOR_Initialize 000E              __end_of_OSCILLATOR_Initialize 43EE  
                                    ?_crc8 0018                 SWSPI_DAC_send_bits@phrType 001C  
                                    ?_main 0001                                      _EEADR 000FA9  
                          __end_of___ftadd 1B2C                     GetUint16FromBitArray@i 0021  
                                    STR_10 0690                                      STR_11 0690  
                                    STR_20 069C                                      STR_12 0690  
                                    STR_21 069C                                      STR_13 0690  
                                    STR_22 069C                                      STR_14 0690  
                                    STR_23 069C                                      STR_15 0690  
                                    STR_24 069C                                      STR_16 0690  
                                    STR_25 069C                                      STR_17 0690  
          __size_of_SwSpi_Set_Dac_Sync_Pin 001C                                      STR_26 069C  
                                    STR_18 069C                                      STR_27 069C  
                                    STR_19 069C                                      STR_28 069C  
                          __end_of___awmod 364C                                      STR_29 069C  
                          __end_of___ftdiv 26EC          __end_of_IOCB4_SetInterruptHandler 444A  
                          __end_of___ftneg 41EC                            __end_of___lldiv 33F4  
                               _EepromRead 444A                            __end_of___ftmul 2604  
                                    _T0CON 000FD5                            __end_of___llmod 3784  
                          __end_of___ftsub 3CCA                            __end_of___fttol 250E  
                             _SYNTH_ADDRES 0635                             __CFG_DEBUG$OFF 000000  
                          InitSynth@regNum 00CE                            __end_of___lwmod 3D0C  
                      StoreIntInEeprom@idx 0029                                      i2l920 3F06  
                                    i2l850 006A                                      i2l925 40B6  
                                    i2l853 007A                                      i2l926 40D6  
                                    i2l919 3F0A                                      i2l855 0086  
                                    i2l848 005E                                      i2l857 0090  
                      StoreIntInEeprom@val 0028                                      _TMR0H 000FD7  
                                    _TMR0L 000FD6                                      _TRISA 000F92  
                                    _TRISB 000F93                                      _TRISC 000F94  
                                    _TRISD 000F95                                      _TRISE 000F96  
                      _SWSPI_DAC_send_bits 39B4          __size_of_TMR0_SetInterruptHandler 000A  
                            __CFG_WRT0$OFF 000000                              __CFG_WRT1$OFF 000000  
               __end_of_GetIntFromUartData 1FB6                              __CFG_WRT2$OFF 000000  
                      ___lmul@multiplicand 001E                  ?_TMR0_SetInterruptHandler 0018  
                            __CFG_WRT3$OFF 000000                               ___lltoft@exp 0028  
                     _EUSART1_Transmit_ISR 3EDE                             __CFG_EBTR0$OFF 000000  
                           __CFG_FCMEN$OFF 000000                             __CFG_EBTR1$OFF 000000  
                           __CFG_EBTR2$OFF 000000                             __CFG_EBTR3$OFF 000000  
                        ?_WriteUartMessage 0019                           __end_of_TMR0_ISR 307E  
                            __CFG_WRTB$OFF 000000                              __CFG_WRTC$OFF 000000  
                            __CFG_WRTD$OFF 000000                            DacSetValue@data 008A  
                          _DATAEE_ReadByte 4378                             __CFG_EBTRB$OFF 000000  
                            ___awtoft@sign 0023                    __end_of_PIN_MANAGER_IOC 43D2  
                                    crc8@i 001F                                      _make8 38A4  
           __size_of_SWSPI_Synth_send_bits 00C6                      __end_of_GetMcuRunTime 27D0  
                                    _count 0138                                      _floor 2998  
                                    _ldexp 2C26                                      _frexp 31C6  
                                    _errno 0134              __end_of_SWSPI_Synth_send_bits 2DBA  
                          __end_of_isalpha 4158                            __end_of_isdigit 4292  
                                    _group 00F3             __size_of_GetUint16FromBitArray 0068  
                       ??_WriteUartMessage 001D                         __CFG_MCLRE$EXTMCLR 000000  
                            ___ftpack@sign 001C                    ??_GroupStatusAndVersion 0031  
            __end_of_GetUint16FromBitArray 371E                            __end_of_isspace 417E  
                           ?_EUSART1_Write 0001                                ?_AdcConvert 0001  
                           __CFG_BOREN$OFF 000000                            __end_of_isupper 42B0  
                                    pclath 000FFA                                      tablat 000FF5  
                        ??_UpdateSynthFreq 0030                                      pow@yi 00AD  
                           ??_EUSART1_Read 0018                             FillArray@array 0020  
                                    plusw0 000FEB                                      plusw2 000FDB  
                                    status 000FD8                             FillArray@value 0024  
                                    wtemp6 0049                       ReadIntFromEeprom@idx 00C7  
                           __CFG_HFOFST$ON 000000                            __end_of_toupper 4378  
           SwSpi_Set_Synth_Le_Pin@cPinMode 0018                     __size_of_SynthLdDetect 00D6  
                  __end_of_GroupControlMcu 404E                        __size_of_MEMORY_ISR 0004  
                           __CFG_PBADEN$ON 000000                                exp@exponent 009D  
           CheckFlashPrecentage@precentage 007C                       ?_SWSPI_DAC_send_bits 001A  
                   __end_of_BlinkErrorLeds 3846            ??_IOCB4_DefaultInterruptHandler 0001  
                              ldexp@newexp 0091                    __end_of_SWSPI_send_word 3128  
                              _BlinkOkLeds 3846                    WriteUartMessage@dataBuf 0019  
                          __initialization 33F4                                log@exponent 0091  
                             __end_of_crc8 3C00                 __end_of_EUSART1_Initialize 3E6E  
                             __end_of_main 35DC                         DacReadValue@regNum 00CC  
                        __end_of_IOCB4_ISR 4254                          __end_of_IOCB5_ISR 4232  
                  FLASH_ReadByte@flashAddr 0018                ?_INTERRUPT_InterruptManager 0001  
                         __end_of_GroupDAC 3FB6                     __size_of_SynthReadData 02B0  
                          _readUartMessage 15C6                           __end_of_GroupAdc 4274  
                                   ??_crc8 001C                                     ??_main 0031  
                            ___fttol@sign1 0081                          ?_SwSpi_Set_CE_Pin 0018  
                            __activetblptr 000002                    __size_of_FLASH_ReadByte 0012  
                         __end_of_ResetMcu 43E0                         __size_of_FillArray 001C  
                             _writeAddress 003E                         ??_SwSpi_Set_CE_Pin 0019  
                    ?_EUSART1_Transmit_ISR 0001                    __end_of_TMR0_StartTimer 446A  
                                   ?_make8 0018                                     _ADCON0 000FC2  
                                   _ADCON1 000FC1                                     _ADCON2 000FC0  
                                   ?_floor 008F                  FLASH_WriteBlock@writeAddr 001D  
                                   ?_ldexp 008E                                     ?_frexp 0018  
                         __end_of___altoft 3568                           ___llmod@dividend 0018  
                                   _ADRESH 000FC4                                     _ADRESL 000FC3  
                                   _EEDATA 000FA8                                  ??_DacInit 00C8  
                                   _EECON2 000FA7                           __end_of___awtoft 3EDE  
                                   _ANSELA 000F38                                     _ANSELB 000F39  
                                   _ANSELC 000F3A                                     _ANSELD 000F3B  
                                   _ANSELE 000F3C                           __end_of___ftpack 2FD2  
           ?_IOCB5_DefaultInterruptHandler 0001                           __end_of___lltoft 395C  
                        _FlashReadUart$609 00DC                          ?_FlashSampleWrite 002D  
                                   i2l1121 3002                                     i2l1122 3024  
                                   i2l1123 3046                                     i2l2020 3D02  
                                   i2l1124 3068                                     i2l2015 3CE0  
                                   i2l2016 3CD8                                     i2l2019 3CF8  
                           __CFG_WDTEN$OFF 000000                       StoreIntInEeprom@data 0021  
                                   _TABLAT 000FF5                                _EepromWrite 43EE  
                                   _RCREG1 000FAE                           __end_of___lwtoft 4210  
                  __size_of_FlashEreaseMem 0052                  __size_of_FLASH_EraseBlock 0034  
                                   _RCSTA1 000FAB                          SynthReadData@data 00C8  
          __size_of_SwSpi_Set_Synth_Le_Pin 003C                                     _OSCCON 000FD3  
                                   _SPBRG1 000FAF                     _SwSpi_Set_Dac_Sync_Pin 42CE  
                  __size_of_SwSpi_Data_Pin 0056                   GroupSynthesizers@request 00E8  
                       ??_FlashSampleWrite 0060                                     _TXREG1 000FAD  
                                   _TXSTA1 000FAC                         __size_of_InitSynth 0276  
                    ??_SWSPI_DAC_send_bits 001B                             _Timer0_SynthLd 00FA  
                 __end_of_GroupFlashMemory 3E36                            ?_BlinkErrorLeds 0001  
                           __CFG_PWRTEN$ON 000000                             __CFG_XINST$OFF 000000  
                             _synthLdRxCnt 0043                               _synthLdTxCnt 0042  
                                   _cState 00F4                                     ___ftge 3256  
                                   ___lmul 3AB8                  SWSPI_Synth_send_bits@data 0025  
                                   ___wmul 417E                                  ??___ftadd 007E  
                SWSPI_Synth_send_bits@mask 0080                                  ??___awmod 001C  
                                ??___ftdiv 0060                                  ??___ftneg 001B  
                                ??___lldiv 0020                                  ??___ftmul 006F  
                    __end_of_PLLInitialize 3D4A                                  ??___llmod 0020  
                                ??___ftsub 002F                                  ??___fttol 007C  
                                ??___lwmod 0005             SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                         ?_TMR0_Initialize 0001                                     _memset 40DC  
                       __end_of_DAC_ADDRES 0657                                     clear_0 343A  
                                   clear_1 3446                                     clear_2 3452  
                                   clear_3 345E                            ___awmod@divisor 001A  
                      __size_of_AdcConvert 021C                            ___awmod@counter 001C  
                  __end_of_DATAEE_ReadByte 438C                                ?_EepromRead 0001  
                                   _strtol 17A8                                     floor@i 0092  
                    __end_of_SwSpi_Clk_Pin 3AB8                                     floor@x 008F  
                    ___ftmul@f3_as_product 0073                              _SynthLdDetect 2A7A  
                 SWSPI_DAC_send_bits@count 001B                 FlashSampleWrite@channelNum 002F  
                             __pdataCOMRAM 003E                                  ??_isalpha 001B  
                                ??_isdigit 0018                      __end_of_FlashReadUart 13D0  
                         __end_of_testLeds 36B6                              ?_SetMcuSystem 0001  
                             __mediumconst 0000                                  ??_isspace 0018  
                                   tblptrh 000FF7                                  ??_isupper 0018  
                                   tblptrl 000FF6                                     tblptru 000FF8  
                 ADC_GetConversion@channel 001C                            ??_EUSART1_Write 0018  
 TMR0_SetInterruptHandler@InterruptHandler 0018  IOCB5_SetInterruptHandler@InterruptHandler 0018  
IOCB4_SetInterruptHandler@InterruptHandler 0018               __size_of_InitRxMessageParams 0028  
                         ?_PIN_MANAGER_IOC 0001                      ReadIntFromEeprom@base 00B8  
                          _eusart1RxBuffer 0100                                  ??_toupper 0018  
                       __size_of_ZeroArray 001E              __size_of_INTERRUPT_Initialize 0004  
                            _SynthReadData 0A96                            _eusart1TxBuffer 0200  
                          _GetMcuFwVersion 06A6                           __end_ofexp@coeff 0675  
                        _SYSTEM_Initialize 4306                           __end_oflog@coeff 0690  
                               __accesstop 0060                    __end_of__initialization 3464  
                               ___altoft@c 0087                              ZeroArray@size 0022  
                               ___ftadd@f1 0078                                 ___ftadd@f2 007B  
                               ___ftge@ff1 0018                                 ___ftge@ff2 001B  
                       ?_SYSTEM_Initialize 0001                               eval_poly@res 008B  
                            ___rparam_used 000001                                 ___ftdiv@f1 0029  
                               ___ftdiv@f2 002C                                 ___ftdiv@f3 0064  
                         ?_GroupControlMcu 00E6               GroupStatusAndVersion@request 00E9  
                             InitSynth@idx 00CD                          __end_of_FillArray 4306  
                               ___ftneg@f1 0018                                 ___awtoft@c 0020  
                  __end_of_readUartMessage 17A8                   WriteUartMessage@dataSize 001B  
                               ___ftmul@f1 0069                                 ___ftmul@f2 006C  
                         ?_SWSPI_send_word 0029                               ?_DacSetValue 008A  
                               ___ftsub@f1 0084                                 ___ftsub@f2 0087  
                               ___fttol@f1 0078                            _Make32bitsArray 395C  
                           __pcstackCOMRAM 0001                               __pidataBANK1 43B2  
                      ??_SYSTEM_Initialize 001C                                  ?_TMR0_ISR 0001  
                      DacReadValue@byteIdx 00D8                                 ___lltoft@c 0020  
                      DacReadValue@byteNum 00CD                              __end_of_make8 3900  
                      DacReadValue@readVal 00CE                           _DATAEE_WriteByte 3F4C  
                            __end_of_floor 2A7A                              __end_of_ldexp 2CF4  
                            __end_of_frexp 3256      __end_of_IOCB4_DefaultInterruptHandler 4472  
   __size_of_IOCB4_DefaultInterruptHandler 0002              _IOCB4_DefaultInterruptHandler 4470  
                   _SwSpi_Set_Synth_Le_Pin 3DC2                       GroupFlashMemory@data 00E6  
                               ___lwtoft@c 0020                ??_IOCB4_SetInterruptHandler 001A  
                           ?_SynthLdDetect 0001            __end_of_DAC_DEFAULT_INIT_VALUES 0653  
                     __end_of_EUSART1_Read 3C44                               ??_MEMORY_ISR 0001  
                __size_of_StoreIntInEeprom 0038                     __size_of_SetMcuRunTime 0044  
                   ??_EUSART1_Transmit_ISR 0001                          __end_of_InitSynth 0FBC  
                           ??_SetMcuSystem 001C                      TMR0_ISR@CountCallBack 0031  
            SwSpi_Set_Synth_Le_Pin@phrType 0019                    GroupFlashMemory@request 00E8  
                       _keepAliveSignalLed 4320                          make8@dataLocation 001C  
              __end_of_EUSART1_Receive_ISR 40DC                FLASH_WriteBlock@GIEBitValue 002B  
                             GroupDAC@data 00E6                              ?_SetSynthOper 0001  
                                  ??_make8 001D                                    ??_floor 0031  
                         ?_TMR0_StartTimer 0001                                    ??_ldexp 0093  
                                  ??_frexp 001D                  __end_of_SYSTEM_Initialize 4320  
                          _AdcConvert$3599 00BD                             ?_SynthReadData 00C8  
                            _eusart1RxHead 0034                       GetMcuFwVersion@TxMsg 0064  
                            _eusart1TxHead 0036                              _eusart1RxTail 0033  
                               __pbssBANK0 00F0                                 __pbssBANK1 0100  
                               __pbssBANK2 0200                              _eusart1TxTail 0035  
                      ?_keepAliveSignalLed 0001                         __size_of_eval_poly 00D6  
                          __CFG_PLLCFG$OFF 000000                                 _channelArr 0642  
                                ?_GroupDAC 00E6                                 __pnvCOMRAM 0046  
                                ?_GroupAdc 00E6             __size_of_InitAdcApplicationMgr 0006  
               __end_of_SendSystemStartAck 4422              __end_of_InitAdcApplicationMgr 4462  
                      __size_of_EepromRead 000A                         __end_of_MEMORY_ISR 446E  
                                ?_ResetMcu 0001                         _FlashReadCondition 2206  
          ??_InitSystemApplicationManagers 0031                         __CFG_CCP2MX$PORTC1 000000  
                                  ?___ftge 0018                             FlashReadUart@j 00E0  
         __end_of_TMR0_SetInterruptHandler 4436                                    ?___lmul 001A  
                                  ?___wmul 0018                                 ??_TMR0_ISR 0006  
                       __CFG_CCP3MX$PORTB5 000000                         SetChannelMode@data 002C  
                     ??_keepAliveSignalLed 0018                          __end_of_ZeroArray 42CE  
                                ?___altoft 0087                                    ?_memset 0018  
                        _ReadIntFromEeprom 20E0                             ___lmul@product 0022  
                      ?_FlashReadCondition 0001         __size_of_IOCB5_SetInterruptHandler 000A  
                                ?___awtoft 0020                                  ?___ftpack 0018  
                             GroupAdc@data 00E6                           FlashReadUart@idx 00E4  
                 GetUint16FromBitArray@res 001F                           FlashReadUart@val 00D4  
               ?_IOCB5_SetInterruptHandler 0018                                  ?___lltoft 0020  
                        _synthLdRxArrayCnt 0038                  __size_of_FLASH_WriteBlock 00BC  
                  __size_of_ADC_Initialize 0016                 FlashSampleWrite@sampleData 002D  
                           _FLASH_ReadByte 43A0                                  ?___lwtoft 0020  
             __end_of_CheckFlashPrecentage 2F24                         ?_ReadIntFromEeprom 00B1  
                                  ?_strtol 0026                           ?_DATAEE_ReadByte 0001  
               GetMcuFwVersion@compileData 0060                            _UpdateSynthFreq 1B2C  
                          _Timer0_Sampling 00F9               __size_of_keepAliveSignalUart 000C  
                       SynthReadData@TxMsg 0246                    __end_of_GetMcuFwVersion 0A96  
                       SynthReadData@cType 027A                                    _OSCCON2 000FD2  
                           ??_SetSynthOper 0031                                    _TBLPTRH 000FF7  
                                  _TBLPTRL 000FF6                                    _TBLPTRU 000FF8  
                                  _OSCTUNE 000F9B                                    _SPBRGH1 000FB0  
                        _synthLdTxArrayCnt 0037                        ??_ReadIntFromEeprom 00B5  
                                  _DacInit 28B4                      GetIntFromUartData@num 007A  
                         GetMcuRunTime@idx 006D                               ??_AdcConvert 00B1  
                     ??_FlashReadCondition 0024                             _FlashEreaseMem 3B0E  
                         _FLASH_EraseBlock 3FEA             __size_of_GroupStatusAndVersion 0024  
                           _SwSpi_Data_Pin 3A0C                  _IOCB4_SetInterruptHandler 4440  
                     DATAEE_WriteByte@bAdd 0019              __end_of_GroupStatusAndVersion 41C8  
                  __end_of_Make32bitsArray 39B4                                 ??_GroupDAC 0031  
                               ??_GroupAdc 0031                              _SetMcuRunTime 3C44  
                       _GetIntFromUartData 1E3A                         FlashReadUart@TxMsg 008F  
                    GroupSynthesizers@data 00E6                                    __Hparam 0000  
                               ??_ResetMcu 002C                  __size_of_WriteUartMessage 0036  
                             ?_BlinkOkLeds 0001                                    __Lparam 0000  
                    SendAckMessage@inGroup 0025                           ?_readUartMessage 0001  
                   GroupControlMcu@request 00E9                                  ?_testLeds 0001  
                __end_of_ReadIntFromEeprom 2206                        ?_GetIntFromUartData 0066  
                          __size_of___ftge 0090                            __size_of___lmul 0056  
                                  ___ftadd 197E                                    ___awmod 35DC  
                                  ___ftdiv 2604                                    ___ftneg 41C8  
                                  ___lldiv 3372                            __size_of___wmul 0026  
                                  ___ftmul 250E                                    ___llmod 371E  
                                  ___ftsub 3C88                                    ___fttol 2416  
               FlashSampleWrite@rotateLeft 0062                               crc8@dataSize 001A  
                 __size_of_ClearMcuRunTime 0014                                    ___lwmod 3CCA  
                     AdcConvert@_adcResult 00B3                               __psmallconst 0600  
                          ??_SynthLdDetect 0031                                 ??___altoft 008B  
                   __end_of_FLASH_ReadByte 43B2                            __CFG_STVREN$OFF 000000  
               SWSPI_Synth_send_bits@count 0084                      _mcuRunTimeIn5SecTicks 0128  
                                  _crcCalc 003C                                    _channel 00F6  
                                  __pcinit 33F4                                 ??___awtoft 0023  
                               ??___ftpack 001D                          __end_of_eval_poly 2C26  
                          __size_of_memset 002C                                    __ramtop 0600  
                  __size_of_SendAckMessage 0052                                 ??___lltoft 0024  
                  __size_of_SetChannelMode 0030                                    __ptext0 3568  
                                  __ptext1 15C6                                    __ptext2 4108  
                                  __ptext3 3F82                                    __ptext4 3DFE  
                                  __ptext5 4254                                    __ptext6 41A4  
                                  __ptext7 401E                                    __ptext8 32E6  
                                  __ptext9 1B2C                                    crc8@crc 001D  
                       __end_of_AdcConvert 11D8                          DacSetValue@retVal 0091  
                               ??___lwtoft 0023                                  _T0CONbits 000FD5  
        __end_of_IOCB5_SetInterruptHandler 4440                                  _IOCB4_ISR 4232  
                                _IOCB5_ISR 4210                          BlinkErrorLeds@idx 001C  
                          __size_of_strtol 01D6                      _OSCILLATOR_Initialize 43E0  
                                  _isalpha 4130                               __size_of_exp 01F6  
                             __size_of_log 012A                                    _isdigit 4274  
                             __size_of_pow 0180                           ___awmod@dividend 0018  
                       _EUSART1_Initialize 3E36                   ??_PIN_MANAGER_Initialize 001A  
                                  _isspace 4158                  StoreIntInEeprom@numOfByes 0026  
                                  _isupper 4292                                    _request 00F2  
                          GroupDAC@request 00E8                            ??_SynthReadData 0031  
                     ??_GetIntFromUartData 006E                     __end_of_FlashEreaseMem 3B60  
               __size_of_SYSTEM_Initialize 001A                    ?_SwSpi_Set_Dac_Sync_Pin 0001  
                   __end_of_SwSpi_Data_Pin 3A62                    StoreIntInEeprom@address 0025  
                                  _toupper 4364                       end_of_initialization 3464  
                                  exp@sign 009F                        ?_EUSART1_Initialize 0001  
                         ??_BlinkErrorLeds 0018                               ?_EepromWrite 001B  
                    _SWSPI_Synth_send_bits 2CF4                  __size_of_SwSpi_Set_CE_Pin 003C  
                    _GetUint16FromBitArray 36B6                             ?_SetMcuRunTime 0001  
                                  memset@c 001A                                    memset@n 001C  
                                  memset@p 001E                              __Lmediumconst 0000  
                          ___lldiv@divisor 001C                       __end_of_SetMcuSystem 442C  
                                  pow@sign 00AC                            ___lldiv@counter 0024  
                        ?_GroupFlashMemory 00E6                           AdcConvert@adcRes 00BB  
                       __end_of_SYNTH_REGS 0635                       UpdateSynthFreq@cType 008C  
                               ??_testLeds 002C                       SWSPI_send_word@datac 0086  
                               _rxMsgQueue 0190                                    postdec1 000FE5  
                                  postdec2 000FDD            ??_IOCB5_DefaultInterruptHandler 0001  
                       ??_GroupFlashMemory 0031                                    postinc0 000FEE  
                                  postinc2 000FDE                      __size_of_EUSART1_Read 0044  
                     SynthReadData@byteNum 027C                        _InitRxMessageParams 4108  
                              testLeds@idx 002D                    __end_of_UpdateSynthFreq 1CBA  
                     __size_of_DacSetValue 009E                  __size_of_FlashSampleWrite 0104  
                   __size_of_GetMcuRunTime 00E4                       ??_EUSART1_Initialize 0018  
    __end_of_InitSystemApplicationManagers 4364     __size_of_InitSystemApplicationManagers 0016  
            _InitSystemApplicationManagers 434E                            ?_FLASH_ReadByte 0018  
                                  strtol@a 0061                                    strtol@c 0065  
                                  strtol@s 0026                   _TMR0_SetInterruptHandler 442C  
                                _PORTDbits 000F83                               ??_EepromRead 0019  
                         _StoreIntInEeprom 3E6E                                 ?_IOCB4_ISR 0001  
                               ?_IOCB5_ISR 0001                           ?_GetMcuFwVersion 0001  
                           ZeroArray@array 0020             __end_of_SwSpi_Set_Dac_Sync_Pin 42EA  
                             strtol@endptr 0028              FLASH_WriteBlock@flashWrBufPtr 0021  
                       GetMcuRunTime@TxMsg 0060                       ?_InitRxMessageParams 0001  
                          ?_FlashEreaseMem 0001                        EUSART1_Write@txData 0018  
                          ?_SwSpi_Data_Pin 0018                   __end_of_DATAEE_WriteByte 3F82  
              __end_of_SWSPI_DAC_send_bits 3A0C                              ?_DacReadValue 00C8  
                     DacReadValue@dacIndex 00D0                   FLASH_EraseBlock@baseAddr 0018  
                         ?_Make32bitsArray 0018                                ___ftdiv@exp 0067  
                             _EUSART1_Read 3C00                       _CheckFlashPrecentage 2E76  
                        FLASH_WriteBlock@i 002C                         __end_of_EepromRead 4454  
                         DacReadValue@data 00C8                                ___ftmul@exp 0072  
                  ?_SwSpi_Set_Synth_Le_Pin 0018                       __end_of_SetSynthOper 34EE  
               __size_of_ReadIntFromEeprom 0126                                  _FillArray 42EA  
             __end_of_INTERRUPT_Initialize 4466                             __end_of___ftge 32E6  
                           __end_of___lmul 3B0E                             __end_of___wmul 41A4  
                      GroupControlMcu@data 00E6                              __pidataCOMRAM 4454  
                        __size_of_TMR0_ISR 00AC                             _ADC_Initialize 4338  
                         _FLASH_WriteBlock 2DBA                     ?_OSCILLATOR_Initialize 0001  
                           __end_of_memset 4108                         InitSynth@EepromVal 00C8  
                               floor@expon 0095                              FillArray@size 0022  
                        ??_ClearMcuRunTime 0018                             __end_of_strtol 197E  
                      start_initialization 33F4                                 eval_poly@d 0087  
                               eval_poly@n 0089                                 eval_poly@x 0084  
                              _SynthRxOper 0044                           BlinkOkLeds@state 001B  
                 __size_of_TMR0_Initialize 0034                                 ldexp@value 008E  
                              _SynthTxOper 0045            __size_of_PIN_MANAGER_Initialize 0064  
                    ??_InitRxMessageParams 0024                                __end_of_exp 15C6  
                              __end_of_log 20E0                                __end_of_pow 1E3A  
            GetUint16FromBitArray@bitarray 0018                   AdcConvert@_adcResult_350 00B5  
                                _InitSynth 0D46                             ??_DacReadValue 00CA  
                            _GetMcuRunTime 26EC                     ?_SWSPI_Synth_send_bits 0025  
                          ??_SetMcuRunTime 0021                      __end_of_EUSART1_Write 3D86  
                   ?_GetUint16FromBitArray 0018                     __size_of_PLLInitialize 003E  
                               frexp@value 0018                            ___llmod@divisor 001C  
                            _Timer0_OneSec 00F7                      ?_CheckFlashPrecentage 0001  
                          ___llmod@counter 0020                        DATAEE_ReadByte@bAdd 0018  
                 __size_of_PIN_MANAGER_IOC 0010                     __size_of_SwSpi_Clk_Pin 0056  
                      SendAckMessage@TxMsg 0026             __end_of_SwSpi_Set_Synth_Le_Pin 3DFE  
                           _cntRegUpdateRx 0039                        _keepAliveSignalUart 440A  
                           _cntRegUpdateTx 003A                          __size_of_GroupDAC 0034  
                         _WriteUartMessage 3F16                          __size_of_GroupAdc 0020  
                   __size_of_FlashReadUart 01F8                                   ??___ftge 001E  
                                 ??___lmul 0022                    SendAckMessage@inRequest 0024  
                                 ??___wmul 001C                  GetIntFromUartData@idxData 0086  
                        __size_of_ResetMcu 000E                       __size_of_BlinkOkLeds 005E  
                               ?_FillArray 0020                     __end_of_ADC_Initialize 434E  
                         ?_UpdateSynthFreq 008A                                __pdataBANK1 01BC  
                  SWSPI_DAC_send_bits@data 001A                                   ??_memset 001E  
                 __size_of_GroupControlMcu 0030                FLASH_EraseBlock@GIEBitValue 001C  
                           _SendAckMessage 3B60                             _SetChannelMode 404E  
                 __end_of_FLASH_EraseBlock 401E                         _SendSystemStartAck 4416  
                 __size_of_SWSPI_send_word 00AA      __end_of_IOCB5_DefaultInterruptHandler 4470  
   __size_of_IOCB5_DefaultInterruptHandler 0002              _IOCB5_DefaultInterruptHandler 446E  
              ??_IOCB5_SetInterruptHandler 001A                                   ??_strtol 002C  
                           _eusart1RxCount 00F5                                ??_IOCB4_ISR 0001  
                              ??_IOCB5_ISR 0001                          __size_of___altoft 007A  
                                _ZeroArray 42B0                            DacInit@dacInput 00CA  
                        __size_of___awtoft 0038                          __size_of___ftpack 00AE  
                     ?_keepAliveSignalUart 0001                          __size_of___lltoft 005C  
                              __pbssCOMRAM 0031                          __size_of___lwtoft 0024  
            __size_of_EUSART1_Transmit_ISR 0038                              __pcstackBANK0 0060  
                            __pcstackBANK2 0246                               _isalpha$3326 001C  
                      ?_SendSystemStartAck 0001                                 ?_InitSynth 0001  
                             _isdigit$3329 0019                             ?_GetMcuRunTime 0001  
                      DacSetValue@dacIndex 0090                             BlinkOkLeds@idx 001C  
                                 ?_DacInit 0001                      __size_of_SetMcuSystem 000A  
                         _SwSpi_Set_CE_Pin 3D86               __size_of_EUSART1_Receive_ISR 002E  
            SWSPI_Synth_send_bits@bitArray 0060                    _DAC_DEFAULT_INIT_VALUES 064B  
                     __size_of_EepromWrite 000E                      _TMR0_InterruptHandler 01CC  
                                __pnvBANK1 01CC                          SetSynthOper@cType 00CF  
                 __size_of_TMR0_StartTimer 0004                     _PIN_MANAGER_Initialize 3784  
                     ??_SendSystemStartAck 002C                      _InitAdcApplicationMgr 445C  
                                __pintcode 0008                     __end_of_SendAckMessage 3BB2  
                                __ptext100 2604                                  __ptext101 3EA6  
                                __ptext110 407E                                  __ptext102 3900  
                                __ptext103 41EC                                  __ptext120 3EDE  
                                __ptext112 2FD2                                  __ptext104 2F24  
                                __ptext121 40AE                                  __ptext113 3CCA  
                                __ptext105 36B6                                  __ptext122 0000  
                                __ptext114 43C2                                  __ptext106 2312  
                                __ptext115 4210                                  __ptext107 2DBA  
                                __ptext116 446E                                  __ptext108 3FEA  
                                __ptext117 4232                                  __ptext109 43FC  
                                 ?___ftadd 0078                                  __ptext118 4470  
                                __ptext119 446A                                   ?___awmod 0018  
                                 ?___ftdiv 0029                     __end_of_SetChannelMode 407E  
                                 ?___ftneg 0018                                   ?___lldiv 0018  
                                 ?___ftmul 0069                                   ?___llmod 0018  
                                 ?___ftsub 0084                                   ?___fttol 0078  
                         _FlashSampleWrite 2312                                   ?___lwmod 0001  
                          ?_ADC_Initialize 0001                           _Timer0_KeepAlive 00F8  
                        __size_of_testLeds 006A                              _PLLInitialize 3D0C  
              __size_of_keepAliveSignalLed 0018               ??_INTERRUPT_InterruptManager 0006  
                         __CFG_PRICLKEN$ON 000000                                 ?_ZeroArray 0020  
                              __smallconst 0600                      ??_keepAliveSignalUart 002C  
                                 _BAUDCON1 000FB8                              _SwSpi_Clk_Pin 3A62  
                                 ?_isalpha 0001                                   ?_isdigit 0001  
                                _eval_poly 2B50                        BlinkErrorLeds@state 001B  
                                 ?_isspace 0001                               _SetMcuSystem 4422  
                        FlashReadUart@data 0087                                   ?_isupper 0001  
                            _FlashReadUart 11D8                             __size_of_make8 005C  
                           __size_of_floor 00E2                             __size_of_ldexp 00CE  
                           __size_of_frexp 0090                   __size_of_DATAEE_ReadByte 0014  
                                 ?_toupper 0001                       _INTERRUPT_Initialize 4462  
           FLASH_WriteBlock@blockStartAddr 0027                __size_of_FlashReadCondition 010C  
                _IOCB5_SetInterruptHandler 4436                          ??_TMR0_Initialize 001A  
                   ??_CheckFlashPrecentage 0078                             ___wmul@product 001C  
                                 _IOCBbits 000F62                                   _LATAbits 000F89  
                                 _LATBbits 000F8A                                   _LATCbits 000F8B  
                                 _LATDbits 000F8C                      __size_of_SetSynthOper 007C  
                 __end_of_StoreIntInEeprom 3EA6             FlashReadUart@numOfSampleToRead 00E2  
                                 _PIE1bits 000F9D                                   _PIE2bits 000FA0  
                    _GroupStatusAndVersion 41A4                          _GroupSynthesizers 32E6  
      __size_of_INTERRUPT_InterruptManager 00D4                 ??_TMR0_SetInterruptHandler 001A  
                     Make32bitsArray@array 0018                                   _PIR1bits 000F9E  
                         ??_FLASH_ReadByte 001C                                   _PIR2bits 000FA1  
                                _rxMsgData 017C                                   i2u572_48 4240  
                      UpdateSynthFreq@data 008A                                   i2u582_40 3CE4  
                                 i2u574_48 421E                        SWSPI_send_word@data 0029  
                       ?_GroupSynthesizers 00E6                                   _RCONbits 000FD0  
                         __CFG_WDTPS$16384 000000                        SynthReadData@regNum 027B  
                                make8@data 0018                                ??_FillArray 0025  
                                 _TMR0_ISR 2FD2                            ?_SendAckMessage 0024  
                          ?_SetChannelMode 002C                             ?_PLLInitialize 0001  
                        ??_PIN_MANAGER_IOC 0001                       __end_of_DacReadValue 28B4  
                      ??_GroupSynthesizers 0031                     GetIntFromUartData@data 0066  
                  SWSPI_send_word@dataSize 002D                                 _ADCON0bits 000FC2  
                    __end_of_SynthLdDetect 2B50                   __size_of_readUartMessage 01E2  
                        ___wmul@multiplier 0018                             ?_SwSpi_Clk_Pin 0018  
                         ??_FlashEreaseMem 002C                         __end_of_channelArr 064B  
                         ??_SwSpi_Data_Pin 0019                  __size_of_GroupFlashMemory 0038  
                               ?_eval_poly 0084                             ?_FlashReadUart 0087  
                        ??_GroupControlMcu 0031                            ??_GetMcuRunTime 0025  
                    DATAEE_WriteByte@bData 0018                               _isspace$3332 0019  
                              ??_InitSynth 0031                          ??_SWSPI_send_word 002E  
                               DacInit@idx 00CC                               _SetSynthOper 3472  
                               _DAC_ADDRES 0653                __size_of_GetIntFromUartData 017C  
                        ___lmul@multiplier 001A                    FlashReadCondition@TxMsg 0028  
                              _INTCON2bits 000FF1                      __end_of_SynthReadData 0D46  
                                copy_data0 3408                                  copy_data1 3428  
                    ?_INTERRUPT_Initialize 0001                           __size_of_DacInit 00E4  
                        ?_DATAEE_WriteByte 0018             GetUint16FromBitArray@numOfBits 001A  
                __end_of_GroupSynthesizers 3372                      EUSART1_Read@readValue 0019  
                 __end_of_FLASH_WriteBlock 2E76                                   _GroupDAC 3F82  
                       ??_DATAEE_WriteByte 0019                                   _GroupAdc 4254  
                                frexp@eptr 001B                                 _EECON1bits 000FA6  
                           _synthLdRxArray 01B0                                   __Hrparam 0000  
                   ?_InitAdcApplicationMgr 0001                             _synthLdTxArray 01A4  
                                 _ResetMcu 43D2                              ??_DacSetValue 008C  
                              _readAddress 01C8                                   __Lrparam 0000  
             SynthReadData@eepromDataArray 0266                          _ADC_GetConversion 407E  
                          _ClearMcuRunTime 438C                          __CFG_P2BMX$PORTD2 000000  
                  ??_OSCILLATOR_Initialize 0018                         ?_ADC_GetConversion 0018  
                        ??_TMR0_StartTimer 0018                           __size_of___ftadd 01AE  
                         __size_of___awmod 0070                           __size_of___ftdiv 00E8  
                     _numOfValidateSamples 0130                           __size_of___ftneg 0024  
                         __size_of___lldiv 0082                                   ___altoft 34EE  
                         __size_of___ftmul 00F6                           __size_of___llmod 0066  
                         __size_of___ftsub 0042                           __size_of___fttol 00F8  
              __size_of_EUSART1_Initialize 0038                           __size_of___lwmod 0042  
                          GroupAdc@request 00E8                                   ___awtoft 3EA6  
                            crc8@dataArray 0018                                   ___ftpack 2F24  
                         _numOfReadSamples 012C                                   ___lltoft 3900  
                        _FLASH_IsWriteDone 43FC                     _IOCB4_InterruptHandler 01D0  
                      WriteUartMessage@idx 001E                                   ___lwtoft 41EC  
                              ??_ZeroArray 0024                   GetMcuRunTime@tempRunTime 0069  
                      ??_ADC_GetConversion 001A                                   _exp$3604 009A  
                             _isupper$3335 0019                         ?_FLASH_IsWriteDone 0001  
                                 _dataSize 00F1                      SwSpi_Clk_Pin@cPinMode 0018  
                 __end_of_WriteUartMessage 3F4C                           __size_of_isalpha 0028  
                                 _crcGiven 003B                           __size_of_isdigit 001E  
                  ??_SWSPI_Synth_send_bits 0029                     SwSpi_Data_Pin@cPinMode 0018  
                  ??_GetUint16FromBitArray 001C             ?_IOCB4_DefaultInterruptHandler 0001  
                         __size_of_isspace 0026                                   __ptext10 0A96  
                                 __ptext11 3472                                   __ptext20 1E3A  
                                 __ptext12 26EC                                   __ptext21 17A8  
                                 __ptext13 3372                                   __ptext30 404E  
                                 __ptext22 4364                                   __ptext14 06A6  
                                 __ptext31 3C00                                   __ptext23 4158  
                                 __ptext15 11D8                                   __ptext40 442C  
                                 __ptext32 440A                                   __ptext24 4274  
                                 __ptext16 43A0                                   __ptext41 3784  
                                 __ptext33 4320                                   __ptext25 4130  
                                 __ptext17 2206                                   __ptext50 4416  
                                 __ptext42 4436                                   __ptext34 2A7A  
                                 __ptext26 4292                                   __ptext18 3B0E  
                                 __ptext51 3B60                                   __ptext43 4440  
                                 __ptext35 35DC                                   __ptext27 27D0  
                                 __ptext19 3128                                   __ptext60 3D86  
                                 __ptext52 3BB2                                   __ptext44 43E0  
                                 __ptext36 37E8                                   __ptext28 364C  
                                 __ptext61 445C                                   __ptext53 42B0  
                                 __ptext45 4462                                   __ptext37 4422  
                                 __ptext29 43D2                                   __ptext70 2CF4  
                                 __ptext62 28B4                                   __ptext54 3F16  
                                 __ptext46 3E36                                   __ptext38 4306  
                                 __ptext71 395C                                   __ptext63 3E6E  
                                 __ptext55 3D4A                                   __ptext47 4338  
                                 __ptext39 3FB6                                   __ptext80 4378  
                                 __ptext72 42EA                                   __ptext64 43EE  
                                 __ptext56 434E                                   __ptext48 3C44  
                                 __ptext81 438C                                   __ptext73 40DC  
                                 __ptext65 3F4C                                   __ptext57 4466  
                                 __ptext49 371E                                   __ptext90 31C6  
                                 __ptext82 2E76                                   __ptext74 39B4  
                                 __ptext66 307E                                   __ptext58 3D0C  
                                 __ptext91 2416                                   __ptext83 3846  
                                 __ptext75 3A0C                                   __ptext67 38A4  
                                 __ptext59 0D46                                   __ptext92 3256  
                                 __ptext84 0FBC                                   __ptext76 3A62  
                                 __ptext68 3DC2                                   __ptext93 34EE  
                                 __ptext85 1CBA                                   __ptext77 20E0  
                                 __ptext69 42CE                                   __ptext94 2B50  
                                 __ptext86 1FB6                                   __ptext78 3AB8  
                                 __ptext95 417E                                   __ptext87 13D0  
                                 __ptext79 444A                                   __ptext96 250E  
                                 __ptext88 2C26                                   __ptext97 3C88  
                                 __ptext89 2998                                   __ptext98 197E  
                                 __ptext99 41C8                           __size_of_isupper 001E  
             SWSPI_Synth_send_bits@phrType 0085                   SwSpi_Set_CE_Pin@cPinMode 0018  
                                 _pow$3602 00A6                                   _pow$3603 00A9  
                      ??_FLASH_IsWriteDone 0018                DATAEE_WriteByte@GIEBitValue 001A  
                         __size_of_toupper 0014                   __size_of_GetMcuFwVersion 03F0  
                     _GetMcuFwVersion$2702 0078                       _GetMcuFwVersion$2698 0076  
                            __size_of_crc8 004E                              __size_of_main 0074  
                   ?_GroupStatusAndVersion 00E6                       __end_of_SYNTH_ADDRES 0642  
                                 _msgCount 00F0               _TMR0_DefaultInterruptHandler 000000  
                        ??_DATAEE_ReadByte 0018                  __end_of_ADC_GetConversion 40AE  
             __size_of_SWSPI_DAC_send_bits 0058                        Make32bitsArray@data 001A  
                       SWSPI_send_word@idx 0087                                _groupsArray 01BC  
                          ??_PLLInitialize 0031                                   _testLeds 364C  
                  __size_of_BlinkErrorLeds 005E                                   int$flags 0048  
                 __size_of_Make32bitsArray 0058                                 strtol@base 002A  
                               strtol@sign 0060                  __end_of_FLASH_IsWriteDone 440A  
       __end_of_INTERRUPT_InterruptManager 00DC                 _INTERRUPT_InterruptManager 0008  
                       AdcConvert@ldRxSate 00B7                         AdcConvert@ldTxSate 00B9  
                          EepromWrite@data 001B                            ??_SwSpi_Clk_Pin 0019  
                      __end_of_DacSetValue 31C6                        _EUSART1_Receive_ISR 40AE  
                 __end_of_SwSpi_Set_CE_Pin 3DC2                          ?_FLASH_EraseBlock 0018  
              __end_of_InitRxMessageParams 4130                                   exp@coeff 0657  
                               _MEMORY_ISR 446A                            ??_FlashReadUart 0089  
                                 log@coeff 0675                     SWSPI_send_word@phrType 0089  
                       ??_FLASH_EraseBlock 001C                                 _INTCONbits 000FF2  
                              ??_eval_poly 002F                                _sampleArray 013C  
                              _sampleCount 0136                                   isalpha@c 001D  
                                 isdigit@c 001A                     ??_INTERRUPT_Initialize 0018  
                                 memset@p1 0018                          ??_readUartMessage 00E9  
                 __end_of_FlashSampleWrite 2416                                   intlevel2 0000  
                     ?_EUSART1_Receive_ISR 0001                      __end_of_SetMcuRunTime 3C88  
                         ___lwmod@dividend 0001                 __size_of_GroupSynthesizers 008C  
                                 isspace@c 001A                           ___lldiv@dividend 0018  
                    SynthReadData@data_987 0263                    ?_PIN_MANAGER_Initialize 0001  
                        _SynthReadData$988 0264                    __end_of_ClearMcuRunTime 43A0  
                               _RCSTA1bits 000FAB                                   isupper@c 001A  
                 ReadIntFromEeprom@address 00C2               __end_of_EUSART1_Transmit_ISR 3F16  
                            ??_BlinkOkLeds 0018                           ??_ADC_Initialize 0018  
                    __size_of_DacReadValue 00E4                         Make32bitsArray@idx 0020  
                            AdcConvert@idx 00C0                              _isReWriteDone 013A  
                    UpdateSynthFreq@retVal 008D                       SwSpi_Clk_Pin@phrType 0019  
                    SwSpi_Data_Pin@phrType 0019                    SwSpi_Set_CE_Pin@phrType 0019  
                   __size_of_EUSART1_Write 003C                   ??_SwSpi_Set_Dac_Sync_Pin 0018  
                        EepromRead@address 0019                           ___lldiv@quotient 0020  
                         _GroupFlashMemory 3DFE                            ___lwmod@divisor 0003  
                          _TMR0_Initialize 3FB6                            ___lwmod@counter 0005  
                 __size_of_UpdateSynthFreq 018E                                   toupper@c 0018  
               ReadIntFromEeprom@numOfByes 00B1                          __CFG_T3CMX$PORTC0 000000  
                  ReadIntFromEeprom@retVal 00C3                              ??_EepromWrite 001C  
                               _AdcConvert 0FBC                      ??_EUSART1_Receive_ISR 0001  
           __end_of_PIN_MANAGER_Initialize 37E8                               _DacReadValue 27D0  
             GetIntFromUartData@dataRegArr 0070                          __CFG_FOSC$INTIO67 000000  
                   _IOCB5_InterruptHandler 01CE                            _PIN_MANAGER_IOC 43C2  
                        ?_StoreIntInEeprom 0021                           ??_SendAckMessage 0025  
               __size_of_ADC_GetConversion 0030                           ??_SetChannelMode 002E  
                       ??_StoreIntInEeprom 0028                                _DacSetValue 3128  
